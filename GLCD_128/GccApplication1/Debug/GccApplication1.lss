
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000029a  00800060  00004d52  00004de6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004c4  008002fa  008002fa  00005080  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000050dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00005118  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000462d  00000000  00000000  00005278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009db  00000000  00000000  000098a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e37  00000000  00000000  0000a280  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f4  00000000  00000000  0000c0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f8  00000000  00000000  0000caac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005023  00000000  00000000  0000d4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  000124c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__ctors_end>
       4:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
       8:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
       c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      10:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      14:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      18:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      1c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      20:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      24:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      28:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      2c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      30:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      34:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      38:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      3c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      40:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      44:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      48:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      4c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      50:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      54:	03 6e       	ori	r16, 0xE3	; 227
      56:	db 36       	cpi	r29, 0x6B	; 107
      58:	3d 9a       	sbi	0x07, 5	; 7
      5a:	99 99       	sbic	0x13, 1	; 19
      5c:	99 3d       	cpi	r25, 0xD9	; 217
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	3e 00       	.word	0x003e	; ????
      64:	00 00       	nop
      66:	80 3f       	cpi	r24, 0xF0	; 240
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	63 42       	sbci	r22, 0x23	; 35
      98:	36 b7       	in	r19, 0x36	; 54
      9a:	9b d8       	rcall	.-3786   	; 0xfffff1d2 <__eeprom_end+0xff7ef1d2>
      9c:	a7 1a       	sub	r10, r23
      9e:	39 68       	ori	r19, 0x89	; 137
      a0:	56 18       	sub	r5, r6
      a2:	ae ba       	out	0x1e, r10	; 30
      a4:	ab 55       	subi	r26, 0x5B	; 91
      a6:	8c 1d       	adc	r24, r12
      a8:	3c b7       	in	r19, 0x3c	; 60
      aa:	cc 57       	subi	r28, 0x7C	; 124
      ac:	63 bd       	out	0x23, r22	; 35
      ae:	6d ed       	ldi	r22, 0xDD	; 221
      b0:	fd 75       	andi	r31, 0x5D	; 93
      b2:	3e f6       	brtc	.-114    	; 0x42 <__SREG__+0x3>
      b4:	17 72       	andi	r17, 0x27	; 39
      b6:	31 bf       	out	0x31, r19	; 49
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 07       	cpc	r19, r31
      be:	2c 7a       	andi	r18, 0xAC	; 172
      c0:	a5 ba       	out	0x15, r10	; 21
      c2:	6c c5       	rjmp	.+2776   	; 0xb9c <_ZN6parser9eval_exp6ERd+0x80>
      c4:	90 da       	rcall	.-2784   	; 0xfffff5e6 <__eeprom_end+0xff7ef5e6>
      c6:	3b 93       	.word	0x933b	; ????
      c8:	65 fc       	sbrc	r6, 5
      ca:	8b bc       	out	0x2b, r8	; 43
      cc:	53 f8       	bld	r5, 3
      ce:	10 fd       	sbrc	r17, 0
      d0:	3c 56       	subi	r19, 0x6C	; 108
      d2:	92 83       	std	Z+2, r25	; 0x02
      d4:	4d bd       	out	0x2d, r20	; 45
      d6:	87 9d       	mul	r24, r7
      d8:	3a b6       	in	r3, 0x3a	; 58
      da:	3d cb       	rjmp	.-2438   	; 0xfffff756 <__eeprom_end+0xff7ef756>
      dc:	c9 bf       	out	0x39, r28	; 57
      de:	5b be       	out	0x3b, r5	; 59
      e0:	73 da       	rcall	.-2842   	; 0xfffff5c8 <__eeprom_end+0xff7ef5c8>
      e2:	0f c9       	rjmp	.-3554   	; 0xfffff302 <__eeprom_end+0xff7ef302>
      e4:	3f 05       	cpc	r19, r15
      e6:	a8 4c       	sbci	r26, 0xC8	; 200
      e8:	cd b2       	in	r12, 0x1d	; 29
      ea:	d4 4e       	sbci	r29, 0xE4	; 228
      ec:	b9 38       	cpi	r27, 0x89	; 137
      ee:	36 a9       	ldd	r19, Z+54	; 0x36
      f0:	02 0c       	add	r0, r2
      f2:	50 b9       	out	0x00, r21	; 0
      f4:	91 86       	std	Z+9, r9	; 0x09
      f6:	88 08       	sbc	r8, r8
      f8:	3c a6       	std	Y+44, r3	; 0x2c
      fa:	aa aa       	std	Y+50, r10	; 0x32
      fc:	2a be       	out	0x3a, r2	; 58
      fe:	00 00       	nop
     100:	00 80       	ld	r0, Z
     102:	3f 08       	sbc	r3, r15
     104:	00 00       	nop
     106:	00 be       	out	0x30, r0	; 48
     108:	92 24       	eor	r9, r2
     10a:	49 12       	cpse	r4, r25
     10c:	3e ab       	std	Y+54, r19	; 0x36
     10e:	aa aa       	std	Y+50, r10	; 0x32
     110:	2a be       	out	0x3a, r2	; 58
     112:	cd cc       	rjmp	.-1638   	; 0xfffffaae <__eeprom_end+0xff7efaae>
     114:	cc 4c       	sbci	r28, 0xCC	; 204
     116:	3e 00       	.word	0x003e	; ????
     118:	00 00       	nop
     11a:	80 be       	out	0x30, r8	; 48
     11c:	ab aa       	std	Y+51, r10	; 0x33
     11e:	aa aa       	std	Y+50, r10	; 0x32
     120:	3e 00       	.word	0x003e	; ????
     122:	00 00       	nop
     124:	00 bf       	out	0x30, r16	; 48
     126:	00 00       	nop
     128:	00 80       	ld	r0, Z
     12a:	3f 00       	.word	0x003f	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	08 41       	sbci	r16, 0x18	; 24
     132:	78 d3       	rcall	.+1776   	; 0x824 <_Z11DisplayCharhhc+0x34>
     134:	bb 43       	sbci	r27, 0x3B	; 59
     136:	87 d1       	rcall	.+782    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     138:	13 3d       	cpi	r17, 0xD3	; 211
     13a:	19 0e       	add	r1, r25
     13c:	3c c3       	rjmp	.+1656   	; 0x7b6 <_Z4lineccccc+0xae>
     13e:	bd 42       	sbci	r27, 0x2D	; 45
     140:	82 ad       	ldd	r24, Z+58	; 0x3a
     142:	2b 3e       	cpi	r18, 0xEB	; 235
     144:	68 ec       	ldi	r22, 0xC8	; 200
     146:	82 76       	andi	r24, 0x62	; 98
     148:	be d9       	rcall	.-3204   	; 0xfffff4c6 <__eeprom_end+0xff7ef4c6>
     14a:	8f e1       	ldi	r24, 0x1F	; 31
     14c:	a9 3e       	cpi	r26, 0xE9	; 233
     14e:	4c 80       	ldd	r4, Y+4	; 0x04
     150:	ef ff       	.word	0xffef	; ????
     152:	be 01       	movw	r22, r28
     154:	c4 ff       	sbrs	r28, 4
     156:	7f 3f       	cpi	r23, 0xFF	; 255
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 02       	muls	r16, r16
     15e:	89 88       	ldd	r8, Y+17	; 0x11
     160:	08 3c       	cpi	r16, 0xC8	; 200
     162:	ab aa       	std	Y+51, r10	; 0x33
     164:	aa 2a       	or	r10, r26
     166:	3e 00       	.word	0x003e	; ????
     168:	00 00       	nop
     16a:	80 3f       	cpi	r24, 0xF0	; 240
     16c:	02 89       	ldd	r16, Z+18	; 0x12
     16e:	88 08       	sbc	r8, r8
     170:	3e ab       	std	Y+54, r19	; 0x36
     172:	aa aa       	std	Y+50, r10	; 0x32
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 06       	cpc	r3, r31
     17c:	64 ec       	ldi	r22, 0xC4	; 196
     17e:	1b 3c       	cpi	r17, 0xCB	; 203
     180:	04 bc       	out	0x24, r0	; 36
     182:	16 3e       	cpi	r17, 0xE6	; 230
     184:	3b e5       	ldi	r19, 0x5B	; 91
     186:	b9 3c       	cpi	r27, 0xC9	; 201
     188:	c9 3c       	cpi	r28, 0xC9	; 201
     18a:	37 c2       	rjmp	.+1134   	; 0x5fa <_Z8PutPixelhhc+0x74>
     18c:	9e 5a       	subi	r25, 0xAE	; 174
     18e:	3d 66       	ori	r19, 0x6D	; 109
     190:	04 98       	cbi	0x00, 4	; 0
     192:	08 3e       	cpi	r16, 0xE8	; 232
     194:	ea 69       	ori	r30, 0x9A	; 154
     196:	aa aa       	std	Y+50, r10	; 0x32
     198:	3e 00       	.word	0x003e	; ????
     19a:	00 00       	nop
     19c:	80 3f       	cpi	r24, 0xF0	; 240

0000019e <__trampolines_end>:
     19e:	4e 41       	sbci	r20, 0x1E	; 30
     1a0:	4e 49       	Address 0x000001a0 is out of bounds.
.word	0xffff	; ????

000001a1 <pstr_inity>:
     1a1:	49 4e 49 54 59                                      INITY

000001a6 <pstr_inf>:
     1a6:	49 4e 46                                            INF

000001a9 <pwr_m10>:
     1a9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     1b9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001c1 <pwr_p10>:
     1c1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1d1:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     1e1:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     1f1:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     201:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     211:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     221:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     231:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     241:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     251:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     261:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     271:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     281:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     291:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     2a1:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     2b1:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     2c1:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     2d1:	3d 27                                               ='

000002d3 <_ZL10FontLookup>:
     2d3:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     2e3:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     2f3:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     303:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     313:	00 08 08 08 08 08 00 30 30 00 00 20 10 08 04 02     .......00.. ....
     323:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     333:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     343:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     353:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     363:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     373:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     383:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     393:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     3a3:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     3b3:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     3c3:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     3d3:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     3e3:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     3f3:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     403:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     413:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     423:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     433:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     443:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     453:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     463:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     473:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     483:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     493:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     4a3:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..
	...

000004b4 <__ctors_start>:
     4b4:	4f 1c       	adc	r4, r15

000004b6 <__ctors_end>:
     4b6:	11 24       	eor	r1, r1
     4b8:	1f be       	out	0x3f, r1	; 63
     4ba:	cf e5       	ldi	r28, 0x5F	; 95
     4bc:	d8 e0       	ldi	r29, 0x08	; 8
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	cd bf       	out	0x3d, r28	; 61

000004c2 <__do_copy_data>:
     4c2:	12 e0       	ldi	r17, 0x02	; 2
     4c4:	a0 e6       	ldi	r26, 0x60	; 96
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e2 e5       	ldi	r30, 0x52	; 82
     4ca:	fd e4       	ldi	r31, 0x4D	; 77
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__do_copy_data+0x10>
     4ce:	05 90       	lpm	r0, Z+
     4d0:	0d 92       	st	X+, r0
     4d2:	aa 3f       	cpi	r26, 0xFA	; 250
     4d4:	b1 07       	cpc	r27, r17
     4d6:	d9 f7       	brne	.-10     	; 0x4ce <__do_copy_data+0xc>

000004d8 <__do_clear_bss>:
     4d8:	27 e0       	ldi	r18, 0x07	; 7
     4da:	aa ef       	ldi	r26, 0xFA	; 250
     4dc:	b2 e0       	ldi	r27, 0x02	; 2
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <.do_clear_bss_start>

000004e0 <.do_clear_bss_loop>:
     4e0:	1d 92       	st	X+, r1

000004e2 <.do_clear_bss_start>:
     4e2:	ae 3b       	cpi	r26, 0xBE	; 190
     4e4:	b2 07       	cpc	r27, r18
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <.do_clear_bss_loop>

000004e8 <__do_global_ctors>:
     4e8:	12 e0       	ldi	r17, 0x02	; 2
     4ea:	cb e5       	ldi	r28, 0x5B	; 91
     4ec:	d2 e0       	ldi	r29, 0x02	; 2
     4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <__do_global_ctors+0x10>
     4f0:	21 97       	sbiw	r28, 0x01	; 1
     4f2:	fe 01       	movw	r30, r28
     4f4:	0e 94 4f 22 	call	0x449e	; 0x449e <__tablejump2__>
     4f8:	ca 35       	cpi	r28, 0x5A	; 90
     4fa:	d1 07       	cpc	r29, r17
     4fc:	c9 f7       	brne	.-14     	; 0x4f0 <__do_global_ctors+0x8>
     4fe:	0e 94 cb 1b 	call	0x3796	; 0x3796 <main>
     502:	0c 94 a7 26 	jmp	0x4d4e	; 0x4d4e <_exit>

00000506 <__bad_interrupt>:
     506:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000050a <_Z6Epulsev>:
  {
   PutPixel(x+r,y+c1,((0x01) & (pgm_read_byte(&FontLookup1[d][r]) >> (c+3))));
   c1=c1-1;
  }
 }
}
     50a:	ac 9a       	sbi	0x15, 4	; 21
     50c:	ac 98       	cbi	0x15, 4	; 21
     50e:	08 95       	ret

00000510 <_Z7InitLCDv>:
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	81 bb       	out	0x11, r24	; 17
     514:	a0 9a       	sbi	0x14, 0	; 20
     516:	a4 9a       	sbi	0x14, 4	; 20
     518:	a3 9a       	sbi	0x14, 3	; 20
     51a:	a2 9a       	sbi	0x14, 2	; 20
     51c:	a1 9a       	sbi	0x14, 1	; 20
     51e:	a9 98       	cbi	0x15, 1	; 21
     520:	2f e7       	ldi	r18, 0x7F	; 127
     522:	88 e3       	ldi	r24, 0x38	; 56
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	21 50       	subi	r18, 0x01	; 1
     528:	80 40       	sbci	r24, 0x00	; 0
     52a:	90 40       	sbci	r25, 0x00	; 0
     52c:	e1 f7       	brne	.-8      	; 0x526 <_Z7InitLCDv+0x16>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <_Z7InitLCDv+0x20>
     530:	00 00       	nop
     532:	a9 9a       	sbi	0x15, 1	; 21
     534:	2f e7       	ldi	r18, 0x7F	; 127
     536:	88 e3       	ldi	r24, 0x38	; 56
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	21 50       	subi	r18, 0x01	; 1
     53c:	80 40       	sbci	r24, 0x00	; 0
     53e:	90 40       	sbci	r25, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <_Z7InitLCDv+0x2a>
     542:	00 c0       	rjmp	.+0      	; 0x544 <_Z7InitLCDv+0x34>
     544:	00 00       	nop
     546:	a8 98       	cbi	0x15, 0	; 21
     548:	ab 9a       	sbi	0x15, 3	; 21
     54a:	aa 9a       	sbi	0x15, 2	; 21
     54c:	8f e3       	ldi	r24, 0x3F	; 63
     54e:	82 bb       	out	0x12, r24	; 18
     550:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     554:	80 ec       	ldi	r24, 0xC0	; 192
     556:	82 bb       	out	0x12, r24	; 18
     558:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     55c:	2f e7       	ldi	r18, 0x7F	; 127
     55e:	88 e3       	ldi	r24, 0x38	; 56
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	21 50       	subi	r18, 0x01	; 1
     564:	80 40       	sbci	r24, 0x00	; 0
     566:	90 40       	sbci	r25, 0x00	; 0
     568:	e1 f7       	brne	.-8      	; 0x562 <_Z7InitLCDv+0x52>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <_Z7InitLCDv+0x5c>
     56c:	00 00       	nop
     56e:	2f e7       	ldi	r18, 0x7F	; 127
     570:	88 e3       	ldi	r24, 0x38	; 56
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	21 50       	subi	r18, 0x01	; 1
     576:	80 40       	sbci	r24, 0x00	; 0
     578:	90 40       	sbci	r25, 0x00	; 0
     57a:	e1 f7       	brne	.-8      	; 0x574 <_Z7InitLCDv+0x64>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <_Z7InitLCDv+0x6e>
     57e:	00 00       	nop
     580:	ab 98       	cbi	0x15, 3	; 21
     582:	aa 98       	cbi	0x15, 2	; 21
     584:	08 95       	ret

00000586 <_Z8PutPixelhhc>:
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	c8 2f       	mov	r28, r24
     590:	04 2f       	mov	r16, r20
     592:	68 30       	cpi	r22, 0x08	; 8
     594:	68 f0       	brcs	.+26     	; 0x5b0 <_Z8PutPixelhhc+0x2a>
     596:	86 2f       	mov	r24, r22
     598:	88 50       	subi	r24, 0x08	; 8
     59a:	88 30       	cpi	r24, 0x08	; 8
     59c:	e8 f7       	brcc	.-6      	; 0x598 <_Z8PutPixelhhc+0x12>
     59e:	16 2f       	mov	r17, r22
     5a0:	17 70       	andi	r17, 0x07	; 7
     5a2:	d8 ef       	ldi	r29, 0xF8	; 248
     5a4:	d6 0f       	add	r29, r22
     5a6:	d6 95       	lsr	r29
     5a8:	d6 95       	lsr	r29
     5aa:	d6 95       	lsr	r29
     5ac:	df 5f       	subi	r29, 0xFF	; 255
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <_Z8PutPixelhhc+0x2e>
     5b0:	16 2f       	mov	r17, r22
     5b2:	d0 e0       	ldi	r29, 0x00	; 0
     5b4:	c0 34       	cpi	r28, 0x40	; 64
     5b6:	80 f4       	brcc	.+32     	; 0x5d8 <_Z8PutPixelhhc+0x52>
     5b8:	a8 98       	cbi	0x15, 0	; 21
     5ba:	ab 9a       	sbi	0x15, 3	; 21
     5bc:	aa 98       	cbi	0x15, 2	; 21
     5be:	d7 70       	andi	r29, 0x07	; 7
     5c0:	8d 2f       	mov	r24, r29
     5c2:	88 6b       	ori	r24, 0xB8	; 184
     5c4:	82 bb       	out	0x12, r24	; 18
     5c6:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     5ca:	cf 73       	andi	r28, 0x3F	; 63
     5cc:	8c 2f       	mov	r24, r28
     5ce:	80 64       	ori	r24, 0x40	; 64
     5d0:	82 bb       	out	0x12, r24	; 18
     5d2:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     5d6:	11 c0       	rjmp	.+34     	; 0x5fa <_Z8PutPixelhhc+0x74>
     5d8:	c0 54       	subi	r28, 0x40	; 64
     5da:	a8 98       	cbi	0x15, 0	; 21
     5dc:	ab 98       	cbi	0x15, 3	; 21
     5de:	aa 9a       	sbi	0x15, 2	; 21
     5e0:	d7 70       	andi	r29, 0x07	; 7
     5e2:	8d 2f       	mov	r24, r29
     5e4:	88 6b       	ori	r24, 0xB8	; 184
     5e6:	82 bb       	out	0x12, r24	; 18
     5e8:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     5ec:	cf 73       	andi	r28, 0x3F	; 63
     5ee:	8c 2f       	mov	r24, r28
     5f0:	80 64       	ori	r24, 0x40	; 64
     5f2:	82 bb       	out	0x12, r24	; 18
     5f4:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     5f8:	c0 5c       	subi	r28, 0xC0	; 192
     5fa:	a8 9a       	sbi	0x15, 0	; 21
     5fc:	01 30       	cpi	r16, 0x01	; 1
     5fe:	d1 f4       	brne	.+52     	; 0x634 <_Z8PutPixelhhc+0xae>
     600:	ec 2f       	mov	r30, r28
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	e4 54       	subi	r30, 0x44	; 68
     612:	fc 4f       	sbci	r31, 0xFC	; 252
     614:	ed 0f       	add	r30, r29
     616:	f1 1d       	adc	r31, r1
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	02 c0       	rjmp	.+4      	; 0x622 <_Z8PutPixelhhc+0x9c>
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	1a 95       	dec	r17
     624:	e2 f7       	brpl	.-8      	; 0x61e <_Z8PutPixelhhc+0x98>
     626:	90 81       	ld	r25, Z
     628:	89 2b       	or	r24, r25
     62a:	80 83       	st	Z, r24
     62c:	82 bb       	out	0x12, r24	; 18
     62e:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     632:	1a c0       	rjmp	.+52     	; 0x668 <_Z8PutPixelhhc+0xe2>
     634:	ec 2f       	mov	r30, r28
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	02 c0       	rjmp	.+4      	; 0x642 <_Z8PutPixelhhc+0xbc>
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	1a 95       	dec	r17
     644:	e2 f7       	brpl	.-8      	; 0x63e <_Z8PutPixelhhc+0xb8>
     646:	80 95       	com	r24
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	ee 0f       	add	r30, r30
     64e:	ff 1f       	adc	r31, r31
     650:	ee 0f       	add	r30, r30
     652:	ff 1f       	adc	r31, r31
     654:	e4 54       	subi	r30, 0x44	; 68
     656:	fc 4f       	sbci	r31, 0xFC	; 252
     658:	ed 0f       	add	r30, r29
     65a:	f1 1d       	adc	r31, r1
     65c:	90 81       	ld	r25, Z
     65e:	89 23       	and	r24, r25
     660:	80 83       	st	Z, r24
     662:	82 bb       	out	0x12, r24	; 18
     664:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	08 95       	ret

00000672 <_Z9LCD_Clearv>:
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	00 e0       	ldi	r16, 0x00	; 0
     67e:	10 e0       	ldi	r17, 0x00	; 0
     680:	f1 2c       	mov	r15, r1
     682:	d0 2f       	mov	r29, r16
     684:	cf 2d       	mov	r28, r15
     686:	ec 2f       	mov	r30, r28
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	ee 0f       	add	r30, r30
     690:	ff 1f       	adc	r31, r31
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	e4 54       	subi	r30, 0x44	; 68
     698:	fc 4f       	sbci	r31, 0xFC	; 252
     69a:	e0 0f       	add	r30, r16
     69c:	f1 1f       	adc	r31, r17
     69e:	10 82       	st	Z, r1
     6a0:	c0 34       	cpi	r28, 0x40	; 64
     6a2:	80 f4       	brcc	.+32     	; 0x6c4 <_Z9LCD_Clearv+0x52>
     6a4:	a8 98       	cbi	0x15, 0	; 21
     6a6:	ab 9a       	sbi	0x15, 3	; 21
     6a8:	aa 98       	cbi	0x15, 2	; 21
     6aa:	d7 70       	andi	r29, 0x07	; 7
     6ac:	8d 2f       	mov	r24, r29
     6ae:	88 6b       	ori	r24, 0xB8	; 184
     6b0:	82 bb       	out	0x12, r24	; 18
     6b2:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6b6:	cf 73       	andi	r28, 0x3F	; 63
     6b8:	8c 2f       	mov	r24, r28
     6ba:	80 64       	ori	r24, 0x40	; 64
     6bc:	82 bb       	out	0x12, r24	; 18
     6be:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <_Z9LCD_Clearv+0x74>
     6c4:	c0 54       	subi	r28, 0x40	; 64
     6c6:	a8 98       	cbi	0x15, 0	; 21
     6c8:	ab 98       	cbi	0x15, 3	; 21
     6ca:	aa 9a       	sbi	0x15, 2	; 21
     6cc:	d7 70       	andi	r29, 0x07	; 7
     6ce:	8d 2f       	mov	r24, r29
     6d0:	88 6b       	ori	r24, 0xB8	; 184
     6d2:	82 bb       	out	0x12, r24	; 18
     6d4:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6d8:	cf 73       	andi	r28, 0x3F	; 63
     6da:	8c 2f       	mov	r24, r28
     6dc:	80 64       	ori	r24, 0x40	; 64
     6de:	82 bb       	out	0x12, r24	; 18
     6e0:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6e4:	c0 5c       	subi	r28, 0xC0	; 192
     6e6:	a8 9a       	sbi	0x15, 0	; 21
     6e8:	12 ba       	out	0x12, r1	; 18
     6ea:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6ee:	cf 5f       	subi	r28, 0xFF	; 255
     6f0:	52 f6       	brpl	.-108    	; 0x686 <_Z9LCD_Clearv+0x14>
     6f2:	0f 5f       	subi	r16, 0xFF	; 255
     6f4:	1f 4f       	sbci	r17, 0xFF	; 255
     6f6:	08 30       	cpi	r16, 0x08	; 8
     6f8:	11 05       	cpc	r17, r1
     6fa:	19 f6       	brne	.-122    	; 0x682 <_Z9LCD_Clearv+0x10>
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	08 95       	ret

00000708 <_Z4lineccccc>:
     708:	7f 92       	push	r7
     70a:	8f 92       	push	r8
     70c:	9f 92       	push	r9
     70e:	af 92       	push	r10
     710:	bf 92       	push	r11
     712:	cf 92       	push	r12
     714:	df 92       	push	r13
     716:	ef 92       	push	r14
     718:	ff 92       	push	r15
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	d8 2f       	mov	r29, r24
     724:	c6 2f       	mov	r28, r22
     726:	74 2e       	mov	r7, r20
     728:	82 2e       	mov	r8, r18
     72a:	a2 2e       	mov	r10, r18
     72c:	b1 2c       	mov	r11, r1
     72e:	a6 1a       	sub	r10, r22
     730:	b1 08       	sbc	r11, r1
     732:	c4 2e       	mov	r12, r20
     734:	d1 2c       	mov	r13, r1
     736:	c8 1a       	sub	r12, r24
     738:	d1 08       	sbc	r13, r1
     73a:	bb 20       	and	r11, r11
     73c:	34 f4       	brge	.+12     	; 0x74a <_Z4lineccccc+0x42>
     73e:	b1 94       	neg	r11
     740:	a1 94       	neg	r10
     742:	b1 08       	sbc	r11, r1
     744:	99 24       	eor	r9, r9
     746:	9a 94       	dec	r9
     748:	02 c0       	rjmp	.+4      	; 0x74e <_Z4lineccccc+0x46>
     74a:	99 24       	eor	r9, r9
     74c:	93 94       	inc	r9
     74e:	dd 20       	and	r13, r13
     750:	2c f4       	brge	.+10     	; 0x75c <_Z4lineccccc+0x54>
     752:	d1 94       	neg	r13
     754:	c1 94       	neg	r12
     756:	d1 08       	sbc	r13, r1
     758:	1f ef       	ldi	r17, 0xFF	; 255
     75a:	01 c0       	rjmp	.+2      	; 0x75e <_Z4lineccccc+0x56>
     75c:	11 e0       	ldi	r17, 0x01	; 1
     75e:	aa 0c       	add	r10, r10
     760:	bb 1c       	adc	r11, r11
     762:	cc 0c       	add	r12, r12
     764:	dd 1c       	adc	r13, r13
     766:	40 2f       	mov	r20, r16
     768:	6c 2f       	mov	r22, r28
     76a:	8d 2f       	mov	r24, r29
     76c:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
     770:	ac 14       	cp	r10, r12
     772:	bd 04       	cpc	r11, r13
     774:	c4 f4       	brge	.+48     	; 0x7a6 <_Z4lineccccc+0x9e>
     776:	c6 01       	movw	r24, r12
     778:	95 95       	asr	r25
     77a:	87 95       	ror	r24
     77c:	75 01       	movw	r14, r10
     77e:	e8 1a       	sub	r14, r24
     780:	f9 0a       	sbc	r15, r25
     782:	7d 16       	cp	r7, r29
     784:	39 f1       	breq	.+78     	; 0x7d4 <_Z4lineccccc+0xcc>
     786:	ff 20       	and	r15, r15
     788:	1c f0       	brlt	.+6      	; 0x790 <_Z4lineccccc+0x88>
     78a:	c9 0d       	add	r28, r9
     78c:	ec 18       	sub	r14, r12
     78e:	fd 08       	sbc	r15, r13
     790:	d1 0f       	add	r29, r17
     792:	ea 0c       	add	r14, r10
     794:	fb 1c       	adc	r15, r11
     796:	40 2f       	mov	r20, r16
     798:	6c 2f       	mov	r22, r28
     79a:	8d 2f       	mov	r24, r29
     79c:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
     7a0:	d7 11       	cpse	r29, r7
     7a2:	f1 cf       	rjmp	.-30     	; 0x786 <_Z4lineccccc+0x7e>
     7a4:	17 c0       	rjmp	.+46     	; 0x7d4 <_Z4lineccccc+0xcc>
     7a6:	c5 01       	movw	r24, r10
     7a8:	95 95       	asr	r25
     7aa:	87 95       	ror	r24
     7ac:	76 01       	movw	r14, r12
     7ae:	e8 1a       	sub	r14, r24
     7b0:	f9 0a       	sbc	r15, r25
     7b2:	8c 16       	cp	r8, r28
     7b4:	79 f0       	breq	.+30     	; 0x7d4 <_Z4lineccccc+0xcc>
     7b6:	ff 20       	and	r15, r15
     7b8:	1c f0       	brlt	.+6      	; 0x7c0 <_Z4lineccccc+0xb8>
     7ba:	d1 0f       	add	r29, r17
     7bc:	ea 18       	sub	r14, r10
     7be:	fb 08       	sbc	r15, r11
     7c0:	c9 0d       	add	r28, r9
     7c2:	ec 0c       	add	r14, r12
     7c4:	fd 1c       	adc	r15, r13
     7c6:	40 2f       	mov	r20, r16
     7c8:	6c 2f       	mov	r22, r28
     7ca:	8d 2f       	mov	r24, r29
     7cc:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
     7d0:	c8 11       	cpse	r28, r8
     7d2:	f1 cf       	rjmp	.-30     	; 0x7b6 <_Z4lineccccc+0xae>
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	9f 90       	pop	r9
     7ea:	8f 90       	pop	r8
     7ec:	7f 90       	pop	r7
     7ee:	08 95       	ret

000007f0 <_Z11DisplayCharhhc>:
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	d6 2e       	mov	r13, r22
     802:	40 52       	subi	r20, 0x20	; 32
     804:	24 2f       	mov	r18, r20
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	89 01       	movw	r16, r18
     80a:	00 0f       	add	r16, r16
     80c:	11 1f       	adc	r17, r17
     80e:	00 0f       	add	r16, r16
     810:	11 1f       	adc	r17, r17
     812:	02 0f       	add	r16, r18
     814:	13 1f       	adc	r17, r19
     816:	0d 52       	subi	r16, 0x2D	; 45
     818:	1d 4f       	sbci	r17, 0xFD	; 253
     81a:	0f 2e       	mov	r0, r31
     81c:	f5 e0       	ldi	r31, 0x05	; 5
     81e:	cf 2e       	mov	r12, r31
     820:	f0 2d       	mov	r31, r0
     822:	c8 0e       	add	r12, r24
     824:	e8 2e       	mov	r14, r24
     826:	fd 2c       	mov	r15, r13
     828:	c0 e0       	ldi	r28, 0x00	; 0
     82a:	d0 e0       	ldi	r29, 0x00	; 0
     82c:	f8 01       	movw	r30, r16
     82e:	44 91       	lpm	r20, Z
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	0c 2e       	mov	r0, r28
     834:	02 c0       	rjmp	.+4      	; 0x83a <_Z11DisplayCharhhc+0x4a>
     836:	55 95       	asr	r21
     838:	47 95       	ror	r20
     83a:	0a 94       	dec	r0
     83c:	e2 f7       	brpl	.-8      	; 0x836 <_Z11DisplayCharhhc+0x46>
     83e:	41 70       	andi	r20, 0x01	; 1
     840:	6f 2d       	mov	r22, r15
     842:	8e 2d       	mov	r24, r14
     844:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
     848:	21 96       	adiw	r28, 0x01	; 1
     84a:	f3 94       	inc	r15
     84c:	c8 30       	cpi	r28, 0x08	; 8
     84e:	d1 05       	cpc	r29, r1
     850:	69 f7       	brne	.-38     	; 0x82c <_Z11DisplayCharhhc+0x3c>
     852:	0f 5f       	subi	r16, 0xFF	; 255
     854:	1f 4f       	sbci	r17, 0xFF	; 255
     856:	e3 94       	inc	r14
     858:	ce 10       	cpse	r12, r14
     85a:	e5 cf       	rjmp	.-54     	; 0x826 <_Z11DisplayCharhhc+0x36>
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	08 95       	ret

0000086e <_Z11DisplayTexthhPc>:

/*********************************************************************************/
/*         Display Text (5x7)                       */
/*********************************************************************************/
void DisplayText(unsigned char x, unsigned char y, char d[21])
{
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
int i;
int j;
j=strlen(d);
     87a:	fa 01       	movw	r30, r20
     87c:	01 90       	ld	r0, Z+
     87e:	00 20       	and	r0, r0
     880:	e9 f7       	brne	.-6      	; 0x87c <_Z11DisplayTexthhPc+0xe>
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	e4 1b       	sub	r30, r20
     886:	f5 0b       	sbc	r31, r21
 for (i=0;i<j;i++)
     888:	1e 16       	cp	r1, r30
     88a:	1f 06       	cpc	r1, r31
     88c:	8c f4       	brge	.+34     	; 0x8b0 <_Z11DisplayTexthhPc+0x42>
     88e:	d6 2f       	mov	r29, r22
     890:	8a 01       	movw	r16, r20
     892:	7a 01       	movw	r14, r20
     894:	ee 0e       	add	r14, r30
     896:	ff 1e       	adc	r15, r31
     898:	c8 2f       	mov	r28, r24
 {
  DisplayChar((i*6)+x,y,d[i]);
     89a:	f8 01       	movw	r30, r16
     89c:	41 91       	ld	r20, Z+
     89e:	8f 01       	movw	r16, r30
     8a0:	6d 2f       	mov	r22, r29
     8a2:	8c 2f       	mov	r24, r28
     8a4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z11DisplayCharhhc>
     8a8:	ca 5f       	subi	r28, 0xFA	; 250
void DisplayText(unsigned char x, unsigned char y, char d[21])
{
int i;
int j;
j=strlen(d);
 for (i=0;i<j;i++)
     8aa:	0e 15       	cp	r16, r14
     8ac:	1f 05       	cpc	r17, r15
     8ae:	a9 f7       	brne	.-22     	; 0x89a <_Z11DisplayTexthhPc+0x2c>
 {
  DisplayChar((i*6)+x,y,d[i]);
 } 
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	08 95       	ret

000008be <_ZN6parserC1Ev>:
};
// Parser constructor.
parser::parser()
{
    int i;
    exp_ptr = NULL;
     8be:	fc 01       	movw	r30, r24
     8c0:	11 82       	std	Z+1, r1	; 0x01
     8c2:	10 82       	st	Z, r1
     8c4:	72 96       	adiw	r30, 0x12	; 18
     8c6:	9c 01       	movw	r18, r24
     8c8:	26 5c       	subi	r18, 0xC6	; 198
     8ca:	3f 4f       	sbci	r19, 0xFF	; 255
    for (i = 0; i < NUMVARS; i++)
        vars[i] = 0.0;
     8cc:	11 92       	st	Z+, r1
     8ce:	11 92       	st	Z+, r1
     8d0:	11 92       	st	Z+, r1
     8d2:	11 92       	st	Z+, r1
// Parser constructor.
parser::parser()
{
    int i;
    exp_ptr = NULL;
    for (i = 0; i < NUMVARS; i++)
     8d4:	e2 17       	cp	r30, r18
     8d6:	f3 07       	cpc	r31, r19
     8d8:	c9 f7       	brne	.-14     	; 0x8cc <_ZN6parserC1Ev+0xe>
        vars[i] = 0.0;
    errormsg[0] = '\0';
     8da:	fc 01       	movw	r30, r24
     8dc:	12 ae       	std	Z+58, r1	; 0x3a
     8de:	08 95       	ret

000008e0 <_ZN6parser9get_tokenEv>:
            strcpy(errormsg, "Syntax Error");
        }
}
// Obtain the next token.
void parser::get_token()
{
     8e0:	af 92       	push	r10
     8e2:	bf 92       	push	r11
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	6c 01       	movw	r12, r24
    char *temp;
    tok_type = 0;
     8f6:	dc 01       	movw	r26, r24
     8f8:	51 96       	adiw	r26, 0x11	; 17
     8fa:	1c 92       	st	X, r1
     8fc:	51 97       	sbiw	r26, 0x11	; 17
    temp = token;
    *temp = '\0';
     8fe:	12 96       	adiw	r26, 0x02	; 2
     900:	1c 92       	st	X, r1
     902:	12 97       	sbiw	r26, 0x02	; 2
    if (!*exp_ptr)  // at end of expression
     904:	ed 91       	ld	r30, X+
     906:	fc 91       	ld	r31, X
     908:	80 81       	ld	r24, Z
     90a:	88 23       	and	r24, r24
     90c:	09 f4       	brne	.+2      	; 0x910 <_ZN6parser9get_tokenEv+0x30>
     90e:	a8 c0       	rjmp	.+336    	; 0xa60 <_ZN6parser9get_tokenEv+0x180>
        return;
    while (isspace(*exp_ptr))  // skip over white space
     910:	f6 01       	movw	r30, r12
     912:	c0 81       	ld	r28, Z
     914:	d1 81       	ldd	r29, Z+1	; 0x01
     916:	f8 80       	ld	r15, Y
     918:	0f 2d       	mov	r16, r15
     91a:	10 e0       	ldi	r17, 0x00	; 0
     91c:	c8 01       	movw	r24, r16
     91e:	0e 94 84 22 	call	0x4508	; 0x4508 <isspace>
     922:	89 2b       	or	r24, r25
     924:	29 f0       	breq	.+10     	; 0x930 <_ZN6parser9get_tokenEv+0x50>
        ++exp_ptr;
     926:	21 96       	adiw	r28, 0x01	; 1
     928:	d6 01       	movw	r26, r12
     92a:	cd 93       	st	X+, r28
     92c:	dc 93       	st	X, r29
    tok_type = 0;
    temp = token;
    *temp = '\0';
    if (!*exp_ptr)  // at end of expression
        return;
    while (isspace(*exp_ptr))  // skip over white space
     92e:	f0 cf       	rjmp	.-32     	; 0x910 <_ZN6parser9get_tokenEv+0x30>
        ++exp_ptr;
    if (strchr("+-*/%^=()", *exp_ptr))
     930:	b8 01       	movw	r22, r16
     932:	8e ef       	ldi	r24, 0xFE	; 254
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 a0 22 	call	0x4540	; 0x4540 <strchr>
     93a:	89 2b       	or	r24, r25
     93c:	89 f0       	breq	.+34     	; 0x960 <_ZN6parser9get_tokenEv+0x80>
    {
        tok_type = DELIMITER;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	f6 01       	movw	r30, r12
     942:	81 8b       	std	Z+17, r24	; 0x11
        *temp++ = *exp_ptr++;  // advance to next char
     944:	56 01       	movw	r10, r12
     946:	f3 e0       	ldi	r31, 0x03	; 3
     948:	af 0e       	add	r10, r31
     94a:	b1 1c       	adc	r11, r1
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	d6 01       	movw	r26, r12
     952:	11 96       	adiw	r26, 0x01	; 1
     954:	9c 93       	st	X, r25
     956:	8e 93       	st	-X, r24
     958:	88 81       	ld	r24, Y
     95a:	12 96       	adiw	r26, 0x02	; 2
     95c:	8c 93       	st	X, r24
     95e:	6b c0       	rjmp	.+214    	; 0xa36 <_ZN6parser9get_tokenEv+0x156>
// Obtain the next token.
void parser::get_token()
{
    char *temp;
    tok_type = 0;
    temp = token;
     960:	56 01       	movw	r10, r12
     962:	b2 e0       	ldi	r27, 0x02	; 2
     964:	ab 0e       	add	r10, r27
     966:	b1 1c       	adc	r11, r1
    if (strchr("+-*/%^=()", *exp_ptr))
    {
        tok_type = DELIMITER;
        *temp++ = *exp_ptr++;  // advance to next char
    }
    else if (isalpha(*exp_ptr))
     968:	c8 01       	movw	r24, r16
     96a:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <isalpha>
     96e:	89 2b       	or	r24, r25
     970:	b9 f1       	breq	.+110    	; 0x9e0 <_ZN6parser9get_tokenEv+0x100>
     972:	75 01       	movw	r14, r10
     974:	57 01       	movw	r10, r14
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     976:	f6 01       	movw	r30, r12
     978:	c0 81       	ld	r28, Z
     97a:	d1 81       	ldd	r29, Z+1	; 0x01
     97c:	18 81       	ld	r17, Y
     97e:	61 2f       	mov	r22, r17
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	88 e0       	ldi	r24, 0x08	; 8
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 a0 22 	call	0x4540	; 0x4540 <strchr>
     98a:	89 2b       	or	r24, r25
     98c:	89 f4       	brne	.+34     	; 0x9b0 <_ZN6parser9get_tokenEv+0xd0>
     98e:	11 23       	and	r17, r17
     990:	79 f0       	breq	.+30     	; 0x9b0 <_ZN6parser9get_tokenEv+0xd0>
            *temp++ = toupper(*exp_ptr++);
     992:	ce 01       	movw	r24, r28
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	d6 01       	movw	r26, r12
     998:	8d 93       	st	X+, r24
     99a:	9c 93       	st	X, r25
     99c:	88 81       	ld	r24, Y
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 8d 22 	call	0x451a	; 0x451a <toupper>
     9a4:	f7 01       	movw	r30, r14
     9a6:	80 83       	st	Z, r24
     9a8:	ff ef       	ldi	r31, 0xFF	; 255
     9aa:	ef 1a       	sub	r14, r31
     9ac:	ff 0a       	sbc	r15, r31
        tok_type = DELIMITER;
        *temp++ = *exp_ptr++;  // advance to next char
    }
    else if (isalpha(*exp_ptr))
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     9ae:	e2 cf       	rjmp	.-60     	; 0x974 <_ZN6parser9get_tokenEv+0x94>
            *temp++ = toupper(*exp_ptr++);
        while (isspace(*exp_ptr))  // skip over white space
     9b0:	d6 01       	movw	r26, r12
     9b2:	cd 91       	ld	r28, X+
     9b4:	dc 91       	ld	r29, X
     9b6:	18 81       	ld	r17, Y
     9b8:	81 2f       	mov	r24, r17
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 84 22 	call	0x4508	; 0x4508 <isspace>
     9c0:	89 2b       	or	r24, r25
     9c2:	29 f0       	breq	.+10     	; 0x9ce <_ZN6parser9get_tokenEv+0xee>
            ++exp_ptr;
     9c4:	21 96       	adiw	r28, 0x01	; 1
     9c6:	f6 01       	movw	r30, r12
     9c8:	d1 83       	std	Z+1, r29	; 0x01
     9ca:	c0 83       	st	Z, r28
    }
    else if (isalpha(*exp_ptr))
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
            *temp++ = toupper(*exp_ptr++);
        while (isspace(*exp_ptr))  // skip over white space
     9cc:	f1 cf       	rjmp	.-30     	; 0x9b0 <_ZN6parser9get_tokenEv+0xd0>
            ++exp_ptr;
        tok_type = (*exp_ptr == '(') ? FUNCTION : VARIABLE;
     9ce:	18 32       	cpi	r17, 0x28	; 40
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <_ZN6parser9get_tokenEv+0xf6>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <_ZN6parser9get_tokenEv+0xf8>
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	d6 01       	movw	r26, r12
     9da:	51 96       	adiw	r26, 0x11	; 17
     9dc:	8c 93       	st	X, r24
     9de:	2b c0       	rjmp	.+86     	; 0xa36 <_ZN6parser9get_tokenEv+0x156>
    }
    else if (isdigit(*exp_ptr) || *exp_ptr == '.')
     9e0:	8f 2d       	mov	r24, r15
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	c0 97       	sbiw	r24, 0x30	; 48
     9e6:	0a 97       	sbiw	r24, 0x0a	; 10
     9e8:	18 f0       	brcs	.+6      	; 0x9f0 <_ZN6parser9get_tokenEv+0x110>
     9ea:	be e2       	ldi	r27, 0x2E	; 46
     9ec:	fb 12       	cpse	r15, r27
     9ee:	23 c0       	rjmp	.+70     	; 0xa36 <_ZN6parser9get_tokenEv+0x156>
     9f0:	75 01       	movw	r14, r10
     9f2:	57 01       	movw	r10, r14
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     9f4:	f6 01       	movw	r30, r12
     9f6:	c0 81       	ld	r28, Z
     9f8:	d1 81       	ldd	r29, Z+1	; 0x01
     9fa:	18 81       	ld	r17, Y
     9fc:	61 2f       	mov	r22, r17
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	88 e0       	ldi	r24, 0x08	; 8
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e 94 a0 22 	call	0x4540	; 0x4540 <strchr>
     a08:	89 2b       	or	r24, r25
     a0a:	89 f4       	brne	.+34     	; 0xa2e <_ZN6parser9get_tokenEv+0x14e>
     a0c:	11 23       	and	r17, r17
     a0e:	79 f0       	breq	.+30     	; 0xa2e <_ZN6parser9get_tokenEv+0x14e>
            *temp++ = toupper(*exp_ptr++);
     a10:	ce 01       	movw	r24, r28
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	d6 01       	movw	r26, r12
     a16:	8d 93       	st	X+, r24
     a18:	9c 93       	st	X, r25
     a1a:	88 81       	ld	r24, Y
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 8d 22 	call	0x451a	; 0x451a <toupper>
     a22:	f7 01       	movw	r30, r14
     a24:	80 83       	st	Z, r24
     a26:	ff ef       	ldi	r31, 0xFF	; 255
     a28:	ef 1a       	sub	r14, r31
     a2a:	ff 0a       	sbc	r15, r31
            ++exp_ptr;
        tok_type = (*exp_ptr == '(') ? FUNCTION : VARIABLE;
    }
    else if (isdigit(*exp_ptr) || *exp_ptr == '.')
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     a2c:	e2 cf       	rjmp	.-60     	; 0x9f2 <_ZN6parser9get_tokenEv+0x112>
            *temp++ = toupper(*exp_ptr++);
        tok_type = NUMBER;
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	d6 01       	movw	r26, r12
     a32:	51 96       	adiw	r26, 0x11	; 17
     a34:	8c 93       	st	X, r24
    }
    *temp = '\0';
     a36:	f5 01       	movw	r30, r10
     a38:	10 82       	st	Z, r1
    if ((tok_type == VARIABLE) && (token[1]))
     a3a:	d6 01       	movw	r26, r12
     a3c:	51 96       	adiw	r26, 0x11	; 17
     a3e:	8c 91       	ld	r24, X
     a40:	51 97       	sbiw	r26, 0x11	; 17
     a42:	82 30       	cpi	r24, 0x02	; 2
     a44:	69 f4       	brne	.+26     	; 0xa60 <_ZN6parser9get_tokenEv+0x180>
     a46:	13 96       	adiw	r26, 0x03	; 3
     a48:	8c 91       	ld	r24, X
     a4a:	13 97       	sbiw	r26, 0x03	; 3
     a4c:	88 23       	and	r24, r24
     a4e:	41 f0       	breq	.+16     	; 0xa60 <_ZN6parser9get_tokenEv+0x180>
        strcpy(errormsg, "Only first letter of variables is considered");
     a50:	da 96       	adiw	r26, 0x3a	; 58
     a52:	8d e2       	ldi	r24, 0x2D	; 45
     a54:	e5 e1       	ldi	r30, 0x15	; 21
     a56:	f1 e0       	ldi	r31, 0x01	; 1
     a58:	01 90       	ld	r0, Z+
     a5a:	0d 92       	st	X+, r0
     a5c:	8a 95       	dec	r24
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <_ZN6parser9get_tokenEv+0x178>
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	08 95       	ret

00000a76 <_ZN6parser9eval_exp2ERd>:
    }
    eval_exp2(result);
}
// Add or subtract two terms.
void parser::eval_exp2(double &result)
{
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	00 d0       	rcall	.+0      	; 0xa84 <_ZN6parser9eval_exp2ERd+0xe>
     a84:	00 d0       	rcall	.+0      	; 0xa86 <_ZN6parser9eval_exp2ERd+0x10>
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	8c 01       	movw	r16, r24
     a8c:	7b 01       	movw	r14, r22
    char op;
    double temp;
    eval_exp3(result);
     a8e:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN6parser9eval_exp3ERd>
    while ((op = *token) == '+' || op == '-')
     a92:	f8 01       	movw	r30, r16
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	8b 32       	cpi	r24, 0x2B	; 43
     a98:	e1 f0       	breq	.+56     	; 0xad2 <_ZN6parser9eval_exp2ERd+0x5c>
     a9a:	8d 32       	cpi	r24, 0x2D	; 45
     a9c:	a1 f5       	brne	.+104    	; 0xb06 <_ZN6parser9eval_exp2ERd+0x90>
    {
        get_token();
     a9e:	c8 01       	movw	r24, r16
     aa0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp3(temp);
     aa4:	be 01       	movw	r22, r28
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	c8 01       	movw	r24, r16
     aac:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN6parser9eval_exp3ERd>
        switch (op)
        {
        case '-':
            result = result - temp;
     ab0:	29 81       	ldd	r18, Y+1	; 0x01
     ab2:	3a 81       	ldd	r19, Y+2	; 0x02
     ab4:	4b 81       	ldd	r20, Y+3	; 0x03
     ab6:	5c 81       	ldd	r21, Y+4	; 0x04
     ab8:	f7 01       	movw	r30, r14
     aba:	60 81       	ld	r22, Z
     abc:	71 81       	ldd	r23, Z+1	; 0x01
     abe:	82 81       	ldd	r24, Z+2	; 0x02
     ac0:	93 81       	ldd	r25, Z+3	; 0x03
     ac2:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
     ac6:	f7 01       	movw	r30, r14
     ac8:	60 83       	st	Z, r22
     aca:	71 83       	std	Z+1, r23	; 0x01
     acc:	82 83       	std	Z+2, r24	; 0x02
     ace:	93 83       	std	Z+3, r25	; 0x03
            break;
     ad0:	e0 cf       	rjmp	.-64     	; 0xa92 <_ZN6parser9eval_exp2ERd+0x1c>
    char op;
    double temp;
    eval_exp3(result);
    while ((op = *token) == '+' || op == '-')
    {
        get_token();
     ad2:	c8 01       	movw	r24, r16
     ad4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp3(temp);
     ad8:	be 01       	movw	r22, r28
     ada:	6f 5f       	subi	r22, 0xFF	; 255
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	c8 01       	movw	r24, r16
     ae0:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN6parser9eval_exp3ERd>
        {
        case '-':
            result = result - temp;
            break;
        case '+':
            result = result + temp;
     ae4:	29 81       	ldd	r18, Y+1	; 0x01
     ae6:	3a 81       	ldd	r19, Y+2	; 0x02
     ae8:	4b 81       	ldd	r20, Y+3	; 0x03
     aea:	5c 81       	ldd	r21, Y+4	; 0x04
     aec:	f7 01       	movw	r30, r14
     aee:	60 81       	ld	r22, Z
     af0:	71 81       	ldd	r23, Z+1	; 0x01
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
     afa:	f7 01       	movw	r30, r14
     afc:	60 83       	st	Z, r22
     afe:	71 83       	std	Z+1, r23	; 0x01
     b00:	82 83       	std	Z+2, r24	; 0x02
     b02:	93 83       	std	Z+3, r25	; 0x03
            break;
     b04:	c6 cf       	rjmp	.-116    	; 0xa92 <_ZN6parser9eval_exp2ERd+0x1c>
        }
    }
}
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	08 95       	ret

00000b1c <_ZN6parser9eval_exp6ERd>:
    if (op == '-')
        result = -result;
}
// Process a function, a parenthesized expression, a value or a variable
void parser::eval_exp6(double &result)
{
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	2f 97       	sbiw	r28, 0x0f	; 15
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	8c 01       	movw	r16, r24
     b3c:	7b 01       	movw	r14, r22
    bool isfunc = (tok_type == FUNCTION);
     b3e:	dc 01       	movw	r26, r24
     b40:	51 96       	adiw	r26, 0x11	; 17
     b42:	dc 90       	ld	r13, X
    char temp_token[15];
    if (isfunc)
     b44:	b4 e0       	ldi	r27, 0x04	; 4
     b46:	db 12       	cpse	r13, r27
     b48:	0a c0       	rjmp	.+20     	; 0xb5e <_ZN6parser9eval_exp6ERd+0x42>
    {
        strcpy(temp_token, token);
     b4a:	bc 01       	movw	r22, r24
     b4c:	6e 5f       	subi	r22, 0xFE	; 254
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 b4 22 	call	0x4568	; 0x4568 <strcpy>
        get_token();
     b58:	c8 01       	movw	r24, r16
     b5a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
    }
    if ((*token == '('))
     b5e:	d8 01       	movw	r26, r16
     b60:	12 96       	adiw	r26, 0x02	; 2
     b62:	ec 91       	ld	r30, X
     b64:	e8 32       	cpi	r30, 0x28	; 40
     b66:	09 f0       	breq	.+2      	; 0xb6a <_ZN6parser9eval_exp6ERd+0x4e>
     b68:	b5 c1       	rjmp	.+874    	; 0xed4 <_ZN6parser9eval_exp6ERd+0x3b8>
    {
        get_token();
     b6a:	c8 01       	movw	r24, r16
     b6c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp2(result);
     b70:	b7 01       	movw	r22, r14
     b72:	c8 01       	movw	r24, r16
     b74:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN6parser9eval_exp2ERd>
        if (*token != ')')
     b78:	f8 01       	movw	r30, r16
     b7a:	82 81       	ldd	r24, Z+2	; 0x02
     b7c:	89 32       	cpi	r24, 0x29	; 41
     b7e:	49 f0       	breq	.+18     	; 0xb92 <_ZN6parser9eval_exp6ERd+0x76>
            strcpy(errormsg, "Unbalanced Parentheses");
     b80:	87 e1       	ldi	r24, 0x17	; 23
     b82:	e2 e4       	ldi	r30, 0x42	; 66
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	d8 01       	movw	r26, r16
     b88:	da 96       	adiw	r26, 0x3a	; 58
     b8a:	01 90       	ld	r0, Z+
     b8c:	0d 92       	st	X+, r0
     b8e:	8a 95       	dec	r24
     b90:	e1 f7       	brne	.-8      	; 0xb8a <_ZN6parser9eval_exp6ERd+0x6e>
        if (isfunc)
     b92:	f4 e0       	ldi	r31, 0x04	; 4
     b94:	df 12       	cpse	r13, r31
     b96:	9a c1       	rjmp	.+820    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
        {
            if (!strcmp(temp_token, "SIN"))
     b98:	6a e5       	ldi	r22, 0x5A	; 90
     b9a:	71 e0       	ldi	r23, 0x01	; 1
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     ba4:	89 2b       	or	r24, r25
     ba6:	69 f4       	brne	.+26     	; 0xbc2 <_ZN6parser9eval_exp6ERd+0xa6>
                result = sin(result);
     ba8:	d7 01       	movw	r26, r14
     baa:	6d 91       	ld	r22, X+
     bac:	7d 91       	ld	r23, X+
     bae:	8d 91       	ld	r24, X+
     bb0:	9c 91       	ld	r25, X
     bb2:	0e 94 9d 21 	call	0x433a	; 0x433a <sin>
     bb6:	f7 01       	movw	r30, r14
     bb8:	60 83       	st	Z, r22
     bba:	71 83       	std	Z+1, r23	; 0x01
     bbc:	82 83       	std	Z+2, r24	; 0x02
     bbe:	93 83       	std	Z+3, r25	; 0x03
     bc0:	85 c1       	rjmp	.+778    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "COS"))
     bc2:	6f e5       	ldi	r22, 0x5F	; 95
     bc4:	71 e0       	ldi	r23, 0x01	; 1
     bc6:	ce 01       	movw	r24, r28
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     bce:	89 2b       	or	r24, r25
     bd0:	69 f4       	brne	.+26     	; 0xbec <_ZN6parser9eval_exp6ERd+0xd0>
                result = cos(result);
     bd2:	d7 01       	movw	r26, r14
     bd4:	6d 91       	ld	r22, X+
     bd6:	7d 91       	ld	r23, X+
     bd8:	8d 91       	ld	r24, X+
     bda:	9c 91       	ld	r25, X
     bdc:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <cos>
     be0:	f7 01       	movw	r30, r14
     be2:	60 83       	st	Z, r22
     be4:	71 83       	std	Z+1, r23	; 0x01
     be6:	82 83       	std	Z+2, r24	; 0x02
     be8:	93 83       	std	Z+3, r25	; 0x03
     bea:	70 c1       	rjmp	.+736    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "TAN"))
     bec:	64 e6       	ldi	r22, 0x64	; 100
     bee:	71 e0       	ldi	r23, 0x01	; 1
     bf0:	ce 01       	movw	r24, r28
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     bf8:	89 2b       	or	r24, r25
     bfa:	69 f4       	brne	.+26     	; 0xc16 <_ZN6parser9eval_exp6ERd+0xfa>
                result = tan(result);
     bfc:	d7 01       	movw	r26, r14
     bfe:	6d 91       	ld	r22, X+
     c00:	7d 91       	ld	r23, X+
     c02:	8d 91       	ld	r24, X+
     c04:	9c 91       	ld	r25, X
     c06:	0e 94 23 22 	call	0x4446	; 0x4446 <tan>
     c0a:	f7 01       	movw	r30, r14
     c0c:	60 83       	st	Z, r22
     c0e:	71 83       	std	Z+1, r23	; 0x01
     c10:	82 83       	std	Z+2, r24	; 0x02
     c12:	93 83       	std	Z+3, r25	; 0x03
     c14:	5b c1       	rjmp	.+694    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ASIN"))
     c16:	69 e5       	ldi	r22, 0x59	; 89
     c18:	71 e0       	ldi	r23, 0x01	; 1
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     c22:	89 2b       	or	r24, r25
     c24:	69 f4       	brne	.+26     	; 0xc40 <_ZN6parser9eval_exp6ERd+0x124>
                result = asin(result);
     c26:	d7 01       	movw	r26, r14
     c28:	6d 91       	ld	r22, X+
     c2a:	7d 91       	ld	r23, X+
     c2c:	8d 91       	ld	r24, X+
     c2e:	9c 91       	ld	r25, X
     c30:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <asin>
     c34:	f7 01       	movw	r30, r14
     c36:	60 83       	st	Z, r22
     c38:	71 83       	std	Z+1, r23	; 0x01
     c3a:	82 83       	std	Z+2, r24	; 0x02
     c3c:	93 83       	std	Z+3, r25	; 0x03
     c3e:	46 c1       	rjmp	.+652    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ACOS"))
     c40:	6e e5       	ldi	r22, 0x5E	; 94
     c42:	71 e0       	ldi	r23, 0x01	; 1
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     c4c:	89 2b       	or	r24, r25
     c4e:	69 f4       	brne	.+26     	; 0xc6a <_ZN6parser9eval_exp6ERd+0x14e>
                result = acos(result);
     c50:	d7 01       	movw	r26, r14
     c52:	6d 91       	ld	r22, X+
     c54:	7d 91       	ld	r23, X+
     c56:	8d 91       	ld	r24, X+
     c58:	9c 91       	ld	r25, X
     c5a:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <acos>
     c5e:	f7 01       	movw	r30, r14
     c60:	60 83       	st	Z, r22
     c62:	71 83       	std	Z+1, r23	; 0x01
     c64:	82 83       	std	Z+2, r24	; 0x02
     c66:	93 83       	std	Z+3, r25	; 0x03
     c68:	31 c1       	rjmp	.+610    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ATAN"))
     c6a:	63 e6       	ldi	r22, 0x63	; 99
     c6c:	71 e0       	ldi	r23, 0x01	; 1
     c6e:	ce 01       	movw	r24, r28
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     c76:	89 2b       	or	r24, r25
     c78:	69 f4       	brne	.+26     	; 0xc94 <_ZN6parser9eval_exp6ERd+0x178>
                result = atan(result);
     c7a:	d7 01       	movw	r26, r14
     c7c:	6d 91       	ld	r22, X+
     c7e:	7d 91       	ld	r23, X+
     c80:	8d 91       	ld	r24, X+
     c82:	9c 91       	ld	r25, X
     c84:	0e 94 ed 1c 	call	0x39da	; 0x39da <atan>
     c88:	f7 01       	movw	r30, r14
     c8a:	60 83       	st	Z, r22
     c8c:	71 83       	std	Z+1, r23	; 0x01
     c8e:	82 83       	std	Z+2, r24	; 0x02
     c90:	93 83       	std	Z+3, r25	; 0x03
     c92:	1c c1       	rjmp	.+568    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "SINH"))
     c94:	69 e6       	ldi	r22, 0x69	; 105
     c96:	71 e0       	ldi	r23, 0x01	; 1
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     ca0:	89 2b       	or	r24, r25
     ca2:	69 f4       	brne	.+26     	; 0xcbe <_ZN6parser9eval_exp6ERd+0x1a2>
                result = sinh(result);
     ca4:	d7 01       	movw	r26, r14
     ca6:	6d 91       	ld	r22, X+
     ca8:	7d 91       	ld	r23, X+
     caa:	8d 91       	ld	r24, X+
     cac:	9c 91       	ld	r25, X
     cae:	0e 94 77 21 	call	0x42ee	; 0x42ee <sinh>
     cb2:	f7 01       	movw	r30, r14
     cb4:	60 83       	st	Z, r22
     cb6:	71 83       	std	Z+1, r23	; 0x01
     cb8:	82 83       	std	Z+2, r24	; 0x02
     cba:	93 83       	std	Z+3, r25	; 0x03
     cbc:	07 c1       	rjmp	.+526    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "COSH"))
     cbe:	6f e6       	ldi	r22, 0x6F	; 111
     cc0:	71 e0       	ldi	r23, 0x01	; 1
     cc2:	ce 01       	movw	r24, r28
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     cca:	89 2b       	or	r24, r25
     ccc:	69 f4       	brne	.+26     	; 0xce8 <_ZN6parser9eval_exp6ERd+0x1cc>
                result = cosh(result);
     cce:	d7 01       	movw	r26, r14
     cd0:	6d 91       	ld	r22, X+
     cd2:	7d 91       	ld	r23, X+
     cd4:	8d 91       	ld	r24, X+
     cd6:	9c 91       	ld	r25, X
     cd8:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <cosh>
     cdc:	f7 01       	movw	r30, r14
     cde:	60 83       	st	Z, r22
     ce0:	71 83       	std	Z+1, r23	; 0x01
     ce2:	82 83       	std	Z+2, r24	; 0x02
     ce4:	93 83       	std	Z+3, r25	; 0x03
     ce6:	f2 c0       	rjmp	.+484    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "TANH"))
     ce8:	65 e7       	ldi	r22, 0x75	; 117
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     cf4:	89 2b       	or	r24, r25
     cf6:	69 f4       	brne	.+26     	; 0xd12 <_ZN6parser9eval_exp6ERd+0x1f6>
                result = tanh(result);
     cf8:	d7 01       	movw	r26, r14
     cfa:	6d 91       	ld	r22, X+
     cfc:	7d 91       	ld	r23, X+
     cfe:	8d 91       	ld	r24, X+
     d00:	9c 91       	ld	r25, X
     d02:	0e 94 ef 21 	call	0x43de	; 0x43de <tanh>
     d06:	f7 01       	movw	r30, r14
     d08:	60 83       	st	Z, r22
     d0a:	71 83       	std	Z+1, r23	; 0x01
     d0c:	82 83       	std	Z+2, r24	; 0x02
     d0e:	93 83       	std	Z+3, r25	; 0x03
     d10:	dd c0       	rjmp	.+442    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ASINH"))
     d12:	68 e6       	ldi	r22, 0x68	; 104
     d14:	71 e0       	ldi	r23, 0x01	; 1
     d16:	ce 01       	movw	r24, r28
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     d1e:	89 2b       	or	r24, r25
     d20:	69 f4       	brne	.+26     	; 0xd3c <_ZN6parser9eval_exp6ERd+0x220>
                result = asin(result);
     d22:	d7 01       	movw	r26, r14
     d24:	6d 91       	ld	r22, X+
     d26:	7d 91       	ld	r23, X+
     d28:	8d 91       	ld	r24, X+
     d2a:	9c 91       	ld	r25, X
     d2c:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <asin>
     d30:	f7 01       	movw	r30, r14
     d32:	60 83       	st	Z, r22
     d34:	71 83       	std	Z+1, r23	; 0x01
     d36:	82 83       	std	Z+2, r24	; 0x02
     d38:	93 83       	std	Z+3, r25	; 0x03
     d3a:	c8 c0       	rjmp	.+400    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ACOSH"))
     d3c:	6e e6       	ldi	r22, 0x6E	; 110
     d3e:	71 e0       	ldi	r23, 0x01	; 1
     d40:	ce 01       	movw	r24, r28
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     d48:	89 2b       	or	r24, r25
     d4a:	69 f4       	brne	.+26     	; 0xd66 <_ZN6parser9eval_exp6ERd+0x24a>
                result = acos(result);
     d4c:	d7 01       	movw	r26, r14
     d4e:	6d 91       	ld	r22, X+
     d50:	7d 91       	ld	r23, X+
     d52:	8d 91       	ld	r24, X+
     d54:	9c 91       	ld	r25, X
     d56:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <acos>
     d5a:	f7 01       	movw	r30, r14
     d5c:	60 83       	st	Z, r22
     d5e:	71 83       	std	Z+1, r23	; 0x01
     d60:	82 83       	std	Z+2, r24	; 0x02
     d62:	93 83       	std	Z+3, r25	; 0x03
     d64:	b3 c0       	rjmp	.+358    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ATANH"))
     d66:	64 e7       	ldi	r22, 0x74	; 116
     d68:	71 e0       	ldi	r23, 0x01	; 1
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     d72:	89 2b       	or	r24, r25
     d74:	69 f4       	brne	.+26     	; 0xd90 <_ZN6parser9eval_exp6ERd+0x274>
                result = atan(result);
     d76:	d7 01       	movw	r26, r14
     d78:	6d 91       	ld	r22, X+
     d7a:	7d 91       	ld	r23, X+
     d7c:	8d 91       	ld	r24, X+
     d7e:	9c 91       	ld	r25, X
     d80:	0e 94 ed 1c 	call	0x39da	; 0x39da <atan>
     d84:	f7 01       	movw	r30, r14
     d86:	60 83       	st	Z, r22
     d88:	71 83       	std	Z+1, r23	; 0x01
     d8a:	82 83       	std	Z+2, r24	; 0x02
     d8c:	93 83       	std	Z+3, r25	; 0x03
     d8e:	9e c0       	rjmp	.+316    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "LN"))
     d90:	6a e7       	ldi	r22, 0x7A	; 122
     d92:	71 e0       	ldi	r23, 0x01	; 1
     d94:	ce 01       	movw	r24, r28
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     d9c:	89 2b       	or	r24, r25
     d9e:	69 f4       	brne	.+26     	; 0xdba <_ZN6parser9eval_exp6ERd+0x29e>
                result = log(result);
     da0:	d7 01       	movw	r26, r14
     da2:	6d 91       	ld	r22, X+
     da4:	7d 91       	ld	r23, X+
     da6:	8d 91       	ld	r24, X+
     da8:	9c 91       	ld	r25, X
     daa:	0e 94 1a 20 	call	0x4034	; 0x4034 <log>
     dae:	f7 01       	movw	r30, r14
     db0:	60 83       	st	Z, r22
     db2:	71 83       	std	Z+1, r23	; 0x01
     db4:	82 83       	std	Z+2, r24	; 0x02
     db6:	93 83       	std	Z+3, r25	; 0x03
     db8:	89 c0       	rjmp	.+274    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "LOG"))
     dba:	6d e7       	ldi	r22, 0x7D	; 125
     dbc:	71 e0       	ldi	r23, 0x01	; 1
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     dc6:	89 2b       	or	r24, r25
     dc8:	69 f4       	brne	.+26     	; 0xde4 <_ZN6parser9eval_exp6ERd+0x2c8>
                result = log10(result);
     dca:	d7 01       	movw	r26, r14
     dcc:	6d 91       	ld	r22, X+
     dce:	7d 91       	ld	r23, X+
     dd0:	8d 91       	ld	r24, X+
     dd2:	9c 91       	ld	r25, X
     dd4:	0e 94 0a 20 	call	0x4014	; 0x4014 <log10>
     dd8:	f7 01       	movw	r30, r14
     dda:	60 83       	st	Z, r22
     ddc:	71 83       	std	Z+1, r23	; 0x01
     dde:	82 83       	std	Z+2, r24	; 0x02
     de0:	93 83       	std	Z+3, r25	; 0x03
     de2:	74 c0       	rjmp	.+232    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "EXP"))
     de4:	61 e8       	ldi	r22, 0x81	; 129
     de6:	71 e0       	ldi	r23, 0x01	; 1
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     df0:	89 2b       	or	r24, r25
     df2:	69 f4       	brne	.+26     	; 0xe0e <_ZN6parser9eval_exp6ERd+0x2f2>
                result = exp(result);
     df4:	d7 01       	movw	r26, r14
     df6:	6d 91       	ld	r22, X+
     df8:	7d 91       	ld	r23, X+
     dfa:	8d 91       	ld	r24, X+
     dfc:	9c 91       	ld	r25, X
     dfe:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <exp>
     e02:	f7 01       	movw	r30, r14
     e04:	60 83       	st	Z, r22
     e06:	71 83       	std	Z+1, r23	; 0x01
     e08:	82 83       	std	Z+2, r24	; 0x02
     e0a:	93 83       	std	Z+3, r25	; 0x03
     e0c:	5f c0       	rjmp	.+190    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "SQRT"))
     e0e:	65 e8       	ldi	r22, 0x85	; 133
     e10:	71 e0       	ldi	r23, 0x01	; 1
     e12:	ce 01       	movw	r24, r28
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     e1a:	89 2b       	or	r24, r25
     e1c:	69 f4       	brne	.+26     	; 0xe38 <_ZN6parser9eval_exp6ERd+0x31c>
                result = sqrt(result);
     e1e:	d7 01       	movw	r26, r14
     e20:	6d 91       	ld	r22, X+
     e22:	7d 91       	ld	r23, X+
     e24:	8d 91       	ld	r24, X+
     e26:	9c 91       	ld	r25, X
     e28:	0e 94 ab 21 	call	0x4356	; 0x4356 <sqrt>
     e2c:	f7 01       	movw	r30, r14
     e2e:	60 83       	st	Z, r22
     e30:	71 83       	std	Z+1, r23	; 0x01
     e32:	82 83       	std	Z+2, r24	; 0x02
     e34:	93 83       	std	Z+3, r25	; 0x03
     e36:	4a c0       	rjmp	.+148    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "SQR"))
     e38:	6a e8       	ldi	r22, 0x8A	; 138
     e3a:	71 e0       	ldi	r23, 0x01	; 1
     e3c:	ce 01       	movw	r24, r28
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     e44:	89 2b       	or	r24, r25
     e46:	79 f4       	brne	.+30     	; 0xe66 <_ZN6parser9eval_exp6ERd+0x34a>
                result = result*result;
     e48:	d7 01       	movw	r26, r14
     e4a:	6d 91       	ld	r22, X+
     e4c:	7d 91       	ld	r23, X+
     e4e:	8d 91       	ld	r24, X+
     e50:	9c 91       	ld	r25, X
     e52:	9b 01       	movw	r18, r22
     e54:	ac 01       	movw	r20, r24
     e56:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
     e5a:	f7 01       	movw	r30, r14
     e5c:	60 83       	st	Z, r22
     e5e:	71 83       	std	Z+1, r23	; 0x01
     e60:	82 83       	std	Z+2, r24	; 0x02
     e62:	93 83       	std	Z+3, r25	; 0x03
     e64:	33 c0       	rjmp	.+102    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ROUND"))
     e66:	6e e8       	ldi	r22, 0x8E	; 142
     e68:	71 e0       	ldi	r23, 0x01	; 1
     e6a:	ce 01       	movw	r24, r28
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     e72:	89 2b       	or	r24, r25
     e74:	69 f4       	brne	.+26     	; 0xe90 <_ZN6parser9eval_exp6ERd+0x374>
                result = round(result);
     e76:	d7 01       	movw	r26, r14
     e78:	6d 91       	ld	r22, X+
     e7a:	7d 91       	ld	r23, X+
     e7c:	8d 91       	ld	r24, X+
     e7e:	9c 91       	ld	r25, X
     e80:	0e 94 53 21 	call	0x42a6	; 0x42a6 <round>
     e84:	f7 01       	movw	r30, r14
     e86:	60 83       	st	Z, r22
     e88:	71 83       	std	Z+1, r23	; 0x01
     e8a:	82 83       	std	Z+2, r24	; 0x02
     e8c:	93 83       	std	Z+3, r25	; 0x03
     e8e:	1e c0       	rjmp	.+60     	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "INT"))
     e90:	64 e9       	ldi	r22, 0x94	; 148
     e92:	71 e0       	ldi	r23, 0x01	; 1
     e94:	ce 01       	movw	r24, r28
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	0e 94 ab 22 	call	0x4556	; 0x4556 <strcmp>
     e9c:	89 2b       	or	r24, r25
     e9e:	69 f4       	brne	.+26     	; 0xeba <_ZN6parser9eval_exp6ERd+0x39e>
                result = floor(result);
     ea0:	d7 01       	movw	r26, r14
     ea2:	6d 91       	ld	r22, X+
     ea4:	7d 91       	ld	r23, X+
     ea6:	8d 91       	ld	r24, X+
     ea8:	9c 91       	ld	r25, X
     eaa:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <floor>
     eae:	f7 01       	movw	r30, r14
     eb0:	60 83       	st	Z, r22
     eb2:	71 83       	std	Z+1, r23	; 0x01
     eb4:	82 83       	std	Z+2, r24	; 0x02
     eb6:	93 83       	std	Z+3, r25	; 0x03
     eb8:	09 c0       	rjmp	.+18     	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else
                strcpy(errormsg, "Unknown Function");
     eba:	81 e1       	ldi	r24, 0x11	; 17
     ebc:	e8 e9       	ldi	r30, 0x98	; 152
     ebe:	f1 e0       	ldi	r31, 0x01	; 1
     ec0:	d8 01       	movw	r26, r16
     ec2:	da 96       	adiw	r26, 0x3a	; 58
     ec4:	01 90       	ld	r0, Z+
     ec6:	0d 92       	st	X+, r0
     ec8:	8a 95       	dec	r24
     eca:	e1 f7       	brne	.-8      	; 0xec4 <_ZN6parser9eval_exp6ERd+0x3a8>
        }
        get_token();
     ecc:	c8 01       	movw	r24, r16
     ece:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
     ed2:	35 c0       	rjmp	.+106    	; 0xf3e <_ZN6parser9eval_exp6ERd+0x422>
    }
    else
        switch (tok_type)
     ed4:	d8 01       	movw	r26, r16
     ed6:	51 96       	adiw	r26, 0x11	; 17
     ed8:	8c 91       	ld	r24, X
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	19 f0       	breq	.+6      	; 0xee4 <_ZN6parser9eval_exp6ERd+0x3c8>
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	b9 f0       	breq	.+46     	; 0xf10 <_ZN6parser9eval_exp6ERd+0x3f4>
     ee2:	24 c0       	rjmp	.+72     	; 0xf2c <_ZN6parser9eval_exp6ERd+0x410>
        {
        case VARIABLE:
            result = vars[*token - 'A'];
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	e1 54       	subi	r30, 0x41	; 65
     ee8:	f1 09       	sbc	r31, r1
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	e0 0f       	add	r30, r16
     ef4:	f1 1f       	adc	r31, r17
     ef6:	82 89       	ldd	r24, Z+18	; 0x12
     ef8:	93 89       	ldd	r25, Z+19	; 0x13
     efa:	a4 89       	ldd	r26, Z+20	; 0x14
     efc:	b5 89       	ldd	r27, Z+21	; 0x15
     efe:	f7 01       	movw	r30, r14
     f00:	80 83       	st	Z, r24
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	a2 83       	std	Z+2, r26	; 0x02
     f06:	b3 83       	std	Z+3, r27	; 0x03
            get_token();
     f08:	c8 01       	movw	r24, r16
     f0a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
            return;
     f0e:	17 c0       	rjmp	.+46     	; 0xf3e <_ZN6parser9eval_exp6ERd+0x422>
        case NUMBER:
            result = atof(token);
     f10:	c8 01       	movw	r24, r16
     f12:	02 96       	adiw	r24, 0x02	; 2
     f14:	0e 94 75 22 	call	0x44ea	; 0x44ea <atof>
     f18:	d7 01       	movw	r26, r14
     f1a:	6d 93       	st	X+, r22
     f1c:	7d 93       	st	X+, r23
     f1e:	8d 93       	st	X+, r24
     f20:	9c 93       	st	X, r25
     f22:	13 97       	sbiw	r26, 0x03	; 3
            get_token();
     f24:	c8 01       	movw	r24, r16
     f26:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
            return;
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <_ZN6parser9eval_exp6ERd+0x422>
        default:
            strcpy(errormsg, "Syntax Error");
     f2c:	d8 01       	movw	r26, r16
     f2e:	da 96       	adiw	r26, 0x3a	; 58
     f30:	8d e0       	ldi	r24, 0x0D	; 13
     f32:	e9 ea       	ldi	r30, 0xA9	; 169
     f34:	f1 e0       	ldi	r31, 0x01	; 1
     f36:	01 90       	ld	r0, Z+
     f38:	0d 92       	st	X+, r0
     f3a:	8a 95       	dec	r24
     f3c:	e1 f7       	brne	.-8      	; 0xf36 <_ZN6parser9eval_exp6ERd+0x41a>
        }
}
     f3e:	2f 96       	adiw	r28, 0x0f	; 15
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	08 95       	ret

00000f5a <_ZN6parser9eval_exp5ERd>:
        result = pow(result, temp);
    }
}
// Evaluate a unary + or -.
void parser::eval_exp5(double &result)
{
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	ec 01       	movw	r28, r24
     f64:	8b 01       	movw	r16, r22
    char op;
    op = 0;
    if ((tok_type == DELIMITER) && *token == '+' || *token == '-')
     f66:	89 89       	ldd	r24, Y+17	; 0x11
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	19 f4       	brne	.+6      	; 0xf72 <_ZN6parser9eval_exp5ERd+0x18>
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	8b 32       	cpi	r24, 0x2B	; 43
     f70:	41 f0       	breq	.+16     	; 0xf82 <_ZN6parser9eval_exp5ERd+0x28>
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	8d 32       	cpi	r24, 0x2D	; 45
     f76:	69 f0       	breq	.+26     	; 0xf92 <_ZN6parser9eval_exp5ERd+0x38>
    {
        op = *token;
        get_token();
    }
    eval_exp6(result);
     f78:	b8 01       	movw	r22, r16
     f7a:	ce 01       	movw	r24, r28
     f7c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN6parser9eval_exp6ERd>
     f80:	19 c0       	rjmp	.+50     	; 0xfb4 <_ZN6parser9eval_exp5ERd+0x5a>
    char op;
    op = 0;
    if ((tok_type == DELIMITER) && *token == '+' || *token == '-')
    {
        op = *token;
        get_token();
     f82:	ce 01       	movw	r24, r28
     f84:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
    }
    eval_exp6(result);
     f88:	b8 01       	movw	r22, r16
     f8a:	ce 01       	movw	r24, r28
     f8c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN6parser9eval_exp6ERd>
     f90:	11 c0       	rjmp	.+34     	; 0xfb4 <_ZN6parser9eval_exp5ERd+0x5a>
    char op;
    op = 0;
    if ((tok_type == DELIMITER) && *token == '+' || *token == '-')
    {
        op = *token;
        get_token();
     f92:	ce 01       	movw	r24, r28
     f94:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
    }
    eval_exp6(result);
     f98:	b8 01       	movw	r22, r16
     f9a:	ce 01       	movw	r24, r28
     f9c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN6parser9eval_exp6ERd>
    if (op == '-')
        result = -result;
     fa0:	f8 01       	movw	r30, r16
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	a2 81       	ldd	r26, Z+2	; 0x02
     fa8:	b3 81       	ldd	r27, Z+3	; 0x03
     faa:	b0 58       	subi	r27, 0x80	; 128
     fac:	80 83       	st	Z, r24
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	a2 83       	std	Z+2, r26	; 0x02
     fb2:	b3 83       	std	Z+3, r27	; 0x03
}
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <_ZN6parser9eval_exp4ERd>:
        }
    }
}
// Process an exponent.
void parser::eval_exp4(double &result)
{
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	00 d0       	rcall	.+0      	; 0xfcc <_ZN6parser9eval_exp4ERd+0xe>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <_ZN6parser9eval_exp4ERd+0x10>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	8c 01       	movw	r16, r24
     fd4:	7b 01       	movw	r14, r22
    double temp;
    eval_exp5(result);
     fd6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN6parser9eval_exp5ERd>
    while (*token == '^')
     fda:	f8 01       	movw	r30, r16
     fdc:	82 81       	ldd	r24, Z+2	; 0x02
     fde:	8e 35       	cpi	r24, 0x5E	; 94
     fe0:	e9 f4       	brne	.+58     	; 0x101c <_ZN6parser9eval_exp4ERd+0x5e>
    {
        get_token();
     fe2:	c8 01       	movw	r24, r16
     fe4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp5(temp);
     fe8:	be 01       	movw	r22, r28
     fea:	6f 5f       	subi	r22, 0xFF	; 255
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	c8 01       	movw	r24, r16
     ff0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN6parser9eval_exp5ERd>
        result = pow(result, temp);
     ff4:	29 81       	ldd	r18, Y+1	; 0x01
     ff6:	3a 81       	ldd	r19, Y+2	; 0x02
     ff8:	4b 81       	ldd	r20, Y+3	; 0x03
     ffa:	5c 81       	ldd	r21, Y+4	; 0x04
     ffc:	f7 01       	movw	r30, r14
     ffe:	60 81       	ld	r22, Z
    1000:	71 81       	ldd	r23, Z+1	; 0x01
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	93 81       	ldd	r25, Z+3	; 0x03
    1006:	0e 94 03 21 	call	0x4206	; 0x4206 <pow>
    100a:	f7 01       	movw	r30, r14
    100c:	60 83       	st	Z, r22
    100e:	71 83       	std	Z+1, r23	; 0x01
    1010:	82 83       	std	Z+2, r24	; 0x02
    1012:	93 83       	std	Z+3, r25	; 0x03
// Process an exponent.
void parser::eval_exp4(double &result)
{
    double temp;
    eval_exp5(result);
    while (*token == '^')
    1014:	f8 01       	movw	r30, r16
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	8e 35       	cpi	r24, 0x5E	; 94
    101a:	19 f3       	breq	.-58     	; 0xfe2 <_ZN6parser9eval_exp4ERd+0x24>
    {
        get_token();
        eval_exp5(temp);
        result = pow(result, temp);
    }
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	08 95       	ret

00001032 <_ZN6parser9eval_exp3ERd>:
        }
    }
}
// Multiply or divide two factors.
void parser::eval_exp3(double &result)
{
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	00 d0       	rcall	.+0      	; 0x1040 <_ZN6parser9eval_exp3ERd+0xe>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <_ZN6parser9eval_exp3ERd+0x10>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	8c 01       	movw	r16, r24
    1048:	7b 01       	movw	r14, r22
    char op;
    double temp;
    eval_exp4(result);
    104a:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN6parser9eval_exp4ERd>
    while ((op = *token) == '*' || op == '/')
    104e:	f8 01       	movw	r30, r16
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	8a 32       	cpi	r24, 0x2A	; 42
    1054:	19 f0       	breq	.+6      	; 0x105c <_ZN6parser9eval_exp3ERd+0x2a>
    1056:	8f 32       	cpi	r24, 0x2F	; 47
    1058:	d9 f0       	breq	.+54     	; 0x1090 <_ZN6parser9eval_exp3ERd+0x5e>
    105a:	34 c0       	rjmp	.+104    	; 0x10c4 <_ZN6parser9eval_exp3ERd+0x92>
    {
        get_token();
    105c:	c8 01       	movw	r24, r16
    105e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp4(temp);
    1062:	be 01       	movw	r22, r28
    1064:	6f 5f       	subi	r22, 0xFF	; 255
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	c8 01       	movw	r24, r16
    106a:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN6parser9eval_exp4ERd>
        switch (op)
        {
        case '*':
            result = result * temp;
    106e:	29 81       	ldd	r18, Y+1	; 0x01
    1070:	3a 81       	ldd	r19, Y+2	; 0x02
    1072:	4b 81       	ldd	r20, Y+3	; 0x03
    1074:	5c 81       	ldd	r21, Y+4	; 0x04
    1076:	f7 01       	movw	r30, r14
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	82 81       	ldd	r24, Z+2	; 0x02
    107e:	93 81       	ldd	r25, Z+3	; 0x03
    1080:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    1084:	f7 01       	movw	r30, r14
    1086:	60 83       	st	Z, r22
    1088:	71 83       	std	Z+1, r23	; 0x01
    108a:	82 83       	std	Z+2, r24	; 0x02
    108c:	93 83       	std	Z+3, r25	; 0x03
            break;
    108e:	df cf       	rjmp	.-66     	; 0x104e <_ZN6parser9eval_exp3ERd+0x1c>
    char op;
    double temp;
    eval_exp4(result);
    while ((op = *token) == '*' || op == '/')
    {
        get_token();
    1090:	c8 01       	movw	r24, r16
    1092:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp4(temp);
    1096:	be 01       	movw	r22, r28
    1098:	6f 5f       	subi	r22, 0xFF	; 255
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	c8 01       	movw	r24, r16
    109e:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN6parser9eval_exp4ERd>
        {
        case '*':
            result = result * temp;
            break;
        case '/':
            result = result / temp;
    10a2:	29 81       	ldd	r18, Y+1	; 0x01
    10a4:	3a 81       	ldd	r19, Y+2	; 0x02
    10a6:	4b 81       	ldd	r20, Y+3	; 0x03
    10a8:	5c 81       	ldd	r21, Y+4	; 0x04
    10aa:	f7 01       	movw	r30, r14
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    10b8:	f7 01       	movw	r30, r14
    10ba:	60 83       	st	Z, r22
    10bc:	71 83       	std	Z+1, r23	; 0x01
    10be:	82 83       	std	Z+2, r24	; 0x02
    10c0:	93 83       	std	Z+3, r25	; 0x03
            break;
    10c2:	c5 cf       	rjmp	.-118    	; 0x104e <_ZN6parser9eval_exp3ERd+0x1c>
        }
    }
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	08 95       	ret

000010da <_ZN6parser9eval_exp1ERd>:
        strcpy(errormsg, "Syntax Error");
    return result;
}
// Process an assignment.
void parser::eval_exp1(double &result)
{
    10da:	8f 92       	push	r8
    10dc:	9f 92       	push	r9
    10de:	bf 92       	push	r11
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	2f 97       	sbiw	r28, 0x0f	; 15
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	8c 01       	movw	r16, r24
    1102:	7b 01       	movw	r14, r22
    int slot;
    char temp_token[15];
    if (tok_type == VARIABLE)
    1104:	fc 01       	movw	r30, r24
    1106:	81 89       	ldd	r24, Z+17	; 0x11
    1108:	82 30       	cpi	r24, 0x02	; 2
    110a:	c9 f5       	brne	.+114    	; 0x117e <_ZN6parser9eval_exp1ERd+0xa4>
    {
        // save old token
        char *t_ptr = exp_ptr;
    110c:	81 90       	ld	r8, Z+
    110e:	91 90       	ld	r9, Z+
    1110:	6f 01       	movw	r12, r30
        strcpy(temp_token, token);
    1112:	bf 01       	movw	r22, r30
    1114:	ce 01       	movw	r24, r28
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	0e 94 b4 22 	call	0x4568	; 0x4568 <strcpy>
        // compute the index of the variable
        slot = *token - 'A';
    111c:	f8 01       	movw	r30, r16
    111e:	b2 80       	ldd	r11, Z+2	; 0x02
        get_token();
    1120:	c8 01       	movw	r24, r16
    1122:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        if (*token != '=')
    1126:	f8 01       	movw	r30, r16
    1128:	82 81       	ldd	r24, Z+2	; 0x02
    112a:	8d 33       	cpi	r24, 0x3D	; 61
    112c:	61 f0       	breq	.+24     	; 0x1146 <_ZN6parser9eval_exp1ERd+0x6c>
        {
            exp_ptr = t_ptr; // return current token
    112e:	91 82       	std	Z+1, r9	; 0x01
    1130:	80 82       	st	Z, r8
            strcpy(token, temp_token); // restore old token
    1132:	be 01       	movw	r22, r28
    1134:	6f 5f       	subi	r22, 0xFF	; 255
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	c6 01       	movw	r24, r12
    113a:	0e 94 b4 22 	call	0x4568	; 0x4568 <strcpy>
            tok_type = VARIABLE;
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	f8 01       	movw	r30, r16
    1142:	81 8b       	std	Z+17, r24	; 0x11
    1144:	1c c0       	rjmp	.+56     	; 0x117e <_ZN6parser9eval_exp1ERd+0xa4>
        }
        else {
            get_token(); // get next part of exp
    1146:	c8 01       	movw	r24, r16
    1148:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
            eval_exp2(result);
    114c:	b7 01       	movw	r22, r14
    114e:	c8 01       	movw	r24, r16
    1150:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN6parser9eval_exp2ERd>
            vars[slot] = result;
    1154:	f7 01       	movw	r30, r14
    1156:	40 81       	ld	r20, Z
    1158:	51 81       	ldd	r21, Z+1	; 0x01
    115a:	62 81       	ldd	r22, Z+2	; 0x02
    115c:	73 81       	ldd	r23, Z+3	; 0x03
    115e:	8b 2d       	mov	r24, r11
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	81 54       	subi	r24, 0x41	; 65
    1164:	91 09       	sbc	r25, r1
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	f8 01       	movw	r30, r16
    1170:	e8 0f       	add	r30, r24
    1172:	f9 1f       	adc	r31, r25
    1174:	42 8b       	std	Z+18, r20	; 0x12
    1176:	53 8b       	std	Z+19, r21	; 0x13
    1178:	64 8b       	std	Z+20, r22	; 0x14
    117a:	75 8b       	std	Z+21, r23	; 0x15
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <_ZN6parser9eval_exp1ERd+0xac>
            return;
        }
    }
    eval_exp2(result);
    117e:	b7 01       	movw	r22, r14
    1180:	c8 01       	movw	r24, r16
    1182:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN6parser9eval_exp2ERd>
}
    1186:	2f 96       	adiw	r28, 0x0f	; 15
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	bf 90       	pop	r11
    11a4:	9f 90       	pop	r9
    11a6:	8f 90       	pop	r8
    11a8:	08 95       	ret

000011aa <_ZN6parser8eval_expEPc>:
        vars[i] = 0.0;
    errormsg[0] = '\0';
}
// Parser entry point.
double parser::eval_exp(char *exp)
{
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <_ZN6parser8eval_expEPc+0xa>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <_ZN6parser8eval_expEPc+0xc>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	8c 01       	movw	r16, r24
    errormsg[0] = '\0';
    11bc:	fc 01       	movw	r30, r24
    11be:	12 ae       	std	Z+58, r1	; 0x3a
    double result;
    exp_ptr = exp;
    11c0:	71 83       	std	Z+1, r23	; 0x01
    11c2:	60 83       	st	Z, r22
    get_token();
    11c4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
    if (!*token)
    11c8:	f8 01       	movw	r30, r16
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	81 11       	cpse	r24, r1
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <_ZN6parser8eval_expEPc+0x40>
    {
        strcpy(errormsg, "No Expression Present"); // no expression present
    11d0:	d8 01       	movw	r26, r16
    11d2:	da 96       	adiw	r26, 0x3a	; 58
    11d4:	86 e1       	ldi	r24, 0x16	; 22
    11d6:	e6 eb       	ldi	r30, 0xB6	; 182
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	01 90       	ld	r0, Z+
    11dc:	0d 92       	st	X+, r0
    11de:	8a 95       	dec	r24
    11e0:	e1 f7       	brne	.-8      	; 0x11da <_ZN6parser8eval_expEPc+0x30>
        return (double)0;
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	cb 01       	movw	r24, r22
    11e8:	17 c0       	rjmp	.+46     	; 0x1218 <_ZN6parser8eval_expEPc+0x6e>
    }
    eval_exp1(result);
    11ea:	be 01       	movw	r22, r28
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	c8 01       	movw	r24, r16
    11f2:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN6parser9eval_exp1ERd>
    if (*token) // last token must be null
    11f6:	f8 01       	movw	r30, r16
    11f8:	82 81       	ldd	r24, Z+2	; 0x02
    11fa:	88 23       	and	r24, r24
    11fc:	49 f0       	breq	.+18     	; 0x1210 <_ZN6parser8eval_expEPc+0x66>
        strcpy(errormsg, "Syntax Error");
    11fe:	d8 01       	movw	r26, r16
    1200:	da 96       	adiw	r26, 0x3a	; 58
    1202:	8d e0       	ldi	r24, 0x0D	; 13
    1204:	e9 ea       	ldi	r30, 0xA9	; 169
    1206:	f1 e0       	ldi	r31, 0x01	; 1
    1208:	01 90       	ld	r0, Z+
    120a:	0d 92       	st	X+, r0
    120c:	8a 95       	dec	r24
    120e:	e1 f7       	brne	.-8      	; 0x1208 <_ZN6parser8eval_expEPc+0x5e>
    return result;
    1210:	69 81       	ldd	r22, Y+1	; 0x01
    1212:	7a 81       	ldd	r23, Y+2	; 0x02
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	08 95       	ret

0000122a <_Z6appendPciS_>:
char mat[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};
char mat2[4][4][6]={{"sin(","cos(","tan(","sqrt("},{"^","x","y","<-"},{",",".","(",")"},{"C","C","C","C"}};
	
void append(char s[] , int len , char s2[])
{
    122a:	9c 01       	movw	r18, r24
	for(int i=0;s2[i]!=0;i++)
    122c:	fa 01       	movw	r30, r20
    122e:	90 81       	ld	r25, Z
    1230:	99 23       	and	r25, r25
    1232:	51 f0       	breq	.+20     	; 0x1248 <_Z6appendPciS_+0x1e>
    1234:	d9 01       	movw	r26, r18
    1236:	a6 0f       	add	r26, r22
    1238:	b7 1f       	adc	r27, r23
    123a:	31 96       	adiw	r30, 0x01	; 1
	{
		s[len] = s2[i];
    123c:	9d 93       	st	X+, r25
		len++;
    123e:	6f 5f       	subi	r22, 0xFF	; 255
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
char mat[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};
char mat2[4][4][6]={{"sin(","cos(","tan(","sqrt("},{"^","x","y","<-"},{",",".","(",")"},{"C","C","C","C"}};
	
void append(char s[] , int len , char s2[])
{
	for(int i=0;s2[i]!=0;i++)
    1242:	91 91       	ld	r25, Z+
    1244:	91 11       	cpse	r25, r1
    1246:	fa cf       	rjmp	.-12     	; 0x123c <_Z6appendPciS_+0x12>
	{
		s[len] = s2[i];
		len++;
	}
	s[len] = 0;
    1248:	f9 01       	movw	r30, r18
    124a:	e6 0f       	add	r30, r22
    124c:	f7 1f       	adc	r31, r23
    124e:	10 82       	st	Z, r1
    1250:	08 95       	ret

00001252 <_Z17evaluate_functionPcd>:

char s[40];
char tmp[15];
parser ob;
double evaluate_function(char str[], double a)
{
    1252:	8f 92       	push	r8
    1254:	9f 92       	push	r9
    1256:	af 92       	push	r10
    1258:	bf 92       	push	r11
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	fc 01       	movw	r30, r24
    1268:	4a 01       	movw	r8, r20
    126a:	5b 01       	movw	r10, r22
	
	int idx = 0;
	for(int i=0;str[i]!=0;i++)
    126c:	90 81       	ld	r25, Z
    126e:	99 23       	and	r25, r25
    1270:	51 f1       	breq	.+84     	; 0x12c6 <_Z17evaluate_functionPcd+0x74>
    1272:	7f 01       	movw	r14, r30
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	e8 1a       	sub	r14, r24
    1278:	f8 0a       	sbc	r15, r24
    127a:	c0 e0       	ldi	r28, 0x00	; 0
    127c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(str[i]=='x')
    127e:	98 37       	cpi	r25, 0x78	; 120
    1280:	b9 f4       	brne	.+46     	; 0x12b0 <_Z17evaluate_functionPcd+0x5e>
		{
			dtostrf(a,1,8,tmp);
    1282:	05 e8       	ldi	r16, 0x85	; 133
    1284:	13 e0       	ldi	r17, 0x03	; 3
    1286:	28 e0       	ldi	r18, 0x08	; 8
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	c5 01       	movw	r24, r10
    128c:	b4 01       	movw	r22, r8
    128e:	0e 94 55 22 	call	0x44aa	; 0x44aa <dtostrf>
			for(int j=0;tmp[j]!=0;j++)
    1292:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <tmp>
    1296:	99 23       	and	r25, r25
    1298:	81 f0       	breq	.+32     	; 0x12ba <_Z17evaluate_functionPcd+0x68>
    129a:	de 01       	movw	r26, r28
    129c:	ac 56       	subi	r26, 0x6C	; 108
    129e:	bc 4f       	sbci	r27, 0xFC	; 252
    12a0:	e6 e8       	ldi	r30, 0x86	; 134
    12a2:	f3 e0       	ldi	r31, 0x03	; 3
			{
				s[idx] = tmp[j];
    12a4:	9d 93       	st	X+, r25
				idx++;
    12a6:	21 96       	adiw	r28, 0x01	; 1
	for(int i=0;str[i]!=0;i++)
	{
		if(str[i]=='x')
		{
			dtostrf(a,1,8,tmp);
			for(int j=0;tmp[j]!=0;j++)
    12a8:	91 91       	ld	r25, Z+
    12aa:	91 11       	cpse	r25, r1
    12ac:	fb cf       	rjmp	.-10     	; 0x12a4 <_Z17evaluate_functionPcd+0x52>
    12ae:	05 c0       	rjmp	.+10     	; 0x12ba <_Z17evaluate_functionPcd+0x68>
				s[idx] = tmp[j];
				idx++;
			}
		}
		else{
			s[idx] = str[i];
    12b0:	fe 01       	movw	r30, r28
    12b2:	ec 56       	subi	r30, 0x6C	; 108
    12b4:	fc 4f       	sbci	r31, 0xFC	; 252
    12b6:	90 83       	st	Z, r25
			idx++;
    12b8:	21 96       	adiw	r28, 0x01	; 1
parser ob;
double evaluate_function(char str[], double a)
{
	
	int idx = 0;
	for(int i=0;str[i]!=0;i++)
    12ba:	f7 01       	movw	r30, r14
    12bc:	91 91       	ld	r25, Z+
    12be:	7f 01       	movw	r14, r30
    12c0:	91 11       	cpse	r25, r1
    12c2:	dd cf       	rjmp	.-70     	; 0x127e <_Z17evaluate_functionPcd+0x2c>
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <_Z17evaluate_functionPcd+0x78>
char tmp[15];
parser ob;
double evaluate_function(char str[], double a)
{
	
	int idx = 0;
    12c6:	c0 e0       	ldi	r28, 0x00	; 0
    12c8:	d0 e0       	ldi	r29, 0x00	; 0
		else{
			s[idx] = str[i];
			idx++;
		}
	}
	s[idx] = 0;
    12ca:	cc 56       	subi	r28, 0x6C	; 108
    12cc:	dc 4f       	sbci	r29, 0xFC	; 252
    12ce:	18 82       	st	Y, r1
	
	double ans=ob.eval_exp(s);
    12d0:	64 e9       	ldi	r22, 0x94	; 148
    12d2:	73 e0       	ldi	r23, 0x03	; 3
    12d4:	8c e3       	ldi	r24, 0x3C	; 60
    12d6:	93 e0       	ldi	r25, 0x03	; 3
    12d8:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN6parser8eval_expEPc>
	return ans;
}
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ff 90       	pop	r15
    12e6:	ef 90       	pop	r14
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	9f 90       	pop	r9
    12ee:	8f 90       	pop	r8
    12f0:	08 95       	ret

000012f2 <_Z16int_number_inputi>:

//helper functions and gauss
int int_number_input(int pos)
{
    12f2:	df 92       	push	r13
    12f4:	ef 92       	push	r14
    12f6:	ff 92       	push	r15
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	00 d0       	rcall	.+0      	; 0x1302 <_Z16int_number_inputi+0x10>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	//pos is position where u want to show the text
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    1306:	a1 e0       	ldi	r26, 0x01	; 1
    1308:	b0 e0       	ldi	r27, 0x00	; 0
int int_number_input(int pos)
{
	//pos is position where u want to show the text
	while (1)
	{
		for(int c=4;c<8;c++)
    130a:	44 e0       	ldi	r20, 0x04	; 4
    130c:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB=1<<c;
    130e:	9d 01       	movw	r18, r26
    1310:	04 2e       	mov	r0, r20
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <_Z16int_number_inputi+0x26>
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <_Z16int_number_inputi+0x22>
    131c:	28 bb       	out	0x18, r18	; 24
    131e:	9a 01       	movw	r18, r20
    1320:	24 50       	subi	r18, 0x04	; 4
    1322:	31 09       	sbc	r19, r1
    1324:	f9 01       	movw	r30, r18
    1326:	e0 54       	subi	r30, 0x40	; 64
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    132a:	00 e0       	ldi	r16, 0x00	; 0
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	d2 2e       	mov	r13, r18
    1330:	73 2f       	mov	r23, r19
			{
				if(PINB&(1<<r))
    1332:	26 b3       	in	r18, 0x16	; 22
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	00 2e       	mov	r0, r16
    1338:	02 c0       	rjmp	.+4      	; 0x133e <_Z16int_number_inputi+0x4c>
    133a:	35 95       	asr	r19
    133c:	27 95       	ror	r18
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <_Z16int_number_inputi+0x48>
    1342:	20 ff       	sbrs	r18, 0
    1344:	2f c0       	rjmp	.+94     	; 0x13a4 <_Z16int_number_inputi+0xb2>
    1346:	ed 2c       	mov	r14, r13
    1348:	f7 2e       	mov	r15, r23
				{
					if(mat[r][c-4]>='1' && mat[r][c-4]<='7')
    134a:	90 81       	ld	r25, Z
    134c:	2f ec       	ldi	r18, 0xCF	; 207
    134e:	29 0f       	add	r18, r25
    1350:	27 30       	cpi	r18, 0x07	; 7
    1352:	f8 f4       	brcc	.+62     	; 0x1392 <_Z16int_number_inputi+0xa0>
					{
						char tmp[2];
						tmp[0] = mat[r][c-4];
    1354:	99 83       	std	Y+1, r25	; 0x01
						tmp[1] = 0;
    1356:	1a 82       	std	Y+2, r1	; 0x02
						DisplayText(1,pos,tmp);
    1358:	ae 01       	movw	r20, r28
    135a:	4f 5f       	subi	r20, 0xFF	; 255
    135c:	5f 4f       	sbci	r21, 0xFF	; 255
    135e:	68 2f       	mov	r22, r24
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1366:	2f ef       	ldi	r18, 0xFF	; 255
    1368:	34 e3       	ldi	r19, 0x34	; 52
    136a:	8c e0       	ldi	r24, 0x0C	; 12
    136c:	21 50       	subi	r18, 0x01	; 1
    136e:	30 40       	sbci	r19, 0x00	; 0
    1370:	80 40       	sbci	r24, 0x00	; 0
    1372:	e1 f7       	brne	.-8      	; 0x136c <_Z16int_number_inputi+0x7a>
    1374:	00 c0       	rjmp	.+0      	; 0x1376 <_Z16int_number_inputi+0x84>
    1376:	00 00       	nop
						_delay_ms(500);
						return mat[r][c-4]-'0';
    1378:	00 0f       	add	r16, r16
    137a:	11 1f       	adc	r17, r17
    137c:	00 0f       	add	r16, r16
    137e:	11 1f       	adc	r17, r17
    1380:	00 54       	subi	r16, 0x40	; 64
    1382:	1f 4f       	sbci	r17, 0xFF	; 255
    1384:	f8 01       	movw	r30, r16
    1386:	ee 0d       	add	r30, r14
    1388:	ff 1d       	adc	r31, r15
    138a:	80 81       	ld	r24, Z
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	c0 97       	sbiw	r24, 0x30	; 48
    1390:	1c c0       	rjmp	.+56     	; 0x13ca <_Z16int_number_inputi+0xd8>
    1392:	9f ef       	ldi	r25, 0xFF	; 255
    1394:	24 e3       	ldi	r18, 0x34	; 52
    1396:	3c e0       	ldi	r19, 0x0C	; 12
    1398:	91 50       	subi	r25, 0x01	; 1
    139a:	20 40       	sbci	r18, 0x00	; 0
    139c:	30 40       	sbci	r19, 0x00	; 0
    139e:	e1 f7       	brne	.-8      	; 0x1398 <_Z16int_number_inputi+0xa6>
    13a0:	00 c0       	rjmp	.+0      	; 0x13a2 <_Z16int_number_inputi+0xb0>
    13a2:	00 00       	nop
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    13a4:	0f 5f       	subi	r16, 0xFF	; 255
    13a6:	1f 4f       	sbci	r17, 0xFF	; 255
    13a8:	34 96       	adiw	r30, 0x04	; 4
    13aa:	04 30       	cpi	r16, 0x04	; 4
    13ac:	11 05       	cpc	r17, r1
    13ae:	09 f6       	brne	.-126    	; 0x1332 <_Z16int_number_inputi+0x40>
    13b0:	ef e1       	ldi	r30, 0x1F	; 31
    13b2:	fe e4       	ldi	r31, 0x4E	; 78
    13b4:	31 97       	sbiw	r30, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <_Z16int_number_inputi+0xc2>
    13b8:	00 c0       	rjmp	.+0      	; 0x13ba <_Z16int_number_inputi+0xc8>
    13ba:	00 00       	nop
int int_number_input(int pos)
{
	//pos is position where u want to show the text
	while (1)
	{
		for(int c=4;c<8;c++)
    13bc:	4f 5f       	subi	r20, 0xFF	; 255
    13be:	5f 4f       	sbci	r21, 0xFF	; 255
    13c0:	48 30       	cpi	r20, 0x08	; 8
    13c2:	51 05       	cpc	r21, r1
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <_Z16int_number_inputi+0xd6>
    13c6:	a3 cf       	rjmp	.-186    	; 0x130e <_Z16int_number_inputi+0x1c>
    13c8:	a0 cf       	rjmp	.-192    	; 0x130a <_Z16int_number_inputi+0x18>
				}
			}
			_delay_ms(10);
		}
	}
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	08 95       	ret

000013de <_Z16string_to_doublePci>:

double string_to_double(char s[], int id)
{
    13de:	6f 92       	push	r6
    13e0:	7f 92       	push	r7
    13e2:	8f 92       	push	r8
    13e4:	9f 92       	push	r9
    13e6:	af 92       	push	r10
    13e8:	bf 92       	push	r11
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
	double d = 0;
	bool flag = 0;
	int koto = 1;
	bool minus = 0;
	for(int i=0;i<id;i++)
    13fa:	16 16       	cp	r1, r22
    13fc:	17 06       	cpc	r1, r23
    13fe:	0c f0       	brlt	.+2      	; 0x1402 <_Z16string_to_doublePci+0x24>
    1400:	52 c0       	rjmp	.+164    	; 0x14a6 <_Z16string_to_doublePci+0xc8>
    1402:	7c 01       	movw	r14, r24
    1404:	ec 01       	movw	r28, r24
    1406:	e6 0e       	add	r14, r22
    1408:	f7 1e       	adc	r15, r23
    140a:	71 2c       	mov	r7, r1
    140c:	01 e0       	ldi	r16, 0x01	; 1
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	d1 2c       	mov	r13, r1
    1412:	81 2c       	mov	r8, r1
    1414:	91 2c       	mov	r9, r1
    1416:	54 01       	movw	r10, r8
	{
		if(s[i]=='-')
		{
			minus = 1;
    1418:	cc 24       	eor	r12, r12
    141a:	c3 94       	inc	r12
	bool flag = 0;
	int koto = 1;
	bool minus = 0;
	for(int i=0;i<id;i++)
	{
		if(s[i]=='-')
    141c:	69 90       	ld	r6, Y+
    141e:	8d e2       	ldi	r24, 0x2D	; 45
    1420:	68 16       	cp	r6, r24
    1422:	59 f1       	breq	.+86     	; 0x147a <_Z16string_to_doublePci+0x9c>
		{
			minus = 1;
			continue;
		}
		if(s[i]=='.')
    1424:	8e e2       	ldi	r24, 0x2E	; 46
    1426:	68 16       	cp	r6, r24
    1428:	51 f1       	breq	.+84     	; 0x147e <_Z16string_to_doublePci+0xa0>
		{
			flag = 1;
			continue;
		}
		int now = (int)(s[i]-'0');
		d = d*10.0 + (double)now;
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	c5 01       	movw	r24, r10
    1434:	b4 01       	movw	r22, r8
    1436:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    143a:	4b 01       	movw	r8, r22
    143c:	5c 01       	movw	r10, r24
    143e:	66 2d       	mov	r22, r6
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	60 53       	subi	r22, 0x30	; 48
    1444:	71 09       	sbc	r23, r1
    1446:	07 2e       	mov	r0, r23
    1448:	00 0c       	add	r0, r0
    144a:	88 0b       	sbc	r24, r24
    144c:	99 0b       	sbc	r25, r25
    144e:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__floatsisf>
    1452:	a5 01       	movw	r20, r10
    1454:	94 01       	movw	r18, r8
    1456:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    145a:	4b 01       	movw	r8, r22
    145c:	5c 01       	movw	r10, r24
		if(flag)
    145e:	dd 20       	and	r13, r13
    1460:	79 f0       	breq	.+30     	; 0x1480 <_Z16string_to_doublePci+0xa2>
		{
			koto*=10;
    1462:	c8 01       	movw	r24, r16
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	00 0f       	add	r16, r16
    146a:	11 1f       	adc	r17, r17
    146c:	00 0f       	add	r16, r16
    146e:	11 1f       	adc	r17, r17
    1470:	00 0f       	add	r16, r16
    1472:	11 1f       	adc	r17, r17
    1474:	08 0f       	add	r16, r24
    1476:	19 1f       	adc	r17, r25
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <_Z16string_to_doublePci+0xa2>
	bool minus = 0;
	for(int i=0;i<id;i++)
	{
		if(s[i]=='-')
		{
			minus = 1;
    147a:	7c 2c       	mov	r7, r12
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <_Z16string_to_doublePci+0xa2>
			continue;
		}
		if(s[i]=='.')
		{
			flag = 1;
    147e:	dc 2c       	mov	r13, r12
{
	double d = 0;
	bool flag = 0;
	int koto = 1;
	bool minus = 0;
	for(int i=0;i<id;i++)
    1480:	ec 16       	cp	r14, r28
    1482:	fd 06       	cpc	r15, r29
    1484:	59 f6       	brne	.-106    	; 0x141c <_Z16string_to_doublePci+0x3e>
		if(flag)
		{
			koto*=10;
		}
	}
	d/= (double)koto;
    1486:	b8 01       	movw	r22, r16
    1488:	11 0f       	add	r17, r17
    148a:	88 0b       	sbc	r24, r24
    148c:	99 0b       	sbc	r25, r25
    148e:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__floatsisf>
    1492:	9b 01       	movw	r18, r22
    1494:	ac 01       	movw	r20, r24
    1496:	c5 01       	movw	r24, r10
    1498:	b4 01       	movw	r22, r8
    149a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
	if(minus)
    149e:	77 20       	and	r7, r7
    14a0:	29 f0       	breq	.+10     	; 0x14ac <_Z16string_to_doublePci+0xce>
	d= -d;
    14a2:	90 58       	subi	r25, 0x80	; 128
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <_Z16string_to_doublePci+0xce>
		if(flag)
		{
			koto*=10;
		}
	}
	d/= (double)koto;
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	cb 01       	movw	r24, r22
	if(minus)
	d= -d;
	return d;
}
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	df 90       	pop	r13
    14ba:	cf 90       	pop	r12
    14bc:	bf 90       	pop	r11
    14be:	af 90       	pop	r10
    14c0:	9f 90       	pop	r9
    14c2:	8f 90       	pop	r8
    14c4:	7f 90       	pop	r7
    14c6:	6f 90       	pop	r6
    14c8:	08 95       	ret

000014ca <_Z16double_num_inputi>:

double double_num_input(int pos)
{
    14ca:	2f 92       	push	r2
    14cc:	3f 92       	push	r3
    14ce:	4f 92       	push	r4
    14d0:	5f 92       	push	r5
    14d2:	6f 92       	push	r6
    14d4:	7f 92       	push	r7
    14d6:	8f 92       	push	r8
    14d8:	9f 92       	push	r9
    14da:	af 92       	push	r10
    14dc:	bf 92       	push	r11
    14de:	cf 92       	push	r12
    14e0:	df 92       	push	r13
    14e2:	ef 92       	push	r14
    14e4:	ff 92       	push	r15
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	60 97       	sbiw	r28, 0x10	; 16
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	8b 87       	std	Y+11, r24	; 0x0b
	//pos is position where u want to show the text
	char s[10];
	int id = 0;
	bool dot = 0;
    1500:	18 8a       	std	Y+16, r1	; 0x10

double double_num_input(int pos)
{
	//pos is position where u want to show the text
	char s[10];
	int id = 0;
    1502:	a1 2c       	mov	r10, r1
    1504:	b1 2c       	mov	r11, r1
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    1506:	88 24       	eor	r8, r8
    1508:	83 94       	inc	r8
    150a:	91 2c       	mov	r9, r1
						
					}
					else if(mat2[r][c-4][0]=='.' && dot==0)
					{
						dot = 1;
						s[id] = mat2[r][c-4][0];
    150c:	ce 01       	movw	r24, r28
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	2c 01       	movw	r4, r24
    1512:	8c 87       	std	Y+12, r24	; 0x0c
    1514:	5d 86       	std	Y+13, r5	; 0x0d
    1516:	0f 2e       	mov	r0, r31
    1518:	f0 e6       	ldi	r31, 0x60	; 96
    151a:	2f 2e       	mov	r2, r31
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	3f 2e       	mov	r3, r31
    1520:	f0 2d       	mov	r31, r0
	int id = 0;
	bool dot = 0;
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    1522:	68 94       	set
    1524:	66 24       	eor	r6, r6
    1526:	62 f8       	bld	r6, 2
    1528:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    152a:	c4 01       	movw	r24, r8
    152c:	06 2c       	mov	r0, r6
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <_Z16double_num_inputi+0x6a>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <_Z16double_num_inputi+0x66>
    1538:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    153a:	8b bb       	out	0x1b, r24	; 27
    153c:	f3 01       	movw	r30, r6
    153e:	e4 54       	subi	r30, 0x44	; 68
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	7f 01       	movw	r14, r30
    1544:	61 01       	movw	r12, r2
			for(int r=0;r<4;r++)
    1546:	00 e0       	ldi	r16, 0x00	; 0
    1548:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    154a:	86 b3       	in	r24, 0x16	; 22
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	00 2e       	mov	r0, r16
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <_Z16double_num_inputi+0x8c>
    1552:	95 95       	asr	r25
    1554:	87 95       	ror	r24
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <_Z16double_num_inputi+0x88>
    155a:	80 ff       	sbrs	r24, 0
    155c:	36 c0       	rjmp	.+108    	; 0x15ca <_Z16double_num_inputi+0x100>
				{
					if(mat[r][c-4]>='0' && mat[r][c-4]<='9')
    155e:	f7 01       	movw	r30, r14
    1560:	80 81       	ld	r24, Z
    1562:	90 ed       	ldi	r25, 0xD0	; 208
    1564:	98 0f       	add	r25, r24
    1566:	9a 30       	cpi	r25, 0x0A	; 10
    1568:	90 f4       	brcc	.+36     	; 0x158e <_Z16double_num_inputi+0xc4>
					{
						s[id] = mat[r][c-4];
    156a:	f2 01       	movw	r30, r4
    156c:	ea 0d       	add	r30, r10
    156e:	fb 1d       	adc	r31, r11
    1570:	80 83       	st	Z, r24
						id++;
    1572:	ff ef       	ldi	r31, 0xFF	; 255
    1574:	af 1a       	sub	r10, r31
    1576:	bf 0a       	sbc	r11, r31
						s[id] = 0;
    1578:	f2 01       	movw	r30, r4
    157a:	ea 0d       	add	r30, r10
    157c:	fb 1d       	adc	r31, r11
    157e:	10 82       	st	Z, r1
						DisplayText(1,pos , s);
    1580:	4c 85       	ldd	r20, Y+12	; 0x0c
    1582:	5d 85       	ldd	r21, Y+13	; 0x0d
    1584:	6b 85       	ldd	r22, Y+11	; 0x0b
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
    158c:	14 c0       	rjmp	.+40     	; 0x15b6 <_Z16double_num_inputi+0xec>
					}
					else if(mat[r][c-4]=='=')
    158e:	8d 33       	cpi	r24, 0x3D	; 61
    1590:	09 f4       	brne	.+2      	; 0x1594 <_Z16double_num_inputi+0xca>
    1592:	8e c0       	rjmp	.+284    	; 0x16b0 <_Z16double_num_inputi+0x1e6>
					{
						done = 1;
						break;
					}
					else if(id==0 && mat[r][c-4]=='-')
    1594:	a1 14       	cp	r10, r1
    1596:	b1 04       	cpc	r11, r1
    1598:	71 f4       	brne	.+28     	; 0x15b6 <_Z16double_num_inputi+0xec>
    159a:	8d 32       	cpi	r24, 0x2D	; 45
    159c:	61 f4       	brne	.+24     	; 0x15b6 <_Z16double_num_inputi+0xec>
					{
						s[id] = mat[r][c-4];
    159e:	2d e2       	ldi	r18, 0x2D	; 45
    15a0:	29 83       	std	Y+1, r18	; 0x01
						id++;
						s[id] = 0;
    15a2:	1a 82       	std	Y+2, r1	; 0x02
						DisplayText(1,pos , s);
    15a4:	4c 85       	ldd	r20, Y+12	; 0x0c
    15a6:	5d 85       	ldd	r21, Y+13	; 0x0d
    15a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						break;
					}
					else if(id==0 && mat[r][c-4]=='-')
					{
						s[id] = mat[r][c-4];
						id++;
    15b0:	aa 24       	eor	r10, r10
    15b2:	a3 94       	inc	r10
    15b4:	b1 2c       	mov	r11, r1
    15b6:	8f ef       	ldi	r24, 0xFF	; 255
    15b8:	94 e3       	ldi	r25, 0x34	; 52
    15ba:	ec e0       	ldi	r30, 0x0C	; 12
    15bc:	81 50       	subi	r24, 0x01	; 1
    15be:	90 40       	sbci	r25, 0x00	; 0
    15c0:	e0 40       	sbci	r30, 0x00	; 0
    15c2:	e1 f7       	brne	.-8      	; 0x15bc <_Z16double_num_inputi+0xf2>
    15c4:	00 c0       	rjmp	.+0      	; 0x15c6 <_Z16double_num_inputi+0xfc>
    15c6:	00 00       	nop
    15c8:	51 c0       	rjmp	.+162    	; 0x166c <_Z16double_num_inputi+0x1a2>
						s[id] = 0;
						DisplayText(1,pos , s);
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    15ca:	89 b3       	in	r24, 0x19	; 25
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	00 2e       	mov	r0, r16
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <_Z16double_num_inputi+0x10c>
    15d2:	95 95       	asr	r25
    15d4:	87 95       	ror	r24
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <_Z16double_num_inputi+0x108>
    15da:	80 ff       	sbrs	r24, 0
    15dc:	47 c0       	rjmp	.+142    	; 0x166c <_Z16double_num_inputi+0x1a2>
				{
					if(mat2[r][c-4][0]=='<')
    15de:	f6 01       	movw	r30, r12
    15e0:	80 81       	ld	r24, Z
    15e2:	8c 33       	cpi	r24, 0x3C	; 60
    15e4:	09 f5       	brne	.+66     	; 0x1628 <_Z16double_num_inputi+0x15e>
					{
						if(id==0){
    15e6:	a1 14       	cp	r10, r1
    15e8:	b1 04       	cpc	r11, r1
    15ea:	51 f4       	brne	.+20     	; 0x1600 <_Z16double_num_inputi+0x136>
    15ec:	ff ef       	ldi	r31, 0xFF	; 255
    15ee:	24 e3       	ldi	r18, 0x34	; 52
    15f0:	8c e0       	ldi	r24, 0x0C	; 12
    15f2:	f1 50       	subi	r31, 0x01	; 1
    15f4:	20 40       	sbci	r18, 0x00	; 0
    15f6:	80 40       	sbci	r24, 0x00	; 0
    15f8:	e1 f7       	brne	.-8      	; 0x15f2 <_Z16double_num_inputi+0x128>
    15fa:	00 c0       	rjmp	.+0      	; 0x15fc <_Z16double_num_inputi+0x132>
    15fc:	00 00       	nop
    15fe:	3a c0       	rjmp	.+116    	; 0x1674 <_Z16double_num_inputi+0x1aa>
							_delay_ms(500);
							continue;
						}
						s[id-1]=' ';
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	a9 1a       	sub	r10, r25
    1604:	b1 08       	sbc	r11, r1
    1606:	f2 01       	movw	r30, r4
    1608:	ea 0d       	add	r30, r10
    160a:	fb 1d       	adc	r31, r11
    160c:	ff 87       	std	Y+15, r31	; 0x0f
    160e:	ee 87       	std	Y+14, r30	; 0x0e
    1610:	20 e2       	ldi	r18, 0x20	; 32
    1612:	20 83       	st	Z, r18
						DisplayText(1,pos,s);
    1614:	4c 85       	ldd	r20, Y+12	; 0x0c
    1616:	5d 85       	ldd	r21, Y+13	; 0x0d
    1618:	6b 85       	ldd	r22, Y+11	; 0x0b
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						id--;
						s[id]=0;
    1620:	ee 85       	ldd	r30, Y+14	; 0x0e
    1622:	ff 85       	ldd	r31, Y+15	; 0x0f
    1624:	10 82       	st	Z, r1
    1626:	19 c0       	rjmp	.+50     	; 0x165a <_Z16double_num_inputi+0x190>
						
					}
					else if(mat2[r][c-4][0]=='.' && dot==0)
    1628:	8e 32       	cpi	r24, 0x2E	; 46
    162a:	b9 f4       	brne	.+46     	; 0x165a <_Z16double_num_inputi+0x190>
    162c:	f8 89       	ldd	r31, Y+16	; 0x10
    162e:	f1 11       	cpse	r31, r1
    1630:	14 c0       	rjmp	.+40     	; 0x165a <_Z16double_num_inputi+0x190>
					{
						dot = 1;
						s[id] = mat2[r][c-4][0];
    1632:	f2 01       	movw	r30, r4
    1634:	ea 0d       	add	r30, r10
    1636:	fb 1d       	adc	r31, r11
    1638:	2e e2       	ldi	r18, 0x2E	; 46
    163a:	20 83       	st	Z, r18
						id++;
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	a8 1a       	sub	r10, r24
    1640:	b8 0a       	sbc	r11, r24
						s[id] = 0;
    1642:	f2 01       	movw	r30, r4
    1644:	ea 0d       	add	r30, r10
    1646:	fb 1d       	adc	r31, r11
    1648:	10 82       	st	Z, r1
						DisplayText(1,pos , s);
    164a:	4c 85       	ldd	r20, Y+12	; 0x0c
    164c:	5d 85       	ldd	r21, Y+13	; 0x0d
    164e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						s[id]=0;
						
					}
					else if(mat2[r][c-4][0]=='.' && dot==0)
					{
						dot = 1;
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	98 8b       	std	Y+16, r25	; 0x10
    165a:	ef ef       	ldi	r30, 0xFF	; 255
    165c:	f4 e3       	ldi	r31, 0x34	; 52
    165e:	2c e0       	ldi	r18, 0x0C	; 12
    1660:	e1 50       	subi	r30, 0x01	; 1
    1662:	f0 40       	sbci	r31, 0x00	; 0
    1664:	20 40       	sbci	r18, 0x00	; 0
    1666:	e1 f7       	brne	.-8      	; 0x1660 <_Z16double_num_inputi+0x196>
    1668:	00 c0       	rjmp	.+0      	; 0x166a <_Z16double_num_inputi+0x1a0>
    166a:	00 00       	nop
						s[id] = 0;
						DisplayText(1,pos , s);
					}
					_delay_ms(500);
				}
				if (id==9)
    166c:	89 e0       	ldi	r24, 0x09	; 9
    166e:	a8 16       	cp	r10, r24
    1670:	b1 04       	cpc	r11, r1
    1672:	f1 f0       	breq	.+60     	; 0x16b0 <_Z16double_num_inputi+0x1e6>
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    1674:	0f 5f       	subi	r16, 0xFF	; 255
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	98 e1       	ldi	r25, 0x18	; 24
    167a:	c9 0e       	add	r12, r25
    167c:	d1 1c       	adc	r13, r1
    167e:	e4 e0       	ldi	r30, 0x04	; 4
    1680:	ee 0e       	add	r14, r30
    1682:	f1 1c       	adc	r15, r1
    1684:	04 30       	cpi	r16, 0x04	; 4
    1686:	11 05       	cpc	r17, r1
    1688:	09 f0       	breq	.+2      	; 0x168c <_Z16double_num_inputi+0x1c2>
    168a:	5f cf       	rjmp	.-322    	; 0x154a <_Z16double_num_inputi+0x80>
    168c:	8f e1       	ldi	r24, 0x1F	; 31
    168e:	9e e4       	ldi	r25, 0x4E	; 78
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <_Z16double_num_inputi+0x1c6>
    1694:	00 c0       	rjmp	.+0      	; 0x1696 <_Z16double_num_inputi+0x1cc>
    1696:	00 00       	nop
	int id = 0;
	bool dot = 0;
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    1698:	9f ef       	ldi	r25, 0xFF	; 255
    169a:	69 1a       	sub	r6, r25
    169c:	79 0a       	sbc	r7, r25
    169e:	e6 e0       	ldi	r30, 0x06	; 6
    16a0:	2e 0e       	add	r2, r30
    16a2:	31 1c       	adc	r3, r1
    16a4:	f8 e0       	ldi	r31, 0x08	; 8
    16a6:	6f 16       	cp	r6, r31
    16a8:	71 04       	cpc	r7, r1
    16aa:	09 f0       	breq	.+2      	; 0x16ae <_Z16double_num_inputi+0x1e4>
    16ac:	3e cf       	rjmp	.-388    	; 0x152a <_Z16double_num_inputi+0x60>
    16ae:	33 cf       	rjmp	.-410    	; 0x1516 <_Z16double_num_inputi+0x4c>
    16b0:	8f e1       	ldi	r24, 0x1F	; 31
    16b2:	9e e4       	ldi	r25, 0x4E	; 78
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <_Z16double_num_inputi+0x1ea>
    16b8:	00 c0       	rjmp	.+0      	; 0x16ba <_Z16double_num_inputi+0x1f0>
    16ba:	00 00       	nop
		{
			break;
		}
	}
	
	return string_to_double(s,id);
    16bc:	b5 01       	movw	r22, r10
    16be:	ce 01       	movw	r24, r28
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z16string_to_doublePci>
}
    16c6:	60 96       	adiw	r28, 0x10	; 16
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	9f 90       	pop	r9
    16e8:	8f 90       	pop	r8
    16ea:	7f 90       	pop	r7
    16ec:	6f 90       	pop	r6
    16ee:	5f 90       	pop	r5
    16f0:	4f 90       	pop	r4
    16f2:	3f 90       	pop	r3
    16f4:	2f 90       	pop	r2
    16f6:	08 95       	ret

000016f8 <_Z9show_textPci>:
void show_text(char txt[], int pos1)
{
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	65 97       	sbiw	r28, 0x15	; 21
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	6c 01       	movw	r12, r24
    171a:	7b 01       	movw	r14, r22
	if(pos1==1){
    171c:	61 30       	cpi	r22, 0x01	; 1
    171e:	71 05       	cpc	r23, r1
    1720:	11 f4       	brne	.+4      	; 0x1726 <_Z9show_textPci+0x2e>
		LCD_Clear();
    1722:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	}
	int len = strlen(txt);
    1726:	f6 01       	movw	r30, r12
    1728:	01 90       	ld	r0, Z+
    172a:	00 20       	and	r0, r0
    172c:	e9 f7       	brne	.-6      	; 0x1728 <_Z9show_textPci+0x30>
    172e:	31 97       	sbiw	r30, 0x01	; 1
    1730:	ec 19       	sub	r30, r12
    1732:	fd 09       	sbc	r31, r13
	char s[21];
	int cnt = pos1;
	int id  = 0;
	for(int i=0;i<len;i++)
    1734:	1e 16       	cp	r1, r30
    1736:	1f 06       	cpc	r1, r31
    1738:	94 f1       	brlt	.+100    	; 0x179e <_Z9show_textPci+0xa6>
    173a:	3a c0       	rjmp	.+116    	; 0x17b0 <_Z9show_textPci+0xb8>
	{
		s[id] = txt[i];
    173c:	d8 01       	movw	r26, r16
    173e:	9d 91       	ld	r25, X+
    1740:	8d 01       	movw	r16, r26
    1742:	e1 e0       	ldi	r30, 0x01	; 1
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	ec 0f       	add	r30, r28
    1748:	fd 1f       	adc	r31, r29
    174a:	e2 0f       	add	r30, r18
    174c:	f3 1f       	adc	r31, r19
    174e:	90 83       	st	Z, r25
		id++;
    1750:	2f 5f       	subi	r18, 0xFF	; 255
    1752:	3f 4f       	sbci	r19, 0xFF	; 255
		if(id==20)
    1754:	24 31       	cpi	r18, 0x14	; 20
    1756:	31 05       	cpc	r19, r1
    1758:	69 f4       	brne	.+26     	; 0x1774 <_Z9show_textPci+0x7c>
		{
			s[id] = 0;
    175a:	1d 8a       	std	Y+21, r1	; 0x15
			DisplayText(1,cnt,s);
    175c:	ae 01       	movw	r20, r28
    175e:	4f 5f       	subi	r20, 0xFF	; 255
    1760:	5f 4f       	sbci	r21, 0xFF	; 255
    1762:	6e 2d       	mov	r22, r14
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
			id = 0;
			cnt += 12;
    176a:	bc e0       	ldi	r27, 0x0C	; 12
    176c:	eb 0e       	add	r14, r27
    176e:	f1 1c       	adc	r15, r1
		id++;
		if(id==20)
		{
			s[id] = 0;
			DisplayText(1,cnt,s);
			id = 0;
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
	}
	int len = strlen(txt);
	char s[21];
	int cnt = pos1;
	int id  = 0;
	for(int i=0;i<len;i++)
    1774:	c0 16       	cp	r12, r16
    1776:	d1 06       	cpc	r13, r17
    1778:	09 f7       	brne	.-62     	; 0x173c <_Z9show_textPci+0x44>
			id = 0;
			cnt += 12;
		}
		
	}
	if(id)
    177a:	21 15       	cp	r18, r1
    177c:	31 05       	cpc	r19, r1
    177e:	c1 f0       	breq	.+48     	; 0x17b0 <_Z9show_textPci+0xb8>
	{
		s[id] = 0;
    1780:	e1 e0       	ldi	r30, 0x01	; 1
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	ec 0f       	add	r30, r28
    1786:	fd 1f       	adc	r31, r29
    1788:	e2 0f       	add	r30, r18
    178a:	f3 1f       	adc	r31, r19
    178c:	10 82       	st	Z, r1
		DisplayText(1,cnt,s);
    178e:	ae 01       	movw	r20, r28
    1790:	4f 5f       	subi	r20, 0xFF	; 255
    1792:	5f 4f       	sbci	r21, 0xFF	; 255
    1794:	6e 2d       	mov	r22, r14
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	}

    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <_Z9show_textPci+0xb8>
	char s[21];
	int cnt = pos1;
	int id  = 0;
	for(int i=0;i<len;i++)
	{
		s[id] = txt[i];
    179e:	d6 01       	movw	r26, r12
    17a0:	8d 91       	ld	r24, X+
    17a2:	8d 01       	movw	r16, r26
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	ce 0e       	add	r12, r30
    17a8:	df 1e       	adc	r13, r31
		id++;
    17aa:	21 e0       	ldi	r18, 0x01	; 1
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	e2 cf       	rjmp	.-60     	; 0x1774 <_Z9show_textPci+0x7c>
	{
		s[id] = 0;
		DisplayText(1,cnt,s);
	}

    17b0:	65 96       	adiw	r28, 0x15	; 21
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	08 95       	ret

000017ce <_Z10gauss_algoii>:
double ans[3];
double a[3][4];
int where[3];

int gauss_algo (int n, int m)
{
    17ce:	2f 92       	push	r2
    17d0:	3f 92       	push	r3
    17d2:	4f 92       	push	r4
    17d4:	5f 92       	push	r5
    17d6:	6f 92       	push	r6
    17d8:	7f 92       	push	r7
    17da:	8f 92       	push	r8
    17dc:	9f 92       	push	r9
    17de:	af 92       	push	r10
    17e0:	bf 92       	push	r11
    17e2:	cf 92       	push	r12
    17e4:	df 92       	push	r13
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	2e 97       	sbiw	r28, 0x0e	; 14
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	2c 01       	movw	r4, r24
    1804:	1b 01       	movw	r2, r22
	//returns 1 if a single solution
	//returns 2 if infinite solution
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-5;
	for(int i=0; i<m; i++)
    1806:	16 16       	cp	r1, r22
    1808:	17 06       	cpc	r1, r23
    180a:	0c f0       	brlt	.+2      	; 0x180e <_Z10gauss_algoii+0x40>
    180c:	32 c1       	rjmp	.+612    	; 0x1a72 <_Z10gauss_algoii+0x2a4>
		where[i] = -1;
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	9f ef       	ldi	r25, 0xFF	; 255
    1812:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <__data_end+0x1>
    1816:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <__data_end>
	//returns 1 if a single solution
	//returns 2 if infinite solution
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-5;
	for(int i=0; i<m; i++)
    181a:	62 30       	cpi	r22, 0x02	; 2
    181c:	71 05       	cpc	r23, r1
    181e:	0c f4       	brge	.+2      	; 0x1822 <_Z10gauss_algoii+0x54>
    1820:	17 c2       	rjmp	.+1070   	; 0x1c50 <_Z10gauss_algoii+0x482>
		where[i] = -1;
    1822:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <__data_end+0x3>
    1826:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <__data_end+0x2>
	//returns 1 if a single solution
	//returns 2 if infinite solution
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-5;
	for(int i=0; i<m; i++)
    182a:	63 30       	cpi	r22, 0x03	; 3
    182c:	71 05       	cpc	r23, r1
    182e:	0c f4       	brge	.+2      	; 0x1832 <_Z10gauss_algoii+0x64>
    1830:	0f c2       	rjmp	.+1054   	; 0x1c50 <_Z10gauss_algoii+0x482>
		where[i] = -1;
    1832:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <__data_end+0x5>
    1836:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <__data_end+0x4>
    183a:	0a c2       	rjmp	.+1044   	; 0x1c50 <_Z10gauss_algoii+0x482>
    183c:	89 85       	ldd	r24, Y+9	; 0x09
    183e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1840:	04 96       	adiw	r24, 0x04	; 4
    1842:	9a 87       	std	Y+10, r25	; 0x0a
    1844:	89 87       	std	Y+9, r24	; 0x09
    1846:	eb 85       	ldd	r30, Y+11	; 0x0b
    1848:	fc 85       	ldd	r31, Y+12	; 0x0c
    184a:	32 96       	adiw	r30, 0x02	; 2
    184c:	fc 87       	std	Y+12, r31	; 0x0c
    184e:	eb 87       	std	Y+11, r30	; 0x0b
	for (int col=0, row=0; col<m && row<n; ++col)
    1850:	c4 14       	cp	r12, r4
    1852:	d5 04       	cpc	r13, r5
    1854:	0c f0       	brlt	.+2      	; 0x1858 <_Z10gauss_algoii+0x8a>
    1856:	10 c2       	rjmp	.+1056   	; 0x1c78 <_Z10gauss_algoii+0x4aa>
    1858:	56 01       	movw	r10, r12
    185a:	c6 01       	movw	r24, r12
	{
		int sel = row;
		for (int i=row; i<n; ++i)
    185c:	84 15       	cp	r24, r4
    185e:	95 05       	cpc	r25, r5
    1860:	0c f0       	brlt	.+2      	; 0x1864 <_Z10gauss_algoii+0x96>
    1862:	4a c0       	rjmp	.+148    	; 0x18f8 <_Z10gauss_algoii+0x12a>
    1864:	96 01       	movw	r18, r12
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	22 0f       	add	r18, r18
    186c:	33 1f       	adc	r19, r19
    186e:	28 0d       	add	r18, r8
    1870:	39 1d       	adc	r19, r9
    1872:	22 0f       	add	r18, r18
    1874:	33 1f       	adc	r19, r19
    1876:	22 0f       	add	r18, r18
    1878:	33 1f       	adc	r19, r19
    187a:	20 50       	subi	r18, 0x00	; 0
    187c:	3d 4f       	sbci	r19, 0xFD	; 253
    187e:	86 01       	movw	r16, r12
    1880:	36 01       	movw	r6, r12
    1882:	3a 83       	std	Y+2, r19	; 0x02
    1884:	29 83       	std	Y+1, r18	; 0x01
		if (abs (a[i][col]) > abs (a[sel][col]))
    1886:	e9 81       	ldd	r30, Y+1	; 0x01
    1888:	fa 81       	ldd	r31, Y+2	; 0x02
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixsfsi>
    1896:	7b 01       	movw	r14, r22
    1898:	77 23       	and	r23, r23
    189a:	24 f4       	brge	.+8      	; 0x18a4 <_Z10gauss_algoii+0xd6>
    189c:	ee 24       	eor	r14, r14
    189e:	ff 24       	eor	r15, r15
    18a0:	e6 1a       	sub	r14, r22
    18a2:	f7 0a       	sbc	r15, r23
    18a4:	f3 01       	movw	r30, r6
    18a6:	ee 0f       	add	r30, r30
    18a8:	ff 1f       	adc	r31, r31
    18aa:	ee 0f       	add	r30, r30
    18ac:	ff 1f       	adc	r31, r31
    18ae:	e8 0d       	add	r30, r8
    18b0:	f9 1d       	adc	r31, r9
    18b2:	ee 0f       	add	r30, r30
    18b4:	ff 1f       	adc	r31, r31
    18b6:	ee 0f       	add	r30, r30
    18b8:	ff 1f       	adc	r31, r31
    18ba:	e0 50       	subi	r30, 0x00	; 0
    18bc:	fd 4f       	sbci	r31, 0xFD	; 253
    18be:	60 81       	ld	r22, Z
    18c0:	71 81       	ldd	r23, Z+1	; 0x01
    18c2:	82 81       	ldd	r24, Z+2	; 0x02
    18c4:	93 81       	ldd	r25, Z+3	; 0x03
    18c6:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixsfsi>
    18ca:	9b 01       	movw	r18, r22
    18cc:	77 23       	and	r23, r23
    18ce:	24 f4       	brge	.+8      	; 0x18d8 <_Z10gauss_algoii+0x10a>
    18d0:	22 27       	eor	r18, r18
    18d2:	33 27       	eor	r19, r19
    18d4:	26 1b       	sub	r18, r22
    18d6:	37 0b       	sbc	r19, r23
    18d8:	2e 15       	cp	r18, r14
    18da:	3f 05       	cpc	r19, r15
    18dc:	0c f4       	brge	.+2      	; 0x18e0 <_Z10gauss_algoii+0x112>
    18de:	38 01       	movw	r6, r16
	for(int i=0; i<m; i++)
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
	{
		int sel = row;
		for (int i=row; i<n; ++i)
    18e0:	0f 5f       	subi	r16, 0xFF	; 255
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	29 81       	ldd	r18, Y+1	; 0x01
    18e6:	3a 81       	ldd	r19, Y+2	; 0x02
    18e8:	20 5f       	subi	r18, 0xF0	; 240
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	3a 83       	std	Y+2, r19	; 0x02
    18ee:	29 83       	std	Y+1, r18	; 0x01
    18f0:	04 15       	cp	r16, r4
    18f2:	15 05       	cpc	r17, r5
    18f4:	44 f2       	brlt	.-112    	; 0x1886 <_Z10gauss_algoii+0xb8>
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <_Z10gauss_algoii+0x12c>
    18f8:	36 01       	movw	r6, r12
		if (abs (a[i][col]) > abs (a[sel][col]))
		sel = i;
		if (abs (a[sel][col]) < EPS)
    18fa:	f3 01       	movw	r30, r6
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	e8 0d       	add	r30, r8
    1906:	f9 1d       	adc	r31, r9
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	ee 0f       	add	r30, r30
    190e:	ff 1f       	adc	r31, r31
    1910:	e0 50       	subi	r30, 0x00	; 0
    1912:	fd 4f       	sbci	r31, 0xFD	; 253
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixsfsi>
    1920:	9b 01       	movw	r18, r22
    1922:	77 23       	and	r23, r23
    1924:	24 f4       	brge	.+8      	; 0x192e <_Z10gauss_algoii+0x160>
    1926:	22 27       	eor	r18, r18
    1928:	33 27       	eor	r19, r19
    192a:	26 1b       	sub	r18, r22
    192c:	37 0b       	sbc	r19, r23
    192e:	b9 01       	movw	r22, r18
    1930:	33 0f       	add	r19, r19
    1932:	88 0b       	sbc	r24, r24
    1934:	99 0b       	sbc	r25, r25
    1936:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__floatsisf>
    193a:	2c ea       	ldi	r18, 0xAC	; 172
    193c:	35 ec       	ldi	r19, 0xC5	; 197
    193e:	47 e2       	ldi	r20, 0x27	; 39
    1940:	57 e3       	ldi	r21, 0x37	; 55
    1942:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    1946:	88 23       	and	r24, r24
    1948:	0c f4       	brge	.+2      	; 0x194c <_Z10gauss_algoii+0x17e>
    194a:	82 c0       	rjmp	.+260    	; 0x1a50 <_Z10gauss_algoii+0x282>
		continue;
		for (int i=col; i<=m; ++i)
    194c:	28 14       	cp	r2, r8
    194e:	39 04       	cpc	r3, r9
    1950:	0c f4       	brge	.+2      	; 0x1954 <_Z10gauss_algoii+0x186>
    1952:	98 c1       	rjmp	.+816    	; 0x1c84 <_Z10gauss_algoii+0x4b6>
    1954:	f3 01       	movw	r30, r6
    1956:	ee 0f       	add	r30, r30
    1958:	ff 1f       	adc	r31, r31
    195a:	ee 0f       	add	r30, r30
    195c:	ff 1f       	adc	r31, r31
    195e:	e8 0d       	add	r30, r8
    1960:	f9 1d       	adc	r31, r9
    1962:	ee 0f       	add	r30, r30
    1964:	ff 1f       	adc	r31, r31
    1966:	ee 0f       	add	r30, r30
    1968:	ff 1f       	adc	r31, r31
    196a:	e0 50       	subi	r30, 0x00	; 0
    196c:	fd 4f       	sbci	r31, 0xFD	; 253
    196e:	d5 01       	movw	r26, r10
    1970:	aa 0f       	add	r26, r26
    1972:	bb 1f       	adc	r27, r27
    1974:	aa 0f       	add	r26, r26
    1976:	bb 1f       	adc	r27, r27
    1978:	a8 0d       	add	r26, r8
    197a:	b9 1d       	adc	r27, r9
    197c:	aa 0f       	add	r26, r26
    197e:	bb 1f       	adc	r27, r27
    1980:	aa 0f       	add	r26, r26
    1982:	bb 1f       	adc	r27, r27
    1984:	a0 50       	subi	r26, 0x00	; 0
    1986:	bd 4f       	sbci	r27, 0xFD	; 253
    1988:	c4 01       	movw	r24, r8
		{
			double tmp = a[sel][i];
    198a:	40 81       	ld	r20, Z
    198c:	51 81       	ldd	r21, Z+1	; 0x01
    198e:	62 81       	ldd	r22, Z+2	; 0x02
    1990:	73 81       	ldd	r23, Z+3	; 0x03
			a[sel][i] = a[row][i];
    1992:	0d 91       	ld	r16, X+
    1994:	1d 91       	ld	r17, X+
    1996:	2d 91       	ld	r18, X+
    1998:	3c 91       	ld	r19, X
    199a:	13 97       	sbiw	r26, 0x03	; 3
    199c:	01 93       	st	Z+, r16
    199e:	11 93       	st	Z+, r17
    19a0:	21 93       	st	Z+, r18
    19a2:	31 93       	st	Z+, r19
			a[row][i] = tmp;
    19a4:	4d 93       	st	X+, r20
    19a6:	5d 93       	st	X+, r21
    19a8:	6d 93       	st	X+, r22
    19aa:	7d 93       	st	X+, r23
		for (int i=row; i<n; ++i)
		if (abs (a[i][col]) > abs (a[sel][col]))
		sel = i;
		if (abs (a[sel][col]) < EPS)
		continue;
		for (int i=col; i<=m; ++i)
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	28 16       	cp	r2, r24
    19b0:	39 06       	cpc	r3, r25
    19b2:	5c f7       	brge	.-42     	; 0x198a <_Z10gauss_algoii+0x1bc>
    19b4:	67 c1       	rjmp	.+718    	; 0x1c84 <_Z10gauss_algoii+0x4b6>
			a[sel][i] = a[row][i];
			a[row][i] = tmp;
		}
		where[col] = row;
		for (int i=0; i<n; ++i)
		if (i != row)
    19b6:	ae 14       	cp	r10, r14
    19b8:	bf 04       	cpc	r11, r15
    19ba:	e1 f1       	breq	.+120    	; 0x1a34 <_Z10gauss_algoii+0x266>
		{
			double c = a[i][col] / a[row][col];
    19bc:	ed 81       	ldd	r30, Y+5	; 0x05
    19be:	fe 81       	ldd	r31, Y+6	; 0x06
    19c0:	20 81       	ld	r18, Z
    19c2:	31 81       	ldd	r19, Z+1	; 0x01
    19c4:	42 81       	ldd	r20, Z+2	; 0x02
    19c6:	53 81       	ldd	r21, Z+3	; 0x03
    19c8:	f6 01       	movw	r30, r12
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    19d6:	69 83       	std	Y+1, r22	; 0x01
    19d8:	7a 83       	std	Y+2, r23	; 0x02
    19da:	8b 83       	std	Y+3, r24	; 0x03
    19dc:	9c 83       	std	Y+4, r25	; 0x04
			for (int j=col; j<=m; ++j)
    19de:	28 14       	cp	r2, r8
    19e0:	39 04       	cpc	r3, r9
    19e2:	44 f1       	brlt	.+80     	; 0x1a34 <_Z10gauss_algoii+0x266>
    19e4:	de 86       	std	Y+14, r13	; 0x0e
    19e6:	cd 86       	std	Y+13, r12	; 0x0d
    19e8:	6f 80       	ldd	r6, Y+7	; 0x07
    19ea:	78 84       	ldd	r7, Y+8	; 0x08
    19ec:	84 01       	movw	r16, r8
			a[i][j] -= a[row][j] * c;
    19ee:	f3 01       	movw	r30, r6
    19f0:	21 91       	ld	r18, Z+
    19f2:	31 91       	ld	r19, Z+
    19f4:	41 91       	ld	r20, Z+
    19f6:	51 91       	ld	r21, Z+
    19f8:	3f 01       	movw	r6, r30
    19fa:	69 81       	ldd	r22, Y+1	; 0x01
    19fc:	7a 81       	ldd	r23, Y+2	; 0x02
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    1a06:	9b 01       	movw	r18, r22
    1a08:	ac 01       	movw	r20, r24
    1a0a:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a0c:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    1a1a:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a1c:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a1e:	61 93       	st	Z+, r22
    1a20:	71 93       	st	Z+, r23
    1a22:	81 93       	st	Z+, r24
    1a24:	91 93       	st	Z+, r25
    1a26:	fe 87       	std	Y+14, r31	; 0x0e
    1a28:	ed 87       	std	Y+13, r30	; 0x0d
		where[col] = row;
		for (int i=0; i<n; ++i)
		if (i != row)
		{
			double c = a[i][col] / a[row][col];
			for (int j=col; j<=m; ++j)
    1a2a:	0f 5f       	subi	r16, 0xFF	; 255
    1a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2e:	20 16       	cp	r2, r16
    1a30:	31 06       	cpc	r3, r17
    1a32:	ec f6       	brge	.-70     	; 0x19ee <_Z10gauss_algoii+0x220>
			double tmp = a[sel][i];
			a[sel][i] = a[row][i];
			a[row][i] = tmp;
		}
		where[col] = row;
		for (int i=0; i<n; ++i)
    1a34:	ff ef       	ldi	r31, 0xFF	; 255
    1a36:	ef 1a       	sub	r14, r31
    1a38:	ff 0a       	sbc	r15, r31
    1a3a:	20 e1       	ldi	r18, 0x10	; 16
    1a3c:	c2 0e       	add	r12, r18
    1a3e:	d1 1c       	adc	r13, r1
    1a40:	4e 14       	cp	r4, r14
    1a42:	5f 04       	cpc	r5, r15
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <_Z10gauss_algoii+0x27a>
    1a46:	b7 cf       	rjmp	.-146    	; 0x19b6 <_Z10gauss_algoii+0x1e8>
		{
			double c = a[i][col] / a[row][col];
			for (int j=col; j<=m; ++j)
			a[i][j] -= a[row][j] * c;
		}
		++row;
    1a48:	65 01       	movw	r12, r10
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	c3 1a       	sub	r12, r19
    1a4e:	d3 0a       	sbc	r13, r19
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-5;
	for(int i=0; i<m; i++)
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
    1a50:	4f ef       	ldi	r20, 0xFF	; 255
    1a52:	84 1a       	sub	r8, r20
    1a54:	94 0a       	sbc	r9, r20
    1a56:	28 14       	cp	r2, r8
    1a58:	39 04       	cpc	r3, r9
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <_Z10gauss_algoii+0x290>
    1a5c:	ef ce       	rjmp	.-546    	; 0x183c <_Z10gauss_algoii+0x6e>
    1a5e:	0c c1       	rjmp	.+536    	; 0x1c78 <_Z10gauss_algoii+0x4aa>
		}
		++row;
	}

	for(int i=0; i<m; i++)
	ans[i] =0;
    1a60:	11 92       	st	Z+, r1
    1a62:	11 92       	st	Z+, r1
    1a64:	11 92       	st	Z+, r1
    1a66:	11 92       	st	Z+, r1
			a[i][j] -= a[row][j] * c;
		}
		++row;
	}

	for(int i=0; i<m; i++)
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	82 15       	cp	r24, r2
    1a6c:	93 05       	cpc	r25, r3
    1a6e:	c4 f3       	brlt	.-16     	; 0x1a60 <_Z10gauss_algoii+0x292>
    1a70:	05 c0       	rjmp	.+10     	; 0x1a7c <_Z10gauss_algoii+0x2ae>
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
    1a72:	18 16       	cp	r1, r24
    1a74:	19 06       	cpc	r1, r25
    1a76:	0c f4       	brge	.+2      	; 0x1a7a <_Z10gauss_algoii+0x2ac>
    1a78:	44 c0       	rjmp	.+136    	; 0x1b02 <_Z10gauss_algoii+0x334>
    1a7a:	db c0       	rjmp	.+438    	; 0x1c32 <_Z10gauss_algoii+0x464>
    1a7c:	0f 2e       	mov	r0, r31
    1a7e:	fa ef       	ldi	r31, 0xFA	; 250
    1a80:	ef 2e       	mov	r14, r31
    1a82:	f2 e0       	ldi	r31, 0x02	; 2
    1a84:	ff 2e       	mov	r15, r31
    1a86:	f0 2d       	mov	r31, r0
			a[i][j] -= a[row][j] * c;
		}
		++row;
	}

	for(int i=0; i<m; i++)
    1a88:	1a 82       	std	Y+2, r1	; 0x02
    1a8a:	19 82       	std	Y+1, r1	; 0x01
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
    1a8c:	f7 01       	movw	r30, r14
    1a8e:	81 91       	ld	r24, Z+
    1a90:	91 91       	ld	r25, Z+
    1a92:	7f 01       	movw	r14, r30
    1a94:	8f 3f       	cpi	r24, 0xFF	; 255
    1a96:	ff ef       	ldi	r31, 0xFF	; 255
    1a98:	9f 07       	cpc	r25, r31
    1a9a:	39 f1       	breq	.+78     	; 0x1aea <_Z10gauss_algoii+0x31c>
	ans[i] = a[where[i]][m] / a[where[i]][i];
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	a2 0d       	add	r26, r2
    1aa8:	b3 1d       	adc	r27, r3
    1aaa:	aa 0f       	add	r26, r26
    1aac:	bb 1f       	adc	r27, r27
    1aae:	aa 0f       	add	r26, r26
    1ab0:	bb 1f       	adc	r27, r27
    1ab2:	a0 50       	subi	r26, 0x00	; 0
    1ab4:	bd 4f       	sbci	r27, 0xFD	; 253
    1ab6:	29 81       	ldd	r18, Y+1	; 0x01
    1ab8:	3a 81       	ldd	r19, Y+2	; 0x02
    1aba:	82 0f       	add	r24, r18
    1abc:	93 1f       	adc	r25, r19
    1abe:	fc 01       	movw	r30, r24
    1ac0:	ee 0f       	add	r30, r30
    1ac2:	ff 1f       	adc	r31, r31
    1ac4:	ee 0f       	add	r30, r30
    1ac6:	ff 1f       	adc	r31, r31
    1ac8:	e0 50       	subi	r30, 0x00	; 0
    1aca:	fd 4f       	sbci	r31, 0xFD	; 253
    1acc:	20 81       	ld	r18, Z
    1ace:	31 81       	ldd	r19, Z+1	; 0x01
    1ad0:	42 81       	ldd	r20, Z+2	; 0x02
    1ad2:	53 81       	ldd	r21, Z+3	; 0x03
    1ad4:	6d 91       	ld	r22, X+
    1ad6:	7d 91       	ld	r23, X+
    1ad8:	8d 91       	ld	r24, X+
    1ada:	9c 91       	ld	r25, X
    1adc:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	60 83       	st	Z, r22
    1ae4:	71 83       	std	Z+1, r23	; 0x01
    1ae6:	82 83       	std	Z+2, r24	; 0x02
    1ae8:	93 83       	std	Z+3, r25	; 0x03
		++row;
	}

	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
    1aea:	29 81       	ldd	r18, Y+1	; 0x01
    1aec:	3a 81       	ldd	r19, Y+2	; 0x02
    1aee:	2f 5f       	subi	r18, 0xFF	; 255
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	3a 83       	std	Y+2, r19	; 0x02
    1af4:	29 83       	std	Y+1, r18	; 0x01
    1af6:	0c 5f       	subi	r16, 0xFC	; 252
    1af8:	1f 4f       	sbci	r17, 0xFF	; 255
    1afa:	22 15       	cp	r18, r2
    1afc:	33 05       	cpc	r19, r3
    1afe:	34 f2       	brlt	.-116    	; 0x1a8c <_Z10gauss_algoii+0x2be>
    1b00:	dc c0       	rjmp	.+440    	; 0x1cba <_Z10gauss_algoii+0x4ec>
    1b02:	c1 01       	movw	r24, r2
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	e0 50       	subi	r30, 0x00	; 0
    1b10:	fd 4f       	sbci	r31, 0xFD	; 253
    1b12:	4f 01       	movw	r8, r30
    1b14:	00 e0       	ldi	r16, 0x00	; 0
    1b16:	13 e0       	ldi	r17, 0x03	; 3
    1b18:	9c 01       	movw	r18, r24
    1b1a:	20 5d       	subi	r18, 0xD0	; 208
    1b1c:	3c 4f       	sbci	r19, 0xFC	; 252
    1b1e:	59 01       	movw	r10, r18
			a[i][j] -= a[row][j] * c;
		}
		++row;
	}

	for(int i=0; i<m; i++)
    1b20:	61 2c       	mov	r6, r1
    1b22:	71 2c       	mov	r7, r1
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
    1b24:	78 01       	movw	r14, r16
    1b26:	5e 82       	std	Y+6, r5	; 0x06
    1b28:	4d 82       	std	Y+5, r4	; 0x05
    1b2a:	3a 82       	std	Y+2, r3	; 0x02
    1b2c:	29 82       	std	Y+1, r2	; 0x01
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	18 16       	cp	r1, r24
    1b34:	19 06       	cpc	r1, r25
    1b36:	44 f0       	brlt	.+16     	; 0x1b48 <_Z10gauss_algoii+0x37a>
    1b38:	2f c0       	rjmp	.+94     	; 0x1b98 <_Z10gauss_algoii+0x3ca>
    1b3a:	29 80       	ldd	r2, Y+1	; 0x01
    1b3c:	3a 80       	ldd	r3, Y+2	; 0x02
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
    1b3e:	12 14       	cp	r1, r2
    1b40:	13 04       	cpc	r1, r3
    1b42:	0c f4       	brge	.+2      	; 0x1b46 <_Z10gauss_algoii+0x378>
    1b44:	5f c0       	rjmp	.+190    	; 0x1c04 <_Z10gauss_algoii+0x436>
    1b46:	78 c0       	rjmp	.+240    	; 0x1c38 <_Z10gauss_algoii+0x46a>
    1b48:	00 e3       	ldi	r16, 0x30	; 48
    1b4a:	13 e0       	ldi	r17, 0x03	; 3
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
    1b4c:	f8 86       	std	Y+8, r15	; 0x08
    1b4e:	ef 82       	std	Y+7, r14	; 0x07
    1b50:	31 2c       	mov	r3, r1
    1b52:	51 2c       	mov	r5, r1
    1b54:	c1 2c       	mov	r12, r1
    1b56:	d1 2c       	mov	r13, r1
		sum += ans[j] * a[i][j];
    1b58:	f8 01       	movw	r30, r16
    1b5a:	61 91       	ld	r22, Z+
    1b5c:	71 91       	ld	r23, Z+
    1b5e:	81 91       	ld	r24, Z+
    1b60:	91 91       	ld	r25, Z+
    1b62:	8f 01       	movw	r16, r30
    1b64:	ef 81       	ldd	r30, Y+7	; 0x07
    1b66:	f8 85       	ldd	r31, Y+8	; 0x08
    1b68:	21 91       	ld	r18, Z+
    1b6a:	31 91       	ld	r19, Z+
    1b6c:	41 91       	ld	r20, Z+
    1b6e:	51 91       	ld	r21, Z+
    1b70:	f8 87       	std	Y+8, r31	; 0x08
    1b72:	ef 83       	std	Y+7, r30	; 0x07
    1b74:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    1b78:	9b 01       	movw	r18, r22
    1b7a:	ac 01       	movw	r20, r24
    1b7c:	63 2d       	mov	r22, r3
    1b7e:	75 2d       	mov	r23, r5
    1b80:	8c 2d       	mov	r24, r12
    1b82:	9d 2d       	mov	r25, r13
    1b84:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    1b88:	36 2e       	mov	r3, r22
    1b8a:	57 2e       	mov	r5, r23
    1b8c:	c8 2e       	mov	r12, r24
    1b8e:	d9 2e       	mov	r13, r25
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
    1b90:	a0 16       	cp	r10, r16
    1b92:	b1 06       	cpc	r11, r17
    1b94:	09 f7       	brne	.-62     	; 0x1b58 <_Z10gauss_algoii+0x38a>
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <_Z10gauss_algoii+0x3d2>
    1b98:	31 2c       	mov	r3, r1
    1b9a:	51 2c       	mov	r5, r1
    1b9c:	c1 2c       	mov	r12, r1
    1b9e:	d1 2c       	mov	r13, r1
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
    1ba0:	f4 01       	movw	r30, r8
    1ba2:	20 81       	ld	r18, Z
    1ba4:	31 81       	ldd	r19, Z+1	; 0x01
    1ba6:	42 81       	ldd	r20, Z+2	; 0x02
    1ba8:	53 81       	ldd	r21, Z+3	; 0x03
    1baa:	63 2d       	mov	r22, r3
    1bac:	75 2d       	mov	r23, r5
    1bae:	8c 2d       	mov	r24, r12
    1bb0:	9d 2d       	mov	r25, r13
    1bb2:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    1bb6:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixsfsi>
    1bba:	9b 01       	movw	r18, r22
    1bbc:	77 23       	and	r23, r23
    1bbe:	24 f4       	brge	.+8      	; 0x1bc8 <_Z10gauss_algoii+0x3fa>
    1bc0:	22 27       	eor	r18, r18
    1bc2:	33 27       	eor	r19, r19
    1bc4:	26 1b       	sub	r18, r22
    1bc6:	37 0b       	sbc	r19, r23
    1bc8:	b9 01       	movw	r22, r18
    1bca:	33 0f       	add	r19, r19
    1bcc:	88 0b       	sbc	r24, r24
    1bce:	99 0b       	sbc	r25, r25
    1bd0:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__floatsisf>
    1bd4:	2c ea       	ldi	r18, 0xAC	; 172
    1bd6:	35 ec       	ldi	r19, 0xC5	; 197
    1bd8:	47 e2       	ldi	r20, 0x27	; 39
    1bda:	57 e3       	ldi	r21, 0x37	; 55
    1bdc:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <__gesf2>
    1be0:	18 16       	cp	r1, r24
    1be2:	6c f1       	brlt	.+90     	; 0x1c3e <_Z10gauss_algoii+0x470>
	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
    1be4:	ff ef       	ldi	r31, 0xFF	; 255
    1be6:	6f 1a       	sub	r6, r31
    1be8:	7f 0a       	sbc	r7, r31
    1bea:	20 e1       	ldi	r18, 0x10	; 16
    1bec:	82 0e       	add	r8, r18
    1bee:	91 1c       	adc	r9, r1
    1bf0:	30 e1       	ldi	r19, 0x10	; 16
    1bf2:	e3 0e       	add	r14, r19
    1bf4:	f1 1c       	adc	r15, r1
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	68 16       	cp	r6, r24
    1bfc:	79 06       	cpc	r7, r25
    1bfe:	0c f4       	brge	.+2      	; 0x1c02 <_Z10gauss_algoii+0x434>
    1c00:	96 cf       	rjmp	.-212    	; 0x1b2e <_Z10gauss_algoii+0x360>
    1c02:	9b cf       	rjmp	.-202    	; 0x1b3a <_Z10gauss_algoii+0x36c>
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
		if (where[i] == -1){
    1c04:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <__data_end>
    1c08:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <__data_end+0x1>
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	d1 f0       	breq	.+52     	; 0x1c44 <_Z10gauss_algoii+0x476>
    1c10:	ec ef       	ldi	r30, 0xFC	; 252
    1c12:	f2 e0       	ldi	r31, 0x02	; 2
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	05 c0       	rjmp	.+10     	; 0x1c24 <_Z10gauss_algoii+0x456>
    1c1a:	21 91       	ld	r18, Z+
    1c1c:	31 91       	ld	r19, Z+
    1c1e:	2f 3f       	cpi	r18, 0xFF	; 255
    1c20:	3f 4f       	sbci	r19, 0xFF	; 255
    1c22:	99 f0       	breq	.+38     	; 0x1c4a <_Z10gauss_algoii+0x47c>
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
    1c24:	01 96       	adiw	r24, 0x01	; 1
    1c26:	82 15       	cp	r24, r2
    1c28:	93 05       	cpc	r25, r3
    1c2a:	bc f3       	brlt	.-18     	; 0x1c1a <_Z10gauss_algoii+0x44c>
		if (where[i] == -1){
			return 2;
		}
	}
	return 1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	49 c0       	rjmp	.+146    	; 0x1cc4 <_Z10gauss_algoii+0x4f6>
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	46 c0       	rjmp	.+140    	; 0x1cc4 <_Z10gauss_algoii+0x4f6>
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	43 c0       	rjmp	.+134    	; 0x1cc4 <_Z10gauss_algoii+0x4f6>
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
		return 0;
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	40 c0       	rjmp	.+128    	; 0x1cc4 <_Z10gauss_algoii+0x4f6>
	}

	for (int i=0; i<m; ++i){
		if (where[i] == -1){
			return 2;
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	3d c0       	rjmp	.+122    	; 0x1cc4 <_Z10gauss_algoii+0x4f6>
    1c4a:	82 e0       	ldi	r24, 0x02	; 2
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	3a c0       	rjmp	.+116    	; 0x1cc4 <_Z10gauss_algoii+0x4f6>
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-5;
	for(int i=0; i<m; i++)
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
    1c50:	14 14       	cp	r1, r4
    1c52:	15 04       	cpc	r1, r5
    1c54:	8c f4       	brge	.+34     	; 0x1c78 <_Z10gauss_algoii+0x4aa>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	93 e0       	ldi	r25, 0x03	; 3
    1c5a:	9a 87       	std	Y+10, r25	; 0x0a
    1c5c:	89 87       	std	Y+9, r24	; 0x09
    1c5e:	ea ef       	ldi	r30, 0xFA	; 250
    1c60:	f2 e0       	ldi	r31, 0x02	; 2
    1c62:	fc 87       	std	Y+12, r31	; 0x0c
    1c64:	eb 87       	std	Y+11, r30	; 0x0b
    1c66:	a1 2c       	mov	r10, r1
    1c68:	b1 2c       	mov	r11, r1
    1c6a:	81 2c       	mov	r8, r1
    1c6c:	91 2c       	mov	r9, r1
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	c1 2c       	mov	r12, r1
    1c74:	d1 2c       	mov	r13, r1
    1c76:	f2 cd       	rjmp	.-1052   	; 0x185c <_Z10gauss_algoii+0x8e>
    1c78:	00 e3       	ldi	r16, 0x30	; 48
    1c7a:	13 e0       	ldi	r17, 0x03	; 3
		where[col] = row;
		for (int i=0; i<n; ++i)
		if (i != row)
		{
			double c = a[i][col] / a[row][col];
			for (int j=col; j<=m; ++j)
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	ee ce       	rjmp	.-548    	; 0x1a60 <_Z10gauss_algoii+0x292>
		{
			double tmp = a[sel][i];
			a[sel][i] = a[row][i];
			a[row][i] = tmp;
		}
		where[col] = row;
    1c84:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c86:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c88:	b1 82       	std	Z+1, r11	; 0x01
    1c8a:	a0 82       	st	Z, r10
    1c8c:	c5 01       	movw	r24, r10
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	88 0d       	add	r24, r8
    1c98:	99 1d       	adc	r25, r9
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	9c 01       	movw	r18, r24
    1ca4:	20 50       	subi	r18, 0x00	; 0
    1ca6:	3d 4f       	sbci	r19, 0xFD	; 253
    1ca8:	38 87       	std	Y+8, r19	; 0x08
    1caa:	2f 83       	std	Y+7, r18	; 0x07
    1cac:	c9 84       	ldd	r12, Y+9	; 0x09
    1cae:	da 84       	ldd	r13, Y+10	; 0x0a
    1cb0:	e1 2c       	mov	r14, r1
    1cb2:	f1 2c       	mov	r15, r1
		for (int i=0; i<n; ++i)
		if (i != row)
		{
			double c = a[i][col] / a[row][col];
    1cb4:	3e 83       	std	Y+6, r19	; 0x06
    1cb6:	2d 83       	std	Y+5, r18	; 0x05
    1cb8:	7e ce       	rjmp	.-772    	; 0x19b6 <_Z10gauss_algoii+0x1e8>
	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
    1cba:	14 14       	cp	r1, r4
    1cbc:	15 04       	cpc	r1, r5
    1cbe:	0c f4       	brge	.+2      	; 0x1cc2 <_Z10gauss_algoii+0x4f4>
    1cc0:	20 cf       	rjmp	.-448    	; 0x1b02 <_Z10gauss_algoii+0x334>
    1cc2:	a0 cf       	rjmp	.-192    	; 0x1c04 <_Z10gauss_algoii+0x436>
		if (where[i] == -1){
			return 2;
		}
	}
	return 1;
}
    1cc4:	2e 96       	adiw	r28, 0x0e	; 14
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	bf 90       	pop	r11
    1ce2:	af 90       	pop	r10
    1ce4:	9f 90       	pop	r9
    1ce6:	8f 90       	pop	r8
    1ce8:	7f 90       	pop	r7
    1cea:	6f 90       	pop	r6
    1cec:	5f 90       	pop	r5
    1cee:	4f 90       	pop	r4
    1cf0:	3f 90       	pop	r3
    1cf2:	2f 90       	pop	r2
    1cf4:	08 95       	ret

00001cf6 <_Z5gaussv>:
void gauss()
{
    1cf6:	2f 92       	push	r2
    1cf8:	3f 92       	push	r3
    1cfa:	4f 92       	push	r4
    1cfc:	5f 92       	push	r5
    1cfe:	6f 92       	push	r6
    1d00:	7f 92       	push	r7
    1d02:	8f 92       	push	r8
    1d04:	9f 92       	push	r9
    1d06:	af 92       	push	r10
    1d08:	bf 92       	push	r11
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	cb 54       	subi	r28, 0x4B	; 75
    1d20:	d1 09       	sbc	r29, r1
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
	char text1[] = "Number of Variables (1-7)?";
    1d2c:	8b e1       	ldi	r24, 0x1B	; 27
    1d2e:	ec ee       	ldi	r30, 0xEC	; 236
    1d30:	f1 e0       	ldi	r31, 0x01	; 1
    1d32:	de 01       	movw	r26, r28
    1d34:	11 96       	adiw	r26, 0x01	; 1
    1d36:	01 90       	ld	r0, Z+
    1d38:	0d 92       	st	X+, r0
    1d3a:	8a 95       	dec	r24
    1d3c:	e1 f7       	brne	.-8      	; 0x1d36 <_Z5gaussv+0x40>
	show_text(text1,1);
    1d3e:	61 e0       	ldi	r22, 0x01	; 1
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	ce 01       	movw	r24, r28
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	int m = int_number_input(24);
    1d4a:	88 e1       	ldi	r24, 0x18	; 24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_Z16int_number_inputi>
    1d52:	5c 01       	movw	r10, r24
	strcpy(text1,"Number of equations (1-7)?");
    1d54:	8b e1       	ldi	r24, 0x1B	; 27
    1d56:	e7 e0       	ldi	r30, 0x07	; 7
    1d58:	f2 e0       	ldi	r31, 0x02	; 2
    1d5a:	de 01       	movw	r26, r28
    1d5c:	11 96       	adiw	r26, 0x01	; 1
    1d5e:	01 90       	ld	r0, Z+
    1d60:	0d 92       	st	X+, r0
    1d62:	8a 95       	dec	r24
    1d64:	e1 f7       	brne	.-8      	; 0x1d5e <_Z5gaussv+0x68>
	show_text(text1,1);
    1d66:	61 e0       	ldi	r22, 0x01	; 1
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	int n = int_number_input(24);
    1d72:	88 e1       	ldi	r24, 0x18	; 24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_Z16int_number_inputi>
    1d7a:	2c 96       	adiw	r28, 0x0c	; 12
    1d7c:	9f af       	std	Y+63, r25	; 0x3f
    1d7e:	8e af       	std	Y+62, r24	; 0x3e
    1d80:	2c 97       	sbiw	r28, 0x0c	; 12
	

	
	
	for(int i=0;i<n;i++)
    1d82:	18 16       	cp	r1, r24
    1d84:	19 06       	cpc	r1, r25
    1d86:	0c f0       	brlt	.+2      	; 0x1d8a <_Z5gaussv+0x94>
    1d88:	db c0       	rjmp	.+438    	; 0x1f40 <_Z5gaussv+0x24a>
    1d8a:	c5 01       	movw	r24, r10
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	9c 01       	movw	r18, r24
    1d96:	20 50       	subi	r18, 0x00	; 0
    1d98:	3d 4f       	sbci	r19, 0xFD	; 253
    1d9a:	28 96       	adiw	r28, 0x08	; 8
    1d9c:	3f af       	std	Y+63, r19	; 0x3f
    1d9e:	2e af       	std	Y+62, r18	; 0x3e
    1da0:	28 97       	sbiw	r28, 0x08	; 8
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	93 e0       	ldi	r25, 0x03	; 3
    1da6:	2a 96       	adiw	r28, 0x0a	; 10
    1da8:	9f af       	std	Y+63, r25	; 0x3f
    1daa:	8e af       	std	Y+62, r24	; 0x3e
    1dac:	2a 97       	sbiw	r28, 0x0a	; 10
    1dae:	0f 2e       	mov	r0, r31
    1db0:	f0 e3       	ldi	r31, 0x30	; 48
    1db2:	3f 2e       	mov	r3, r31
    1db4:	f0 2d       	mov	r31, r0
    1db6:	81 2c       	mov	r8, r1
    1db8:	91 2c       	mov	r9, r1
	{
		for(int j=0;j<m;j++)
		{
			char text[14] = "Input a[";
    1dba:	0f 2e       	mov	r0, r31
    1dbc:	f5 e0       	ldi	r31, 0x05	; 5
    1dbe:	2f 2e       	mov	r2, r31
    1dc0:	f0 2d       	mov	r31, r0
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	f9 96       	adiw	r30, 0x39	; 57
    1dc6:	26 96       	adiw	r28, 0x06	; 6
    1dc8:	ff af       	std	Y+63, r31	; 0x3f
    1dca:	ee af       	std	Y+62, r30	; 0x3e
    1dcc:	26 97       	sbiw	r28, 0x06	; 6
			char ek[2];
			ek[0] = (char)(i+'0');
    1dce:	8e 01       	movw	r16, r28
    1dd0:	0e 5b       	subi	r16, 0xBE	; 190
    1dd2:	1f 4f       	sbci	r17, 0xFF	; 255
			ek[1] = 0;
			strcat(text , ek);
			ek[0] = ']';
    1dd4:	0f 2e       	mov	r0, r31
    1dd6:	fd e5       	ldi	r31, 0x5D	; 93
    1dd8:	4f 2e       	mov	r4, r31
    1dda:	f0 2d       	mov	r31, r0
	{
		for(int j=0;j<m;j++)
		{
			char text[14] = "Input a[";
			char ek[2];
			ek[0] = (char)(i+'0');
    1ddc:	e0 2e       	mov	r14, r16
    1dde:	f1 2e       	mov	r15, r17

	
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
    1de0:	1a 14       	cp	r1, r10
    1de2:	1b 04       	cpc	r1, r11
    1de4:	0c f0       	brlt	.+2      	; 0x1de8 <_Z5gaussv+0xf2>
    1de6:	5d c0       	rjmp	.+186    	; 0x1ea2 <_Z5gaussv+0x1ac>
    1de8:	2a 96       	adiw	r28, 0x0a	; 10
    1dea:	ce ac       	ldd	r12, Y+62	; 0x3e
    1dec:	df ac       	ldd	r13, Y+63	; 0x3f
    1dee:	2a 97       	sbiw	r28, 0x0a	; 10
    1df0:	0f 2e       	mov	r0, r31
    1df2:	f0 e3       	ldi	r31, 0x30	; 48
    1df4:	5f 2e       	mov	r5, r31
    1df6:	f0 2d       	mov	r31, r0
    1df8:	61 2c       	mov	r6, r1
    1dfa:	71 2c       	mov	r7, r1
		{
			char text[14] = "Input a[";
    1dfc:	89 e0       	ldi	r24, 0x09	; 9
    1dfe:	e0 ed       	ldi	r30, 0xD0	; 208
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	de 01       	movw	r26, r28
    1e04:	d0 96       	adiw	r26, 0x30	; 48
    1e06:	01 90       	ld	r0, Z+
    1e08:	0d 92       	st	X+, r0
    1e0a:	8a 95       	dec	r24
    1e0c:	e1 f7       	brne	.-8      	; 0x1e06 <_Z5gaussv+0x110>
    1e0e:	26 96       	adiw	r28, 0x06	; 6
    1e10:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e12:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e14:	26 97       	sbiw	r28, 0x06	; 6
    1e16:	22 2d       	mov	r18, r2
    1e18:	11 92       	st	Z+, r1
    1e1a:	2a 95       	dec	r18
    1e1c:	e9 f7       	brne	.-6      	; 0x1e18 <_Z5gaussv+0x122>
			char ek[2];
			ek[0] = (char)(i+'0');
    1e1e:	f8 01       	movw	r30, r16
    1e20:	30 82       	st	Z, r3
			ek[1] = 0;
    1e22:	11 82       	std	Z+1, r1	; 0x01
			strcat(text , ek);
    1e24:	6e 2d       	mov	r22, r14
    1e26:	7f 2d       	mov	r23, r15
    1e28:	ce 01       	movw	r24, r28
    1e2a:	c0 96       	adiw	r24, 0x30	; 48
    1e2c:	0e 94 95 22 	call	0x452a	; 0x452a <strcat>
			ek[0] = ']';
    1e30:	f8 01       	movw	r30, r16
    1e32:	40 82       	st	Z, r4
			strcat(text , ek);
    1e34:	6e 2d       	mov	r22, r14
    1e36:	7f 2d       	mov	r23, r15
    1e38:	ce 01       	movw	r24, r28
    1e3a:	c0 96       	adiw	r24, 0x30	; 48
    1e3c:	0e 94 95 22 	call	0x452a	; 0x452a <strcat>
			ek[0] = '[';
    1e40:	2b e5       	ldi	r18, 0x5B	; 91
    1e42:	f8 01       	movw	r30, r16
    1e44:	20 83       	st	Z, r18
			strcat(text , ek);
    1e46:	6e 2d       	mov	r22, r14
    1e48:	7f 2d       	mov	r23, r15
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	c0 96       	adiw	r24, 0x30	; 48
    1e4e:	0e 94 95 22 	call	0x452a	; 0x452a <strcat>
			ek[0] = (char)(j+'0');
    1e52:	f8 01       	movw	r30, r16
    1e54:	50 82       	st	Z, r5
			strcat(text , ek);
    1e56:	6e 2d       	mov	r22, r14
    1e58:	7f 2d       	mov	r23, r15
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	c0 96       	adiw	r24, 0x30	; 48
    1e5e:	0e 94 95 22 	call	0x452a	; 0x452a <strcat>
			ek[0] = ']';
    1e62:	f8 01       	movw	r30, r16
    1e64:	40 82       	st	Z, r4
			strcat(text , ek);
    1e66:	6e 2d       	mov	r22, r14
    1e68:	7f 2d       	mov	r23, r15
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	c0 96       	adiw	r24, 0x30	; 48
    1e6e:	0e 94 95 22 	call	0x452a	; 0x452a <strcat>
			show_text(text,1);
    1e72:	61 e0       	ldi	r22, 0x01	; 1
    1e74:	70 e0       	ldi	r23, 0x00	; 0
    1e76:	ce 01       	movw	r24, r28
    1e78:	c0 96       	adiw	r24, 0x30	; 48
    1e7a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
			a[i][j] = double_num_input(12);
    1e7e:	8c e0       	ldi	r24, 0x0C	; 12
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_Z16double_num_inputi>
    1e86:	f6 01       	movw	r30, r12
    1e88:	61 93       	st	Z+, r22
    1e8a:	71 93       	st	Z+, r23
    1e8c:	81 93       	st	Z+, r24
    1e8e:	91 93       	st	Z+, r25
    1e90:	6f 01       	movw	r12, r30

	
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
    1e92:	ff ef       	ldi	r31, 0xFF	; 255
    1e94:	6f 1a       	sub	r6, r31
    1e96:	7f 0a       	sbc	r7, r31
    1e98:	53 94       	inc	r5
    1e9a:	a6 14       	cp	r10, r6
    1e9c:	b7 04       	cpc	r11, r7
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <_Z5gaussv+0x1ac>
    1ea0:	ad cf       	rjmp	.-166    	; 0x1dfc <_Z5gaussv+0x106>
			strcat(text , ek);
			show_text(text,1);
			a[i][j] = double_num_input(12);
		}
		{
			char text[18] = "Input column d[";
    1ea2:	80 e1       	ldi	r24, 0x10	; 16
    1ea4:	ee ed       	ldi	r30, 0xDE	; 222
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	de 01       	movw	r26, r28
    1eaa:	d0 96       	adiw	r26, 0x30	; 48
    1eac:	01 90       	ld	r0, Z+
    1eae:	0d 92       	st	X+, r0
    1eb0:	8a 95       	dec	r24
    1eb2:	e1 f7       	brne	.-8      	; 0x1eac <_Z5gaussv+0x1b6>
    1eb4:	22 96       	adiw	r28, 0x02	; 2
    1eb6:	1f ae       	std	Y+63, r1	; 0x3f
    1eb8:	1e ae       	std	Y+62, r1	; 0x3e
    1eba:	22 97       	sbiw	r28, 0x02	; 2
			char ek[2];
			ek[0] = (char)(i+'0');
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	30 82       	st	Z, r3
			ek[1] = 0;
    1ec0:	11 82       	std	Z+1, r1	; 0x01
			strcat(text , ek);
    1ec2:	6e 2d       	mov	r22, r14
    1ec4:	7f 2d       	mov	r23, r15
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	c0 96       	adiw	r24, 0x30	; 48
    1eca:	0e 94 95 22 	call	0x452a	; 0x452a <strcat>
			ek[0] = ']';
    1ece:	f8 01       	movw	r30, r16
    1ed0:	40 82       	st	Z, r4
			strcat(text , ek);
    1ed2:	6e 2d       	mov	r22, r14
    1ed4:	7f 2d       	mov	r23, r15
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	c0 96       	adiw	r24, 0x30	; 48
    1eda:	0e 94 95 22 	call	0x452a	; 0x452a <strcat>
			show_text(text,1);
    1ede:	61 e0       	ldi	r22, 0x01	; 1
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	c0 96       	adiw	r24, 0x30	; 48
    1ee6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
			a[i][m] = double_num_input(12);
    1eea:	8c e0       	ldi	r24, 0x0C	; 12
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_Z16double_num_inputi>
    1ef2:	28 96       	adiw	r28, 0x08	; 8
    1ef4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ef6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ef8:	28 97       	sbiw	r28, 0x08	; 8
    1efa:	60 83       	st	Z, r22
    1efc:	71 83       	std	Z+1, r23	; 0x01
    1efe:	82 83       	std	Z+2, r24	; 0x02
    1f00:	93 83       	std	Z+3, r25	; 0x03
	int n = int_number_input(24);
	

	
	
	for(int i=0;i<n;i++)
    1f02:	ff ef       	ldi	r31, 0xFF	; 255
    1f04:	8f 1a       	sub	r8, r31
    1f06:	9f 0a       	sbc	r9, r31
    1f08:	33 94       	inc	r3
    1f0a:	28 96       	adiw	r28, 0x08	; 8
    1f0c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f0e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f10:	28 97       	sbiw	r28, 0x08	; 8
    1f12:	20 5f       	subi	r18, 0xF0	; 240
    1f14:	3f 4f       	sbci	r19, 0xFF	; 255
    1f16:	28 96       	adiw	r28, 0x08	; 8
    1f18:	3f af       	std	Y+63, r19	; 0x3f
    1f1a:	2e af       	std	Y+62, r18	; 0x3e
    1f1c:	28 97       	sbiw	r28, 0x08	; 8
    1f1e:	2a 96       	adiw	r28, 0x0a	; 10
    1f20:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f22:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f24:	2a 97       	sbiw	r28, 0x0a	; 10
    1f26:	40 96       	adiw	r24, 0x10	; 16
    1f28:	2a 96       	adiw	r28, 0x0a	; 10
    1f2a:	9f af       	std	Y+63, r25	; 0x3f
    1f2c:	8e af       	std	Y+62, r24	; 0x3e
    1f2e:	2a 97       	sbiw	r28, 0x0a	; 10
    1f30:	2c 96       	adiw	r28, 0x0c	; 12
    1f32:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f34:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f36:	2c 97       	sbiw	r28, 0x0c	; 12
    1f38:	e8 15       	cp	r30, r8
    1f3a:	f9 05       	cpc	r31, r9
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <_Z5gaussv+0x24a>
    1f3e:	50 cf       	rjmp	.-352    	; 0x1de0 <_Z5gaussv+0xea>
			strcat(text , ek);
			show_text(text,1);
			a[i][m] = double_num_input(12);
		}
	}
	int koto = gauss_algo(n,m);
    1f40:	b5 01       	movw	r22, r10
    1f42:	2c 96       	adiw	r28, 0x0c	; 12
    1f44:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f46:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f48:	2c 97       	sbiw	r28, 0x0c	; 12
    1f4a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_Z10gauss_algoii>
	if(koto==0)
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	81 f4       	brne	.+32     	; 0x1f72 <_Z5gaussv+0x27c>
	{
		strcpy(text1,"No Solution!");
    1f52:	8d e0       	ldi	r24, 0x0D	; 13
    1f54:	ec ec       	ldi	r30, 0xCC	; 204
    1f56:	f1 e0       	ldi	r31, 0x01	; 1
    1f58:	de 01       	movw	r26, r28
    1f5a:	11 96       	adiw	r26, 0x01	; 1
    1f5c:	01 90       	ld	r0, Z+
    1f5e:	0d 92       	st	X+, r0
    1f60:	8a 95       	dec	r24
    1f62:	e1 f7       	brne	.-8      	; 0x1f5c <_Z5gaussv+0x266>
		show_text(text1,1);
    1f64:	61 e0       	ldi	r22, 0x01	; 1
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	ce 01       	movw	r24, r28
    1f6a:	01 96       	adiw	r24, 0x01	; 1
    1f6c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
    1f70:	bb c0       	rjmp	.+374    	; 0x20e8 <_Z5gaussv+0x3f2>
		return;
	}
	else if(koto==1)
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	91 05       	cpc	r25, r1
    1f76:	69 f4       	brne	.+26     	; 0x1f92 <_Z5gaussv+0x29c>
    1f78:	ff ef       	ldi	r31, 0xFF	; 255
    1f7a:	2e e9       	ldi	r18, 0x9E	; 158
    1f7c:	34 e2       	ldi	r19, 0x24	; 36
    1f7e:	f1 50       	subi	r31, 0x01	; 1
    1f80:	20 40       	sbci	r18, 0x00	; 0
    1f82:	30 40       	sbci	r19, 0x00	; 0
    1f84:	e1 f7       	brne	.-8      	; 0x1f7e <_Z5gaussv+0x288>
    1f86:	00 c0       	rjmp	.+0      	; 0x1f88 <_Z5gaussv+0x292>
    1f88:	00 00       	nop
		strcpy(text1,"Infinite Solution!");
		show_text(text1,1);
		_delay_ms(1500);
	}
	char s[20];
	for(int i=0;i<m;i++)
    1f8a:	1a 14       	cp	r1, r10
    1f8c:	1b 04       	cpc	r1, r11
    1f8e:	e4 f0       	brlt	.+56     	; 0x1fc8 <_Z5gaussv+0x2d2>
    1f90:	ab c0       	rjmp	.+342    	; 0x20e8 <_Z5gaussv+0x3f2>
	}
	else if(koto==1)
	{
		_delay_ms(1500);
	}
	else if(koto==2)
    1f92:	02 97       	sbiw	r24, 0x02	; 2
    1f94:	d1 f7       	brne	.-12     	; 0x1f8a <_Z5gaussv+0x294>
	{
		strcpy(text1,"Infinite Solution!");
    1f96:	83 e1       	ldi	r24, 0x13	; 19
    1f98:	e9 ed       	ldi	r30, 0xD9	; 217
    1f9a:	f1 e0       	ldi	r31, 0x01	; 1
    1f9c:	de 01       	movw	r26, r28
    1f9e:	11 96       	adiw	r26, 0x01	; 1
    1fa0:	01 90       	ld	r0, Z+
    1fa2:	0d 92       	st	X+, r0
    1fa4:	8a 95       	dec	r24
    1fa6:	e1 f7       	brne	.-8      	; 0x1fa0 <_Z5gaussv+0x2aa>
		show_text(text1,1);
    1fa8:	61 e0       	ldi	r22, 0x01	; 1
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	ce 01       	movw	r24, r28
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
    1fb4:	8f ef       	ldi	r24, 0xFF	; 255
    1fb6:	9e e9       	ldi	r25, 0x9E	; 158
    1fb8:	e4 e2       	ldi	r30, 0x24	; 36
    1fba:	81 50       	subi	r24, 0x01	; 1
    1fbc:	90 40       	sbci	r25, 0x00	; 0
    1fbe:	e0 40       	sbci	r30, 0x00	; 0
    1fc0:	e1 f7       	brne	.-8      	; 0x1fba <_Z5gaussv+0x2c4>
    1fc2:	00 c0       	rjmp	.+0      	; 0x1fc4 <_Z5gaussv+0x2ce>
    1fc4:	00 00       	nop
    1fc6:	e1 cf       	rjmp	.-62     	; 0x1f8a <_Z5gaussv+0x294>
    1fc8:	0f 2e       	mov	r0, r31
    1fca:	f0 e3       	ldi	r31, 0x30	; 48
    1fcc:	8f 2e       	mov	r8, r31
    1fce:	f3 e0       	ldi	r31, 0x03	; 3
    1fd0:	9f 2e       	mov	r9, r31
    1fd2:	f0 2d       	mov	r31, r0
		_delay_ms(1500);
	}
	char s[20];
	for(int i=0;i<m;i++)
    1fd4:	0f 2e       	mov	r0, r31
    1fd6:	f0 e3       	ldi	r31, 0x30	; 48
    1fd8:	5f 2e       	mov	r5, r31
    1fda:	f0 2d       	mov	r31, r0
    1fdc:	c1 2c       	mov	r12, r1
    1fde:	d1 2c       	mov	r13, r1
	{
		char text[14] = "Ans x[";
    1fe0:	0f 2e       	mov	r0, r31
    1fe2:	f7 e0       	ldi	r31, 0x07	; 7
    1fe4:	3f 2e       	mov	r3, r31
    1fe6:	f0 2d       	mov	r31, r0
    1fe8:	3e 01       	movw	r6, r28
    1fea:	f7 e3       	ldi	r31, 0x37	; 55
    1fec:	6f 0e       	add	r6, r31
    1fee:	71 1c       	adc	r7, r1
		char ek[2];
		ek[0] = (char)(i+'0');
		ek[1] = 0;
		strcat(text , ek);
		ek[0] = ']';
    1ff0:	0f 2e       	mov	r0, r31
    1ff2:	fd e5       	ldi	r31, 0x5D	; 93
    1ff4:	4f 2e       	mov	r4, r31
    1ff6:	f0 2d       	mov	r31, r0
		strcat(text , ek);
		show_text(text,1);
    1ff8:	ee 24       	eor	r14, r14
    1ffa:	e3 94       	inc	r14
    1ffc:	f1 2c       	mov	r15, r1
		_delay_ms(1500);
	}
	char s[20];
	for(int i=0;i<m;i++)
	{
		char text[14] = "Ans x[";
    1ffe:	87 e0       	ldi	r24, 0x07	; 7
    2000:	e0 ef       	ldi	r30, 0xF0	; 240
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	de 01       	movw	r26, r28
    2006:	d0 96       	adiw	r26, 0x30	; 48
    2008:	01 90       	ld	r0, Z+
    200a:	0d 92       	st	X+, r0
    200c:	8a 95       	dec	r24
    200e:	e1 f7       	brne	.-8      	; 0x2008 <_Z5gaussv+0x312>
    2010:	f3 01       	movw	r30, r6
    2012:	23 2d       	mov	r18, r3
    2014:	11 92       	st	Z+, r1
    2016:	2a 95       	dec	r18
    2018:	e9 f7       	brne	.-6      	; 0x2014 <_Z5gaussv+0x31e>
		char ek[2];
		ek[0] = (char)(i+'0');
    201a:	23 96       	adiw	r28, 0x03	; 3
    201c:	5f ae       	std	Y+63, r5	; 0x3f
    201e:	23 97       	sbiw	r28, 0x03	; 3
		ek[1] = 0;
    2020:	24 96       	adiw	r28, 0x04	; 4
    2022:	1f ae       	std	Y+63, r1	; 0x3f
    2024:	24 97       	sbiw	r28, 0x04	; 4
		strcat(text , ek);
    2026:	be 01       	movw	r22, r28
    2028:	6e 5b       	subi	r22, 0xBE	; 190
    202a:	7f 4f       	sbci	r23, 0xFF	; 255
    202c:	ce 01       	movw	r24, r28
    202e:	c0 96       	adiw	r24, 0x30	; 48
    2030:	0e 94 95 22 	call	0x452a	; 0x452a <strcat>
		ek[0] = ']';
    2034:	23 96       	adiw	r28, 0x03	; 3
    2036:	4f ae       	std	Y+63, r4	; 0x3f
    2038:	23 97       	sbiw	r28, 0x03	; 3
		strcat(text , ek);
    203a:	be 01       	movw	r22, r28
    203c:	6e 5b       	subi	r22, 0xBE	; 190
    203e:	7f 4f       	sbci	r23, 0xFF	; 255
    2040:	ce 01       	movw	r24, r28
    2042:	c0 96       	adiw	r24, 0x30	; 48
    2044:	0e 94 95 22 	call	0x452a	; 0x452a <strcat>
		show_text(text,1);
    2048:	b7 01       	movw	r22, r14
    204a:	ce 01       	movw	r24, r28
    204c:	c0 96       	adiw	r24, 0x30	; 48
    204e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
		
		dtostrf(ans[i],1,2,s);
    2052:	f4 01       	movw	r30, r8
    2054:	61 91       	ld	r22, Z+
    2056:	71 91       	ld	r23, Z+
    2058:	81 91       	ld	r24, Z+
    205a:	91 91       	ld	r25, Z+
    205c:	4f 01       	movw	r8, r30
    205e:	8e 01       	movw	r16, r28
    2060:	04 5e       	subi	r16, 0xE4	; 228
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	22 e0       	ldi	r18, 0x02	; 2
    2066:	41 e0       	ldi	r20, 0x01	; 1
    2068:	0e 94 55 22 	call	0x44aa	; 0x44aa <dtostrf>
		show_text(s,12);
    206c:	6c e0       	ldi	r22, 0x0C	; 12
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	c8 01       	movw	r24, r16
    2072:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
		//wait for equal
		bool done = 0;
		while (1)
		{
			for(int c=4;c<8;c++)
    2076:	44 e0       	ldi	r20, 0x04	; 4
    2078:	50 e0       	ldi	r21, 0x00	; 0
			{
				PORTB=1<<c;
    207a:	c7 01       	movw	r24, r14
    207c:	04 2e       	mov	r0, r20
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <_Z5gaussv+0x38e>
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	0a 94       	dec	r0
    2086:	e2 f7       	brpl	.-8      	; 0x2080 <_Z5gaussv+0x38a>
    2088:	88 bb       	out	0x18, r24	; 24
    208a:	fa 01       	movw	r30, r20
    208c:	e4 54       	subi	r30, 0x44	; 68
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
				for(int r=0;r<4;r++)
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
				{
					if(PINB&(1<<r))
    2094:	86 b3       	in	r24, 0x16	; 22
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 2e       	mov	r0, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <_Z5gaussv+0x3aa>
    209c:	95 95       	asr	r25
    209e:	87 95       	ror	r24
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <_Z5gaussv+0x3a6>
    20a4:	80 ff       	sbrs	r24, 0
    20a6:	03 c0       	rjmp	.+6      	; 0x20ae <_Z5gaussv+0x3b8>
					{
						if(mat[r][c-4]=='=')
    20a8:	80 81       	ld	r24, Z
    20aa:	8d 33       	cpi	r24, 0x3D	; 61
    20ac:	61 f0       	breq	.+24     	; 0x20c6 <_Z5gaussv+0x3d0>
		while (1)
		{
			for(int c=4;c<8;c++)
			{
				PORTB=1<<c;
				for(int r=0;r<4;r++)
    20ae:	2f 5f       	subi	r18, 0xFF	; 255
    20b0:	3f 4f       	sbci	r19, 0xFF	; 255
    20b2:	34 96       	adiw	r30, 0x04	; 4
    20b4:	24 30       	cpi	r18, 0x04	; 4
    20b6:	31 05       	cpc	r19, r1
    20b8:	69 f7       	brne	.-38     	; 0x2094 <_Z5gaussv+0x39e>
		show_text(s,12);
		//wait for equal
		bool done = 0;
		while (1)
		{
			for(int c=4;c<8;c++)
    20ba:	4f 5f       	subi	r20, 0xFF	; 255
    20bc:	5f 4f       	sbci	r21, 0xFF	; 255
    20be:	48 30       	cpi	r20, 0x08	; 8
    20c0:	51 05       	cpc	r21, r1
    20c2:	d9 f6       	brne	.-74     	; 0x207a <_Z5gaussv+0x384>
    20c4:	d8 cf       	rjmp	.-80     	; 0x2076 <_Z5gaussv+0x380>
    20c6:	ff ef       	ldi	r31, 0xFF	; 255
    20c8:	24 e3       	ldi	r18, 0x34	; 52
    20ca:	3c e0       	ldi	r19, 0x0C	; 12
    20cc:	f1 50       	subi	r31, 0x01	; 1
    20ce:	20 40       	sbci	r18, 0x00	; 0
    20d0:	30 40       	sbci	r19, 0x00	; 0
    20d2:	e1 f7       	brne	.-8      	; 0x20cc <_Z5gaussv+0x3d6>
    20d4:	00 c0       	rjmp	.+0      	; 0x20d6 <_Z5gaussv+0x3e0>
    20d6:	00 00       	nop
		strcpy(text1,"Infinite Solution!");
		show_text(text1,1);
		_delay_ms(1500);
	}
	char s[20];
	for(int i=0;i<m;i++)
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	c8 1a       	sub	r12, r24
    20dc:	d8 0a       	sbc	r13, r24
    20de:	53 94       	inc	r5
    20e0:	ac 14       	cp	r10, r12
    20e2:	bd 04       	cpc	r11, r13
    20e4:	09 f0       	breq	.+2      	; 0x20e8 <_Z5gaussv+0x3f2>
    20e6:	8b cf       	rjmp	.-234    	; 0x1ffe <_Z5gaussv+0x308>
			}
		}
		_delay_ms(500);
	}
	
    20e8:	c5 5b       	subi	r28, 0xB5	; 181
    20ea:	df 4f       	sbci	r29, 0xFF	; 255
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	df 90       	pop	r13
    2104:	cf 90       	pop	r12
    2106:	bf 90       	pop	r11
    2108:	af 90       	pop	r10
    210a:	9f 90       	pop	r9
    210c:	8f 90       	pop	r8
    210e:	7f 90       	pop	r7
    2110:	6f 90       	pop	r6
    2112:	5f 90       	pop	r5
    2114:	4f 90       	pop	r4
    2116:	3f 90       	pop	r3
    2118:	2f 90       	pop	r2
    211a:	08 95       	ret

0000211c <_Z19simpson_integrationPcdd>:



double simpson_integration(char str[] , double a, double b){
    211c:	2f 92       	push	r2
    211e:	3f 92       	push	r3
    2120:	4f 92       	push	r4
    2122:	5f 92       	push	r5
    2124:	6f 92       	push	r6
    2126:	7f 92       	push	r7
    2128:	8f 92       	push	r8
    212a:	9f 92       	push	r9
    212c:	af 92       	push	r10
    212e:	bf 92       	push	r11
    2130:	cf 92       	push	r12
    2132:	df 92       	push	r13
    2134:	ef 92       	push	r14
    2136:	ff 92       	push	r15
    2138:	0f 93       	push	r16
    213a:	1f 93       	push	r17
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	28 97       	sbiw	r28, 0x08	; 8
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	7c 01       	movw	r14, r24
    2152:	2a 01       	movw	r4, r20
    2154:	3b 01       	movw	r6, r22
    2156:	48 01       	movw	r8, r16
    2158:	59 01       	movw	r10, r18
	const int N = 50;
	double h = (b - a) / N;
    215a:	9a 01       	movw	r18, r20
    215c:	ab 01       	movw	r20, r22
    215e:	c5 01       	movw	r24, r10
    2160:	b4 01       	movw	r22, r8
    2162:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	48 e4       	ldi	r20, 0x48	; 72
    216c:	52 e4       	ldi	r21, 0x42	; 66
    216e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    2172:	69 83       	std	Y+1, r22	; 0x01
    2174:	7a 83       	std	Y+2, r23	; 0x02
    2176:	8b 83       	std	Y+3, r24	; 0x03
    2178:	9c 83       	std	Y+4, r25	; 0x04
	double s = evaluate_function(str, a) + evaluate_function(str , b);
    217a:	b3 01       	movw	r22, r6
    217c:	a2 01       	movw	r20, r4
    217e:	c7 01       	movw	r24, r14
    2180:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    2184:	6d 83       	std	Y+5, r22	; 0x05
    2186:	7e 83       	std	Y+6, r23	; 0x06
    2188:	8f 83       	std	Y+7, r24	; 0x07
    218a:	98 87       	std	Y+8, r25	; 0x08
    218c:	b5 01       	movw	r22, r10
    218e:	a4 01       	movw	r20, r8
    2190:	c7 01       	movw	r24, r14
    2192:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    2196:	9b 01       	movw	r18, r22
    2198:	ac 01       	movw	r20, r24
    219a:	6d 81       	ldd	r22, Y+5	; 0x05
    219c:	7e 81       	ldd	r23, Y+6	; 0x06
    219e:	8f 81       	ldd	r24, Y+7	; 0x07
    21a0:	98 85       	ldd	r25, Y+8	; 0x08
    21a2:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    21a6:	4b 01       	movw	r8, r22
    21a8:	5c 01       	movw	r10, r24
	for (int i = 1; i <= N - 1; ++i) {
		double x = a + h * i;
		s += evaluate_function(str , x) * ((i & 1) ? 4 : 2);
    21aa:	29 81       	ldd	r18, Y+1	; 0x01
    21ac:	3a 81       	ldd	r19, Y+2	; 0x02
    21ae:	4b 81       	ldd	r20, Y+3	; 0x03
    21b0:	5c 81       	ldd	r21, Y+4	; 0x04
    21b2:	c3 01       	movw	r24, r6
    21b4:	b2 01       	movw	r22, r4
    21b6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    21ba:	ab 01       	movw	r20, r22
    21bc:	bc 01       	movw	r22, r24
    21be:	c7 01       	movw	r24, r14
    21c0:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    21c4:	9b 01       	movw	r18, r22
    21c6:	ac 01       	movw	r20, r24

double simpson_integration(char str[] , double a, double b){
	const int N = 50;
	double h = (b - a) / N;
	double s = evaluate_function(str, a) + evaluate_function(str , b);
	for (int i = 1; i <= N - 1; ++i) {
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
		double x = a + h * i;
		s += evaluate_function(str , x) * ((i & 1) ? 4 : 2);
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	a0 e0       	ldi	r26, 0x00	; 0
    21d0:	f0 e8       	ldi	r31, 0x80	; 128
    21d2:	e0 e4       	ldi	r30, 0x40	; 64
    21d4:	d1 2c       	mov	r13, r1
    21d6:	00 e8       	ldi	r16, 0x80	; 128
    21d8:	c1 2c       	mov	r12, r1
    21da:	31 2c       	mov	r3, r1
    21dc:	21 2c       	mov	r2, r1
    21de:	10 e4       	ldi	r17, 0x40	; 64
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
    21e4:	25 c0       	rjmp	.+74     	; 0x2230 <_Z19simpson_integrationPcdd+0x114>
    21e6:	2d 81       	ldd	r18, Y+5	; 0x05
    21e8:	3e 81       	ldd	r19, Y+6	; 0x06
    21ea:	b9 01       	movw	r22, r18
    21ec:	33 0f       	add	r19, r19
    21ee:	88 0b       	sbc	r24, r24
    21f0:	99 0b       	sbc	r25, r25
    21f2:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__floatsisf>
    21f6:	29 81       	ldd	r18, Y+1	; 0x01
    21f8:	3a 81       	ldd	r19, Y+2	; 0x02
    21fa:	4b 81       	ldd	r20, Y+3	; 0x03
    21fc:	5c 81       	ldd	r21, Y+4	; 0x04
    21fe:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    2202:	a3 01       	movw	r20, r6
    2204:	92 01       	movw	r18, r4
    2206:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    220a:	ab 01       	movw	r20, r22
    220c:	bc 01       	movw	r22, r24
    220e:	c7 01       	movw	r24, r14
    2210:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    2214:	9b 01       	movw	r18, r22
    2216:	ac 01       	movw	r20, r24
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	80 fd       	sbrc	r24, 0
    221c:	05 c0       	rjmp	.+10     	; 0x2228 <_Z19simpson_integrationPcdd+0x10c>
    221e:	bc 2d       	mov	r27, r12
    2220:	a3 2d       	mov	r26, r3
    2222:	f2 2d       	mov	r31, r2
    2224:	e1 2f       	mov	r30, r17
    2226:	04 c0       	rjmp	.+8      	; 0x2230 <_Z19simpson_integrationPcdd+0x114>
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	ad 2d       	mov	r26, r13
    222c:	f0 2f       	mov	r31, r16
    222e:	e0 e4       	ldi	r30, 0x40	; 64
    2230:	6b 2f       	mov	r22, r27
    2232:	7a 2f       	mov	r23, r26
    2234:	8f 2f       	mov	r24, r31
    2236:	9e 2f       	mov	r25, r30
    2238:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    223c:	9b 01       	movw	r18, r22
    223e:	ac 01       	movw	r20, r24
    2240:	c5 01       	movw	r24, r10
    2242:	b4 01       	movw	r22, r8
    2244:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    2248:	4b 01       	movw	r8, r22
    224a:	5c 01       	movw	r10, r24

double simpson_integration(char str[] , double a, double b){
	const int N = 50;
	double h = (b - a) / N;
	double s = evaluate_function(str, a) + evaluate_function(str , b);
	for (int i = 1; i <= N - 1; ++i) {
    224c:	2d 81       	ldd	r18, Y+5	; 0x05
    224e:	3e 81       	ldd	r19, Y+6	; 0x06
    2250:	2f 5f       	subi	r18, 0xFF	; 255
    2252:	3f 4f       	sbci	r19, 0xFF	; 255
    2254:	3e 83       	std	Y+6, r19	; 0x06
    2256:	2d 83       	std	Y+5, r18	; 0x05
    2258:	22 33       	cpi	r18, 0x32	; 50
    225a:	31 05       	cpc	r19, r1
    225c:	21 f6       	brne	.-120    	; 0x21e6 <_Z19simpson_integrationPcdd+0xca>
		double x = a + h * i;
		s += evaluate_function(str , x) * ((i & 1) ? 4 : 2);
	}
	s *= h / 3;
	return s;
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e4       	ldi	r20, 0x40	; 64
    2264:	50 e4       	ldi	r21, 0x40	; 64
    2266:	69 81       	ldd	r22, Y+1	; 0x01
    2268:	7a 81       	ldd	r23, Y+2	; 0x02
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    2272:	a5 01       	movw	r20, r10
    2274:	94 01       	movw	r18, r8
    2276:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
}
    227a:	28 96       	adiw	r28, 0x08	; 8
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	df 90       	pop	r13
    2294:	cf 90       	pop	r12
    2296:	bf 90       	pop	r11
    2298:	af 90       	pop	r10
    229a:	9f 90       	pop	r9
    229c:	8f 90       	pop	r8
    229e:	7f 90       	pop	r7
    22a0:	6f 90       	pop	r6
    22a2:	5f 90       	pop	r5
    22a4:	4f 90       	pop	r4
    22a6:	3f 90       	pop	r3
    22a8:	2f 90       	pop	r2
    22aa:	08 95       	ret

000022ac <_Z7simpsonv>:
void simpson()
{
    22ac:	2f 92       	push	r2
    22ae:	3f 92       	push	r3
    22b0:	4f 92       	push	r4
    22b2:	5f 92       	push	r5
    22b4:	6f 92       	push	r6
    22b6:	7f 92       	push	r7
    22b8:	8f 92       	push	r8
    22ba:	9f 92       	push	r9
    22bc:	af 92       	push	r10
    22be:	bf 92       	push	r11
    22c0:	cf 92       	push	r12
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	ca 55       	subi	r28, 0x5A	; 90
    22d6:	d1 09       	sbc	r29, r1
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    22e2:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	char text1[] = "Input Function of x:";
    22e6:	85 e1       	ldi	r24, 0x15	; 21
    22e8:	e2 e2       	ldi	r30, 0x22	; 34
    22ea:	f2 e0       	ldi	r31, 0x02	; 2
    22ec:	de 01       	movw	r26, r28
    22ee:	11 96       	adiw	r26, 0x01	; 1
    22f0:	01 90       	ld	r0, Z+
    22f2:	0d 92       	st	X+, r0
    22f4:	8a 95       	dec	r24
    22f6:	e1 f7       	brne	.-8      	; 0x22f0 <_Z7simpsonv+0x44>
	char text2[] = "Input lower limit:";
    22f8:	83 e1       	ldi	r24, 0x13	; 19
    22fa:	e7 e3       	ldi	r30, 0x37	; 55
    22fc:	f2 e0       	ldi	r31, 0x02	; 2
    22fe:	de 01       	movw	r26, r28
    2300:	56 96       	adiw	r26, 0x16	; 22
    2302:	01 90       	ld	r0, Z+
    2304:	0d 92       	st	X+, r0
    2306:	8a 95       	dec	r24
    2308:	e1 f7       	brne	.-8      	; 0x2302 <_Z7simpsonv+0x56>
	char text3[] = "Input upper limit:";
    230a:	83 e1       	ldi	r24, 0x13	; 19
    230c:	ea e4       	ldi	r30, 0x4A	; 74
    230e:	f2 e0       	ldi	r31, 0x02	; 2
    2310:	de 01       	movw	r26, r28
    2312:	99 96       	adiw	r26, 0x29	; 41
    2314:	01 90       	ld	r0, Z+
    2316:	0d 92       	st	X+, r0
    2318:	8a 95       	dec	r24
    231a:	e1 f7       	brne	.-8      	; 0x2314 <_Z7simpsonv+0x68>
	DisplayText(1,1,text1);
    231c:	ae 01       	movw	r20, r28
    231e:	4f 5f       	subi	r20, 0xFF	; 255
    2320:	5f 4f       	sbci	r21, 0xFF	; 255
    2322:	61 e0       	ldi	r22, 0x01	; 1
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	//input function
	char s[21];
	int len=0;
	int where=12;
    232a:	0f 2e       	mov	r0, r31
    232c:	fc e0       	ldi	r31, 0x0C	; 12
    232e:	8f 2e       	mov	r8, r31
    2330:	91 2c       	mov	r9, r1
    2332:	f0 2d       	mov	r31, r0
	char text2[] = "Input lower limit:";
	char text3[] = "Input upper limit:";
	DisplayText(1,1,text1);
	//input function
	char s[21];
	int len=0;
    2334:	e1 2c       	mov	r14, r1
    2336:	f1 2c       	mov	r15, r1
					else
					{
						append(s , len , mat2[r][c-4]);
						len = strlen(s);
					}
					DisplayText(1,where,s);
    2338:	2e 01       	movw	r4, r28
    233a:	2c e3       	ldi	r18, 0x3C	; 60
    233c:	42 0e       	add	r4, r18
    233e:	51 1c       	adc	r5, r1
    2340:	68 96       	adiw	r28, 0x18	; 24
    2342:	4f ae       	std	Y+63, r4	; 0x3f
    2344:	68 97       	sbiw	r28, 0x18	; 24
    2346:	69 96       	adiw	r28, 0x19	; 25
    2348:	5f ae       	std	Y+63, r5	; 0x3f
    234a:	69 97       	sbiw	r28, 0x19	; 25
    234c:	0f 2e       	mov	r0, r31
    234e:	f0 e6       	ldi	r31, 0x60	; 96
    2350:	2f 2e       	mov	r2, r31
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	3f 2e       	mov	r3, r31
    2356:	f0 2d       	mov	r31, r0
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    2358:	68 94       	set
    235a:	66 24       	eor	r6, r6
    235c:	62 f8       	bld	r6, 2
    235e:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	06 2c       	mov	r0, r6
    2366:	02 c0       	rjmp	.+4      	; 0x236c <_Z7simpsonv+0xc0>
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	0a 94       	dec	r0
    236e:	e2 f7       	brpl	.-8      	; 0x2368 <_Z7simpsonv+0xbc>
    2370:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    2372:	8b bb       	out	0x1b, r24	; 27
    2374:	c3 01       	movw	r24, r6
    2376:	84 54       	subi	r24, 0x44	; 68
    2378:	9f 4f       	sbci	r25, 0xFF	; 255
    237a:	6c 01       	movw	r12, r24
    237c:	51 01       	movw	r10, r2
			for(int r=0;r<4;r++)
    237e:	00 e0       	ldi	r16, 0x00	; 0
    2380:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    2382:	86 b3       	in	r24, 0x16	; 22
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	00 2e       	mov	r0, r16
    2388:	02 c0       	rjmp	.+4      	; 0x238e <_Z7simpsonv+0xe2>
    238a:	95 95       	asr	r25
    238c:	87 95       	ror	r24
    238e:	0a 94       	dec	r0
    2390:	e2 f7       	brpl	.-8      	; 0x238a <_Z7simpsonv+0xde>
    2392:	80 ff       	sbrs	r24, 0
    2394:	43 c0       	rjmp	.+134    	; 0x241c <_Z7simpsonv+0x170>
				{
					if(mat[r][c-4]=='C')
    2396:	f6 01       	movw	r30, r12
    2398:	80 81       	ld	r24, Z
    239a:	83 34       	cpi	r24, 0x43	; 67
    239c:	99 f4       	brne	.+38     	; 0x23c4 <_Z7simpsonv+0x118>
					{
						len=0;
						s[0]=0;
    239e:	1c ae       	std	Y+60, r1	; 0x3c
						where=1;
						LCD_Clear();
    23a0:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    23a4:	68 96       	adiw	r28, 0x18	; 24
    23a6:	4f ad       	ldd	r20, Y+63	; 0x3f
    23a8:	68 97       	sbiw	r28, 0x18	; 24
    23aa:	69 96       	adiw	r28, 0x19	; 25
    23ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    23ae:	69 97       	sbiw	r28, 0x19	; 25
    23b0:	61 e0       	ldi	r22, 0x01	; 1
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    23b8:	88 24       	eor	r8, r8
    23ba:	83 94       	inc	r8
    23bc:	91 2c       	mov	r9, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    23be:	e1 2c       	mov	r14, r1
    23c0:	f1 2c       	mov	r15, r1
    23c2:	22 c0       	rjmp	.+68     	; 0x2408 <_Z7simpsonv+0x15c>
						where=1;
						LCD_Clear();
					}
					else
					{
						if(mat[r][c-4]=='=')
    23c4:	8d 33       	cpi	r24, 0x3D	; 61
    23c6:	09 f4       	brne	.+2      	; 0x23ca <_Z7simpsonv+0x11e>
    23c8:	df c0       	rjmp	.+446    	; 0x2588 <_Z7simpsonv+0x2dc>
						{
							done = 1;
							break;
						}
						s[len]=mat[r][c-4];
    23ca:	f2 01       	movw	r30, r4
    23cc:	ee 0d       	add	r30, r14
    23ce:	ff 1d       	adc	r31, r15
    23d0:	80 83       	st	Z, r24
						len+=1;
    23d2:	ff ef       	ldi	r31, 0xFF	; 255
    23d4:	ef 1a       	sub	r14, r31
    23d6:	ff 0a       	sbc	r15, r31
						s[len]=0;
    23d8:	f2 01       	movw	r30, r4
    23da:	ee 0d       	add	r30, r14
    23dc:	ff 1d       	adc	r31, r15
    23de:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    23e0:	68 96       	adiw	r28, 0x18	; 24
    23e2:	4f ad       	ldd	r20, Y+63	; 0x3f
    23e4:	68 97       	sbiw	r28, 0x18	; 24
    23e6:	69 96       	adiw	r28, 0x19	; 25
    23e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    23ea:	69 97       	sbiw	r28, 0x19	; 25
    23ec:	68 2d       	mov	r22, r8
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    23f4:	24 e1       	ldi	r18, 0x14	; 20
    23f6:	e2 16       	cp	r14, r18
    23f8:	f1 04       	cpc	r15, r1
    23fa:	31 f4       	brne	.+12     	; 0x2408 <_Z7simpsonv+0x15c>
					{
						where+=12;
    23fc:	8c e0       	ldi	r24, 0x0C	; 12
    23fe:	88 0e       	add	r8, r24
    2400:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    2402:	1c ae       	std	Y+60, r1	; 0x3c
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    2404:	e1 2c       	mov	r14, r1
    2406:	f1 2c       	mov	r15, r1
    2408:	9f ef       	ldi	r25, 0xFF	; 255
    240a:	e4 e3       	ldi	r30, 0x34	; 52
    240c:	fc e0       	ldi	r31, 0x0C	; 12
    240e:	91 50       	subi	r25, 0x01	; 1
    2410:	e0 40       	sbci	r30, 0x00	; 0
    2412:	f0 40       	sbci	r31, 0x00	; 0
    2414:	e1 f7       	brne	.-8      	; 0x240e <_Z7simpsonv+0x162>
    2416:	00 c0       	rjmp	.+0      	; 0x2418 <_Z7simpsonv+0x16c>
    2418:	00 00       	nop
    241a:	66 c0       	rjmp	.+204    	; 0x24e8 <_Z7simpsonv+0x23c>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    241c:	89 b3       	in	r24, 0x19	; 25
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	00 2e       	mov	r0, r16
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <_Z7simpsonv+0x17c>
    2424:	95 95       	asr	r25
    2426:	87 95       	ror	r24
    2428:	0a 94       	dec	r0
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <_Z7simpsonv+0x178>
    242c:	80 ff       	sbrs	r24, 0
    242e:	5c c0       	rjmp	.+184    	; 0x24e8 <_Z7simpsonv+0x23c>
				{
					if(mat2[r][c-4][0]=='<')
    2430:	f5 01       	movw	r30, r10
    2432:	80 81       	ld	r24, Z
    2434:	8c 33       	cpi	r24, 0x3C	; 60
    2436:	49 f5       	brne	.+82     	; 0x248a <_Z7simpsonv+0x1de>
					{
						if(len==0){
    2438:	e1 14       	cp	r14, r1
    243a:	f1 04       	cpc	r15, r1
    243c:	51 f4       	brne	.+20     	; 0x2452 <_Z7simpsonv+0x1a6>
    243e:	ff ef       	ldi	r31, 0xFF	; 255
    2440:	24 e3       	ldi	r18, 0x34	; 52
    2442:	8c e0       	ldi	r24, 0x0C	; 12
    2444:	f1 50       	subi	r31, 0x01	; 1
    2446:	20 40       	sbci	r18, 0x00	; 0
    2448:	80 40       	sbci	r24, 0x00	; 0
    244a:	e1 f7       	brne	.-8      	; 0x2444 <_Z7simpsonv+0x198>
    244c:	00 c0       	rjmp	.+0      	; 0x244e <_Z7simpsonv+0x1a2>
    244e:	00 00       	nop
    2450:	4b c0       	rjmp	.+150    	; 0x24e8 <_Z7simpsonv+0x23c>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    2452:	91 e0       	ldi	r25, 0x01	; 1
    2454:	e9 1a       	sub	r14, r25
    2456:	f1 08       	sbc	r15, r1
    2458:	f2 01       	movw	r30, r4
    245a:	ee 0d       	add	r30, r14
    245c:	ff 1d       	adc	r31, r15
    245e:	6b 96       	adiw	r28, 0x1b	; 27
    2460:	ff af       	std	Y+63, r31	; 0x3f
    2462:	ee af       	std	Y+62, r30	; 0x3e
    2464:	6b 97       	sbiw	r28, 0x1b	; 27
    2466:	20 e2       	ldi	r18, 0x20	; 32
    2468:	20 83       	st	Z, r18
						DisplayText(1,where,s);
    246a:	68 96       	adiw	r28, 0x18	; 24
    246c:	4f ad       	ldd	r20, Y+63	; 0x3f
    246e:	68 97       	sbiw	r28, 0x18	; 24
    2470:	69 96       	adiw	r28, 0x19	; 25
    2472:	5f ad       	ldd	r21, Y+63	; 0x3f
    2474:	69 97       	sbiw	r28, 0x19	; 25
    2476:	68 2d       	mov	r22, r8
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						len--;
						s[len]=0;
    247e:	6b 96       	adiw	r28, 0x1b	; 27
    2480:	ee ad       	ldd	r30, Y+62	; 0x3e
    2482:	ff ad       	ldd	r31, Y+63	; 0x3f
    2484:	6b 97       	sbiw	r28, 0x1b	; 27
    2486:	10 82       	st	Z, r1
    2488:	12 c0       	rjmp	.+36     	; 0x24ae <_Z7simpsonv+0x202>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    248a:	a5 01       	movw	r20, r10
    248c:	b7 01       	movw	r22, r14
    248e:	68 96       	adiw	r28, 0x18	; 24
    2490:	8f ad       	ldd	r24, Y+63	; 0x3f
    2492:	68 97       	sbiw	r28, 0x18	; 24
    2494:	69 96       	adiw	r28, 0x19	; 25
    2496:	9f ad       	ldd	r25, Y+63	; 0x3f
    2498:	69 97       	sbiw	r28, 0x19	; 25
    249a:	0e 94 15 09 	call	0x122a	; 0x122a <_Z6appendPciS_>
						len = strlen(s);
    249e:	f2 01       	movw	r30, r4
    24a0:	01 90       	ld	r0, Z+
    24a2:	00 20       	and	r0, r0
    24a4:	e9 f7       	brne	.-6      	; 0x24a0 <_Z7simpsonv+0x1f4>
    24a6:	31 97       	sbiw	r30, 0x01	; 1
    24a8:	7f 01       	movw	r14, r30
    24aa:	e4 18       	sub	r14, r4
    24ac:	f5 08       	sbc	r15, r5
					}
					DisplayText(1,where,s);
    24ae:	68 96       	adiw	r28, 0x18	; 24
    24b0:	4f ad       	ldd	r20, Y+63	; 0x3f
    24b2:	68 97       	sbiw	r28, 0x18	; 24
    24b4:	69 96       	adiw	r28, 0x19	; 25
    24b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    24b8:	69 97       	sbiw	r28, 0x19	; 25
    24ba:	68 2d       	mov	r22, r8
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    24c2:	f4 e1       	ldi	r31, 0x14	; 20
    24c4:	ef 16       	cp	r14, r31
    24c6:	f1 04       	cpc	r15, r1
    24c8:	31 f4       	brne	.+12     	; 0x24d6 <_Z7simpsonv+0x22a>
					{
						where+=12;
    24ca:	2c e0       	ldi	r18, 0x0C	; 12
    24cc:	82 0e       	add	r8, r18
    24ce:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    24d0:	1c ae       	std	Y+60, r1	; 0x3c
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    24d2:	e1 2c       	mov	r14, r1
    24d4:	f1 2c       	mov	r15, r1
    24d6:	8f ef       	ldi	r24, 0xFF	; 255
    24d8:	94 e3       	ldi	r25, 0x34	; 52
    24da:	ec e0       	ldi	r30, 0x0C	; 12
    24dc:	81 50       	subi	r24, 0x01	; 1
    24de:	90 40       	sbci	r25, 0x00	; 0
    24e0:	e0 40       	sbci	r30, 0x00	; 0
    24e2:	e1 f7       	brne	.-8      	; 0x24dc <_Z7simpsonv+0x230>
    24e4:	00 c0       	rjmp	.+0      	; 0x24e6 <_Z7simpsonv+0x23a>
    24e6:	00 00       	nop
		bool done = 0;
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    24e8:	0f 5f       	subi	r16, 0xFF	; 255
    24ea:	1f 4f       	sbci	r17, 0xFF	; 255
    24ec:	f8 e1       	ldi	r31, 0x18	; 24
    24ee:	af 0e       	add	r10, r31
    24f0:	b1 1c       	adc	r11, r1
    24f2:	24 e0       	ldi	r18, 0x04	; 4
    24f4:	c2 0e       	add	r12, r18
    24f6:	d1 1c       	adc	r13, r1
    24f8:	04 30       	cpi	r16, 0x04	; 4
    24fa:	11 05       	cpc	r17, r1
    24fc:	09 f0       	breq	.+2      	; 0x2500 <_Z7simpsonv+0x254>
    24fe:	41 cf       	rjmp	.-382    	; 0x2382 <_Z7simpsonv+0xd6>
    2500:	8f e1       	ldi	r24, 0x1F	; 31
    2502:	9e e4       	ldi	r25, 0x4E	; 78
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <_Z7simpsonv+0x258>
    2508:	00 c0       	rjmp	.+0      	; 0x250a <_Z7simpsonv+0x25e>
    250a:	00 00       	nop
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    250c:	9f ef       	ldi	r25, 0xFF	; 255
    250e:	69 1a       	sub	r6, r25
    2510:	79 0a       	sbc	r7, r25
    2512:	e6 e0       	ldi	r30, 0x06	; 6
    2514:	2e 0e       	add	r2, r30
    2516:	31 1c       	adc	r3, r1
    2518:	f8 e0       	ldi	r31, 0x08	; 8
    251a:	6f 16       	cp	r6, r31
    251c:	71 04       	cpc	r7, r1
    251e:	09 f0       	breq	.+2      	; 0x2522 <_Z7simpsonv+0x276>
    2520:	1f cf       	rjmp	.-450    	; 0x2360 <_Z7simpsonv+0xb4>
    2522:	14 cf       	rjmp	.-472    	; 0x234c <_Z7simpsonv+0xa0>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    2524:	44 e0       	ldi	r20, 0x04	; 4
    2526:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB=1<<c;
    2528:	cb 01       	movw	r24, r22
    252a:	04 2e       	mov	r0, r20
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <_Z7simpsonv+0x286>
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	0a 94       	dec	r0
    2534:	e2 f7       	brpl	.-8      	; 0x252e <_Z7simpsonv+0x282>
    2536:	88 bb       	out	0x18, r24	; 24
    2538:	fa 01       	movw	r30, r20
    253a:	e4 54       	subi	r30, 0x44	; 68
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
			{
				if(PINB&(1<<r))
    2542:	86 b3       	in	r24, 0x16	; 22
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	02 2e       	mov	r0, r18
    2548:	02 c0       	rjmp	.+4      	; 0x254e <_Z7simpsonv+0x2a2>
    254a:	95 95       	asr	r25
    254c:	87 95       	ror	r24
    254e:	0a 94       	dec	r0
    2550:	e2 f7       	brpl	.-8      	; 0x254a <_Z7simpsonv+0x29e>
    2552:	80 ff       	sbrs	r24, 0
    2554:	03 c0       	rjmp	.+6      	; 0x255c <_Z7simpsonv+0x2b0>
				{
					if(mat[r][c-4]=='=')
    2556:	80 81       	ld	r24, Z
    2558:	8d 33       	cpi	r24, 0x3D	; 61
    255a:	61 f0       	breq	.+24     	; 0x2574 <_Z7simpsonv+0x2c8>
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    255c:	2f 5f       	subi	r18, 0xFF	; 255
    255e:	3f 4f       	sbci	r19, 0xFF	; 255
    2560:	34 96       	adiw	r30, 0x04	; 4
    2562:	24 30       	cpi	r18, 0x04	; 4
    2564:	31 05       	cpc	r19, r1
    2566:	69 f7       	brne	.-38     	; 0x2542 <_Z7simpsonv+0x296>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    2568:	4f 5f       	subi	r20, 0xFF	; 255
    256a:	5f 4f       	sbci	r21, 0xFF	; 255
    256c:	48 30       	cpi	r20, 0x08	; 8
    256e:	51 05       	cpc	r21, r1
    2570:	d9 f6       	brne	.-74     	; 0x2528 <_Z7simpsonv+0x27c>
    2572:	d8 cf       	rjmp	.-80     	; 0x2524 <_Z7simpsonv+0x278>
    2574:	2f ef       	ldi	r18, 0xFF	; 255
    2576:	84 e3       	ldi	r24, 0x34	; 52
    2578:	9c e0       	ldi	r25, 0x0C	; 12
    257a:	21 50       	subi	r18, 0x01	; 1
    257c:	80 40       	sbci	r24, 0x00	; 0
    257e:	90 40       	sbci	r25, 0x00	; 0
    2580:	e1 f7       	brne	.-8      	; 0x257a <_Z7simpsonv+0x2ce>
    2582:	00 c0       	rjmp	.+0      	; 0x2584 <_Z7simpsonv+0x2d8>
    2584:	00 00       	nop
		{
			break;
		}
	}
	_delay_ms(500);
    2586:	4e c0       	rjmp	.+156    	; 0x2624 <_Z7simpsonv+0x378>
    2588:	ef e1       	ldi	r30, 0x1F	; 31
    258a:	fe e4       	ldi	r31, 0x4E	; 78
    258c:	31 97       	sbiw	r30, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <_Z7simpsonv+0x2e0>
    2590:	00 c0       	rjmp	.+0      	; 0x2592 <_Z7simpsonv+0x2e6>
    2592:	00 00       	nop
			break;
		}
		if(done)
		break;
	}
	LCD_Clear();
    2594:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	double l , r;
	DisplayText(1,1,text2);
    2598:	ae 01       	movw	r20, r28
    259a:	4a 5e       	subi	r20, 0xEA	; 234
    259c:	5f 4f       	sbci	r21, 0xFF	; 255
    259e:	61 e0       	ldi	r22, 0x01	; 1
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	l = double_num_input(12);
    25a6:	8c e0       	ldi	r24, 0x0C	; 12
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_Z16double_num_inputi>
    25ae:	6b 01       	movw	r12, r22
    25b0:	7c 01       	movw	r14, r24
	LCD_Clear();
    25b2:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	DisplayText(1,1,text3);
    25b6:	ae 01       	movw	r20, r28
    25b8:	47 5d       	subi	r20, 0xD7	; 215
    25ba:	5f 4f       	sbci	r21, 0xFF	; 255
    25bc:	61 e0       	ldi	r22, 0x01	; 1
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	r = double_num_input(12);
    25c4:	8c e0       	ldi	r24, 0x0C	; 12
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_Z16double_num_inputi>
    25cc:	8b 01       	movw	r16, r22
    25ce:	9c 01       	movw	r18, r24
	double ans = simpson_integration(s,l,r);
    25d0:	b7 01       	movw	r22, r14
    25d2:	a6 01       	movw	r20, r12
    25d4:	ce 01       	movw	r24, r28
    25d6:	cc 96       	adiw	r24, 0x3c	; 60
    25d8:	0e 94 8e 10 	call	0x211c	; 0x211c <_Z19simpson_integrationPcdd>
    25dc:	6b 01       	movw	r12, r22
    25de:	7c 01       	movw	r14, r24
	
	//printing ans
	char text[] = "Ans =";
    25e0:	86 e0       	ldi	r24, 0x06	; 6
    25e2:	ed e5       	ldi	r30, 0x5D	; 93
    25e4:	f2 e0       	ldi	r31, 0x02	; 2
    25e6:	de 01       	movw	r26, r28
    25e8:	af 5a       	subi	r26, 0xAF	; 175
    25ea:	bf 4f       	sbci	r27, 0xFF	; 255
    25ec:	01 90       	ld	r0, Z+
    25ee:	0d 92       	st	X+, r0
    25f0:	8a 95       	dec	r24
    25f2:	e1 f7       	brne	.-8      	; 0x25ec <_Z7simpsonv+0x340>
	show_text(text,1);
    25f4:	61 e0       	ldi	r22, 0x01	; 1
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	ce 01       	movw	r24, r28
    25fa:	8f 5a       	subi	r24, 0xAF	; 175
    25fc:	9f 4f       	sbci	r25, 0xFF	; 255
    25fe:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	dtostrf(ans,1,2,s);
    2602:	8e 01       	movw	r16, r28
    2604:	04 5c       	subi	r16, 0xC4	; 196
    2606:	1f 4f       	sbci	r17, 0xFF	; 255
    2608:	22 e0       	ldi	r18, 0x02	; 2
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	c7 01       	movw	r24, r14
    260e:	b6 01       	movw	r22, r12
    2610:	0e 94 55 22 	call	0x44aa	; 0x44aa <dtostrf>
	show_text(s,12);
    2614:	6c e0       	ldi	r22, 0x0C	; 12
    2616:	70 e0       	ldi	r23, 0x00	; 0
    2618:	c8 01       	movw	r24, r16
    261a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	80 cf       	rjmp	.-256    	; 0x2524 <_Z7simpsonv+0x278>
		{
			break;
		}
	}
	_delay_ms(500);
    2624:	c6 5a       	subi	r28, 0xA6	; 166
    2626:	df 4f       	sbci	r29, 0xFF	; 255
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	ef 90       	pop	r14
    263e:	df 90       	pop	r13
    2640:	cf 90       	pop	r12
    2642:	bf 90       	pop	r11
    2644:	af 90       	pop	r10
    2646:	9f 90       	pop	r9
    2648:	8f 90       	pop	r8
    264a:	7f 90       	pop	r7
    264c:	6f 90       	pop	r6
    264e:	5f 90       	pop	r5
    2650:	4f 90       	pop	r4
    2652:	3f 90       	pop	r3
    2654:	2f 90       	pop	r2
    2656:	08 95       	ret

00002658 <_Z12show_and_getPcS_>:
void show_and_get(char *F, char * s)
{
    2658:	2f 92       	push	r2
    265a:	3f 92       	push	r3
    265c:	4f 92       	push	r4
    265e:	5f 92       	push	r5
    2660:	6f 92       	push	r6
    2662:	7f 92       	push	r7
    2664:	8f 92       	push	r8
    2666:	9f 92       	push	r9
    2668:	af 92       	push	r10
    266a:	bf 92       	push	r11
    266c:	cf 92       	push	r12
    266e:	df 92       	push	r13
    2670:	ef 92       	push	r14
    2672:	ff 92       	push	r15
    2674:	0f 93       	push	r16
    2676:	1f 93       	push	r17
    2678:	cf 93       	push	r28
    267a:	df 93       	push	r29
    267c:	ec 01       	movw	r28, r24
    267e:	6b 01       	movw	r12, r22
	LCD_Clear();
    2680:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
    2684:	2f ef       	ldi	r18, 0xFF	; 255
    2686:	81 ee       	ldi	r24, 0xE1	; 225
    2688:	94 e0       	ldi	r25, 0x04	; 4
    268a:	21 50       	subi	r18, 0x01	; 1
    268c:	80 40       	sbci	r24, 0x00	; 0
    268e:	90 40       	sbci	r25, 0x00	; 0
    2690:	e1 f7       	brne	.-8      	; 0x268a <_Z12show_and_getPcS_+0x32>
    2692:	00 c0       	rjmp	.+0      	; 0x2694 <_Z12show_and_getPcS_+0x3c>
    2694:	00 00       	nop
	_delay_ms(200);
	DisplayText(1,1,F);
    2696:	ae 01       	movw	r20, r28
    2698:	61 e0       	ldi	r22, 0x01	; 1
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
    26a0:	ef ef       	ldi	r30, 0xFF	; 255
    26a2:	f1 ee       	ldi	r31, 0xE1	; 225
    26a4:	24 e0       	ldi	r18, 0x04	; 4
    26a6:	e1 50       	subi	r30, 0x01	; 1
    26a8:	f0 40       	sbci	r31, 0x00	; 0
    26aa:	20 40       	sbci	r18, 0x00	; 0
    26ac:	e1 f7       	brne	.-8      	; 0x26a6 <_Z12show_and_getPcS_+0x4e>
    26ae:	00 c0       	rjmp	.+0      	; 0x26b0 <_Z12show_and_getPcS_+0x58>
    26b0:	00 00       	nop
	_delay_ms(200);
	
	int len=0;
	int where=12;
    26b2:	0f 2e       	mov	r0, r31
    26b4:	fc e0       	ldi	r31, 0x0C	; 12
    26b6:	4f 2e       	mov	r4, r31
    26b8:	51 2c       	mov	r5, r1
    26ba:	f0 2d       	mov	r31, r0
	LCD_Clear();
	_delay_ms(200);
	DisplayText(1,1,F);
	_delay_ms(200);
	
	int len=0;
    26bc:	00 e0       	ldi	r16, 0x00	; 0
    26be:	10 e0       	ldi	r17, 0x00	; 0
	int where=12;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    26c0:	22 24       	eor	r2, r2
    26c2:	23 94       	inc	r2
    26c4:	31 2c       	mov	r3, r1
    26c6:	0f 2e       	mov	r0, r31
    26c8:	f0 e6       	ldi	r31, 0x60	; 96
    26ca:	6f 2e       	mov	r6, r31
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	7f 2e       	mov	r7, r31
    26d0:	f0 2d       	mov	r31, r0
	
	int len=0;
	int where=12;
	while (1)
	{
		for(int c=4;c<8;c++)
    26d2:	68 94       	set
    26d4:	aa 24       	eor	r10, r10
    26d6:	a2 f8       	bld	r10, 2
    26d8:	b1 2c       	mov	r11, r1
		{
			PORTB=1<<c;
    26da:	c1 01       	movw	r24, r2
    26dc:	0a 2c       	mov	r0, r10
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <_Z12show_and_getPcS_+0x8c>
    26e0:	88 0f       	add	r24, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	0a 94       	dec	r0
    26e6:	e2 f7       	brpl	.-8      	; 0x26e0 <_Z12show_and_getPcS_+0x88>
    26e8:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    26ea:	8b bb       	out	0x1b, r24	; 27
    26ec:	c5 01       	movw	r24, r10
    26ee:	84 54       	subi	r24, 0x44	; 68
    26f0:	9f 4f       	sbci	r25, 0xFF	; 255
    26f2:	4c 01       	movw	r8, r24
    26f4:	73 01       	movw	r14, r6
			for(int r=0;r<4;r++)
    26f6:	c0 e0       	ldi	r28, 0x00	; 0
    26f8:	d0 e0       	ldi	r29, 0x00	; 0
			{
				if(PINB&(1<<r))
    26fa:	86 b3       	in	r24, 0x16	; 22
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0c 2e       	mov	r0, r28
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <_Z12show_and_getPcS_+0xae>
    2702:	95 95       	asr	r25
    2704:	87 95       	ror	r24
    2706:	0a 94       	dec	r0
    2708:	e2 f7       	brpl	.-8      	; 0x2702 <_Z12show_and_getPcS_+0xaa>
    270a:	80 ff       	sbrs	r24, 0
    270c:	39 c0       	rjmp	.+114    	; 0x2780 <_Z12show_and_getPcS_+0x128>
				{
					if(mat[r][c-4]=='C')
    270e:	f4 01       	movw	r30, r8
    2710:	80 81       	ld	r24, Z
    2712:	83 34       	cpi	r24, 0x43	; 67
    2714:	79 f4       	brne	.+30     	; 0x2734 <_Z12show_and_getPcS_+0xdc>
					{
						len=0;
						s[0]=0;
    2716:	f6 01       	movw	r30, r12
    2718:	10 82       	st	Z, r1
						where=1;
						LCD_Clear();
    271a:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    271e:	a6 01       	movw	r20, r12
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    2728:	44 24       	eor	r4, r4
    272a:	43 94       	inc	r4
    272c:	51 2c       	mov	r5, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    272e:	00 e0       	ldi	r16, 0x00	; 0
    2730:	10 e0       	ldi	r17, 0x00	; 0
    2732:	1c c0       	rjmp	.+56     	; 0x276c <_Z12show_and_getPcS_+0x114>
						where=1;
						LCD_Clear();
					}
					else
					{
						if(mat[r][c-4]=='=')
    2734:	8d 33       	cpi	r24, 0x3D	; 61
    2736:	09 f4       	brne	.+2      	; 0x273a <_Z12show_and_getPcS_+0xe2>
    2738:	92 c0       	rjmp	.+292    	; 0x285e <_Z12show_and_getPcS_+0x206>
						{
							return;
						}
						s[len]=mat[r][c-4];
    273a:	f6 01       	movw	r30, r12
    273c:	e0 0f       	add	r30, r16
    273e:	f1 1f       	adc	r31, r17
    2740:	80 83       	st	Z, r24
						len+=1;
    2742:	0f 5f       	subi	r16, 0xFF	; 255
    2744:	1f 4f       	sbci	r17, 0xFF	; 255
						s[len]=0;
    2746:	f6 01       	movw	r30, r12
    2748:	e0 0f       	add	r30, r16
    274a:	f1 1f       	adc	r31, r17
    274c:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    274e:	a6 01       	movw	r20, r12
    2750:	64 2d       	mov	r22, r4
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    2758:	04 31       	cpi	r16, 0x14	; 20
    275a:	11 05       	cpc	r17, r1
    275c:	39 f4       	brne	.+14     	; 0x276c <_Z12show_and_getPcS_+0x114>
					{
						where+=12;
    275e:	fc e0       	ldi	r31, 0x0C	; 12
    2760:	4f 0e       	add	r4, r31
    2762:	51 1c       	adc	r5, r1
						len=0;
						s[0]=0;
    2764:	f6 01       	movw	r30, r12
    2766:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    2768:	00 e0       	ldi	r16, 0x00	; 0
    276a:	10 e0       	ldi	r17, 0x00	; 0
    276c:	ff ef       	ldi	r31, 0xFF	; 255
    276e:	24 e3       	ldi	r18, 0x34	; 52
    2770:	8c e0       	ldi	r24, 0x0C	; 12
    2772:	f1 50       	subi	r31, 0x01	; 1
    2774:	20 40       	sbci	r18, 0x00	; 0
    2776:	80 40       	sbci	r24, 0x00	; 0
    2778:	e1 f7       	brne	.-8      	; 0x2772 <_Z12show_and_getPcS_+0x11a>
    277a:	00 c0       	rjmp	.+0      	; 0x277c <_Z12show_and_getPcS_+0x124>
    277c:	00 00       	nop
    277e:	52 c0       	rjmp	.+164    	; 0x2824 <_Z12show_and_getPcS_+0x1cc>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    2780:	89 b3       	in	r24, 0x19	; 25
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	0c 2e       	mov	r0, r28
    2786:	02 c0       	rjmp	.+4      	; 0x278c <_Z12show_and_getPcS_+0x134>
    2788:	95 95       	asr	r25
    278a:	87 95       	ror	r24
    278c:	0a 94       	dec	r0
    278e:	e2 f7       	brpl	.-8      	; 0x2788 <_Z12show_and_getPcS_+0x130>
    2790:	80 ff       	sbrs	r24, 0
    2792:	48 c0       	rjmp	.+144    	; 0x2824 <_Z12show_and_getPcS_+0x1cc>
				{
					if(mat2[r][c-4][0]=='<')
    2794:	f7 01       	movw	r30, r14
    2796:	80 81       	ld	r24, Z
    2798:	8c 33       	cpi	r24, 0x3C	; 60
    279a:	f9 f4       	brne	.+62     	; 0x27da <_Z12show_and_getPcS_+0x182>
					{
						if(len==0){
    279c:	01 15       	cp	r16, r1
    279e:	11 05       	cpc	r17, r1
    27a0:	51 f4       	brne	.+20     	; 0x27b6 <_Z12show_and_getPcS_+0x15e>
    27a2:	ff ef       	ldi	r31, 0xFF	; 255
    27a4:	24 e3       	ldi	r18, 0x34	; 52
    27a6:	8c e0       	ldi	r24, 0x0C	; 12
    27a8:	f1 50       	subi	r31, 0x01	; 1
    27aa:	20 40       	sbci	r18, 0x00	; 0
    27ac:	80 40       	sbci	r24, 0x00	; 0
    27ae:	e1 f7       	brne	.-8      	; 0x27a8 <_Z12show_and_getPcS_+0x150>
    27b0:	00 c0       	rjmp	.+0      	; 0x27b2 <_Z12show_and_getPcS_+0x15a>
    27b2:	00 00       	nop
    27b4:	37 c0       	rjmp	.+110    	; 0x2824 <_Z12show_and_getPcS_+0x1cc>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    27b6:	f6 01       	movw	r30, r12
    27b8:	e0 0f       	add	r30, r16
    27ba:	f1 1f       	adc	r31, r17
    27bc:	31 97       	sbiw	r30, 0x01	; 1
    27be:	90 e2       	ldi	r25, 0x20	; 32
    27c0:	90 83       	st	Z, r25
						DisplayText(1,where,s);
    27c2:	a6 01       	movw	r20, r12
    27c4:	64 2d       	mov	r22, r4
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						len--;
    27cc:	01 50       	subi	r16, 0x01	; 1
    27ce:	11 09       	sbc	r17, r1
						s[len]=0;
    27d0:	f6 01       	movw	r30, r12
    27d2:	e0 0f       	add	r30, r16
    27d4:	f1 1f       	adc	r31, r17
    27d6:	10 82       	st	Z, r1
    27d8:	0d c0       	rjmp	.+26     	; 0x27f4 <_Z12show_and_getPcS_+0x19c>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    27da:	a7 01       	movw	r20, r14
    27dc:	b8 01       	movw	r22, r16
    27de:	c6 01       	movw	r24, r12
    27e0:	0e 94 15 09 	call	0x122a	; 0x122a <_Z6appendPciS_>
						len = strlen(s);
    27e4:	f6 01       	movw	r30, r12
    27e6:	01 90       	ld	r0, Z+
    27e8:	00 20       	and	r0, r0
    27ea:	e9 f7       	brne	.-6      	; 0x27e6 <_Z12show_and_getPcS_+0x18e>
    27ec:	31 97       	sbiw	r30, 0x01	; 1
    27ee:	8f 01       	movw	r16, r30
    27f0:	0c 19       	sub	r16, r12
    27f2:	1d 09       	sbc	r17, r13
					}
					DisplayText(1,where,s);
    27f4:	a6 01       	movw	r20, r12
    27f6:	64 2d       	mov	r22, r4
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    27fe:	04 31       	cpi	r16, 0x14	; 20
    2800:	11 05       	cpc	r17, r1
    2802:	39 f4       	brne	.+14     	; 0x2812 <_Z12show_and_getPcS_+0x1ba>
					{
						where+=12;
    2804:	ec e0       	ldi	r30, 0x0C	; 12
    2806:	4e 0e       	add	r4, r30
    2808:	51 1c       	adc	r5, r1
						len=0;
						s[0]=0;
    280a:	f6 01       	movw	r30, r12
    280c:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    280e:	00 e0       	ldi	r16, 0x00	; 0
    2810:	10 e0       	ldi	r17, 0x00	; 0
    2812:	ff ef       	ldi	r31, 0xFF	; 255
    2814:	24 e3       	ldi	r18, 0x34	; 52
    2816:	8c e0       	ldi	r24, 0x0C	; 12
    2818:	f1 50       	subi	r31, 0x01	; 1
    281a:	20 40       	sbci	r18, 0x00	; 0
    281c:	80 40       	sbci	r24, 0x00	; 0
    281e:	e1 f7       	brne	.-8      	; 0x2818 <_Z12show_and_getPcS_+0x1c0>
    2820:	00 c0       	rjmp	.+0      	; 0x2822 <_Z12show_and_getPcS_+0x1ca>
    2822:	00 00       	nop
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    2824:	21 96       	adiw	r28, 0x01	; 1
    2826:	98 e1       	ldi	r25, 0x18	; 24
    2828:	e9 0e       	add	r14, r25
    282a:	f1 1c       	adc	r15, r1
    282c:	e4 e0       	ldi	r30, 0x04	; 4
    282e:	8e 0e       	add	r8, r30
    2830:	91 1c       	adc	r9, r1
    2832:	c4 30       	cpi	r28, 0x04	; 4
    2834:	d1 05       	cpc	r29, r1
    2836:	09 f0       	breq	.+2      	; 0x283a <_Z12show_and_getPcS_+0x1e2>
    2838:	60 cf       	rjmp	.-320    	; 0x26fa <_Z12show_and_getPcS_+0xa2>
    283a:	8f e1       	ldi	r24, 0x1F	; 31
    283c:	9e e4       	ldi	r25, 0x4E	; 78
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <_Z12show_and_getPcS_+0x1e6>
    2842:	00 c0       	rjmp	.+0      	; 0x2844 <_Z12show_and_getPcS_+0x1ec>
    2844:	00 00       	nop
	
	int len=0;
	int where=12;
	while (1)
	{
		for(int c=4;c<8;c++)
    2846:	9f ef       	ldi	r25, 0xFF	; 255
    2848:	a9 1a       	sub	r10, r25
    284a:	b9 0a       	sbc	r11, r25
    284c:	e6 e0       	ldi	r30, 0x06	; 6
    284e:	6e 0e       	add	r6, r30
    2850:	71 1c       	adc	r7, r1
    2852:	f8 e0       	ldi	r31, 0x08	; 8
    2854:	af 16       	cp	r10, r31
    2856:	b1 04       	cpc	r11, r1
    2858:	09 f0       	breq	.+2      	; 0x285c <_Z12show_and_getPcS_+0x204>
    285a:	3f cf       	rjmp	.-386    	; 0x26da <_Z12show_and_getPcS_+0x82>
    285c:	34 cf       	rjmp	.-408    	; 0x26c6 <_Z12show_and_getPcS_+0x6e>
			}
			
			_delay_ms(10);
		}
	}
}
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	1f 91       	pop	r17
    2864:	0f 91       	pop	r16
    2866:	ff 90       	pop	r15
    2868:	ef 90       	pop	r14
    286a:	df 90       	pop	r13
    286c:	cf 90       	pop	r12
    286e:	bf 90       	pop	r11
    2870:	af 90       	pop	r10
    2872:	9f 90       	pop	r9
    2874:	8f 90       	pop	r8
    2876:	7f 90       	pop	r7
    2878:	6f 90       	pop	r6
    287a:	5f 90       	pop	r5
    287c:	4f 90       	pop	r4
    287e:	3f 90       	pop	r3
    2880:	2f 90       	pop	r2
    2882:	08 95       	ret

00002884 <_Z10graph_plotv>:


void graph_plot()
{
    2884:	2f 92       	push	r2
    2886:	3f 92       	push	r3
    2888:	4f 92       	push	r4
    288a:	5f 92       	push	r5
    288c:	6f 92       	push	r6
    288e:	7f 92       	push	r7
    2890:	8f 92       	push	r8
    2892:	9f 92       	push	r9
    2894:	af 92       	push	r10
    2896:	bf 92       	push	r11
    2898:	cf 92       	push	r12
    289a:	df 92       	push	r13
    289c:	ef 92       	push	r14
    289e:	ff 92       	push	r15
    28a0:	0f 93       	push	r16
    28a2:	1f 93       	push	r17
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	c2 57       	subi	r28, 0x72	; 114
    28ae:	d1 09       	sbc	r29, r1
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
	char F1[]="F(x) = ";
    28ba:	88 e0       	ldi	r24, 0x08	; 8
    28bc:	e3 e6       	ldi	r30, 0x63	; 99
    28be:	f2 e0       	ldi	r31, 0x02	; 2
    28c0:	de 01       	movw	r26, r28
    28c2:	11 96       	adiw	r26, 0x01	; 1
    28c4:	01 90       	ld	r0, Z+
    28c6:	0d 92       	st	X+, r0
    28c8:	8a 95       	dec	r24
    28ca:	e1 f7       	brne	.-8      	; 0x28c4 <_Z10graph_plotv+0x40>
	char s1[10];
	show_and_get(F1,s1);
    28cc:	be 01       	movw	r22, r28
    28ce:	67 5f       	subi	r22, 0xF7	; 247
    28d0:	7f 4f       	sbci	r23, 0xFF	; 255
    28d2:	ce 01       	movw	r24, r28
    28d4:	01 96       	adiw	r24, 0x01	; 1
    28d6:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z12show_and_getPcS_>
	
	strcpy(F1,"minX = ");
    28da:	88 e0       	ldi	r24, 0x08	; 8
    28dc:	eb e6       	ldi	r30, 0x6B	; 107
    28de:	f2 e0       	ldi	r31, 0x02	; 2
    28e0:	de 01       	movw	r26, r28
    28e2:	11 96       	adiw	r26, 0x01	; 1
    28e4:	01 90       	ld	r0, Z+
    28e6:	0d 92       	st	X+, r0
    28e8:	8a 95       	dec	r24
    28ea:	e1 f7       	brne	.-8      	; 0x28e4 <_Z10graph_plotv+0x60>
	char s2[10];
	show_and_get(F1,s2);
    28ec:	be 01       	movw	r22, r28
    28ee:	6d 5e       	subi	r22, 0xED	; 237
    28f0:	7f 4f       	sbci	r23, 0xFF	; 255
    28f2:	ce 01       	movw	r24, r28
    28f4:	01 96       	adiw	r24, 0x01	; 1
    28f6:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z12show_and_getPcS_>
	double l=ob.eval_exp(s2);
    28fa:	be 01       	movw	r22, r28
    28fc:	6d 5e       	subi	r22, 0xED	; 237
    28fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2900:	8c e3       	ldi	r24, 0x3C	; 60
    2902:	93 e0       	ldi	r25, 0x03	; 3
    2904:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN6parser8eval_expEPc>
    2908:	62 96       	adiw	r28, 0x12	; 18
    290a:	6f af       	std	Y+63, r22	; 0x3f
    290c:	62 97       	sbiw	r28, 0x12	; 18
    290e:	63 96       	adiw	r28, 0x13	; 19
    2910:	7f af       	std	Y+63, r23	; 0x3f
    2912:	63 97       	sbiw	r28, 0x13	; 19
    2914:	64 96       	adiw	r28, 0x14	; 20
    2916:	8f af       	std	Y+63, r24	; 0x3f
    2918:	64 97       	sbiw	r28, 0x14	; 20
    291a:	19 2f       	mov	r17, r25
	
	strcpy(F1,"maxX = ");
    291c:	88 e0       	ldi	r24, 0x08	; 8
    291e:	e3 e7       	ldi	r30, 0x73	; 115
    2920:	f2 e0       	ldi	r31, 0x02	; 2
    2922:	de 01       	movw	r26, r28
    2924:	11 96       	adiw	r26, 0x01	; 1
    2926:	01 90       	ld	r0, Z+
    2928:	0d 92       	st	X+, r0
    292a:	8a 95       	dec	r24
    292c:	e1 f7       	brne	.-8      	; 0x2926 <_Z10graph_plotv+0xa2>
	show_and_get(F1,s2);
    292e:	be 01       	movw	r22, r28
    2930:	6d 5e       	subi	r22, 0xED	; 237
    2932:	7f 4f       	sbci	r23, 0xFF	; 255
    2934:	ce 01       	movw	r24, r28
    2936:	01 96       	adiw	r24, 0x01	; 1
    2938:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z12show_and_getPcS_>
	double r=ob.eval_exp(s2);
    293c:	be 01       	movw	r22, r28
    293e:	6d 5e       	subi	r22, 0xED	; 237
    2940:	7f 4f       	sbci	r23, 0xFF	; 255
    2942:	8c e3       	ldi	r24, 0x3C	; 60
    2944:	93 e0       	ldi	r25, 0x03	; 3
    2946:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN6parser8eval_expEPc>
    294a:	66 2e       	mov	r6, r22
    294c:	77 2e       	mov	r7, r23
    294e:	88 2e       	mov	r8, r24
    2950:	99 2e       	mov	r9, r25
	
	const int T=12;

	if(l>r)
    2952:	26 2f       	mov	r18, r22
    2954:	37 2f       	mov	r19, r23
    2956:	48 2f       	mov	r20, r24
    2958:	59 2f       	mov	r21, r25
    295a:	62 96       	adiw	r28, 0x12	; 18
    295c:	6f ad       	ldd	r22, Y+63	; 0x3f
    295e:	62 97       	sbiw	r28, 0x12	; 18
    2960:	63 96       	adiw	r28, 0x13	; 19
    2962:	7f ad       	ldd	r23, Y+63	; 0x3f
    2964:	63 97       	sbiw	r28, 0x13	; 19
    2966:	64 96       	adiw	r28, 0x14	; 20
    2968:	8f ad       	ldd	r24, Y+63	; 0x3f
    296a:	64 97       	sbiw	r28, 0x14	; 20
    296c:	91 2f       	mov	r25, r17
    296e:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <__gesf2>
    2972:	18 16       	cp	r1, r24
    2974:	c4 f4       	brge	.+48     	; 0x29a6 <_Z10graph_plotv+0x122>
    2976:	62 96       	adiw	r28, 0x12	; 18
    2978:	3f ad       	ldd	r19, Y+63	; 0x3f
    297a:	62 97       	sbiw	r28, 0x12	; 18
    297c:	63 96       	adiw	r28, 0x13	; 19
    297e:	2f ad       	ldd	r18, Y+63	; 0x3f
    2980:	63 97       	sbiw	r28, 0x13	; 19
    2982:	64 96       	adiw	r28, 0x14	; 20
    2984:	9f ad       	ldd	r25, Y+63	; 0x3f
    2986:	64 97       	sbiw	r28, 0x14	; 20
    2988:	81 2f       	mov	r24, r17
	{
		double t=r;
		r=l;
		l=t;
    298a:	62 96       	adiw	r28, 0x12	; 18
    298c:	6f ae       	std	Y+63, r6	; 0x3f
    298e:	62 97       	sbiw	r28, 0x12	; 18
    2990:	63 96       	adiw	r28, 0x13	; 19
    2992:	7f ae       	std	Y+63, r7	; 0x3f
    2994:	63 97       	sbiw	r28, 0x13	; 19
    2996:	64 96       	adiw	r28, 0x14	; 20
    2998:	8f ae       	std	Y+63, r8	; 0x3f
    299a:	64 97       	sbiw	r28, 0x14	; 20
    299c:	19 2d       	mov	r17, r9
	const int T=12;

	if(l>r)
	{
		double t=r;
		r=l;
    299e:	63 2e       	mov	r6, r19
    29a0:	72 2e       	mov	r7, r18
    29a2:	89 2e       	mov	r8, r25
    29a4:	98 2e       	mov	r9, r24
    29a6:	2e 01       	movw	r4, r28
    29a8:	2d e1       	ldi	r18, 0x1D	; 29
    29aa:	42 0e       	add	r4, r18
    29ac:	51 1c       	adc	r5, r1
    29ae:	12 01       	movw	r2, r4
    29b0:	80 e3       	ldi	r24, 0x30	; 48
    29b2:	28 0e       	add	r2, r24
    29b4:	31 1c       	adc	r3, r1
    29b6:	72 01       	movw	r14, r4
	}
	
	double save_y[T];
	
	int w=0;
	for(double x=l;w<T;w++)
    29b8:	62 96       	adiw	r28, 0x12	; 18
    29ba:	df ac       	ldd	r13, Y+63	; 0x3f
    29bc:	62 97       	sbiw	r28, 0x12	; 18
    29be:	63 96       	adiw	r28, 0x13	; 19
    29c0:	cf ac       	ldd	r12, Y+63	; 0x3f
    29c2:	63 97       	sbiw	r28, 0x13	; 19
    29c4:	64 96       	adiw	r28, 0x14	; 20
    29c6:	bf ac       	ldd	r11, Y+63	; 0x3f
    29c8:	64 97       	sbiw	r28, 0x14	; 20
    29ca:	a1 2e       	mov	r10, r17
	{
		save_y[w]=evaluate_function(s1,x);
    29cc:	66 96       	adiw	r28, 0x16	; 22
    29ce:	5f ae       	std	Y+63, r5	; 0x3f
    29d0:	4e ae       	std	Y+62, r4	; 0x3e
    29d2:	66 97       	sbiw	r28, 0x16	; 22
    29d4:	56 2c       	mov	r5, r6
    29d6:	47 2c       	mov	r4, r7
    29d8:	71 2e       	mov	r7, r17
    29da:	2e 96       	adiw	r28, 0x0e	; 14
    29dc:	8f ae       	std	Y+63, r8	; 0x3f
    29de:	2e 97       	sbiw	r28, 0x0e	; 14
    29e0:	69 2c       	mov	r6, r9
    29e2:	1b 2d       	mov	r17, r11
    29e4:	0a 2d       	mov	r16, r10
    29e6:	4d 2d       	mov	r20, r13
    29e8:	5c 2d       	mov	r21, r12
    29ea:	61 2f       	mov	r22, r17
    29ec:	70 2f       	mov	r23, r16
    29ee:	ce 01       	movw	r24, r28
    29f0:	09 96       	adiw	r24, 0x09	; 9
    29f2:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    29f6:	f7 01       	movw	r30, r14
    29f8:	61 93       	st	Z+, r22
    29fa:	71 93       	st	Z+, r23
    29fc:	81 93       	st	Z+, r24
    29fe:	91 93       	st	Z+, r25
    2a00:	7f 01       	movw	r14, r30
		_delay_ms(500);
		dtostrf(save_y[w],1,2,t2);
		show_and_get(t2,t2);
		*/
		//_delay_ms(1000);
		x+=(r-l)/(T-1);
    2a02:	62 96       	adiw	r28, 0x12	; 18
    2a04:	2f ad       	ldd	r18, Y+63	; 0x3f
    2a06:	62 97       	sbiw	r28, 0x12	; 18
    2a08:	63 96       	adiw	r28, 0x13	; 19
    2a0a:	3f ad       	ldd	r19, Y+63	; 0x3f
    2a0c:	63 97       	sbiw	r28, 0x13	; 19
    2a0e:	64 96       	adiw	r28, 0x14	; 20
    2a10:	4f ad       	ldd	r20, Y+63	; 0x3f
    2a12:	64 97       	sbiw	r28, 0x14	; 20
    2a14:	57 2d       	mov	r21, r7
    2a16:	65 2d       	mov	r22, r5
    2a18:	74 2d       	mov	r23, r4
    2a1a:	2e 96       	adiw	r28, 0x0e	; 14
    2a1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a1e:	2e 97       	sbiw	r28, 0x0e	; 14
    2a20:	96 2d       	mov	r25, r6
    2a22:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    2a26:	4b 01       	movw	r8, r22
    2a28:	5c 01       	movw	r10, r24
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e3       	ldi	r20, 0x30	; 48
    2a30:	51 e4       	ldi	r21, 0x41	; 65
    2a32:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    2a36:	9b 01       	movw	r18, r22
    2a38:	ac 01       	movw	r20, r24
    2a3a:	6d 2d       	mov	r22, r13
    2a3c:	7c 2d       	mov	r23, r12
    2a3e:	81 2f       	mov	r24, r17
    2a40:	90 2f       	mov	r25, r16
    2a42:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    2a46:	d6 2e       	mov	r13, r22
    2a48:	c7 2e       	mov	r12, r23
    2a4a:	18 2f       	mov	r17, r24
    2a4c:	09 2f       	mov	r16, r25
	}
	
	double save_y[T];
	
	int w=0;
	for(double x=l;w<T;w++)
    2a4e:	2e 14       	cp	r2, r14
    2a50:	3f 04       	cpc	r3, r15
    2a52:	49 f6       	brne	.-110    	; 0x29e6 <_Z10graph_plotv+0x162>
    2a54:	a8 96       	adiw	r28, 0x28	; 40
    2a56:	8c ae       	std	Y+60, r8	; 0x3c
    2a58:	9d ae       	std	Y+61, r9	; 0x3d
    2a5a:	ae ae       	std	Y+62, r10	; 0x3e
    2a5c:	bf ae       	std	Y+63, r11	; 0x3f
    2a5e:	a8 97       	sbiw	r28, 0x28	; 40
    2a60:	66 96       	adiw	r28, 0x16	; 22
    2a62:	4e ac       	ldd	r4, Y+62	; 0x3e
    2a64:	5f ac       	ldd	r5, Y+63	; 0x3f
    2a66:	66 97       	sbiw	r28, 0x16	; 22
    2a68:	17 2d       	mov	r17, r7
    2a6a:	62 01       	movw	r12, r4
    2a6c:	61 2c       	mov	r6, r1
    2a6e:	71 2c       	mov	r7, r1
    2a70:	6d 96       	adiw	r28, 0x1d	; 29
    2a72:	1f ae       	std	Y+63, r1	; 0x3f
    2a74:	6d 97       	sbiw	r28, 0x1d	; 29
    2a76:	a1 96       	adiw	r28, 0x21	; 33
    2a78:	1f ae       	std	Y+63, r1	; 0x3f
    2a7a:	a1 97       	sbiw	r28, 0x21	; 33
    2a7c:	aa 96       	adiw	r28, 0x2a	; 42
    2a7e:	1f ae       	std	Y+63, r1	; 0x3f
    2a80:	aa 97       	sbiw	r28, 0x2a	; 42
    2a82:	ab 96       	adiw	r28, 0x2b	; 43
    2a84:	1f ae       	std	Y+63, r1	; 0x3f
    2a86:	ab 97       	sbiw	r28, 0x2b	; 43
    2a88:	61 96       	adiw	r28, 0x11	; 17
    2a8a:	1c ae       	std	Y+60, r1	; 0x3c
    2a8c:	1d ae       	std	Y+61, r1	; 0x3d
    2a8e:	1e ae       	std	Y+62, r1	; 0x3e
    2a90:	1f ae       	std	Y+63, r1	; 0x3f
    2a92:	61 97       	sbiw	r28, 0x11	; 17
    2a94:	ac 96       	adiw	r28, 0x2c	; 44
    2a96:	1f ae       	std	Y+63, r1	; 0x3f
    2a98:	ac 97       	sbiw	r28, 0x2c	; 44
    2a9a:	ad 96       	adiw	r28, 0x2d	; 45
    2a9c:	1f ae       	std	Y+63, r1	; 0x3f
    2a9e:	ad 97       	sbiw	r28, 0x2d	; 45
    2aa0:	ae 96       	adiw	r28, 0x2e	; 46
    2aa2:	1f ae       	std	Y+63, r1	; 0x3f
    2aa4:	ae 97       	sbiw	r28, 0x2e	; 46
    2aa6:	af 96       	adiw	r28, 0x2f	; 47
    2aa8:	1f ae       	std	Y+63, r1	; 0x3f
    2aaa:	af 97       	sbiw	r28, 0x2f	; 47
    2aac:	00 e0       	ldi	r16, 0x00	; 0
    2aae:	65 96       	adiw	r28, 0x15	; 21
    2ab0:	1f ae       	std	Y+63, r1	; 0x3f
    2ab2:	65 97       	sbiw	r28, 0x15	; 21
    2ab4:	69 96       	adiw	r28, 0x19	; 25
    2ab6:	1f ae       	std	Y+63, r1	; 0x3f
    2ab8:	69 97       	sbiw	r28, 0x19	; 25
    2aba:	a9 96       	adiw	r28, 0x29	; 41
    2abc:	1f ae       	std	Y+63, r1	; 0x3f
    2abe:	a9 97       	sbiw	r28, 0x29	; 41
    2ac0:	e1 96       	adiw	r28, 0x31	; 49
    2ac2:	3f ae       	std	Y+63, r3	; 0x3f
    2ac4:	2e ae       	std	Y+62, r2	; 0x3e
    2ac6:	e1 97       	sbiw	r28, 0x31	; 49
    2ac8:	e3 96       	adiw	r28, 0x33	; 51
    2aca:	5f ae       	std	Y+63, r5	; 0x3f
    2acc:	4e ae       	std	Y+62, r4	; 0x3e
    2ace:	e3 97       	sbiw	r28, 0x33	; 51
    2ad0:	51 2e       	mov	r5, r17
    2ad2:	30 2e       	mov	r3, r16

	
	double mxX=0,mxY=0,mnX=0,mnY=0;
	for(int i=0;i<T;i++)
	{
		if(l+i*(r-l)/(T-1)>mxX) mxX=l+i*(r-l)/(T-1);
    2ad4:	b3 01       	movw	r22, r6
    2ad6:	07 2c       	mov	r0, r7
    2ad8:	00 0c       	add	r0, r0
    2ada:	88 0b       	sbc	r24, r24
    2adc:	99 0b       	sbc	r25, r25
    2ade:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__floatsisf>
    2ae2:	a8 96       	adiw	r28, 0x28	; 40
    2ae4:	2c ad       	ldd	r18, Y+60	; 0x3c
    2ae6:	3d ad       	ldd	r19, Y+61	; 0x3d
    2ae8:	4e ad       	ldd	r20, Y+62	; 0x3e
    2aea:	5f ad       	ldd	r21, Y+63	; 0x3f
    2aec:	a8 97       	sbiw	r28, 0x28	; 40
    2aee:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e3       	ldi	r20, 0x30	; 48
    2af8:	51 e4       	ldi	r21, 0x41	; 65
    2afa:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    2afe:	62 96       	adiw	r28, 0x12	; 18
    2b00:	2f ad       	ldd	r18, Y+63	; 0x3f
    2b02:	62 97       	sbiw	r28, 0x12	; 18
    2b04:	63 96       	adiw	r28, 0x13	; 19
    2b06:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b08:	63 97       	sbiw	r28, 0x13	; 19
    2b0a:	64 96       	adiw	r28, 0x14	; 20
    2b0c:	4f ad       	ldd	r20, Y+63	; 0x3f
    2b0e:	64 97       	sbiw	r28, 0x14	; 20
    2b10:	55 2d       	mov	r21, r5
    2b12:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    2b16:	06 2f       	mov	r16, r22
    2b18:	17 2f       	mov	r17, r23
    2b1a:	f8 2e       	mov	r15, r24
    2b1c:	e9 2e       	mov	r14, r25
    2b1e:	23 2d       	mov	r18, r3
    2b20:	65 96       	adiw	r28, 0x15	; 21
    2b22:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b24:	65 97       	sbiw	r28, 0x15	; 21
    2b26:	69 96       	adiw	r28, 0x19	; 25
    2b28:	4f ad       	ldd	r20, Y+63	; 0x3f
    2b2a:	69 97       	sbiw	r28, 0x19	; 25
    2b2c:	a9 96       	adiw	r28, 0x29	; 41
    2b2e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b30:	a9 97       	sbiw	r28, 0x29	; 41
    2b32:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <__gesf2>
    2b36:	18 16       	cp	r1, r24
    2b38:	54 f4       	brge	.+20     	; 0x2b4e <_Z10graph_plotv+0x2ca>
    2b3a:	30 2e       	mov	r3, r16
    2b3c:	65 96       	adiw	r28, 0x15	; 21
    2b3e:	1f af       	std	Y+63, r17	; 0x3f
    2b40:	65 97       	sbiw	r28, 0x15	; 21
    2b42:	69 96       	adiw	r28, 0x19	; 25
    2b44:	ff ae       	std	Y+63, r15	; 0x3f
    2b46:	69 97       	sbiw	r28, 0x19	; 25
    2b48:	a9 96       	adiw	r28, 0x29	; 41
    2b4a:	ef ae       	std	Y+63, r14	; 0x3f
    2b4c:	a9 97       	sbiw	r28, 0x29	; 41
		if(save_y[i]>mxY) mxY=save_y[i];
    2b4e:	f6 01       	movw	r30, r12
    2b50:	81 90       	ld	r8, Z+
    2b52:	91 90       	ld	r9, Z+
    2b54:	a1 90       	ld	r10, Z+
    2b56:	b1 90       	ld	r11, Z+
    2b58:	6f 01       	movw	r12, r30
    2b5a:	ac 96       	adiw	r28, 0x2c	; 44
    2b5c:	2f ad       	ldd	r18, Y+63	; 0x3f
    2b5e:	ac 97       	sbiw	r28, 0x2c	; 44
    2b60:	ad 96       	adiw	r28, 0x2d	; 45
    2b62:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b64:	ad 97       	sbiw	r28, 0x2d	; 45
    2b66:	ae 96       	adiw	r28, 0x2e	; 46
    2b68:	4f ad       	ldd	r20, Y+63	; 0x3f
    2b6a:	ae 97       	sbiw	r28, 0x2e	; 46
    2b6c:	af 96       	adiw	r28, 0x2f	; 47
    2b6e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b70:	af 97       	sbiw	r28, 0x2f	; 47
    2b72:	c5 01       	movw	r24, r10
    2b74:	b4 01       	movw	r22, r8
    2b76:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <__gesf2>
    2b7a:	18 16       	cp	r1, r24
    2b7c:	64 f4       	brge	.+24     	; 0x2b96 <_Z10graph_plotv+0x312>
    2b7e:	ac 96       	adiw	r28, 0x2c	; 44
    2b80:	8f ae       	std	Y+63, r8	; 0x3f
    2b82:	ac 97       	sbiw	r28, 0x2c	; 44
    2b84:	ad 96       	adiw	r28, 0x2d	; 45
    2b86:	9f ae       	std	Y+63, r9	; 0x3f
    2b88:	ad 97       	sbiw	r28, 0x2d	; 45
    2b8a:	ae 96       	adiw	r28, 0x2e	; 46
    2b8c:	af ae       	std	Y+63, r10	; 0x3f
    2b8e:	ae 97       	sbiw	r28, 0x2e	; 46
    2b90:	af 96       	adiw	r28, 0x2f	; 47
    2b92:	bf ae       	std	Y+63, r11	; 0x3f
    2b94:	af 97       	sbiw	r28, 0x2f	; 47
		
		if(l+i*(r-l)/(T-1)<mnX) mnX=l+i*(r-l)/(T-1);
    2b96:	61 96       	adiw	r28, 0x11	; 17
    2b98:	2c ad       	ldd	r18, Y+60	; 0x3c
    2b9a:	3d ad       	ldd	r19, Y+61	; 0x3d
    2b9c:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b9e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ba0:	61 97       	sbiw	r28, 0x11	; 17
    2ba2:	60 2f       	mov	r22, r16
    2ba4:	71 2f       	mov	r23, r17
    2ba6:	8f 2d       	mov	r24, r15
    2ba8:	9e 2d       	mov	r25, r14
    2baa:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    2bae:	88 23       	and	r24, r24
    2bb0:	54 f4       	brge	.+20     	; 0x2bc6 <_Z10graph_plotv+0x342>
    2bb2:	80 2f       	mov	r24, r16
    2bb4:	91 2f       	mov	r25, r17
    2bb6:	af 2d       	mov	r26, r15
    2bb8:	be 2d       	mov	r27, r14
    2bba:	61 96       	adiw	r28, 0x11	; 17
    2bbc:	8c af       	std	Y+60, r24	; 0x3c
    2bbe:	9d af       	std	Y+61, r25	; 0x3d
    2bc0:	ae af       	std	Y+62, r26	; 0x3e
    2bc2:	bf af       	std	Y+63, r27	; 0x3f
    2bc4:	61 97       	sbiw	r28, 0x11	; 17
		if(save_y[i]<mnY) mnY=save_y[i];	
    2bc6:	6d 96       	adiw	r28, 0x1d	; 29
    2bc8:	2f ad       	ldd	r18, Y+63	; 0x3f
    2bca:	6d 97       	sbiw	r28, 0x1d	; 29
    2bcc:	a1 96       	adiw	r28, 0x21	; 33
    2bce:	3f ad       	ldd	r19, Y+63	; 0x3f
    2bd0:	a1 97       	sbiw	r28, 0x21	; 33
    2bd2:	aa 96       	adiw	r28, 0x2a	; 42
    2bd4:	4f ad       	ldd	r20, Y+63	; 0x3f
    2bd6:	aa 97       	sbiw	r28, 0x2a	; 42
    2bd8:	ab 96       	adiw	r28, 0x2b	; 43
    2bda:	5f ad       	ldd	r21, Y+63	; 0x3f
    2bdc:	ab 97       	sbiw	r28, 0x2b	; 43
    2bde:	c5 01       	movw	r24, r10
    2be0:	b4 01       	movw	r22, r8
    2be2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    2be6:	88 23       	and	r24, r24
    2be8:	64 f4       	brge	.+24     	; 0x2c02 <_Z10graph_plotv+0x37e>
    2bea:	6d 96       	adiw	r28, 0x1d	; 29
    2bec:	8f ae       	std	Y+63, r8	; 0x3f
    2bee:	6d 97       	sbiw	r28, 0x1d	; 29
    2bf0:	a1 96       	adiw	r28, 0x21	; 33
    2bf2:	9f ae       	std	Y+63, r9	; 0x3f
    2bf4:	a1 97       	sbiw	r28, 0x21	; 33
    2bf6:	aa 96       	adiw	r28, 0x2a	; 42
    2bf8:	af ae       	std	Y+63, r10	; 0x3f
    2bfa:	aa 97       	sbiw	r28, 0x2a	; 42
    2bfc:	ab 96       	adiw	r28, 0x2b	; 43
    2bfe:	bf ae       	std	Y+63, r11	; 0x3f
    2c00:	ab 97       	sbiw	r28, 0x2b	; 43
	}
	//l+i*(r-l)/(T-1)

	
	double mxX=0,mxY=0,mnX=0,mnY=0;
	for(int i=0;i<T;i++)
    2c02:	ff ef       	ldi	r31, 0xFF	; 255
    2c04:	6f 1a       	sub	r6, r31
    2c06:	7f 0a       	sbc	r7, r31
    2c08:	2c e0       	ldi	r18, 0x0C	; 12
    2c0a:	62 16       	cp	r6, r18
    2c0c:	71 04       	cpc	r7, r1
    2c0e:	09 f0       	breq	.+2      	; 0x2c12 <_Z10graph_plotv+0x38e>
    2c10:	61 cf       	rjmp	.-318    	; 0x2ad4 <_Z10graph_plotv+0x250>
    2c12:	15 2d       	mov	r17, r5
    2c14:	e3 96       	adiw	r28, 0x33	; 51
    2c16:	4e ac       	ldd	r4, Y+62	; 0x3e
    2c18:	5f ac       	ldd	r5, Y+63	; 0x3f
    2c1a:	e3 97       	sbiw	r28, 0x33	; 51
    2c1c:	03 2d       	mov	r16, r3
    2c1e:	e1 96       	adiw	r28, 0x31	; 49
    2c20:	2e ac       	ldd	r2, Y+62	; 0x3e
    2c22:	3f ac       	ldd	r3, Y+63	; 0x3f
    2c24:	e1 97       	sbiw	r28, 0x31	; 49
    2c26:	72 01       	movw	r14, r4
    2c28:	6d 96       	adiw	r28, 0x1d	; 29
    2c2a:	df ac       	ldd	r13, Y+63	; 0x3f
    2c2c:	6d 97       	sbiw	r28, 0x1d	; 29
    2c2e:	a1 96       	adiw	r28, 0x21	; 33
    2c30:	cf ac       	ldd	r12, Y+63	; 0x3f
    2c32:	a1 97       	sbiw	r28, 0x21	; 33
    2c34:	aa 96       	adiw	r28, 0x2a	; 42
    2c36:	bf ac       	ldd	r11, Y+63	; 0x3f
    2c38:	aa 97       	sbiw	r28, 0x2a	; 42
    2c3a:	ab 96       	adiw	r28, 0x2b	; 43
    2c3c:	af ac       	ldd	r10, Y+63	; 0x3f
    2c3e:	ab 97       	sbiw	r28, 0x2b	; 43
		if(l+i*(r-l)/(T-1)<mnX) mnX=l+i*(r-l)/(T-1);
		if(save_y[i]<mnY) mnY=save_y[i];	
	}
	for(int i=0;i<T;i++)
	{
		save_y[i]-=mnY;
    2c40:	2d 2d       	mov	r18, r13
    2c42:	3c 2d       	mov	r19, r12
    2c44:	4b 2d       	mov	r20, r11
    2c46:	5a 2d       	mov	r21, r10
    2c48:	f7 01       	movw	r30, r14
    2c4a:	60 81       	ld	r22, Z
    2c4c:	71 81       	ldd	r23, Z+1	; 0x01
    2c4e:	82 81       	ldd	r24, Z+2	; 0x02
    2c50:	93 81       	ldd	r25, Z+3	; 0x03
    2c52:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    2c56:	f7 01       	movw	r30, r14
    2c58:	61 93       	st	Z+, r22
    2c5a:	71 93       	st	Z+, r23
    2c5c:	81 93       	st	Z+, r24
    2c5e:	91 93       	st	Z+, r25
    2c60:	7f 01       	movw	r14, r30
		if(save_y[i]>mxY) mxY=save_y[i];
		
		if(l+i*(r-l)/(T-1)<mnX) mnX=l+i*(r-l)/(T-1);
		if(save_y[i]<mnY) mnY=save_y[i];	
	}
	for(int i=0;i<T;i++)
    2c62:	2e 16       	cp	r2, r30
    2c64:	3f 06       	cpc	r3, r31
    2c66:	61 f7       	brne	.-40     	; 0x2c40 <_Z10graph_plotv+0x3bc>
	{
		save_y[i]-=mnY;
	}
	//((l+i*(r-l)/(T-1))-mnX)
	double scaleX=120/(mxX-mnX);
    2c68:	61 96       	adiw	r28, 0x11	; 17
    2c6a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c6c:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c6e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c70:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c72:	61 97       	sbiw	r28, 0x11	; 17
    2c74:	60 2f       	mov	r22, r16
    2c76:	65 96       	adiw	r28, 0x15	; 21
    2c78:	7f ad       	ldd	r23, Y+63	; 0x3f
    2c7a:	65 97       	sbiw	r28, 0x15	; 21
    2c7c:	69 96       	adiw	r28, 0x19	; 25
    2c7e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c80:	69 97       	sbiw	r28, 0x19	; 25
    2c82:	a9 96       	adiw	r28, 0x29	; 41
    2c84:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c86:	a9 97       	sbiw	r28, 0x29	; 41
    2c88:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    2c8c:	9b 01       	movw	r18, r22
    2c8e:	ac 01       	movw	r20, r24
    2c90:	60 e0       	ldi	r22, 0x00	; 0
    2c92:	70 e0       	ldi	r23, 0x00	; 0
    2c94:	80 ef       	ldi	r24, 0xF0	; 240
    2c96:	92 e4       	ldi	r25, 0x42	; 66
    2c98:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    2c9c:	68 96       	adiw	r28, 0x18	; 24
    2c9e:	6c af       	std	Y+60, r22	; 0x3c
    2ca0:	7d af       	std	Y+61, r23	; 0x3d
    2ca2:	8e af       	std	Y+62, r24	; 0x3e
    2ca4:	9f af       	std	Y+63, r25	; 0x3f
    2ca6:	68 97       	sbiw	r28, 0x18	; 24
	double scaleY=60/(mxY-mnY);
    2ca8:	6d 96       	adiw	r28, 0x1d	; 29
    2caa:	2f ad       	ldd	r18, Y+63	; 0x3f
    2cac:	6d 97       	sbiw	r28, 0x1d	; 29
    2cae:	a1 96       	adiw	r28, 0x21	; 33
    2cb0:	3f ad       	ldd	r19, Y+63	; 0x3f
    2cb2:	a1 97       	sbiw	r28, 0x21	; 33
    2cb4:	aa 96       	adiw	r28, 0x2a	; 42
    2cb6:	4f ad       	ldd	r20, Y+63	; 0x3f
    2cb8:	aa 97       	sbiw	r28, 0x2a	; 42
    2cba:	ab 96       	adiw	r28, 0x2b	; 43
    2cbc:	5f ad       	ldd	r21, Y+63	; 0x3f
    2cbe:	ab 97       	sbiw	r28, 0x2b	; 43
    2cc0:	ac 96       	adiw	r28, 0x2c	; 44
    2cc2:	6f ad       	ldd	r22, Y+63	; 0x3f
    2cc4:	ac 97       	sbiw	r28, 0x2c	; 44
    2cc6:	ad 96       	adiw	r28, 0x2d	; 45
    2cc8:	7f ad       	ldd	r23, Y+63	; 0x3f
    2cca:	ad 97       	sbiw	r28, 0x2d	; 45
    2ccc:	ae 96       	adiw	r28, 0x2e	; 46
    2cce:	8f ad       	ldd	r24, Y+63	; 0x3f
    2cd0:	ae 97       	sbiw	r28, 0x2e	; 46
    2cd2:	af 96       	adiw	r28, 0x2f	; 47
    2cd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cd6:	af 97       	sbiw	r28, 0x2f	; 47
    2cd8:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    2cdc:	9b 01       	movw	r18, r22
    2cde:	ac 01       	movw	r20, r24
    2ce0:	60 e0       	ldi	r22, 0x00	; 0
    2ce2:	70 e0       	ldi	r23, 0x00	; 0
    2ce4:	80 e7       	ldi	r24, 0x70	; 112
    2ce6:	92 e4       	ldi	r25, 0x42	; 66
    2ce8:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    2cec:	6c 96       	adiw	r28, 0x1c	; 28
    2cee:	6c af       	std	Y+60, r22	; 0x3c
    2cf0:	7d af       	std	Y+61, r23	; 0x3d
    2cf2:	8e af       	std	Y+62, r24	; 0x3e
    2cf4:	9f af       	std	Y+63, r25	; 0x3f
    2cf6:	6c 97       	sbiw	r28, 0x1c	; 28

	LCD_Clear();
    2cf8:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
    2cfc:	ff ef       	ldi	r31, 0xFF	; 255
    2cfe:	24 e3       	ldi	r18, 0x34	; 52
    2d00:	8c e0       	ldi	r24, 0x0C	; 12
    2d02:	f1 50       	subi	r31, 0x01	; 1
    2d04:	20 40       	sbci	r18, 0x00	; 0
    2d06:	80 40       	sbci	r24, 0x00	; 0
    2d08:	e1 f7       	brne	.-8      	; 0x2d02 <_Z10graph_plotv+0x47e>
    2d0a:	00 c0       	rjmp	.+0      	; 0x2d0c <_Z10graph_plotv+0x488>
    2d0c:	00 00       	nop
		//i_x[i]=round(save_x[i]*scaleX);
		//i_y[i]=63-round(save_y[i]*scaleY);
	}
	for(int y=0;y<64;y++)
	{
		int x=round((-mnX)*scaleX);
    2d0e:	68 96       	adiw	r28, 0x18	; 24
    2d10:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d12:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d14:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d16:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d18:	68 97       	sbiw	r28, 0x18	; 24
    2d1a:	61 96       	adiw	r28, 0x11	; 17
    2d1c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2d1e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2d20:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d22:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d24:	61 97       	sbiw	r28, 0x11	; 17
    2d26:	90 58       	subi	r25, 0x80	; 128
    2d28:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    2d2c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <round>
		PutPixel(x,y,1);
    2d30:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixsfsi>
    2d34:	f6 2e       	mov	r15, r22
    2d36:	00 e0       	ldi	r16, 0x00	; 0
    2d38:	41 e0       	ldi	r20, 0x01	; 1
    2d3a:	60 2f       	mov	r22, r16
    2d3c:	8f 2d       	mov	r24, r15
    2d3e:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
    2d42:	0f 5f       	subi	r16, 0xFF	; 255
	for(int i=0;i<T;i++)
	{
		//i_x[i]=round(save_x[i]*scaleX);
		//i_y[i]=63-round(save_y[i]*scaleY);
	}
	for(int y=0;y<64;y++)
    2d44:	00 34       	cpi	r16, 0x40	; 64
    2d46:	c1 f7       	brne	.-16     	; 0x2d38 <_Z10graph_plotv+0x4b4>
		int x=round((-mnX)*scaleX);
		PutPixel(x,y,1);
	}
	for(int x=0;x<128;x++)
	{
		int y=63-round((-mnY)*scaleY);
    2d48:	6c 96       	adiw	r28, 0x1c	; 28
    2d4a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d4c:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d4e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d50:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d52:	6c 97       	sbiw	r28, 0x1c	; 28
    2d54:	6d 96       	adiw	r28, 0x1d	; 29
    2d56:	6f ad       	ldd	r22, Y+63	; 0x3f
    2d58:	6d 97       	sbiw	r28, 0x1d	; 29
    2d5a:	a1 96       	adiw	r28, 0x21	; 33
    2d5c:	7f ad       	ldd	r23, Y+63	; 0x3f
    2d5e:	a1 97       	sbiw	r28, 0x21	; 33
    2d60:	aa 96       	adiw	r28, 0x2a	; 42
    2d62:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d64:	aa 97       	sbiw	r28, 0x2a	; 42
    2d66:	ab 96       	adiw	r28, 0x2b	; 43
    2d68:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d6a:	ab 97       	sbiw	r28, 0x2b	; 43
    2d6c:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    2d70:	0e 94 53 21 	call	0x42a6	; 0x42a6 <round>
		PutPixel(x,y,1);
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	4c e7       	ldi	r20, 0x7C	; 124
    2d7a:	52 e4       	ldi	r21, 0x42	; 66
    2d7c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    2d80:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixsfsi>
    2d84:	f6 2e       	mov	r15, r22
    2d86:	00 e0       	ldi	r16, 0x00	; 0
    2d88:	41 e0       	ldi	r20, 0x01	; 1
    2d8a:	6f 2d       	mov	r22, r15
    2d8c:	80 2f       	mov	r24, r16
    2d8e:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
    2d92:	0f 5f       	subi	r16, 0xFF	; 255
	for(int y=0;y<64;y++)
	{
		int x=round((-mnX)*scaleX);
		PutPixel(x,y,1);
	}
	for(int x=0;x<128;x++)
    2d94:	00 38       	cpi	r16, 0x80	; 128
    2d96:	c1 f7       	brne	.-16     	; 0x2d88 <_Z10graph_plotv+0x504>
    2d98:	22 24       	eor	r2, r2
    2d9a:	23 94       	inc	r2
    2d9c:	31 2c       	mov	r3, r1
    2d9e:	71 2e       	mov	r7, r17
	}
	
	for(int i=1;i<T;i++)
	{
		//PutPixel(i_x[i],i_y[i],1);
		line(round(((l+(i-1)*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i-1]*scaleY),round(((l+i*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i]*scaleY),1);
    2da0:	f2 01       	movw	r30, r4
    2da2:	24 81       	ldd	r18, Z+4	; 0x04
    2da4:	35 81       	ldd	r19, Z+5	; 0x05
    2da6:	46 81       	ldd	r20, Z+6	; 0x06
    2da8:	57 81       	ldd	r21, Z+7	; 0x07
    2daa:	6c 96       	adiw	r28, 0x1c	; 28
    2dac:	6c ad       	ldd	r22, Y+60	; 0x3c
    2dae:	7d ad       	ldd	r23, Y+61	; 0x3d
    2db0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2db2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2db4:	6c 97       	sbiw	r28, 0x1c	; 28
    2db6:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    2dba:	0e 94 53 21 	call	0x42a6	; 0x42a6 <round>
    2dbe:	a0 96       	adiw	r28, 0x20	; 32
    2dc0:	6c af       	std	Y+60, r22	; 0x3c
    2dc2:	7d af       	std	Y+61, r23	; 0x3d
    2dc4:	8e af       	std	Y+62, r24	; 0x3e
    2dc6:	9f af       	std	Y+63, r25	; 0x3f
    2dc8:	a0 97       	sbiw	r28, 0x20	; 32
    2dca:	b1 01       	movw	r22, r2
    2dcc:	03 2c       	mov	r0, r3
    2dce:	00 0c       	add	r0, r0
    2dd0:	88 0b       	sbc	r24, r24
    2dd2:	99 0b       	sbc	r25, r25
    2dd4:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__floatsisf>
    2dd8:	a8 96       	adiw	r28, 0x28	; 40
    2dda:	2c ad       	ldd	r18, Y+60	; 0x3c
    2ddc:	3d ad       	ldd	r19, Y+61	; 0x3d
    2dde:	4e ad       	ldd	r20, Y+62	; 0x3e
    2de0:	5f ad       	ldd	r21, Y+63	; 0x3f
    2de2:	a8 97       	sbiw	r28, 0x28	; 40
    2de4:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e3       	ldi	r20, 0x30	; 48
    2dee:	51 e4       	ldi	r21, 0x41	; 65
    2df0:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    2df4:	62 96       	adiw	r28, 0x12	; 18
    2df6:	2f ad       	ldd	r18, Y+63	; 0x3f
    2df8:	62 97       	sbiw	r28, 0x12	; 18
    2dfa:	63 96       	adiw	r28, 0x13	; 19
    2dfc:	3f ad       	ldd	r19, Y+63	; 0x3f
    2dfe:	63 97       	sbiw	r28, 0x13	; 19
    2e00:	64 96       	adiw	r28, 0x14	; 20
    2e02:	4f ad       	ldd	r20, Y+63	; 0x3f
    2e04:	64 97       	sbiw	r28, 0x14	; 20
    2e06:	57 2d       	mov	r21, r7
    2e08:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    2e0c:	61 96       	adiw	r28, 0x11	; 17
    2e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e10:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e12:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e14:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e16:	61 97       	sbiw	r28, 0x11	; 17
    2e18:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    2e1c:	68 96       	adiw	r28, 0x18	; 24
    2e1e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e20:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e22:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e24:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e26:	68 97       	sbiw	r28, 0x18	; 24
    2e28:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    2e2c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <round>
    2e30:	a4 96       	adiw	r28, 0x24	; 36
    2e32:	6c af       	std	Y+60, r22	; 0x3c
    2e34:	7d af       	std	Y+61, r23	; 0x3d
    2e36:	8e af       	std	Y+62, r24	; 0x3e
    2e38:	9f af       	std	Y+63, r25	; 0x3f
    2e3a:	a4 97       	sbiw	r28, 0x24	; 36
    2e3c:	f2 01       	movw	r30, r4
    2e3e:	20 81       	ld	r18, Z
    2e40:	31 81       	ldd	r19, Z+1	; 0x01
    2e42:	42 81       	ldd	r20, Z+2	; 0x02
    2e44:	53 81       	ldd	r21, Z+3	; 0x03
    2e46:	f4 e0       	ldi	r31, 0x04	; 4
    2e48:	4f 0e       	add	r4, r31
    2e4a:	51 1c       	adc	r5, r1
    2e4c:	6c 96       	adiw	r28, 0x1c	; 28
    2e4e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e50:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e52:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e54:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e56:	6c 97       	sbiw	r28, 0x1c	; 28
    2e58:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    2e5c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <round>
    2e60:	4b 01       	movw	r8, r22
    2e62:	5c 01       	movw	r10, r24
    2e64:	b1 01       	movw	r22, r2
    2e66:	61 50       	subi	r22, 0x01	; 1
    2e68:	71 09       	sbc	r23, r1
    2e6a:	07 2e       	mov	r0, r23
    2e6c:	00 0c       	add	r0, r0
    2e6e:	88 0b       	sbc	r24, r24
    2e70:	99 0b       	sbc	r25, r25
    2e72:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__floatsisf>
    2e76:	a8 96       	adiw	r28, 0x28	; 40
    2e78:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e7a:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e7c:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e7e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e80:	a8 97       	sbiw	r28, 0x28	; 40
    2e82:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e3       	ldi	r20, 0x30	; 48
    2e8c:	51 e4       	ldi	r21, 0x41	; 65
    2e8e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    2e92:	62 96       	adiw	r28, 0x12	; 18
    2e94:	2f ad       	ldd	r18, Y+63	; 0x3f
    2e96:	62 97       	sbiw	r28, 0x12	; 18
    2e98:	63 96       	adiw	r28, 0x13	; 19
    2e9a:	3f ad       	ldd	r19, Y+63	; 0x3f
    2e9c:	63 97       	sbiw	r28, 0x13	; 19
    2e9e:	64 96       	adiw	r28, 0x14	; 20
    2ea0:	4f ad       	ldd	r20, Y+63	; 0x3f
    2ea2:	64 97       	sbiw	r28, 0x14	; 20
    2ea4:	57 2d       	mov	r21, r7
    2ea6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    2eaa:	61 96       	adiw	r28, 0x11	; 17
    2eac:	2c ad       	ldd	r18, Y+60	; 0x3c
    2eae:	3d ad       	ldd	r19, Y+61	; 0x3d
    2eb0:	4e ad       	ldd	r20, Y+62	; 0x3e
    2eb2:	5f ad       	ldd	r21, Y+63	; 0x3f
    2eb4:	61 97       	sbiw	r28, 0x11	; 17
    2eb6:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    2eba:	68 96       	adiw	r28, 0x18	; 24
    2ebc:	2c ad       	ldd	r18, Y+60	; 0x3c
    2ebe:	3d ad       	ldd	r19, Y+61	; 0x3d
    2ec0:	4e ad       	ldd	r20, Y+62	; 0x3e
    2ec2:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ec4:	68 97       	sbiw	r28, 0x18	; 24
    2ec6:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    2eca:	0e 94 53 21 	call	0x42a6	; 0x42a6 <round>
    2ece:	6b 01       	movw	r12, r22
    2ed0:	7c 01       	movw	r14, r24
    2ed2:	a0 96       	adiw	r28, 0x20	; 32
    2ed4:	2c ad       	ldd	r18, Y+60	; 0x3c
    2ed6:	3d ad       	ldd	r19, Y+61	; 0x3d
    2ed8:	4e ad       	ldd	r20, Y+62	; 0x3e
    2eda:	5f ad       	ldd	r21, Y+63	; 0x3f
    2edc:	a0 97       	sbiw	r28, 0x20	; 32
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	70 e0       	ldi	r23, 0x00	; 0
    2ee2:	8c e7       	ldi	r24, 0x7C	; 124
    2ee4:	92 e4       	ldi	r25, 0x42	; 66
    2ee6:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    2eea:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__fixunssfsi>
    2eee:	16 2f       	mov	r17, r22
    2ef0:	a4 96       	adiw	r28, 0x24	; 36
    2ef2:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ef4:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ef6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ef8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2efa:	a4 97       	sbiw	r28, 0x24	; 36
    2efc:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__fixunssfsi>
    2f00:	66 2e       	mov	r6, r22
    2f02:	a5 01       	movw	r20, r10
    2f04:	94 01       	movw	r18, r8
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	70 e0       	ldi	r23, 0x00	; 0
    2f0a:	8c e7       	ldi	r24, 0x7C	; 124
    2f0c:	92 e4       	ldi	r25, 0x42	; 66
    2f0e:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    2f12:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__fixunssfsi>
    2f16:	b6 2e       	mov	r11, r22
    2f18:	c7 01       	movw	r24, r14
    2f1a:	b6 01       	movw	r22, r12
    2f1c:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__fixunssfsi>
    2f20:	86 2f       	mov	r24, r22
    2f22:	01 e0       	ldi	r16, 0x01	; 1
    2f24:	21 2f       	mov	r18, r17
    2f26:	46 2d       	mov	r20, r6
    2f28:	6b 2d       	mov	r22, r11
    2f2a:	0e 94 84 03 	call	0x708	; 0x708 <_Z4lineccccc>
    2f2e:	2f e7       	ldi	r18, 0x7F	; 127
    2f30:	88 e3       	ldi	r24, 0x38	; 56
    2f32:	91 e0       	ldi	r25, 0x01	; 1
    2f34:	21 50       	subi	r18, 0x01	; 1
    2f36:	80 40       	sbci	r24, 0x00	; 0
    2f38:	90 40       	sbci	r25, 0x00	; 0
    2f3a:	e1 f7       	brne	.-8      	; 0x2f34 <_Z10graph_plotv+0x6b0>
    2f3c:	00 c0       	rjmp	.+0      	; 0x2f3e <_Z10graph_plotv+0x6ba>
    2f3e:	00 00       	nop
	{
		int y=63-round((-mnY)*scaleY);
		PutPixel(x,y,1);
	}
	
	for(int i=1;i<T;i++)
    2f40:	ef ef       	ldi	r30, 0xFF	; 255
    2f42:	2e 1a       	sub	r2, r30
    2f44:	3e 0a       	sbc	r3, r30
    2f46:	fc e0       	ldi	r31, 0x0C	; 12
    2f48:	2f 16       	cp	r2, r31
    2f4a:	31 04       	cpc	r3, r1
    2f4c:	09 f0       	breq	.+2      	; 0x2f50 <_Z10graph_plotv+0x6cc>
    2f4e:	28 cf       	rjmp	.-432    	; 0x2da0 <_Z10graph_plotv+0x51c>
		line(round(((l+(i-1)*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i-1]*scaleY),round(((l+i*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i]*scaleY),1);
		_delay_ms(50);
	}

	
    2f50:	ce 58       	subi	r28, 0x8E	; 142
    2f52:	df 4f       	sbci	r29, 0xFF	; 255
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	df 91       	pop	r29
    2f60:	cf 91       	pop	r28
    2f62:	1f 91       	pop	r17
    2f64:	0f 91       	pop	r16
    2f66:	ff 90       	pop	r15
    2f68:	ef 90       	pop	r14
    2f6a:	df 90       	pop	r13
    2f6c:	cf 90       	pop	r12
    2f6e:	bf 90       	pop	r11
    2f70:	af 90       	pop	r10
    2f72:	9f 90       	pop	r9
    2f74:	8f 90       	pop	r8
    2f76:	7f 90       	pop	r7
    2f78:	6f 90       	pop	r6
    2f7a:	5f 90       	pop	r5
    2f7c:	4f 90       	pop	r4
    2f7e:	3f 90       	pop	r3
    2f80:	2f 90       	pop	r2
    2f82:	08 95       	ret

00002f84 <_Z13diffentiationPcd>:
double diffentiation(char str[],double x)
{
    2f84:	8f 92       	push	r8
    2f86:	9f 92       	push	r9
    2f88:	af 92       	push	r10
    2f8a:	bf 92       	push	r11
    2f8c:	cf 92       	push	r12
    2f8e:	df 92       	push	r13
    2f90:	ef 92       	push	r14
    2f92:	ff 92       	push	r15
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	ec 01       	movw	r28, r24
    2f9a:	6a 01       	movw	r12, r20
    2f9c:	7b 01       	movw	r14, r22
	double h = 1e-6;
	return (evaluate_function(str , x+h)-evaluate_function(str, x-h))/(2.00*h);
    2f9e:	2d eb       	ldi	r18, 0xBD	; 189
    2fa0:	37 e3       	ldi	r19, 0x37	; 55
    2fa2:	46 e8       	ldi	r20, 0x86	; 134
    2fa4:	55 e3       	ldi	r21, 0x35	; 53
    2fa6:	c7 01       	movw	r24, r14
    2fa8:	b6 01       	movw	r22, r12
    2faa:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    2fae:	ab 01       	movw	r20, r22
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	ce 01       	movw	r24, r28
    2fb4:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    2fb8:	4b 01       	movw	r8, r22
    2fba:	5c 01       	movw	r10, r24
    2fbc:	2d eb       	ldi	r18, 0xBD	; 189
    2fbe:	37 e3       	ldi	r19, 0x37	; 55
    2fc0:	46 e8       	ldi	r20, 0x86	; 134
    2fc2:	55 e3       	ldi	r21, 0x35	; 53
    2fc4:	c7 01       	movw	r24, r14
    2fc6:	b6 01       	movw	r22, r12
    2fc8:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    2fcc:	ab 01       	movw	r20, r22
    2fce:	bc 01       	movw	r22, r24
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    2fd6:	9b 01       	movw	r18, r22
    2fd8:	ac 01       	movw	r20, r24
    2fda:	c5 01       	movw	r24, r10
    2fdc:	b4 01       	movw	r22, r8
    2fde:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    2fe2:	2d eb       	ldi	r18, 0xBD	; 189
    2fe4:	37 e3       	ldi	r19, 0x37	; 55
    2fe6:	46 e0       	ldi	r20, 0x06	; 6
    2fe8:	56 e3       	ldi	r21, 0x36	; 54
    2fea:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
}
    2fee:	df 91       	pop	r29
    2ff0:	cf 91       	pop	r28
    2ff2:	ff 90       	pop	r15
    2ff4:	ef 90       	pop	r14
    2ff6:	df 90       	pop	r13
    2ff8:	cf 90       	pop	r12
    2ffa:	bf 90       	pop	r11
    2ffc:	af 90       	pop	r10
    2ffe:	9f 90       	pop	r9
    3000:	8f 90       	pop	r8
    3002:	08 95       	ret

00003004 <_Z6newtonPcd>:

double newton(char str[],double guess)
{
    3004:	8f 92       	push	r8
    3006:	9f 92       	push	r9
    3008:	af 92       	push	r10
    300a:	bf 92       	push	r11
    300c:	cf 92       	push	r12
    300e:	df 92       	push	r13
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	8c 01       	movw	r16, r24
    301e:	e4 2e       	mov	r14, r20
    3020:	f5 2e       	mov	r15, r21
    3022:	d6 2e       	mov	r13, r22
    3024:	c7 2e       	mov	r12, r23
    3026:	c9 e2       	ldi	r28, 0x29	; 41
    3028:	d0 e0       	ldi	r29, 0x00	; 0
	double x = guess;
	for (int rep = 0; rep<=40; rep++)
	{
		double nx = x - (evaluate_function(str, x)/diffentiation(str , x));
    302a:	4e 2d       	mov	r20, r14
    302c:	5f 2d       	mov	r21, r15
    302e:	6d 2d       	mov	r22, r13
    3030:	7c 2d       	mov	r23, r12
    3032:	c8 01       	movw	r24, r16
    3034:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    3038:	4b 01       	movw	r8, r22
    303a:	5c 01       	movw	r10, r24
    303c:	4e 2d       	mov	r20, r14
    303e:	5f 2d       	mov	r21, r15
    3040:	6d 2d       	mov	r22, r13
    3042:	7c 2d       	mov	r23, r12
    3044:	c8 01       	movw	r24, r16
    3046:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_Z13diffentiationPcd>
    304a:	9b 01       	movw	r18, r22
    304c:	ac 01       	movw	r20, r24
    304e:	c5 01       	movw	r24, r10
    3050:	b4 01       	movw	r22, r8
    3052:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    3056:	9b 01       	movw	r18, r22
    3058:	ac 01       	movw	r20, r24
    305a:	6e 2d       	mov	r22, r14
    305c:	7f 2d       	mov	r23, r15
    305e:	8d 2d       	mov	r24, r13
    3060:	9c 2d       	mov	r25, r12
    3062:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
	"mov	%0, %C1		\n\t"
	"lsl	%0		\n\t"
	"mov	%0, %D1		\n\t"
	"rol	%0		"
	: "=r" (__exp)
	: "r" (__x)	);
    3066:	28 2f       	mov	r18, r24
    3068:	22 0f       	add	r18, r18
    306a:	29 2f       	mov	r18, r25
    306c:	22 1f       	adc	r18, r18
		if(!isfinite(nx))
    306e:	2f 3f       	cpi	r18, 0xFF	; 255
    3070:	31 f0       	breq	.+12     	; 0x307e <_Z6newtonPcd+0x7a>
    3072:	21 97       	sbiw	r28, 0x01	; 1
double newton(char str[],double guess)
{
	double x = guess;
	for (int rep = 0; rep<=40; rep++)
	{
		double nx = x - (evaluate_function(str, x)/diffentiation(str , x));
    3074:	e6 2e       	mov	r14, r22
    3076:	f7 2e       	mov	r15, r23
    3078:	d8 2e       	mov	r13, r24
    307a:	c9 2e       	mov	r12, r25
}

double newton(char str[],double guess)
{
	double x = guess;
	for (int rep = 0; rep<=40; rep++)
    307c:	b1 f6       	brne	.-84     	; 0x302a <_Z6newtonPcd+0x26>
			break;
		}
		x = nx;
	}
	return x;
}
    307e:	6e 2d       	mov	r22, r14
    3080:	7f 2d       	mov	r23, r15
    3082:	8d 2d       	mov	r24, r13
    3084:	9c 2d       	mov	r25, r12
    3086:	df 91       	pop	r29
    3088:	cf 91       	pop	r28
    308a:	1f 91       	pop	r17
    308c:	0f 91       	pop	r16
    308e:	ff 90       	pop	r15
    3090:	ef 90       	pop	r14
    3092:	df 90       	pop	r13
    3094:	cf 90       	pop	r12
    3096:	bf 90       	pop	r11
    3098:	af 90       	pop	r10
    309a:	9f 90       	pop	r9
    309c:	8f 90       	pop	r8
    309e:	08 95       	ret

000030a0 <_Z14newton_raphsonv>:
void newton_raphson()
{
    30a0:	2f 92       	push	r2
    30a2:	3f 92       	push	r3
    30a4:	4f 92       	push	r4
    30a6:	5f 92       	push	r5
    30a8:	6f 92       	push	r6
    30aa:	7f 92       	push	r7
    30ac:	8f 92       	push	r8
    30ae:	9f 92       	push	r9
    30b0:	af 92       	push	r10
    30b2:	bf 92       	push	r11
    30b4:	cf 92       	push	r12
    30b6:	df 92       	push	r13
    30b8:	ef 92       	push	r14
    30ba:	ff 92       	push	r15
    30bc:	0f 93       	push	r16
    30be:	1f 93       	push	r17
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
    30c8:	c0 55       	subi	r28, 0x50	; 80
    30ca:	d1 09       	sbc	r29, r1
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	de bf       	out	0x3e, r29	; 62
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    30d6:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	char text1[] = "Input Equation of x:";
    30da:	85 e1       	ldi	r24, 0x15	; 21
    30dc:	eb e7       	ldi	r30, 0x7B	; 123
    30de:	f2 e0       	ldi	r31, 0x02	; 2
    30e0:	de 01       	movw	r26, r28
    30e2:	11 96       	adiw	r26, 0x01	; 1
    30e4:	01 90       	ld	r0, Z+
    30e6:	0d 92       	st	X+, r0
    30e8:	8a 95       	dec	r24
    30ea:	e1 f7       	brne	.-8      	; 0x30e4 <_Z14newton_raphsonv+0x44>
	char text2[] = "Input initial approximation:";
    30ec:	8d e1       	ldi	r24, 0x1D	; 29
    30ee:	e0 e9       	ldi	r30, 0x90	; 144
    30f0:	f2 e0       	ldi	r31, 0x02	; 2
    30f2:	de 01       	movw	r26, r28
    30f4:	56 96       	adiw	r26, 0x16	; 22
    30f6:	01 90       	ld	r0, Z+
    30f8:	0d 92       	st	X+, r0
    30fa:	8a 95       	dec	r24
    30fc:	e1 f7       	brne	.-8      	; 0x30f6 <_Z14newton_raphsonv+0x56>
	DisplayText(1,1,text1);
    30fe:	ae 01       	movw	r20, r28
    3100:	4f 5f       	subi	r20, 0xFF	; 255
    3102:	5f 4f       	sbci	r21, 0xFF	; 255
    3104:	61 e0       	ldi	r22, 0x01	; 1
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	//input function
	char s[20];
	int len=0;
	int where=12;
    310c:	0f 2e       	mov	r0, r31
    310e:	fc e0       	ldi	r31, 0x0C	; 12
    3110:	8f 2e       	mov	r8, r31
    3112:	91 2c       	mov	r9, r1
    3114:	f0 2d       	mov	r31, r0
	char text1[] = "Input Equation of x:";
	char text2[] = "Input initial approximation:";
	DisplayText(1,1,text1);
	//input function
	char s[20];
	int len=0;
    3116:	e1 2c       	mov	r14, r1
    3118:	f1 2c       	mov	r15, r1
					else
					{
						append(s , len , mat2[r][c-4]);
						len = strlen(s);
					}
					DisplayText(1,where,s);
    311a:	2e 01       	movw	r4, r28
    311c:	23 e3       	ldi	r18, 0x33	; 51
    311e:	42 0e       	add	r4, r18
    3120:	51 1c       	adc	r5, r1
    3122:	2e 96       	adiw	r28, 0x0e	; 14
    3124:	4f ae       	std	Y+63, r4	; 0x3f
    3126:	2e 97       	sbiw	r28, 0x0e	; 14
    3128:	2f 96       	adiw	r28, 0x0f	; 15
    312a:	5f ae       	std	Y+63, r5	; 0x3f
    312c:	2f 97       	sbiw	r28, 0x0f	; 15
    312e:	0f 2e       	mov	r0, r31
    3130:	f0 e6       	ldi	r31, 0x60	; 96
    3132:	2f 2e       	mov	r2, r31
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	3f 2e       	mov	r3, r31
    3138:	f0 2d       	mov	r31, r0
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    313a:	68 94       	set
    313c:	66 24       	eor	r6, r6
    313e:	62 f8       	bld	r6, 2
    3140:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	06 2c       	mov	r0, r6
    3148:	02 c0       	rjmp	.+4      	; 0x314e <_Z14newton_raphsonv+0xae>
    314a:	88 0f       	add	r24, r24
    314c:	99 1f       	adc	r25, r25
    314e:	0a 94       	dec	r0
    3150:	e2 f7       	brpl	.-8      	; 0x314a <_Z14newton_raphsonv+0xaa>
    3152:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    3154:	8b bb       	out	0x1b, r24	; 27
    3156:	c3 01       	movw	r24, r6
    3158:	84 54       	subi	r24, 0x44	; 68
    315a:	9f 4f       	sbci	r25, 0xFF	; 255
    315c:	6c 01       	movw	r12, r24
    315e:	51 01       	movw	r10, r2
			for(int r=0;r<4;r++)
    3160:	00 e0       	ldi	r16, 0x00	; 0
    3162:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    3164:	86 b3       	in	r24, 0x16	; 22
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	00 2e       	mov	r0, r16
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <_Z14newton_raphsonv+0xd0>
    316c:	95 95       	asr	r25
    316e:	87 95       	ror	r24
    3170:	0a 94       	dec	r0
    3172:	e2 f7       	brpl	.-8      	; 0x316c <_Z14newton_raphsonv+0xcc>
    3174:	80 ff       	sbrs	r24, 0
    3176:	43 c0       	rjmp	.+134    	; 0x31fe <_Z14newton_raphsonv+0x15e>
				{
					if(mat[r][c-4]=='C')
    3178:	f6 01       	movw	r30, r12
    317a:	80 81       	ld	r24, Z
    317c:	83 34       	cpi	r24, 0x43	; 67
    317e:	99 f4       	brne	.+38     	; 0x31a6 <_Z14newton_raphsonv+0x106>
					{
						len=0;
						s[0]=0;
    3180:	1b aa       	std	Y+51, r1	; 0x33
						where=1;
						LCD_Clear();
    3182:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    3186:	2e 96       	adiw	r28, 0x0e	; 14
    3188:	4f ad       	ldd	r20, Y+63	; 0x3f
    318a:	2e 97       	sbiw	r28, 0x0e	; 14
    318c:	2f 96       	adiw	r28, 0x0f	; 15
    318e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3190:	2f 97       	sbiw	r28, 0x0f	; 15
    3192:	61 e0       	ldi	r22, 0x01	; 1
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    319a:	88 24       	eor	r8, r8
    319c:	83 94       	inc	r8
    319e:	91 2c       	mov	r9, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    31a0:	e1 2c       	mov	r14, r1
    31a2:	f1 2c       	mov	r15, r1
    31a4:	22 c0       	rjmp	.+68     	; 0x31ea <_Z14newton_raphsonv+0x14a>
						where=1;
						LCD_Clear();
					}
					else
					{
						if(mat[r][c-4]=='=')
    31a6:	8d 33       	cpi	r24, 0x3D	; 61
    31a8:	09 f4       	brne	.+2      	; 0x31ac <_Z14newton_raphsonv+0x10c>
    31aa:	df c0       	rjmp	.+446    	; 0x336a <_Z14newton_raphsonv+0x2ca>
						{
							done = 1;
							break;
						}
						s[len]=mat[r][c-4];
    31ac:	f2 01       	movw	r30, r4
    31ae:	ee 0d       	add	r30, r14
    31b0:	ff 1d       	adc	r31, r15
    31b2:	80 83       	st	Z, r24
						len+=1;
    31b4:	ff ef       	ldi	r31, 0xFF	; 255
    31b6:	ef 1a       	sub	r14, r31
    31b8:	ff 0a       	sbc	r15, r31
						s[len]=0;
    31ba:	f2 01       	movw	r30, r4
    31bc:	ee 0d       	add	r30, r14
    31be:	ff 1d       	adc	r31, r15
    31c0:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    31c2:	2e 96       	adiw	r28, 0x0e	; 14
    31c4:	4f ad       	ldd	r20, Y+63	; 0x3f
    31c6:	2e 97       	sbiw	r28, 0x0e	; 14
    31c8:	2f 96       	adiw	r28, 0x0f	; 15
    31ca:	5f ad       	ldd	r21, Y+63	; 0x3f
    31cc:	2f 97       	sbiw	r28, 0x0f	; 15
    31ce:	68 2d       	mov	r22, r8
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    31d6:	24 e1       	ldi	r18, 0x14	; 20
    31d8:	e2 16       	cp	r14, r18
    31da:	f1 04       	cpc	r15, r1
    31dc:	31 f4       	brne	.+12     	; 0x31ea <_Z14newton_raphsonv+0x14a>
					{
						where+=12;
    31de:	8c e0       	ldi	r24, 0x0C	; 12
    31e0:	88 0e       	add	r8, r24
    31e2:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    31e4:	1b aa       	std	Y+51, r1	; 0x33
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    31e6:	e1 2c       	mov	r14, r1
    31e8:	f1 2c       	mov	r15, r1
    31ea:	9f ef       	ldi	r25, 0xFF	; 255
    31ec:	e4 e3       	ldi	r30, 0x34	; 52
    31ee:	fc e0       	ldi	r31, 0x0C	; 12
    31f0:	91 50       	subi	r25, 0x01	; 1
    31f2:	e0 40       	sbci	r30, 0x00	; 0
    31f4:	f0 40       	sbci	r31, 0x00	; 0
    31f6:	e1 f7       	brne	.-8      	; 0x31f0 <_Z14newton_raphsonv+0x150>
    31f8:	00 c0       	rjmp	.+0      	; 0x31fa <_Z14newton_raphsonv+0x15a>
    31fa:	00 00       	nop
    31fc:	66 c0       	rjmp	.+204    	; 0x32ca <_Z14newton_raphsonv+0x22a>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    31fe:	89 b3       	in	r24, 0x19	; 25
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	00 2e       	mov	r0, r16
    3204:	02 c0       	rjmp	.+4      	; 0x320a <_Z14newton_raphsonv+0x16a>
    3206:	95 95       	asr	r25
    3208:	87 95       	ror	r24
    320a:	0a 94       	dec	r0
    320c:	e2 f7       	brpl	.-8      	; 0x3206 <_Z14newton_raphsonv+0x166>
    320e:	80 ff       	sbrs	r24, 0
    3210:	5c c0       	rjmp	.+184    	; 0x32ca <_Z14newton_raphsonv+0x22a>
				{
					if(mat2[r][c-4][0]=='<')
    3212:	f5 01       	movw	r30, r10
    3214:	80 81       	ld	r24, Z
    3216:	8c 33       	cpi	r24, 0x3C	; 60
    3218:	49 f5       	brne	.+82     	; 0x326c <_Z14newton_raphsonv+0x1cc>
					{
						if(len==0){
    321a:	e1 14       	cp	r14, r1
    321c:	f1 04       	cpc	r15, r1
    321e:	51 f4       	brne	.+20     	; 0x3234 <_Z14newton_raphsonv+0x194>
    3220:	ff ef       	ldi	r31, 0xFF	; 255
    3222:	24 e3       	ldi	r18, 0x34	; 52
    3224:	8c e0       	ldi	r24, 0x0C	; 12
    3226:	f1 50       	subi	r31, 0x01	; 1
    3228:	20 40       	sbci	r18, 0x00	; 0
    322a:	80 40       	sbci	r24, 0x00	; 0
    322c:	e1 f7       	brne	.-8      	; 0x3226 <_Z14newton_raphsonv+0x186>
    322e:	00 c0       	rjmp	.+0      	; 0x3230 <_Z14newton_raphsonv+0x190>
    3230:	00 00       	nop
    3232:	4b c0       	rjmp	.+150    	; 0x32ca <_Z14newton_raphsonv+0x22a>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    3234:	91 e0       	ldi	r25, 0x01	; 1
    3236:	e9 1a       	sub	r14, r25
    3238:	f1 08       	sbc	r15, r1
    323a:	f2 01       	movw	r30, r4
    323c:	ee 0d       	add	r30, r14
    323e:	ff 1d       	adc	r31, r15
    3240:	61 96       	adiw	r28, 0x11	; 17
    3242:	ff af       	std	Y+63, r31	; 0x3f
    3244:	ee af       	std	Y+62, r30	; 0x3e
    3246:	61 97       	sbiw	r28, 0x11	; 17
    3248:	20 e2       	ldi	r18, 0x20	; 32
    324a:	20 83       	st	Z, r18
						DisplayText(1,where,s);
    324c:	2e 96       	adiw	r28, 0x0e	; 14
    324e:	4f ad       	ldd	r20, Y+63	; 0x3f
    3250:	2e 97       	sbiw	r28, 0x0e	; 14
    3252:	2f 96       	adiw	r28, 0x0f	; 15
    3254:	5f ad       	ldd	r21, Y+63	; 0x3f
    3256:	2f 97       	sbiw	r28, 0x0f	; 15
    3258:	68 2d       	mov	r22, r8
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						len--;
						s[len]=0;
    3260:	61 96       	adiw	r28, 0x11	; 17
    3262:	ee ad       	ldd	r30, Y+62	; 0x3e
    3264:	ff ad       	ldd	r31, Y+63	; 0x3f
    3266:	61 97       	sbiw	r28, 0x11	; 17
    3268:	10 82       	st	Z, r1
    326a:	12 c0       	rjmp	.+36     	; 0x3290 <_Z14newton_raphsonv+0x1f0>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    326c:	a5 01       	movw	r20, r10
    326e:	b7 01       	movw	r22, r14
    3270:	2e 96       	adiw	r28, 0x0e	; 14
    3272:	8f ad       	ldd	r24, Y+63	; 0x3f
    3274:	2e 97       	sbiw	r28, 0x0e	; 14
    3276:	2f 96       	adiw	r28, 0x0f	; 15
    3278:	9f ad       	ldd	r25, Y+63	; 0x3f
    327a:	2f 97       	sbiw	r28, 0x0f	; 15
    327c:	0e 94 15 09 	call	0x122a	; 0x122a <_Z6appendPciS_>
						len = strlen(s);
    3280:	f2 01       	movw	r30, r4
    3282:	01 90       	ld	r0, Z+
    3284:	00 20       	and	r0, r0
    3286:	e9 f7       	brne	.-6      	; 0x3282 <_Z14newton_raphsonv+0x1e2>
    3288:	31 97       	sbiw	r30, 0x01	; 1
    328a:	7f 01       	movw	r14, r30
    328c:	e4 18       	sub	r14, r4
    328e:	f5 08       	sbc	r15, r5
					}
					DisplayText(1,where,s);
    3290:	2e 96       	adiw	r28, 0x0e	; 14
    3292:	4f ad       	ldd	r20, Y+63	; 0x3f
    3294:	2e 97       	sbiw	r28, 0x0e	; 14
    3296:	2f 96       	adiw	r28, 0x0f	; 15
    3298:	5f ad       	ldd	r21, Y+63	; 0x3f
    329a:	2f 97       	sbiw	r28, 0x0f	; 15
    329c:	68 2d       	mov	r22, r8
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    32a4:	f4 e1       	ldi	r31, 0x14	; 20
    32a6:	ef 16       	cp	r14, r31
    32a8:	f1 04       	cpc	r15, r1
    32aa:	31 f4       	brne	.+12     	; 0x32b8 <_Z14newton_raphsonv+0x218>
					{
						where+=12;
    32ac:	2c e0       	ldi	r18, 0x0C	; 12
    32ae:	82 0e       	add	r8, r18
    32b0:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    32b2:	1b aa       	std	Y+51, r1	; 0x33
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    32b4:	e1 2c       	mov	r14, r1
    32b6:	f1 2c       	mov	r15, r1
    32b8:	8f ef       	ldi	r24, 0xFF	; 255
    32ba:	94 e3       	ldi	r25, 0x34	; 52
    32bc:	ec e0       	ldi	r30, 0x0C	; 12
    32be:	81 50       	subi	r24, 0x01	; 1
    32c0:	90 40       	sbci	r25, 0x00	; 0
    32c2:	e0 40       	sbci	r30, 0x00	; 0
    32c4:	e1 f7       	brne	.-8      	; 0x32be <_Z14newton_raphsonv+0x21e>
    32c6:	00 c0       	rjmp	.+0      	; 0x32c8 <_Z14newton_raphsonv+0x228>
    32c8:	00 00       	nop
		bool done = 0;
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    32ca:	0f 5f       	subi	r16, 0xFF	; 255
    32cc:	1f 4f       	sbci	r17, 0xFF	; 255
    32ce:	f8 e1       	ldi	r31, 0x18	; 24
    32d0:	af 0e       	add	r10, r31
    32d2:	b1 1c       	adc	r11, r1
    32d4:	24 e0       	ldi	r18, 0x04	; 4
    32d6:	c2 0e       	add	r12, r18
    32d8:	d1 1c       	adc	r13, r1
    32da:	04 30       	cpi	r16, 0x04	; 4
    32dc:	11 05       	cpc	r17, r1
    32de:	09 f0       	breq	.+2      	; 0x32e2 <_Z14newton_raphsonv+0x242>
    32e0:	41 cf       	rjmp	.-382    	; 0x3164 <_Z14newton_raphsonv+0xc4>
    32e2:	8f e1       	ldi	r24, 0x1F	; 31
    32e4:	9e e4       	ldi	r25, 0x4E	; 78
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	f1 f7       	brne	.-4      	; 0x32e6 <_Z14newton_raphsonv+0x246>
    32ea:	00 c0       	rjmp	.+0      	; 0x32ec <_Z14newton_raphsonv+0x24c>
    32ec:	00 00       	nop
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    32ee:	9f ef       	ldi	r25, 0xFF	; 255
    32f0:	69 1a       	sub	r6, r25
    32f2:	79 0a       	sbc	r7, r25
    32f4:	e6 e0       	ldi	r30, 0x06	; 6
    32f6:	2e 0e       	add	r2, r30
    32f8:	31 1c       	adc	r3, r1
    32fa:	f8 e0       	ldi	r31, 0x08	; 8
    32fc:	6f 16       	cp	r6, r31
    32fe:	71 04       	cpc	r7, r1
    3300:	09 f0       	breq	.+2      	; 0x3304 <_Z14newton_raphsonv+0x264>
    3302:	1f cf       	rjmp	.-450    	; 0x3142 <_Z14newton_raphsonv+0xa2>
    3304:	14 cf       	rjmp	.-472    	; 0x312e <_Z14newton_raphsonv+0x8e>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    3306:	44 e0       	ldi	r20, 0x04	; 4
    3308:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB=1<<c;
    330a:	cb 01       	movw	r24, r22
    330c:	04 2e       	mov	r0, r20
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <_Z14newton_raphsonv+0x274>
    3310:	88 0f       	add	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	0a 94       	dec	r0
    3316:	e2 f7       	brpl	.-8      	; 0x3310 <_Z14newton_raphsonv+0x270>
    3318:	88 bb       	out	0x18, r24	; 24
    331a:	fa 01       	movw	r30, r20
    331c:	e4 54       	subi	r30, 0x44	; 68
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
			{
				if(PINB&(1<<r))
    3324:	86 b3       	in	r24, 0x16	; 22
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	02 2e       	mov	r0, r18
    332a:	02 c0       	rjmp	.+4      	; 0x3330 <_Z14newton_raphsonv+0x290>
    332c:	95 95       	asr	r25
    332e:	87 95       	ror	r24
    3330:	0a 94       	dec	r0
    3332:	e2 f7       	brpl	.-8      	; 0x332c <_Z14newton_raphsonv+0x28c>
    3334:	80 ff       	sbrs	r24, 0
    3336:	03 c0       	rjmp	.+6      	; 0x333e <_Z14newton_raphsonv+0x29e>
				{
					if(mat[r][c-4]=='=')
    3338:	80 81       	ld	r24, Z
    333a:	8d 33       	cpi	r24, 0x3D	; 61
    333c:	61 f0       	breq	.+24     	; 0x3356 <_Z14newton_raphsonv+0x2b6>
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    333e:	2f 5f       	subi	r18, 0xFF	; 255
    3340:	3f 4f       	sbci	r19, 0xFF	; 255
    3342:	34 96       	adiw	r30, 0x04	; 4
    3344:	24 30       	cpi	r18, 0x04	; 4
    3346:	31 05       	cpc	r19, r1
    3348:	69 f7       	brne	.-38     	; 0x3324 <_Z14newton_raphsonv+0x284>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    334a:	4f 5f       	subi	r20, 0xFF	; 255
    334c:	5f 4f       	sbci	r21, 0xFF	; 255
    334e:	48 30       	cpi	r20, 0x08	; 8
    3350:	51 05       	cpc	r21, r1
    3352:	d9 f6       	brne	.-74     	; 0x330a <_Z14newton_raphsonv+0x26a>
    3354:	d8 cf       	rjmp	.-80     	; 0x3306 <_Z14newton_raphsonv+0x266>
    3356:	2f ef       	ldi	r18, 0xFF	; 255
    3358:	84 e3       	ldi	r24, 0x34	; 52
    335a:	9c e0       	ldi	r25, 0x0C	; 12
    335c:	21 50       	subi	r18, 0x01	; 1
    335e:	80 40       	sbci	r24, 0x00	; 0
    3360:	90 40       	sbci	r25, 0x00	; 0
    3362:	e1 f7       	brne	.-8      	; 0x335c <_Z14newton_raphsonv+0x2bc>
    3364:	00 c0       	rjmp	.+0      	; 0x3366 <_Z14newton_raphsonv+0x2c6>
    3366:	00 00       	nop
		{
			break;
		}
	}
	_delay_ms(500);
    3368:	40 c0       	rjmp	.+128    	; 0x33ea <_Z14newton_raphsonv+0x34a>
    336a:	ef e1       	ldi	r30, 0x1F	; 31
    336c:	fe e4       	ldi	r31, 0x4E	; 78
    336e:	31 97       	sbiw	r30, 0x01	; 1
    3370:	f1 f7       	brne	.-4      	; 0x336e <_Z14newton_raphsonv+0x2ce>
    3372:	00 c0       	rjmp	.+0      	; 0x3374 <_Z14newton_raphsonv+0x2d4>
    3374:	00 00       	nop
			break;
		}
		if(done)
		break;
	}
	LCD_Clear();
    3376:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	double l;
	show_text(text2,1);
    337a:	61 e0       	ldi	r22, 0x01	; 1
    337c:	70 e0       	ldi	r23, 0x00	; 0
    337e:	ce 01       	movw	r24, r28
    3380:	46 96       	adiw	r24, 0x16	; 22
    3382:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	l = double_num_input(24);
    3386:	88 e1       	ldi	r24, 0x18	; 24
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_Z16double_num_inputi>
    338e:	6b 01       	movw	r12, r22
    3390:	7c 01       	movw	r14, r24
	LCD_Clear();
    3392:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	double ans = newton(s,l);
    3396:	b7 01       	movw	r22, r14
    3398:	a6 01       	movw	r20, r12
    339a:	ce 01       	movw	r24, r28
    339c:	c3 96       	adiw	r24, 0x33	; 51
    339e:	0e 94 02 18 	call	0x3004	; 0x3004 <_Z6newtonPcd>
    33a2:	6b 01       	movw	r12, r22
    33a4:	7c 01       	movw	r14, r24
	
	//printing ans
	char text[] = "Ans =";
    33a6:	86 e0       	ldi	r24, 0x06	; 6
    33a8:	ed e5       	ldi	r30, 0x5D	; 93
    33aa:	f2 e0       	ldi	r31, 0x02	; 2
    33ac:	de 01       	movw	r26, r28
    33ae:	a9 5b       	subi	r26, 0xB9	; 185
    33b0:	bf 4f       	sbci	r27, 0xFF	; 255
    33b2:	01 90       	ld	r0, Z+
    33b4:	0d 92       	st	X+, r0
    33b6:	8a 95       	dec	r24
    33b8:	e1 f7       	brne	.-8      	; 0x33b2 <_Z14newton_raphsonv+0x312>
	show_text(text,1);
    33ba:	61 e0       	ldi	r22, 0x01	; 1
    33bc:	70 e0       	ldi	r23, 0x00	; 0
    33be:	ce 01       	movw	r24, r28
    33c0:	89 5b       	subi	r24, 0xB9	; 185
    33c2:	9f 4f       	sbci	r25, 0xFF	; 255
    33c4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	dtostrf(ans,1,2,s);
    33c8:	8e 01       	movw	r16, r28
    33ca:	0d 5c       	subi	r16, 0xCD	; 205
    33cc:	1f 4f       	sbci	r17, 0xFF	; 255
    33ce:	22 e0       	ldi	r18, 0x02	; 2
    33d0:	41 e0       	ldi	r20, 0x01	; 1
    33d2:	c7 01       	movw	r24, r14
    33d4:	b6 01       	movw	r22, r12
    33d6:	0e 94 55 22 	call	0x44aa	; 0x44aa <dtostrf>
	show_text(s,12);
    33da:	6c e0       	ldi	r22, 0x0C	; 12
    33dc:	70 e0       	ldi	r23, 0x00	; 0
    33de:	c8 01       	movw	r24, r16
    33e0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    33e4:	61 e0       	ldi	r22, 0x01	; 1
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	8e cf       	rjmp	.-228    	; 0x3306 <_Z14newton_raphsonv+0x266>
		{
			break;
		}
	}
	_delay_ms(500);
    33ea:	c0 5b       	subi	r28, 0xB0	; 176
    33ec:	df 4f       	sbci	r29, 0xFF	; 255
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    33fc:	1f 91       	pop	r17
    33fe:	0f 91       	pop	r16
    3400:	ff 90       	pop	r15
    3402:	ef 90       	pop	r14
    3404:	df 90       	pop	r13
    3406:	cf 90       	pop	r12
    3408:	bf 90       	pop	r11
    340a:	af 90       	pop	r10
    340c:	9f 90       	pop	r9
    340e:	8f 90       	pop	r8
    3410:	7f 90       	pop	r7
    3412:	6f 90       	pop	r6
    3414:	5f 90       	pop	r5
    3416:	4f 90       	pop	r4
    3418:	3f 90       	pop	r3
    341a:	2f 90       	pop	r2
    341c:	08 95       	ret

0000341e <_Z10calculatorv>:
void calculator()
{
    341e:	2f 92       	push	r2
    3420:	3f 92       	push	r3
    3422:	4f 92       	push	r4
    3424:	5f 92       	push	r5
    3426:	6f 92       	push	r6
    3428:	7f 92       	push	r7
    342a:	8f 92       	push	r8
    342c:	9f 92       	push	r9
    342e:	af 92       	push	r10
    3430:	bf 92       	push	r11
    3432:	cf 92       	push	r12
    3434:	df 92       	push	r13
    3436:	ef 92       	push	r14
    3438:	ff 92       	push	r15
    343a:	0f 93       	push	r16
    343c:	1f 93       	push	r17
    343e:	cf 93       	push	r28
    3440:	df 93       	push	r29
    3442:	cd b7       	in	r28, 0x3d	; 61
    3444:	de b7       	in	r29, 0x3e	; 62
    3446:	68 97       	sbiw	r28, 0x18	; 24
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    3452:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	char s[20];
	int len=0;
	int where=1;
    3456:	88 24       	eor	r8, r8
    3458:	83 94       	inc	r8
    345a:	91 2c       	mov	r9, r1
void calculator()
{
	LCD_Clear();
	char s[20];
	int len=0;
    345c:	e1 2c       	mov	r14, r1
    345e:	f1 2c       	mov	r15, r1
					else
					{
						append(s , len , mat2[r][c-4]);
						len = strlen(s);
					}
					DisplayText(1,where,s);
    3460:	9e 01       	movw	r18, r28
    3462:	2f 5f       	subi	r18, 0xFF	; 255
    3464:	3f 4f       	sbci	r19, 0xFF	; 255
    3466:	29 01       	movw	r4, r18
    3468:	2d 8b       	std	Y+21, r18	; 0x15
    346a:	5e 8a       	std	Y+22, r5	; 0x16
    346c:	0f 2e       	mov	r0, r31
    346e:	f0 e6       	ldi	r31, 0x60	; 96
    3470:	2f 2e       	mov	r2, r31
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	3f 2e       	mov	r3, r31
    3476:	f0 2d       	mov	r31, r0
	char s[20];
	int len=0;
	int where=1;
	while (1)
	{
		for(int c=4;c<8;c++)
    3478:	68 94       	set
    347a:	66 24       	eor	r6, r6
    347c:	62 f8       	bld	r6, 2
    347e:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	06 2c       	mov	r0, r6
    3486:	02 c0       	rjmp	.+4      	; 0x348c <_Z10calculatorv+0x6e>
    3488:	88 0f       	add	r24, r24
    348a:	99 1f       	adc	r25, r25
    348c:	0a 94       	dec	r0
    348e:	e2 f7       	brpl	.-8      	; 0x3488 <_Z10calculatorv+0x6a>
    3490:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    3492:	8b bb       	out	0x1b, r24	; 27
    3494:	c3 01       	movw	r24, r6
    3496:	84 54       	subi	r24, 0x44	; 68
    3498:	9f 4f       	sbci	r25, 0xFF	; 255
    349a:	6c 01       	movw	r12, r24
    349c:	51 01       	movw	r10, r2
			for(int r=0;r<4;r++)
    349e:	00 e0       	ldi	r16, 0x00	; 0
    34a0:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    34a2:	86 b3       	in	r24, 0x16	; 22
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	00 2e       	mov	r0, r16
    34a8:	02 c0       	rjmp	.+4      	; 0x34ae <_Z10calculatorv+0x90>
    34aa:	95 95       	asr	r25
    34ac:	87 95       	ror	r24
    34ae:	0a 94       	dec	r0
    34b0:	e2 f7       	brpl	.-8      	; 0x34aa <_Z10calculatorv+0x8c>
    34b2:	80 ff       	sbrs	r24, 0
    34b4:	6b c0       	rjmp	.+214    	; 0x358c <_Z10calculatorv+0x16e>
				{
					if(mat[r][c-4]=='C')
    34b6:	f6 01       	movw	r30, r12
    34b8:	80 81       	ld	r24, Z
    34ba:	83 34       	cpi	r24, 0x43	; 67
    34bc:	79 f4       	brne	.+30     	; 0x34dc <_Z10calculatorv+0xbe>
					{
						len=0;
						s[0]=0;
    34be:	19 82       	std	Y+1, r1	; 0x01
						where=1;
						LCD_Clear();
    34c0:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    34c4:	4d 89       	ldd	r20, Y+21	; 0x15
    34c6:	5e 89       	ldd	r21, Y+22	; 0x16
    34c8:	61 e0       	ldi	r22, 0x01	; 1
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    34d0:	88 24       	eor	r8, r8
    34d2:	83 94       	inc	r8
    34d4:	91 2c       	mov	r9, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    34d6:	e1 2c       	mov	r14, r1
    34d8:	f1 2c       	mov	r15, r1
    34da:	4e c0       	rjmp	.+156    	; 0x3578 <_Z10calculatorv+0x15a>
						where=1;
						LCD_Clear();
					}
					else
					{	
						if(mat[r][c-4]=='=')
    34dc:	8d 33       	cpi	r24, 0x3D	; 61
    34de:	89 f5       	brne	.+98     	; 0x3542 <_Z10calculatorv+0x124>
						{
							double ans=ob.eval_exp(s);
    34e0:	be 01       	movw	r22, r28
    34e2:	6f 5f       	subi	r22, 0xFF	; 255
    34e4:	7f 4f       	sbci	r23, 0xFF	; 255
    34e6:	8c e3       	ldi	r24, 0x3C	; 60
    34e8:	93 e0       	ldi	r25, 0x03	; 3
    34ea:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN6parser8eval_expEPc>
    34ee:	ff ef       	ldi	r31, 0xFF	; 255
    34f0:	20 e7       	ldi	r18, 0x70	; 112
    34f2:	32 e0       	ldi	r19, 0x02	; 2
    34f4:	f1 50       	subi	r31, 0x01	; 1
    34f6:	20 40       	sbci	r18, 0x00	; 0
    34f8:	30 40       	sbci	r19, 0x00	; 0
    34fa:	e1 f7       	brne	.-8      	; 0x34f4 <_Z10calculatorv+0xd6>
    34fc:	00 c0       	rjmp	.+0      	; 0x34fe <_Z10calculatorv+0xe0>
    34fe:	00 00       	nop
							_delay_ms(100);
							dtostrf(ans,1,2,s);
    3500:	8e 01       	movw	r16, r28
    3502:	0f 5f       	subi	r16, 0xFF	; 255
    3504:	1f 4f       	sbci	r17, 0xFF	; 255
    3506:	22 e0       	ldi	r18, 0x02	; 2
    3508:	41 e0       	ldi	r20, 0x01	; 1
    350a:	0e 94 55 22 	call	0x44aa	; 0x44aa <dtostrf>
    350e:	4f ef       	ldi	r20, 0xFF	; 255
    3510:	80 e7       	ldi	r24, 0x70	; 112
    3512:	92 e0       	ldi	r25, 0x02	; 2
    3514:	41 50       	subi	r20, 0x01	; 1
    3516:	80 40       	sbci	r24, 0x00	; 0
    3518:	90 40       	sbci	r25, 0x00	; 0
    351a:	e1 f7       	brne	.-8      	; 0x3514 <_Z10calculatorv+0xf6>
    351c:	00 c0       	rjmp	.+0      	; 0x351e <_Z10calculatorv+0x100>
    351e:	00 00       	nop
							_delay_ms(100);
							LCD_Clear();
    3520:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
    3524:	ef ef       	ldi	r30, 0xFF	; 255
    3526:	f0 e7       	ldi	r31, 0x70	; 112
    3528:	22 e0       	ldi	r18, 0x02	; 2
    352a:	e1 50       	subi	r30, 0x01	; 1
    352c:	f0 40       	sbci	r31, 0x00	; 0
    352e:	20 40       	sbci	r18, 0x00	; 0
    3530:	e1 f7       	brne	.-8      	; 0x352a <_Z10calculatorv+0x10c>
    3532:	00 c0       	rjmp	.+0      	; 0x3534 <_Z10calculatorv+0x116>
    3534:	00 00       	nop
							_delay_ms(100);
							DisplayText(1,1,s);
    3536:	a8 01       	movw	r20, r16
    3538:	61 e0       	ldi	r22, 0x01	; 1
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
							return;
    3540:	9a c0       	rjmp	.+308    	; 0x3676 <_Z10calculatorv+0x258>
						}
						s[len]=mat[r][c-4];
    3542:	f2 01       	movw	r30, r4
    3544:	ee 0d       	add	r30, r14
    3546:	ff 1d       	adc	r31, r15
    3548:	80 83       	st	Z, r24
						len+=1;
    354a:	3f ef       	ldi	r19, 0xFF	; 255
    354c:	e3 1a       	sub	r14, r19
    354e:	f3 0a       	sbc	r15, r19
						s[len]=0;
    3550:	f2 01       	movw	r30, r4
    3552:	ee 0d       	add	r30, r14
    3554:	ff 1d       	adc	r31, r15
    3556:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    3558:	4d 89       	ldd	r20, Y+21	; 0x15
    355a:	5e 89       	ldd	r21, Y+22	; 0x16
    355c:	68 2d       	mov	r22, r8
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    3564:	44 e1       	ldi	r20, 0x14	; 20
    3566:	e4 16       	cp	r14, r20
    3568:	f1 04       	cpc	r15, r1
    356a:	31 f4       	brne	.+12     	; 0x3578 <_Z10calculatorv+0x15a>
					{
						where+=12;
    356c:	8c e0       	ldi	r24, 0x0C	; 12
    356e:	88 0e       	add	r8, r24
    3570:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    3572:	19 82       	std	Y+1, r1	; 0x01
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    3574:	e1 2c       	mov	r14, r1
    3576:	f1 2c       	mov	r15, r1
    3578:	9f ef       	ldi	r25, 0xFF	; 255
    357a:	e4 e3       	ldi	r30, 0x34	; 52
    357c:	fc e0       	ldi	r31, 0x0C	; 12
    357e:	91 50       	subi	r25, 0x01	; 1
    3580:	e0 40       	sbci	r30, 0x00	; 0
    3582:	f0 40       	sbci	r31, 0x00	; 0
    3584:	e1 f7       	brne	.-8      	; 0x357e <_Z10calculatorv+0x160>
    3586:	00 c0       	rjmp	.+0      	; 0x3588 <_Z10calculatorv+0x16a>
    3588:	00 00       	nop
    358a:	57 c0       	rjmp	.+174    	; 0x363a <_Z10calculatorv+0x21c>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    358c:	89 b3       	in	r24, 0x19	; 25
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	00 2e       	mov	r0, r16
    3592:	02 c0       	rjmp	.+4      	; 0x3598 <_Z10calculatorv+0x17a>
    3594:	95 95       	asr	r25
    3596:	87 95       	ror	r24
    3598:	0a 94       	dec	r0
    359a:	e2 f7       	brpl	.-8      	; 0x3594 <_Z10calculatorv+0x176>
    359c:	80 ff       	sbrs	r24, 0
    359e:	4d c0       	rjmp	.+154    	; 0x363a <_Z10calculatorv+0x21c>
				{
					if(mat2[r][c-4][0]=='<')
    35a0:	f5 01       	movw	r30, r10
    35a2:	80 81       	ld	r24, Z
    35a4:	8c 33       	cpi	r24, 0x3C	; 60
    35a6:	11 f5       	brne	.+68     	; 0x35ec <_Z10calculatorv+0x1ce>
					{
						if(len==0){
    35a8:	e1 14       	cp	r14, r1
    35aa:	f1 04       	cpc	r15, r1
    35ac:	51 f4       	brne	.+20     	; 0x35c2 <_Z10calculatorv+0x1a4>
    35ae:	ff ef       	ldi	r31, 0xFF	; 255
    35b0:	24 e3       	ldi	r18, 0x34	; 52
    35b2:	3c e0       	ldi	r19, 0x0C	; 12
    35b4:	f1 50       	subi	r31, 0x01	; 1
    35b6:	20 40       	sbci	r18, 0x00	; 0
    35b8:	30 40       	sbci	r19, 0x00	; 0
    35ba:	e1 f7       	brne	.-8      	; 0x35b4 <_Z10calculatorv+0x196>
    35bc:	00 c0       	rjmp	.+0      	; 0x35be <_Z10calculatorv+0x1a0>
    35be:	00 00       	nop
    35c0:	3c c0       	rjmp	.+120    	; 0x363a <_Z10calculatorv+0x21c>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    35c2:	41 e0       	ldi	r20, 0x01	; 1
    35c4:	e4 1a       	sub	r14, r20
    35c6:	f1 08       	sbc	r15, r1
    35c8:	c2 01       	movw	r24, r4
    35ca:	8e 0d       	add	r24, r14
    35cc:	9f 1d       	adc	r25, r15
    35ce:	98 8f       	std	Y+24, r25	; 0x18
    35d0:	8f 8b       	std	Y+23, r24	; 0x17
    35d2:	20 e2       	ldi	r18, 0x20	; 32
    35d4:	fc 01       	movw	r30, r24
    35d6:	20 83       	st	Z, r18
						DisplayText(1,where,s);
    35d8:	4d 89       	ldd	r20, Y+21	; 0x15
    35da:	5e 89       	ldd	r21, Y+22	; 0x16
    35dc:	68 2d       	mov	r22, r8
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						len--;
						s[len]=0;
    35e4:	ef 89       	ldd	r30, Y+23	; 0x17
    35e6:	f8 8d       	ldd	r31, Y+24	; 0x18
    35e8:	10 82       	st	Z, r1
    35ea:	0e c0       	rjmp	.+28     	; 0x3608 <_Z10calculatorv+0x1ea>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    35ec:	a5 01       	movw	r20, r10
    35ee:	b7 01       	movw	r22, r14
    35f0:	8d 89       	ldd	r24, Y+21	; 0x15
    35f2:	9e 89       	ldd	r25, Y+22	; 0x16
    35f4:	0e 94 15 09 	call	0x122a	; 0x122a <_Z6appendPciS_>
						len = strlen(s);
    35f8:	f2 01       	movw	r30, r4
    35fa:	01 90       	ld	r0, Z+
    35fc:	00 20       	and	r0, r0
    35fe:	e9 f7       	brne	.-6      	; 0x35fa <_Z10calculatorv+0x1dc>
    3600:	31 97       	sbiw	r30, 0x01	; 1
    3602:	7f 01       	movw	r14, r30
    3604:	e4 18       	sub	r14, r4
    3606:	f5 08       	sbc	r15, r5
					}
					DisplayText(1,where,s);
    3608:	4d 89       	ldd	r20, Y+21	; 0x15
    360a:	5e 89       	ldd	r21, Y+22	; 0x16
    360c:	68 2d       	mov	r22, r8
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    3614:	f4 e1       	ldi	r31, 0x14	; 20
    3616:	ef 16       	cp	r14, r31
    3618:	f1 04       	cpc	r15, r1
    361a:	31 f4       	brne	.+12     	; 0x3628 <_Z10calculatorv+0x20a>
					{
						where+=12;
    361c:	2c e0       	ldi	r18, 0x0C	; 12
    361e:	82 0e       	add	r8, r18
    3620:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    3622:	19 82       	std	Y+1, r1	; 0x01
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    3624:	e1 2c       	mov	r14, r1
    3626:	f1 2c       	mov	r15, r1
    3628:	3f ef       	ldi	r19, 0xFF	; 255
    362a:	44 e3       	ldi	r20, 0x34	; 52
    362c:	8c e0       	ldi	r24, 0x0C	; 12
    362e:	31 50       	subi	r19, 0x01	; 1
    3630:	40 40       	sbci	r20, 0x00	; 0
    3632:	80 40       	sbci	r24, 0x00	; 0
    3634:	e1 f7       	brne	.-8      	; 0x362e <_Z10calculatorv+0x210>
    3636:	00 c0       	rjmp	.+0      	; 0x3638 <_Z10calculatorv+0x21a>
    3638:	00 00       	nop
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    363a:	0f 5f       	subi	r16, 0xFF	; 255
    363c:	1f 4f       	sbci	r17, 0xFF	; 255
    363e:	98 e1       	ldi	r25, 0x18	; 24
    3640:	a9 0e       	add	r10, r25
    3642:	b1 1c       	adc	r11, r1
    3644:	e4 e0       	ldi	r30, 0x04	; 4
    3646:	ce 0e       	add	r12, r30
    3648:	d1 1c       	adc	r13, r1
    364a:	04 30       	cpi	r16, 0x04	; 4
    364c:	11 05       	cpc	r17, r1
    364e:	09 f0       	breq	.+2      	; 0x3652 <_Z10calculatorv+0x234>
    3650:	28 cf       	rjmp	.-432    	; 0x34a2 <_Z10calculatorv+0x84>
    3652:	8f e1       	ldi	r24, 0x1F	; 31
    3654:	9e e4       	ldi	r25, 0x4E	; 78
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	f1 f7       	brne	.-4      	; 0x3656 <_Z10calculatorv+0x238>
    365a:	00 c0       	rjmp	.+0      	; 0x365c <_Z10calculatorv+0x23e>
    365c:	00 00       	nop
	char s[20];
	int len=0;
	int where=1;
	while (1)
	{
		for(int c=4;c<8;c++)
    365e:	9f ef       	ldi	r25, 0xFF	; 255
    3660:	69 1a       	sub	r6, r25
    3662:	79 0a       	sbc	r7, r25
    3664:	e6 e0       	ldi	r30, 0x06	; 6
    3666:	2e 0e       	add	r2, r30
    3668:	31 1c       	adc	r3, r1
    366a:	f8 e0       	ldi	r31, 0x08	; 8
    366c:	6f 16       	cp	r6, r31
    366e:	71 04       	cpc	r7, r1
    3670:	09 f0       	breq	.+2      	; 0x3674 <_Z10calculatorv+0x256>
    3672:	06 cf       	rjmp	.-500    	; 0x3480 <_Z10calculatorv+0x62>
    3674:	fb ce       	rjmp	.-522    	; 0x346c <_Z10calculatorv+0x4e>
			}
			
			_delay_ms(10);
		}
	}
    3676:	68 96       	adiw	r28, 0x18	; 24
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	f8 94       	cli
    367c:	de bf       	out	0x3e, r29	; 62
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	cd bf       	out	0x3d, r28	; 61
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	1f 91       	pop	r17
    3688:	0f 91       	pop	r16
    368a:	ff 90       	pop	r15
    368c:	ef 90       	pop	r14
    368e:	df 90       	pop	r13
    3690:	cf 90       	pop	r12
    3692:	bf 90       	pop	r11
    3694:	af 90       	pop	r10
    3696:	9f 90       	pop	r9
    3698:	8f 90       	pop	r8
    369a:	7f 90       	pop	r7
    369c:	6f 90       	pop	r6
    369e:	5f 90       	pop	r5
    36a0:	4f 90       	pop	r4
    36a2:	3f 90       	pop	r3
    36a4:	2f 90       	pop	r2
    36a6:	08 95       	ret

000036a8 <_Z12initial_pagev>:
#include "Newton.h"
#include "calculator.h"

void initial_page()
{
	DisplayText(1,1,"1.Calculator");
    36a8:	4d ea       	ldi	r20, 0xAD	; 173
    36aa:	52 e0       	ldi	r21, 0x02	; 2
    36ac:	61 e0       	ldi	r22, 0x01	; 1
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	DisplayText(1,12,"2.Gauss Elimination");
    36b4:	4a eb       	ldi	r20, 0xBA	; 186
    36b6:	52 e0       	ldi	r21, 0x02	; 2
    36b8:	6c e0       	ldi	r22, 0x0C	; 12
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	DisplayText(1,24,"3.Newton Raphson");
    36c0:	4e ec       	ldi	r20, 0xCE	; 206
    36c2:	52 e0       	ldi	r21, 0x02	; 2
    36c4:	68 e1       	ldi	r22, 0x18	; 24
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	DisplayText(1,36,"4.Integration");
    36cc:	4f ed       	ldi	r20, 0xDF	; 223
    36ce:	52 e0       	ldi	r21, 0x02	; 2
    36d0:	64 e2       	ldi	r22, 0x24	; 36
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	DisplayText(1,48,"5.Graph Plot");
    36d8:	4d ee       	ldi	r20, 0xED	; 237
    36da:	52 e0       	ldi	r21, 0x02	; 2
    36dc:	60 e3       	ldi	r22, 0x30	; 48
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
    36e4:	08 95       	ret

000036e6 <_Z13mode_selectorv>:
}



char mode_selector()
{
    36e6:	cf 93       	push	r28
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    36e8:	a1 e0       	ldi	r26, 0x01	; 1
    36ea:	b0 e0       	ldi	r27, 0x00	; 0

char mode_selector()
{
	while (1)
	{
		for(int c=4;c<8;c++)
    36ec:	64 e0       	ldi	r22, 0x04	; 4
    36ee:	70 e0       	ldi	r23, 0x00	; 0
		{
			PORTB=1<<c;
    36f0:	cd 01       	movw	r24, r26
    36f2:	06 2e       	mov	r0, r22
    36f4:	02 c0       	rjmp	.+4      	; 0x36fa <_Z13mode_selectorv+0x14>
    36f6:	88 0f       	add	r24, r24
    36f8:	99 1f       	adc	r25, r25
    36fa:	0a 94       	dec	r0
    36fc:	e2 f7       	brpl	.-8      	; 0x36f6 <_Z13mode_selectorv+0x10>
    36fe:	88 bb       	out	0x18, r24	; 24
    3700:	cb 01       	movw	r24, r22
    3702:	04 97       	sbiw	r24, 0x04	; 4
    3704:	fc 01       	movw	r30, r24
    3706:	e0 54       	subi	r30, 0x40	; 64
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	c8 2f       	mov	r28, r24
    3710:	59 2f       	mov	r21, r25
			{
				if(PINB&(1<<r))
    3712:	86 b3       	in	r24, 0x16	; 22
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	02 2e       	mov	r0, r18
    3718:	02 c0       	rjmp	.+4      	; 0x371e <_Z13mode_selectorv+0x38>
    371a:	95 95       	asr	r25
    371c:	87 95       	ror	r24
    371e:	0a 94       	dec	r0
    3720:	e2 f7       	brpl	.-8      	; 0x371a <_Z13mode_selectorv+0x34>
    3722:	80 ff       	sbrs	r24, 0
    3724:	23 c0       	rjmp	.+70     	; 0x376c <_Z13mode_selectorv+0x86>
    3726:	8c 2f       	mov	r24, r28
    3728:	95 2f       	mov	r25, r21
				{
					if(mat[r][c-4]>='1' && mat[r][c-4]<='5')
    372a:	40 81       	ld	r20, Z
    372c:	41 53       	subi	r20, 0x31	; 49
    372e:	45 30       	cpi	r20, 0x05	; 5
    3730:	a0 f4       	brcc	.+40     	; 0x375a <_Z13mode_selectorv+0x74>
    3732:	4f ef       	ldi	r20, 0xFF	; 255
    3734:	54 e3       	ldi	r21, 0x34	; 52
    3736:	6c e0       	ldi	r22, 0x0C	; 12
    3738:	41 50       	subi	r20, 0x01	; 1
    373a:	50 40       	sbci	r21, 0x00	; 0
    373c:	60 40       	sbci	r22, 0x00	; 0
    373e:	e1 f7       	brne	.-8      	; 0x3738 <_Z13mode_selectorv+0x52>
    3740:	00 c0       	rjmp	.+0      	; 0x3742 <_Z13mode_selectorv+0x5c>
    3742:	00 00       	nop
					{
						_delay_ms(500);
						return mat[r][c-4];
    3744:	22 0f       	add	r18, r18
    3746:	33 1f       	adc	r19, r19
    3748:	22 0f       	add	r18, r18
    374a:	33 1f       	adc	r19, r19
    374c:	20 54       	subi	r18, 0x40	; 64
    374e:	3f 4f       	sbci	r19, 0xFF	; 255
    3750:	f9 01       	movw	r30, r18
    3752:	e8 0f       	add	r30, r24
    3754:	f9 1f       	adc	r31, r25
    3756:	80 81       	ld	r24, Z
    3758:	1c c0       	rjmp	.+56     	; 0x3792 <_Z13mode_selectorv+0xac>
    375a:	8f ef       	ldi	r24, 0xFF	; 255
    375c:	94 e3       	ldi	r25, 0x34	; 52
    375e:	4c e0       	ldi	r20, 0x0C	; 12
    3760:	81 50       	subi	r24, 0x01	; 1
    3762:	90 40       	sbci	r25, 0x00	; 0
    3764:	40 40       	sbci	r20, 0x00	; 0
    3766:	e1 f7       	brne	.-8      	; 0x3760 <_Z13mode_selectorv+0x7a>
    3768:	00 c0       	rjmp	.+0      	; 0x376a <_Z13mode_selectorv+0x84>
    376a:	00 00       	nop
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    376c:	2f 5f       	subi	r18, 0xFF	; 255
    376e:	3f 4f       	sbci	r19, 0xFF	; 255
    3770:	34 96       	adiw	r30, 0x04	; 4
    3772:	24 30       	cpi	r18, 0x04	; 4
    3774:	31 05       	cpc	r19, r1
    3776:	69 f6       	brne	.-102    	; 0x3712 <_Z13mode_selectorv+0x2c>
    3778:	8f e1       	ldi	r24, 0x1F	; 31
    377a:	9e e4       	ldi	r25, 0x4E	; 78
    377c:	01 97       	sbiw	r24, 0x01	; 1
    377e:	f1 f7       	brne	.-4      	; 0x377c <_Z13mode_selectorv+0x96>
    3780:	00 c0       	rjmp	.+0      	; 0x3782 <_Z13mode_selectorv+0x9c>
    3782:	00 00       	nop

char mode_selector()
{
	while (1)
	{
		for(int c=4;c<8;c++)
    3784:	6f 5f       	subi	r22, 0xFF	; 255
    3786:	7f 4f       	sbci	r23, 0xFF	; 255
    3788:	68 30       	cpi	r22, 0x08	; 8
    378a:	71 05       	cpc	r23, r1
    378c:	09 f0       	breq	.+2      	; 0x3790 <_Z13mode_selectorv+0xaa>
    378e:	b0 cf       	rjmp	.-160    	; 0x36f0 <_Z13mode_selectorv+0xa>
    3790:	ad cf       	rjmp	.-166    	; 0x36ec <_Z13mode_selectorv+0x6>
				}
			}
			_delay_ms(10);
		}
	}
}
    3792:	cf 91       	pop	r28
    3794:	08 95       	ret

00003796 <main>:



int main(void)
{
	InitLCD();
    3796:	0e 94 88 02 	call	0x510	; 0x510 <_Z7InitLCDv>
	
	DDRB=0xFF;
    379a:	8f ef       	ldi	r24, 0xFF	; 255
    379c:	87 bb       	out	0x17, r24	; 23
	DDRA=0xFF;
    379e:	8a bb       	out	0x1a, r24	; 26
		bool f=1;
		while (f)
		{
			for(int c=4;c<8&&f;c++)
			{
				PORTB=1<<c;
    37a0:	c1 e0       	ldi	r28, 0x01	; 1
    37a2:	d0 e0       	ldi	r29, 0x00	; 0
				for(int r=0;r<4&&f;r++)
				{
					if(PINB&(1<<r))
					{
						if(mat[r][c-4]=='C')
    37a4:	ff 24       	eor	r15, r15
    37a6:	f3 94       	inc	r15
    37a8:	e1 2c       	mov	r14, r1
    37aa:	1f 2d       	mov	r17, r15
    37ac:	0e 2d       	mov	r16, r14
	
	DDRB=0xFF;
	DDRA=0xFF;
	
	while(true){
		LCD_Clear();
    37ae:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
		initial_page();
    37b2:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <_Z12initial_pagev>
		//take input
		char input = mode_selector();
    37b6:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_Z13mode_selectorv>
		if(input=='1')
    37ba:	81 33       	cpi	r24, 0x31	; 49
    37bc:	19 f4       	brne	.+6      	; 0x37c4 <main+0x2e>
		{
			calculator();	
    37be:	0e 94 0f 1a 	call	0x341e	; 0x341e <_Z10calculatorv>
    37c2:	16 c0       	rjmp	.+44     	; 0x37f0 <main+0x5a>
		}
		else if(input=='2')
    37c4:	82 33       	cpi	r24, 0x32	; 50
    37c6:	19 f4       	brne	.+6      	; 0x37ce <main+0x38>
		{
			gauss();
    37c8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_Z5gaussv>
    37cc:	11 c0       	rjmp	.+34     	; 0x37f0 <main+0x5a>
		}
		else if(input=='3')
    37ce:	83 33       	cpi	r24, 0x33	; 51
    37d0:	19 f4       	brne	.+6      	; 0x37d8 <main+0x42>
		{
			newton_raphson();
    37d2:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_Z14newton_raphsonv>
    37d6:	0c c0       	rjmp	.+24     	; 0x37f0 <main+0x5a>
		}
		else if(input=='4')
    37d8:	84 33       	cpi	r24, 0x34	; 52
    37da:	19 f4       	brne	.+6      	; 0x37e2 <main+0x4c>
		{
			simpson();
    37dc:	0e 94 56 11 	call	0x22ac	; 0x22ac <_Z7simpsonv>
    37e0:	07 c0       	rjmp	.+14     	; 0x37f0 <main+0x5a>
		}
		else if(input=='5')
    37e2:	85 33       	cpi	r24, 0x35	; 53
    37e4:	29 f4       	brne	.+10     	; 0x37f0 <main+0x5a>
		{
			graph_plot();
    37e6:	0e 94 42 14 	call	0x2884	; 0x2884 <_Z10graph_plotv>
    37ea:	02 c0       	rjmp	.+4      	; 0x37f0 <main+0x5a>
		}
		
		bool f=1;
		while (f)
    37ec:	99 23       	and	r25, r25
    37ee:	f9 f2       	breq	.-66     	; 0x37ae <main+0x18>
		{
			for(int c=4;c<8&&f;c++)
    37f0:	44 e0       	ldi	r20, 0x04	; 4
    37f2:	50 e0       	ldi	r21, 0x00	; 0
    37f4:	02 c0       	rjmp	.+4      	; 0x37fa <main+0x64>
    37f6:	99 23       	and	r25, r25
    37f8:	d1 f2       	breq	.-76     	; 0x37ae <main+0x18>
			{
				PORTB=1<<c;
    37fa:	ce 01       	movw	r24, r28
    37fc:	04 2e       	mov	r0, r20
    37fe:	02 c0       	rjmp	.+4      	; 0x3804 <main+0x6e>
    3800:	88 0f       	add	r24, r24
    3802:	99 1f       	adc	r25, r25
    3804:	0a 94       	dec	r0
    3806:	e2 f7       	brpl	.-8      	; 0x3800 <main+0x6a>
    3808:	88 bb       	out	0x18, r24	; 24
    380a:	fa 01       	movw	r30, r20
    380c:	e4 54       	subi	r30, 0x44	; 68
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	03 c0       	rjmp	.+6      	; 0x381c <main+0x86>
    3816:	34 96       	adiw	r30, 0x04	; 4
				for(int r=0;r<4&&f;r++)
    3818:	83 34       	cpi	r24, 0x43	; 67
    381a:	99 f1       	breq	.+102    	; 0x3882 <main+0xec>
				{
					if(PINB&(1<<r))
    381c:	86 b3       	in	r24, 0x16	; 22
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	02 2e       	mov	r0, r18
    3822:	02 c0       	rjmp	.+4      	; 0x3828 <main+0x92>
    3824:	95 95       	asr	r25
    3826:	87 95       	ror	r24
    3828:	0a 94       	dec	r0
    382a:	e2 f7       	brpl	.-8      	; 0x3824 <main+0x8e>
    382c:	80 ff       	sbrs	r24, 0
    382e:	23 c0       	rjmp	.+70     	; 0x3876 <main+0xe0>
					{
						if(mat[r][c-4]=='C')
    3830:	80 81       	ld	r24, Z
    3832:	91 2f       	mov	r25, r17
    3834:	83 34       	cpi	r24, 0x43	; 67
    3836:	09 f4       	brne	.+2      	; 0x383a <main+0xa4>
    3838:	90 2f       	mov	r25, r16
    383a:	6f ef       	ldi	r22, 0xFF	; 255
    383c:	74 e3       	ldi	r23, 0x34	; 52
    383e:	ac e0       	ldi	r26, 0x0C	; 12
    3840:	61 50       	subi	r22, 0x01	; 1
    3842:	70 40       	sbci	r23, 0x00	; 0
    3844:	a0 40       	sbci	r26, 0x00	; 0
    3846:	e1 f7       	brne	.-8      	; 0x3840 <main+0xaa>
    3848:	00 c0       	rjmp	.+0      	; 0x384a <main+0xb4>
    384a:	00 00       	nop
		while (f)
		{
			for(int c=4;c<8&&f;c++)
			{
				PORTB=1<<c;
				for(int r=0;r<4&&f;r++)
    384c:	2f 5f       	subi	r18, 0xFF	; 255
    384e:	3f 4f       	sbci	r19, 0xFF	; 255
    3850:	24 30       	cpi	r18, 0x04	; 4
    3852:	31 05       	cpc	r19, r1
    3854:	01 f7       	brne	.-64     	; 0x3816 <main+0x80>
    3856:	01 c0       	rjmp	.+2      	; 0x385a <main+0xc4>
    3858:	9f 2d       	mov	r25, r15
    385a:	ef e1       	ldi	r30, 0x1F	; 31
    385c:	fe e4       	ldi	r31, 0x4E	; 78
    385e:	31 97       	sbiw	r30, 0x01	; 1
    3860:	f1 f7       	brne	.-4      	; 0x385e <main+0xc8>
    3862:	00 c0       	rjmp	.+0      	; 0x3864 <main+0xce>
    3864:	00 00       	nop
		}
		
		bool f=1;
		while (f)
		{
			for(int c=4;c<8&&f;c++)
    3866:	4f 5f       	subi	r20, 0xFF	; 255
    3868:	5f 4f       	sbci	r21, 0xFF	; 255
    386a:	48 30       	cpi	r20, 0x08	; 8
    386c:	51 05       	cpc	r21, r1
    386e:	19 f6       	brne	.-122    	; 0x37f6 <main+0x60>
    3870:	bd cf       	rjmp	.-134    	; 0x37ec <main+0x56>
    3872:	34 96       	adiw	r30, 0x04	; 4
    3874:	d3 cf       	rjmp	.-90     	; 0x381c <main+0x86>
			{
				PORTB=1<<c;
				for(int r=0;r<4&&f;r++)
    3876:	2f 5f       	subi	r18, 0xFF	; 255
    3878:	3f 4f       	sbci	r19, 0xFF	; 255
    387a:	24 30       	cpi	r18, 0x04	; 4
    387c:	31 05       	cpc	r19, r1
    387e:	c9 f7       	brne	.-14     	; 0x3872 <main+0xdc>
    3880:	eb cf       	rjmp	.-42     	; 0x3858 <main+0xc2>
    3882:	8f e1       	ldi	r24, 0x1F	; 31
    3884:	9e e4       	ldi	r25, 0x4E	; 78
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <main+0xf0>
    388a:	00 c0       	rjmp	.+0      	; 0x388c <main+0xf6>
    388c:	00 00       	nop
		}
		
		bool f=1;
		while (f)
		{
			for(int c=4;c<8&&f;c++)
    388e:	4f 5f       	subi	r20, 0xFF	; 255
    3890:	5f 4f       	sbci	r21, 0xFF	; 255
    3892:	48 30       	cpi	r20, 0x08	; 8
    3894:	51 05       	cpc	r21, r1
    3896:	09 f4       	brne	.+2      	; 0x389a <main+0x104>
    3898:	8a cf       	rjmp	.-236    	; 0x37ae <main+0x18>
    389a:	9e 2d       	mov	r25, r14
    389c:	ac cf       	rjmp	.-168    	; 0x37f6 <main+0x60>

0000389e <_GLOBAL__sub_I_Pix>:
	
}

char s[40];
char tmp[15];
parser ob;
    389e:	8c e3       	ldi	r24, 0x3C	; 60
    38a0:	93 e0       	ldi	r25, 0x03	; 3
    38a2:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN6parserC1Ev>
    38a6:	08 95       	ret

000038a8 <acos>:
    38a8:	9f 93       	push	r25
    38aa:	9f 77       	andi	r25, 0x7F	; 127
    38ac:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__fp_arccos>
    38b0:	0f 90       	pop	r0
    38b2:	00 20       	and	r0, r0
    38b4:	42 f4       	brpl	.+16     	; 0x38c6 <acos+0x1e>
    38b6:	90 58       	subi	r25, 0x80	; 128
    38b8:	a2 ea       	ldi	r26, 0xA2	; 162
    38ba:	2a ed       	ldi	r18, 0xDA	; 218
    38bc:	3f e0       	ldi	r19, 0x0F	; 15
    38be:	49 e4       	ldi	r20, 0x49	; 73
    38c0:	50 e4       	ldi	r21, 0x40	; 64
    38c2:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__addsf3x>
    38c6:	0c 94 5d 1f 	jmp	0x3eba	; 0x3eba <__fp_round>

000038ca <__subsf3>:
    38ca:	50 58       	subi	r21, 0x80	; 128

000038cc <__addsf3>:
    38cc:	bb 27       	eor	r27, r27
    38ce:	aa 27       	eor	r26, r26
    38d0:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__addsf3x>
    38d4:	0c 94 5d 1f 	jmp	0x3eba	; 0x3eba <__fp_round>
    38d8:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__fp_pscA>
    38dc:	38 f0       	brcs	.+14     	; 0x38ec <__addsf3+0x20>
    38de:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <__fp_pscB>
    38e2:	20 f0       	brcs	.+8      	; 0x38ec <__addsf3+0x20>
    38e4:	39 f4       	brne	.+14     	; 0x38f4 <__addsf3+0x28>
    38e6:	9f 3f       	cpi	r25, 0xFF	; 255
    38e8:	19 f4       	brne	.+6      	; 0x38f0 <__addsf3+0x24>
    38ea:	26 f4       	brtc	.+8      	; 0x38f4 <__addsf3+0x28>
    38ec:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__fp_nan>
    38f0:	0e f4       	brtc	.+2      	; 0x38f4 <__addsf3+0x28>
    38f2:	e0 95       	com	r30
    38f4:	e7 fb       	bst	r30, 7
    38f6:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__fp_inf>

000038fa <__addsf3x>:
    38fa:	e9 2f       	mov	r30, r25
    38fc:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <__fp_split3>
    3900:	58 f3       	brcs	.-42     	; 0x38d8 <__addsf3+0xc>
    3902:	ba 17       	cp	r27, r26
    3904:	62 07       	cpc	r22, r18
    3906:	73 07       	cpc	r23, r19
    3908:	84 07       	cpc	r24, r20
    390a:	95 07       	cpc	r25, r21
    390c:	20 f0       	brcs	.+8      	; 0x3916 <__addsf3x+0x1c>
    390e:	79 f4       	brne	.+30     	; 0x392e <__addsf3x+0x34>
    3910:	a6 f5       	brtc	.+104    	; 0x397a <__addsf3x+0x80>
    3912:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <__fp_zero>
    3916:	0e f4       	brtc	.+2      	; 0x391a <__addsf3x+0x20>
    3918:	e0 95       	com	r30
    391a:	0b 2e       	mov	r0, r27
    391c:	ba 2f       	mov	r27, r26
    391e:	a0 2d       	mov	r26, r0
    3920:	0b 01       	movw	r0, r22
    3922:	b9 01       	movw	r22, r18
    3924:	90 01       	movw	r18, r0
    3926:	0c 01       	movw	r0, r24
    3928:	ca 01       	movw	r24, r20
    392a:	a0 01       	movw	r20, r0
    392c:	11 24       	eor	r1, r1
    392e:	ff 27       	eor	r31, r31
    3930:	59 1b       	sub	r21, r25
    3932:	99 f0       	breq	.+38     	; 0x395a <__addsf3x+0x60>
    3934:	59 3f       	cpi	r21, 0xF9	; 249
    3936:	50 f4       	brcc	.+20     	; 0x394c <__addsf3x+0x52>
    3938:	50 3e       	cpi	r21, 0xE0	; 224
    393a:	68 f1       	brcs	.+90     	; 0x3996 <__addsf3x+0x9c>
    393c:	1a 16       	cp	r1, r26
    393e:	f0 40       	sbci	r31, 0x00	; 0
    3940:	a2 2f       	mov	r26, r18
    3942:	23 2f       	mov	r18, r19
    3944:	34 2f       	mov	r19, r20
    3946:	44 27       	eor	r20, r20
    3948:	58 5f       	subi	r21, 0xF8	; 248
    394a:	f3 cf       	rjmp	.-26     	; 0x3932 <__addsf3x+0x38>
    394c:	46 95       	lsr	r20
    394e:	37 95       	ror	r19
    3950:	27 95       	ror	r18
    3952:	a7 95       	ror	r26
    3954:	f0 40       	sbci	r31, 0x00	; 0
    3956:	53 95       	inc	r21
    3958:	c9 f7       	brne	.-14     	; 0x394c <__addsf3x+0x52>
    395a:	7e f4       	brtc	.+30     	; 0x397a <__addsf3x+0x80>
    395c:	1f 16       	cp	r1, r31
    395e:	ba 0b       	sbc	r27, r26
    3960:	62 0b       	sbc	r22, r18
    3962:	73 0b       	sbc	r23, r19
    3964:	84 0b       	sbc	r24, r20
    3966:	ba f0       	brmi	.+46     	; 0x3996 <__addsf3x+0x9c>
    3968:	91 50       	subi	r25, 0x01	; 1
    396a:	a1 f0       	breq	.+40     	; 0x3994 <__addsf3x+0x9a>
    396c:	ff 0f       	add	r31, r31
    396e:	bb 1f       	adc	r27, r27
    3970:	66 1f       	adc	r22, r22
    3972:	77 1f       	adc	r23, r23
    3974:	88 1f       	adc	r24, r24
    3976:	c2 f7       	brpl	.-16     	; 0x3968 <__addsf3x+0x6e>
    3978:	0e c0       	rjmp	.+28     	; 0x3996 <__addsf3x+0x9c>
    397a:	ba 0f       	add	r27, r26
    397c:	62 1f       	adc	r22, r18
    397e:	73 1f       	adc	r23, r19
    3980:	84 1f       	adc	r24, r20
    3982:	48 f4       	brcc	.+18     	; 0x3996 <__addsf3x+0x9c>
    3984:	87 95       	ror	r24
    3986:	77 95       	ror	r23
    3988:	67 95       	ror	r22
    398a:	b7 95       	ror	r27
    398c:	f7 95       	ror	r31
    398e:	9e 3f       	cpi	r25, 0xFE	; 254
    3990:	08 f0       	brcs	.+2      	; 0x3994 <__addsf3x+0x9a>
    3992:	b0 cf       	rjmp	.-160    	; 0x38f4 <__addsf3+0x28>
    3994:	93 95       	inc	r25
    3996:	88 0f       	add	r24, r24
    3998:	08 f0       	brcs	.+2      	; 0x399c <__addsf3x+0xa2>
    399a:	99 27       	eor	r25, r25
    399c:	ee 0f       	add	r30, r30
    399e:	97 95       	ror	r25
    39a0:	87 95       	ror	r24
    39a2:	08 95       	ret

000039a4 <asin>:
    39a4:	9f 93       	push	r25
    39a6:	9f 77       	andi	r25, 0x7F	; 127
    39a8:	ee e3       	ldi	r30, 0x3E	; 62
    39aa:	89 37       	cpi	r24, 0x79	; 121
    39ac:	9e 07       	cpc	r25, r30
    39ae:	28 f4       	brcc	.+10     	; 0x39ba <asin+0x16>
    39b0:	e4 e5       	ldi	r30, 0x54	; 84
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <__fp_powsodd>
    39b8:	0c c0       	rjmp	.+24     	; 0x39d2 <asin+0x2e>
    39ba:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__fp_arccos>
    39be:	90 58       	subi	r25, 0x80	; 128
    39c0:	a2 ea       	ldi	r26, 0xA2	; 162
    39c2:	2a ed       	ldi	r18, 0xDA	; 218
    39c4:	3f e0       	ldi	r19, 0x0F	; 15
    39c6:	49 ec       	ldi	r20, 0xC9	; 201
    39c8:	5f e3       	ldi	r21, 0x3F	; 63
    39ca:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__addsf3x>
    39ce:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__fp_round>
    39d2:	0f 90       	pop	r0
    39d4:	07 fc       	sbrc	r0, 7
    39d6:	90 58       	subi	r25, 0x80	; 128
    39d8:	08 95       	ret

000039da <atan>:
    39da:	df 93       	push	r29
    39dc:	dd 27       	eor	r29, r29
    39de:	b9 2f       	mov	r27, r25
    39e0:	bf 77       	andi	r27, 0x7F	; 127
    39e2:	40 e8       	ldi	r20, 0x80	; 128
    39e4:	5f e3       	ldi	r21, 0x3F	; 63
    39e6:	16 16       	cp	r1, r22
    39e8:	17 06       	cpc	r1, r23
    39ea:	48 07       	cpc	r20, r24
    39ec:	5b 07       	cpc	r21, r27
    39ee:	18 f4       	brcc	.+6      	; 0x39f6 <atan+0x1c>
    39f0:	d9 2f       	mov	r29, r25
    39f2:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <inverse>
    39f6:	9f 93       	push	r25
    39f8:	8f 93       	push	r24
    39fa:	7f 93       	push	r23
    39fc:	6f 93       	push	r22
    39fe:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <square>
    3a02:	e8 e6       	ldi	r30, 0x68	; 104
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <__fp_powser>
    3a0a:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__fp_round>
    3a0e:	2f 91       	pop	r18
    3a10:	3f 91       	pop	r19
    3a12:	4f 91       	pop	r20
    3a14:	5f 91       	pop	r21
    3a16:	0e 94 a9 20 	call	0x4152	; 0x4152 <__mulsf3x>
    3a1a:	dd 23       	and	r29, r29
    3a1c:	51 f0       	breq	.+20     	; 0x3a32 <atan+0x58>
    3a1e:	90 58       	subi	r25, 0x80	; 128
    3a20:	a2 ea       	ldi	r26, 0xA2	; 162
    3a22:	2a ed       	ldi	r18, 0xDA	; 218
    3a24:	3f e0       	ldi	r19, 0x0F	; 15
    3a26:	49 ec       	ldi	r20, 0xC9	; 201
    3a28:	5f e3       	ldi	r21, 0x3F	; 63
    3a2a:	d0 78       	andi	r29, 0x80	; 128
    3a2c:	5d 27       	eor	r21, r29
    3a2e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__addsf3x>
    3a32:	df 91       	pop	r29
    3a34:	0c 94 5d 1f 	jmp	0x3eba	; 0x3eba <__fp_round>

00003a38 <__cmpsf2>:
    3a38:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__fp_cmp>
    3a3c:	08 f4       	brcc	.+2      	; 0x3a40 <__cmpsf2+0x8>
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	08 95       	ret

00003a42 <cosh>:
    3a42:	90 68       	ori	r25, 0x80	; 128
    3a44:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <exp>
    3a48:	4f ef       	ldi	r20, 0xFF	; 255
    3a4a:	5f ef       	ldi	r21, 0xFF	; 255
    3a4c:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <ldexp>
    3a50:	9f 93       	push	r25
    3a52:	8f 93       	push	r24
    3a54:	7f 93       	push	r23
    3a56:	6f 93       	push	r22
    3a58:	42 e0       	ldi	r20, 0x02	; 2
    3a5a:	50 e0       	ldi	r21, 0x00	; 0
    3a5c:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <ldexp>
    3a60:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <inverse>
    3a64:	2f 91       	pop	r18
    3a66:	3f 91       	pop	r19
    3a68:	4f 91       	pop	r20
    3a6a:	5f 91       	pop	r21
    3a6c:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__addsf3>

00003a70 <cos>:
    3a70:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__fp_rempio2>
    3a74:	e3 95       	inc	r30
    3a76:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__fp_sinus>

00003a7a <__divsf3>:
    3a7a:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__divsf3x>
    3a7e:	0c 94 5d 1f 	jmp	0x3eba	; 0x3eba <__fp_round>
    3a82:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <__fp_pscB>
    3a86:	58 f0       	brcs	.+22     	; 0x3a9e <__divsf3+0x24>
    3a88:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__fp_pscA>
    3a8c:	40 f0       	brcs	.+16     	; 0x3a9e <__divsf3+0x24>
    3a8e:	29 f4       	brne	.+10     	; 0x3a9a <__divsf3+0x20>
    3a90:	5f 3f       	cpi	r21, 0xFF	; 255
    3a92:	29 f0       	breq	.+10     	; 0x3a9e <__divsf3+0x24>
    3a94:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__fp_inf>
    3a98:	51 11       	cpse	r21, r1
    3a9a:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__fp_szero>
    3a9e:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__fp_nan>

00003aa2 <__divsf3x>:
    3aa2:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <__fp_split3>
    3aa6:	68 f3       	brcs	.-38     	; 0x3a82 <__divsf3+0x8>

00003aa8 <__divsf3_pse>:
    3aa8:	99 23       	and	r25, r25
    3aaa:	b1 f3       	breq	.-20     	; 0x3a98 <__divsf3+0x1e>
    3aac:	55 23       	and	r21, r21
    3aae:	91 f3       	breq	.-28     	; 0x3a94 <__divsf3+0x1a>
    3ab0:	95 1b       	sub	r25, r21
    3ab2:	55 0b       	sbc	r21, r21
    3ab4:	bb 27       	eor	r27, r27
    3ab6:	aa 27       	eor	r26, r26
    3ab8:	62 17       	cp	r22, r18
    3aba:	73 07       	cpc	r23, r19
    3abc:	84 07       	cpc	r24, r20
    3abe:	38 f0       	brcs	.+14     	; 0x3ace <__divsf3_pse+0x26>
    3ac0:	9f 5f       	subi	r25, 0xFF	; 255
    3ac2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ac4:	22 0f       	add	r18, r18
    3ac6:	33 1f       	adc	r19, r19
    3ac8:	44 1f       	adc	r20, r20
    3aca:	aa 1f       	adc	r26, r26
    3acc:	a9 f3       	breq	.-22     	; 0x3ab8 <__divsf3_pse+0x10>
    3ace:	35 d0       	rcall	.+106    	; 0x3b3a <__divsf3_pse+0x92>
    3ad0:	0e 2e       	mov	r0, r30
    3ad2:	3a f0       	brmi	.+14     	; 0x3ae2 <__divsf3_pse+0x3a>
    3ad4:	e0 e8       	ldi	r30, 0x80	; 128
    3ad6:	32 d0       	rcall	.+100    	; 0x3b3c <__divsf3_pse+0x94>
    3ad8:	91 50       	subi	r25, 0x01	; 1
    3ada:	50 40       	sbci	r21, 0x00	; 0
    3adc:	e6 95       	lsr	r30
    3ade:	00 1c       	adc	r0, r0
    3ae0:	ca f7       	brpl	.-14     	; 0x3ad4 <__divsf3_pse+0x2c>
    3ae2:	2b d0       	rcall	.+86     	; 0x3b3a <__divsf3_pse+0x92>
    3ae4:	fe 2f       	mov	r31, r30
    3ae6:	29 d0       	rcall	.+82     	; 0x3b3a <__divsf3_pse+0x92>
    3ae8:	66 0f       	add	r22, r22
    3aea:	77 1f       	adc	r23, r23
    3aec:	88 1f       	adc	r24, r24
    3aee:	bb 1f       	adc	r27, r27
    3af0:	26 17       	cp	r18, r22
    3af2:	37 07       	cpc	r19, r23
    3af4:	48 07       	cpc	r20, r24
    3af6:	ab 07       	cpc	r26, r27
    3af8:	b0 e8       	ldi	r27, 0x80	; 128
    3afa:	09 f0       	breq	.+2      	; 0x3afe <__divsf3_pse+0x56>
    3afc:	bb 0b       	sbc	r27, r27
    3afe:	80 2d       	mov	r24, r0
    3b00:	bf 01       	movw	r22, r30
    3b02:	ff 27       	eor	r31, r31
    3b04:	93 58       	subi	r25, 0x83	; 131
    3b06:	5f 4f       	sbci	r21, 0xFF	; 255
    3b08:	3a f0       	brmi	.+14     	; 0x3b18 <__divsf3_pse+0x70>
    3b0a:	9e 3f       	cpi	r25, 0xFE	; 254
    3b0c:	51 05       	cpc	r21, r1
    3b0e:	78 f0       	brcs	.+30     	; 0x3b2e <__divsf3_pse+0x86>
    3b10:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__fp_inf>
    3b14:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__fp_szero>
    3b18:	5f 3f       	cpi	r21, 0xFF	; 255
    3b1a:	e4 f3       	brlt	.-8      	; 0x3b14 <__divsf3_pse+0x6c>
    3b1c:	98 3e       	cpi	r25, 0xE8	; 232
    3b1e:	d4 f3       	brlt	.-12     	; 0x3b14 <__divsf3_pse+0x6c>
    3b20:	86 95       	lsr	r24
    3b22:	77 95       	ror	r23
    3b24:	67 95       	ror	r22
    3b26:	b7 95       	ror	r27
    3b28:	f7 95       	ror	r31
    3b2a:	9f 5f       	subi	r25, 0xFF	; 255
    3b2c:	c9 f7       	brne	.-14     	; 0x3b20 <__divsf3_pse+0x78>
    3b2e:	88 0f       	add	r24, r24
    3b30:	91 1d       	adc	r25, r1
    3b32:	96 95       	lsr	r25
    3b34:	87 95       	ror	r24
    3b36:	97 f9       	bld	r25, 7
    3b38:	08 95       	ret
    3b3a:	e1 e0       	ldi	r30, 0x01	; 1
    3b3c:	66 0f       	add	r22, r22
    3b3e:	77 1f       	adc	r23, r23
    3b40:	88 1f       	adc	r24, r24
    3b42:	bb 1f       	adc	r27, r27
    3b44:	62 17       	cp	r22, r18
    3b46:	73 07       	cpc	r23, r19
    3b48:	84 07       	cpc	r24, r20
    3b4a:	ba 07       	cpc	r27, r26
    3b4c:	20 f0       	brcs	.+8      	; 0x3b56 <__divsf3_pse+0xae>
    3b4e:	62 1b       	sub	r22, r18
    3b50:	73 0b       	sbc	r23, r19
    3b52:	84 0b       	sbc	r24, r20
    3b54:	ba 0b       	sbc	r27, r26
    3b56:	ee 1f       	adc	r30, r30
    3b58:	88 f7       	brcc	.-30     	; 0x3b3c <__divsf3_pse+0x94>
    3b5a:	e0 95       	com	r30
    3b5c:	08 95       	ret
    3b5e:	29 f4       	brne	.+10     	; 0x3b6a <__divsf3_pse+0xc2>
    3b60:	16 f0       	brts	.+4      	; 0x3b66 <__divsf3_pse+0xbe>
    3b62:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__fp_inf>
    3b66:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <__fp_zero>
    3b6a:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__fp_nan>

00003b6e <exp>:
    3b6e:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__fp_splitA>
    3b72:	a8 f3       	brcs	.-22     	; 0x3b5e <__divsf3_pse+0xb6>
    3b74:	96 38       	cpi	r25, 0x86	; 134
    3b76:	a0 f7       	brcc	.-24     	; 0x3b60 <__divsf3_pse+0xb8>
    3b78:	07 f8       	bld	r0, 7
    3b7a:	0f 92       	push	r0
    3b7c:	e8 94       	clt
    3b7e:	2b e3       	ldi	r18, 0x3B	; 59
    3b80:	3a ea       	ldi	r19, 0xAA	; 170
    3b82:	48 eb       	ldi	r20, 0xB8	; 184
    3b84:	5f e7       	ldi	r21, 0x7F	; 127
    3b86:	0e 94 ac 20 	call	0x4158	; 0x4158 <__mulsf3_pse>
    3b8a:	0f 92       	push	r0
    3b8c:	0f 92       	push	r0
    3b8e:	0f 92       	push	r0
    3b90:	4d b7       	in	r20, 0x3d	; 61
    3b92:	5e b7       	in	r21, 0x3e	; 62
    3b94:	0f 92       	push	r0
    3b96:	0e 94 62 20 	call	0x40c4	; 0x40c4 <modf>
    3b9a:	e5 e9       	ldi	r30, 0x95	; 149
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <__fp_powser>
    3ba2:	4f 91       	pop	r20
    3ba4:	5f 91       	pop	r21
    3ba6:	ef 91       	pop	r30
    3ba8:	ff 91       	pop	r31
    3baa:	e5 95       	asr	r30
    3bac:	ee 1f       	adc	r30, r30
    3bae:	ff 1f       	adc	r31, r31
    3bb0:	49 f0       	breq	.+18     	; 0x3bc4 <exp+0x56>
    3bb2:	fe 57       	subi	r31, 0x7E	; 126
    3bb4:	e0 68       	ori	r30, 0x80	; 128
    3bb6:	44 27       	eor	r20, r20
    3bb8:	ee 0f       	add	r30, r30
    3bba:	44 1f       	adc	r20, r20
    3bbc:	fa 95       	dec	r31
    3bbe:	e1 f7       	brne	.-8      	; 0x3bb8 <exp+0x4a>
    3bc0:	41 95       	neg	r20
    3bc2:	55 0b       	sbc	r21, r21
    3bc4:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <ldexp>
    3bc8:	0f 90       	pop	r0
    3bca:	07 fe       	sbrs	r0, 7
    3bcc:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <inverse>
    3bd0:	08 95       	ret

00003bd2 <__fixsfsi>:
    3bd2:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__fixunssfsi>
    3bd6:	68 94       	set
    3bd8:	b1 11       	cpse	r27, r1
    3bda:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__fp_szero>
    3bde:	08 95       	ret

00003be0 <__fixunssfsi>:
    3be0:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__fp_splitA>
    3be4:	88 f0       	brcs	.+34     	; 0x3c08 <__fixunssfsi+0x28>
    3be6:	9f 57       	subi	r25, 0x7F	; 127
    3be8:	98 f0       	brcs	.+38     	; 0x3c10 <__fixunssfsi+0x30>
    3bea:	b9 2f       	mov	r27, r25
    3bec:	99 27       	eor	r25, r25
    3bee:	b7 51       	subi	r27, 0x17	; 23
    3bf0:	b0 f0       	brcs	.+44     	; 0x3c1e <__fixunssfsi+0x3e>
    3bf2:	e1 f0       	breq	.+56     	; 0x3c2c <__fixunssfsi+0x4c>
    3bf4:	66 0f       	add	r22, r22
    3bf6:	77 1f       	adc	r23, r23
    3bf8:	88 1f       	adc	r24, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	1a f0       	brmi	.+6      	; 0x3c04 <__fixunssfsi+0x24>
    3bfe:	ba 95       	dec	r27
    3c00:	c9 f7       	brne	.-14     	; 0x3bf4 <__fixunssfsi+0x14>
    3c02:	14 c0       	rjmp	.+40     	; 0x3c2c <__fixunssfsi+0x4c>
    3c04:	b1 30       	cpi	r27, 0x01	; 1
    3c06:	91 f0       	breq	.+36     	; 0x3c2c <__fixunssfsi+0x4c>
    3c08:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <__fp_zero>
    3c0c:	b1 e0       	ldi	r27, 0x01	; 1
    3c0e:	08 95       	ret
    3c10:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <__fp_zero>
    3c14:	67 2f       	mov	r22, r23
    3c16:	78 2f       	mov	r23, r24
    3c18:	88 27       	eor	r24, r24
    3c1a:	b8 5f       	subi	r27, 0xF8	; 248
    3c1c:	39 f0       	breq	.+14     	; 0x3c2c <__fixunssfsi+0x4c>
    3c1e:	b9 3f       	cpi	r27, 0xF9	; 249
    3c20:	cc f3       	brlt	.-14     	; 0x3c14 <__fixunssfsi+0x34>
    3c22:	86 95       	lsr	r24
    3c24:	77 95       	ror	r23
    3c26:	67 95       	ror	r22
    3c28:	b3 95       	inc	r27
    3c2a:	d9 f7       	brne	.-10     	; 0x3c22 <__fixunssfsi+0x42>
    3c2c:	3e f4       	brtc	.+14     	; 0x3c3c <__fixunssfsi+0x5c>
    3c2e:	90 95       	com	r25
    3c30:	80 95       	com	r24
    3c32:	70 95       	com	r23
    3c34:	61 95       	neg	r22
    3c36:	7f 4f       	sbci	r23, 0xFF	; 255
    3c38:	8f 4f       	sbci	r24, 0xFF	; 255
    3c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3c:	08 95       	ret

00003c3e <__floatunsisf>:
    3c3e:	e8 94       	clt
    3c40:	09 c0       	rjmp	.+18     	; 0x3c54 <__floatsisf+0x12>

00003c42 <__floatsisf>:
    3c42:	97 fb       	bst	r25, 7
    3c44:	3e f4       	brtc	.+14     	; 0x3c54 <__floatsisf+0x12>
    3c46:	90 95       	com	r25
    3c48:	80 95       	com	r24
    3c4a:	70 95       	com	r23
    3c4c:	61 95       	neg	r22
    3c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c50:	8f 4f       	sbci	r24, 0xFF	; 255
    3c52:	9f 4f       	sbci	r25, 0xFF	; 255
    3c54:	99 23       	and	r25, r25
    3c56:	a9 f0       	breq	.+42     	; 0x3c82 <__floatsisf+0x40>
    3c58:	f9 2f       	mov	r31, r25
    3c5a:	96 e9       	ldi	r25, 0x96	; 150
    3c5c:	bb 27       	eor	r27, r27
    3c5e:	93 95       	inc	r25
    3c60:	f6 95       	lsr	r31
    3c62:	87 95       	ror	r24
    3c64:	77 95       	ror	r23
    3c66:	67 95       	ror	r22
    3c68:	b7 95       	ror	r27
    3c6a:	f1 11       	cpse	r31, r1
    3c6c:	f8 cf       	rjmp	.-16     	; 0x3c5e <__floatsisf+0x1c>
    3c6e:	fa f4       	brpl	.+62     	; 0x3cae <__floatsisf+0x6c>
    3c70:	bb 0f       	add	r27, r27
    3c72:	11 f4       	brne	.+4      	; 0x3c78 <__floatsisf+0x36>
    3c74:	60 ff       	sbrs	r22, 0
    3c76:	1b c0       	rjmp	.+54     	; 0x3cae <__floatsisf+0x6c>
    3c78:	6f 5f       	subi	r22, 0xFF	; 255
    3c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c7c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c80:	16 c0       	rjmp	.+44     	; 0x3cae <__floatsisf+0x6c>
    3c82:	88 23       	and	r24, r24
    3c84:	11 f0       	breq	.+4      	; 0x3c8a <__floatsisf+0x48>
    3c86:	96 e9       	ldi	r25, 0x96	; 150
    3c88:	11 c0       	rjmp	.+34     	; 0x3cac <__floatsisf+0x6a>
    3c8a:	77 23       	and	r23, r23
    3c8c:	21 f0       	breq	.+8      	; 0x3c96 <__floatsisf+0x54>
    3c8e:	9e e8       	ldi	r25, 0x8E	; 142
    3c90:	87 2f       	mov	r24, r23
    3c92:	76 2f       	mov	r23, r22
    3c94:	05 c0       	rjmp	.+10     	; 0x3ca0 <__floatsisf+0x5e>
    3c96:	66 23       	and	r22, r22
    3c98:	71 f0       	breq	.+28     	; 0x3cb6 <__floatsisf+0x74>
    3c9a:	96 e8       	ldi	r25, 0x86	; 134
    3c9c:	86 2f       	mov	r24, r22
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	60 e0       	ldi	r22, 0x00	; 0
    3ca2:	2a f0       	brmi	.+10     	; 0x3cae <__floatsisf+0x6c>
    3ca4:	9a 95       	dec	r25
    3ca6:	66 0f       	add	r22, r22
    3ca8:	77 1f       	adc	r23, r23
    3caa:	88 1f       	adc	r24, r24
    3cac:	da f7       	brpl	.-10     	; 0x3ca4 <__floatsisf+0x62>
    3cae:	88 0f       	add	r24, r24
    3cb0:	96 95       	lsr	r25
    3cb2:	87 95       	ror	r24
    3cb4:	97 f9       	bld	r25, 7
    3cb6:	08 95       	ret

00003cb8 <floor>:
    3cb8:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__fp_trunc>
    3cbc:	90 f0       	brcs	.+36     	; 0x3ce2 <floor+0x2a>
    3cbe:	9f 37       	cpi	r25, 0x7F	; 127
    3cc0:	48 f4       	brcc	.+18     	; 0x3cd4 <floor+0x1c>
    3cc2:	91 11       	cpse	r25, r1
    3cc4:	16 f0       	brts	.+4      	; 0x3cca <floor+0x12>
    3cc6:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__fp_szero>
    3cca:	60 e0       	ldi	r22, 0x00	; 0
    3ccc:	70 e0       	ldi	r23, 0x00	; 0
    3cce:	80 e8       	ldi	r24, 0x80	; 128
    3cd0:	9f eb       	ldi	r25, 0xBF	; 191
    3cd2:	08 95       	ret
    3cd4:	26 f4       	brtc	.+8      	; 0x3cde <floor+0x26>
    3cd6:	1b 16       	cp	r1, r27
    3cd8:	61 1d       	adc	r22, r1
    3cda:	71 1d       	adc	r23, r1
    3cdc:	81 1d       	adc	r24, r1
    3cde:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <__fp_mintl>
    3ce2:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__fp_mpack>

00003ce6 <__fp_arccos>:
    3ce6:	df 93       	push	r29
    3ce8:	cf 93       	push	r28
    3cea:	1f 93       	push	r17
    3cec:	0f 93       	push	r16
    3cee:	8b 01       	movw	r16, r22
    3cf0:	ec 01       	movw	r28, r24
    3cf2:	ed eb       	ldi	r30, 0xBD	; 189
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <__fp_powser>
    3cfa:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__fp_round>
    3cfe:	98 01       	movw	r18, r16
    3d00:	ae 01       	movw	r20, r28
    3d02:	8b 01       	movw	r16, r22
    3d04:	ec 01       	movw	r28, r24
    3d06:	60 e0       	ldi	r22, 0x00	; 0
    3d08:	70 e0       	ldi	r23, 0x00	; 0
    3d0a:	80 e8       	ldi	r24, 0x80	; 128
    3d0c:	9f e3       	ldi	r25, 0x3F	; 63
    3d0e:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    3d12:	0e 94 ab 21 	call	0x4356	; 0x4356 <sqrt>
    3d16:	98 01       	movw	r18, r16
    3d18:	ae 01       	movw	r20, r28
    3d1a:	0f 91       	pop	r16
    3d1c:	1f 91       	pop	r17
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <__mulsf3x>

00003d26 <__fp_cmp>:
    3d26:	99 0f       	add	r25, r25
    3d28:	00 08       	sbc	r0, r0
    3d2a:	55 0f       	add	r21, r21
    3d2c:	aa 0b       	sbc	r26, r26
    3d2e:	e0 e8       	ldi	r30, 0x80	; 128
    3d30:	fe ef       	ldi	r31, 0xFE	; 254
    3d32:	16 16       	cp	r1, r22
    3d34:	17 06       	cpc	r1, r23
    3d36:	e8 07       	cpc	r30, r24
    3d38:	f9 07       	cpc	r31, r25
    3d3a:	c0 f0       	brcs	.+48     	; 0x3d6c <__fp_cmp+0x46>
    3d3c:	12 16       	cp	r1, r18
    3d3e:	13 06       	cpc	r1, r19
    3d40:	e4 07       	cpc	r30, r20
    3d42:	f5 07       	cpc	r31, r21
    3d44:	98 f0       	brcs	.+38     	; 0x3d6c <__fp_cmp+0x46>
    3d46:	62 1b       	sub	r22, r18
    3d48:	73 0b       	sbc	r23, r19
    3d4a:	84 0b       	sbc	r24, r20
    3d4c:	95 0b       	sbc	r25, r21
    3d4e:	39 f4       	brne	.+14     	; 0x3d5e <__fp_cmp+0x38>
    3d50:	0a 26       	eor	r0, r26
    3d52:	61 f0       	breq	.+24     	; 0x3d6c <__fp_cmp+0x46>
    3d54:	23 2b       	or	r18, r19
    3d56:	24 2b       	or	r18, r20
    3d58:	25 2b       	or	r18, r21
    3d5a:	21 f4       	brne	.+8      	; 0x3d64 <__fp_cmp+0x3e>
    3d5c:	08 95       	ret
    3d5e:	0a 26       	eor	r0, r26
    3d60:	09 f4       	brne	.+2      	; 0x3d64 <__fp_cmp+0x3e>
    3d62:	a1 40       	sbci	r26, 0x01	; 1
    3d64:	a6 95       	lsr	r26
    3d66:	8f ef       	ldi	r24, 0xFF	; 255
    3d68:	81 1d       	adc	r24, r1
    3d6a:	81 1d       	adc	r24, r1
    3d6c:	08 95       	ret

00003d6e <__fp_inf>:
    3d6e:	97 f9       	bld	r25, 7
    3d70:	9f 67       	ori	r25, 0x7F	; 127
    3d72:	80 e8       	ldi	r24, 0x80	; 128
    3d74:	70 e0       	ldi	r23, 0x00	; 0
    3d76:	60 e0       	ldi	r22, 0x00	; 0
    3d78:	08 95       	ret

00003d7a <__fp_mintl>:
    3d7a:	88 23       	and	r24, r24
    3d7c:	71 f4       	brne	.+28     	; 0x3d9a <__fp_mintl+0x20>
    3d7e:	77 23       	and	r23, r23
    3d80:	21 f0       	breq	.+8      	; 0x3d8a <__fp_mintl+0x10>
    3d82:	98 50       	subi	r25, 0x08	; 8
    3d84:	87 2b       	or	r24, r23
    3d86:	76 2f       	mov	r23, r22
    3d88:	07 c0       	rjmp	.+14     	; 0x3d98 <__fp_mintl+0x1e>
    3d8a:	66 23       	and	r22, r22
    3d8c:	11 f4       	brne	.+4      	; 0x3d92 <__fp_mintl+0x18>
    3d8e:	99 27       	eor	r25, r25
    3d90:	0d c0       	rjmp	.+26     	; 0x3dac <__fp_mintl+0x32>
    3d92:	90 51       	subi	r25, 0x10	; 16
    3d94:	86 2b       	or	r24, r22
    3d96:	70 e0       	ldi	r23, 0x00	; 0
    3d98:	60 e0       	ldi	r22, 0x00	; 0
    3d9a:	2a f0       	brmi	.+10     	; 0x3da6 <__fp_mintl+0x2c>
    3d9c:	9a 95       	dec	r25
    3d9e:	66 0f       	add	r22, r22
    3da0:	77 1f       	adc	r23, r23
    3da2:	88 1f       	adc	r24, r24
    3da4:	da f7       	brpl	.-10     	; 0x3d9c <__fp_mintl+0x22>
    3da6:	88 0f       	add	r24, r24
    3da8:	96 95       	lsr	r25
    3daa:	87 95       	ror	r24
    3dac:	97 f9       	bld	r25, 7
    3dae:	08 95       	ret

00003db0 <__fp_mpack>:
    3db0:	9f 3f       	cpi	r25, 0xFF	; 255
    3db2:	31 f0       	breq	.+12     	; 0x3dc0 <__fp_mpack_finite+0xc>

00003db4 <__fp_mpack_finite>:
    3db4:	91 50       	subi	r25, 0x01	; 1
    3db6:	20 f4       	brcc	.+8      	; 0x3dc0 <__fp_mpack_finite+0xc>
    3db8:	87 95       	ror	r24
    3dba:	77 95       	ror	r23
    3dbc:	67 95       	ror	r22
    3dbe:	b7 95       	ror	r27
    3dc0:	88 0f       	add	r24, r24
    3dc2:	91 1d       	adc	r25, r1
    3dc4:	96 95       	lsr	r25
    3dc6:	87 95       	ror	r24
    3dc8:	97 f9       	bld	r25, 7
    3dca:	08 95       	ret

00003dcc <__fp_nan>:
    3dcc:	9f ef       	ldi	r25, 0xFF	; 255
    3dce:	80 ec       	ldi	r24, 0xC0	; 192
    3dd0:	08 95       	ret

00003dd2 <__fp_powser>:
    3dd2:	df 93       	push	r29
    3dd4:	cf 93       	push	r28
    3dd6:	1f 93       	push	r17
    3dd8:	0f 93       	push	r16
    3dda:	ff 92       	push	r15
    3ddc:	ef 92       	push	r14
    3dde:	df 92       	push	r13
    3de0:	7b 01       	movw	r14, r22
    3de2:	8c 01       	movw	r16, r24
    3de4:	68 94       	set
    3de6:	06 c0       	rjmp	.+12     	; 0x3df4 <__fp_powser+0x22>
    3de8:	da 2e       	mov	r13, r26
    3dea:	ef 01       	movw	r28, r30
    3dec:	0e 94 a9 20 	call	0x4152	; 0x4152 <__mulsf3x>
    3df0:	fe 01       	movw	r30, r28
    3df2:	e8 94       	clt
    3df4:	a5 91       	lpm	r26, Z+
    3df6:	25 91       	lpm	r18, Z+
    3df8:	35 91       	lpm	r19, Z+
    3dfa:	45 91       	lpm	r20, Z+
    3dfc:	55 91       	lpm	r21, Z+
    3dfe:	a6 f3       	brts	.-24     	; 0x3de8 <__fp_powser+0x16>
    3e00:	ef 01       	movw	r28, r30
    3e02:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__addsf3x>
    3e06:	fe 01       	movw	r30, r28
    3e08:	97 01       	movw	r18, r14
    3e0a:	a8 01       	movw	r20, r16
    3e0c:	da 94       	dec	r13
    3e0e:	69 f7       	brne	.-38     	; 0x3dea <__fp_powser+0x18>
    3e10:	df 90       	pop	r13
    3e12:	ef 90       	pop	r14
    3e14:	ff 90       	pop	r15
    3e16:	0f 91       	pop	r16
    3e18:	1f 91       	pop	r17
    3e1a:	cf 91       	pop	r28
    3e1c:	df 91       	pop	r29
    3e1e:	08 95       	ret

00003e20 <__fp_powsodd>:
    3e20:	9f 93       	push	r25
    3e22:	8f 93       	push	r24
    3e24:	7f 93       	push	r23
    3e26:	6f 93       	push	r22
    3e28:	ff 93       	push	r31
    3e2a:	ef 93       	push	r30
    3e2c:	9b 01       	movw	r18, r22
    3e2e:	ac 01       	movw	r20, r24
    3e30:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    3e34:	ef 91       	pop	r30
    3e36:	ff 91       	pop	r31
    3e38:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <__fp_powser>
    3e3c:	2f 91       	pop	r18
    3e3e:	3f 91       	pop	r19
    3e40:	4f 91       	pop	r20
    3e42:	5f 91       	pop	r21
    3e44:	0c 94 96 20 	jmp	0x412c	; 0x412c <__mulsf3>

00003e48 <__fp_pscA>:
    3e48:	00 24       	eor	r0, r0
    3e4a:	0a 94       	dec	r0
    3e4c:	16 16       	cp	r1, r22
    3e4e:	17 06       	cpc	r1, r23
    3e50:	18 06       	cpc	r1, r24
    3e52:	09 06       	cpc	r0, r25
    3e54:	08 95       	ret

00003e56 <__fp_pscB>:
    3e56:	00 24       	eor	r0, r0
    3e58:	0a 94       	dec	r0
    3e5a:	12 16       	cp	r1, r18
    3e5c:	13 06       	cpc	r1, r19
    3e5e:	14 06       	cpc	r1, r20
    3e60:	05 06       	cpc	r0, r21
    3e62:	08 95       	ret
    3e64:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__fp_nan>

00003e68 <__fp_rempio2>:
    3e68:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__fp_splitA>
    3e6c:	d8 f3       	brcs	.-10     	; 0x3e64 <__fp_pscB+0xe>
    3e6e:	e8 94       	clt
    3e70:	e0 e0       	ldi	r30, 0x00	; 0
    3e72:	bb 27       	eor	r27, r27
    3e74:	9f 57       	subi	r25, 0x7F	; 127
    3e76:	f0 f0       	brcs	.+60     	; 0x3eb4 <__fp_rempio2+0x4c>
    3e78:	2a ed       	ldi	r18, 0xDA	; 218
    3e7a:	3f e0       	ldi	r19, 0x0F	; 15
    3e7c:	49 ec       	ldi	r20, 0xC9	; 201
    3e7e:	06 c0       	rjmp	.+12     	; 0x3e8c <__fp_rempio2+0x24>
    3e80:	ee 0f       	add	r30, r30
    3e82:	bb 0f       	add	r27, r27
    3e84:	66 1f       	adc	r22, r22
    3e86:	77 1f       	adc	r23, r23
    3e88:	88 1f       	adc	r24, r24
    3e8a:	28 f0       	brcs	.+10     	; 0x3e96 <__fp_rempio2+0x2e>
    3e8c:	b2 3a       	cpi	r27, 0xA2	; 162
    3e8e:	62 07       	cpc	r22, r18
    3e90:	73 07       	cpc	r23, r19
    3e92:	84 07       	cpc	r24, r20
    3e94:	28 f0       	brcs	.+10     	; 0x3ea0 <__fp_rempio2+0x38>
    3e96:	b2 5a       	subi	r27, 0xA2	; 162
    3e98:	62 0b       	sbc	r22, r18
    3e9a:	73 0b       	sbc	r23, r19
    3e9c:	84 0b       	sbc	r24, r20
    3e9e:	e3 95       	inc	r30
    3ea0:	9a 95       	dec	r25
    3ea2:	72 f7       	brpl	.-36     	; 0x3e80 <__fp_rempio2+0x18>
    3ea4:	80 38       	cpi	r24, 0x80	; 128
    3ea6:	30 f4       	brcc	.+12     	; 0x3eb4 <__fp_rempio2+0x4c>
    3ea8:	9a 95       	dec	r25
    3eaa:	bb 0f       	add	r27, r27
    3eac:	66 1f       	adc	r22, r22
    3eae:	77 1f       	adc	r23, r23
    3eb0:	88 1f       	adc	r24, r24
    3eb2:	d2 f7       	brpl	.-12     	; 0x3ea8 <__fp_rempio2+0x40>
    3eb4:	90 48       	sbci	r25, 0x80	; 128
    3eb6:	0c 94 da 1e 	jmp	0x3db4	; 0x3db4 <__fp_mpack_finite>

00003eba <__fp_round>:
    3eba:	09 2e       	mov	r0, r25
    3ebc:	03 94       	inc	r0
    3ebe:	00 0c       	add	r0, r0
    3ec0:	11 f4       	brne	.+4      	; 0x3ec6 <__fp_round+0xc>
    3ec2:	88 23       	and	r24, r24
    3ec4:	52 f0       	brmi	.+20     	; 0x3eda <__fp_round+0x20>
    3ec6:	bb 0f       	add	r27, r27
    3ec8:	40 f4       	brcc	.+16     	; 0x3eda <__fp_round+0x20>
    3eca:	bf 2b       	or	r27, r31
    3ecc:	11 f4       	brne	.+4      	; 0x3ed2 <__fp_round+0x18>
    3ece:	60 ff       	sbrs	r22, 0
    3ed0:	04 c0       	rjmp	.+8      	; 0x3eda <__fp_round+0x20>
    3ed2:	6f 5f       	subi	r22, 0xFF	; 255
    3ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eda:	08 95       	ret

00003edc <__fp_sinus>:
    3edc:	ef 93       	push	r30
    3ede:	e0 ff       	sbrs	r30, 0
    3ee0:	07 c0       	rjmp	.+14     	; 0x3ef0 <__fp_sinus+0x14>
    3ee2:	a2 ea       	ldi	r26, 0xA2	; 162
    3ee4:	2a ed       	ldi	r18, 0xDA	; 218
    3ee6:	3f e0       	ldi	r19, 0x0F	; 15
    3ee8:	49 ec       	ldi	r20, 0xC9	; 201
    3eea:	5f eb       	ldi	r21, 0xBF	; 191
    3eec:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__addsf3x>
    3ef0:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__fp_round>
    3ef4:	0f 90       	pop	r0
    3ef6:	03 94       	inc	r0
    3ef8:	01 fc       	sbrc	r0, 1
    3efa:	90 58       	subi	r25, 0x80	; 128
    3efc:	e5 ee       	ldi	r30, 0xE5	; 229
    3efe:	f0 e0       	ldi	r31, 0x00	; 0
    3f00:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__fp_powsodd>

00003f04 <__fp_split3>:
    3f04:	57 fd       	sbrc	r21, 7
    3f06:	90 58       	subi	r25, 0x80	; 128
    3f08:	44 0f       	add	r20, r20
    3f0a:	55 1f       	adc	r21, r21
    3f0c:	59 f0       	breq	.+22     	; 0x3f24 <__fp_splitA+0x10>
    3f0e:	5f 3f       	cpi	r21, 0xFF	; 255
    3f10:	71 f0       	breq	.+28     	; 0x3f2e <__fp_splitA+0x1a>
    3f12:	47 95       	ror	r20

00003f14 <__fp_splitA>:
    3f14:	88 0f       	add	r24, r24
    3f16:	97 fb       	bst	r25, 7
    3f18:	99 1f       	adc	r25, r25
    3f1a:	61 f0       	breq	.+24     	; 0x3f34 <__fp_splitA+0x20>
    3f1c:	9f 3f       	cpi	r25, 0xFF	; 255
    3f1e:	79 f0       	breq	.+30     	; 0x3f3e <__fp_splitA+0x2a>
    3f20:	87 95       	ror	r24
    3f22:	08 95       	ret
    3f24:	12 16       	cp	r1, r18
    3f26:	13 06       	cpc	r1, r19
    3f28:	14 06       	cpc	r1, r20
    3f2a:	55 1f       	adc	r21, r21
    3f2c:	f2 cf       	rjmp	.-28     	; 0x3f12 <__fp_split3+0xe>
    3f2e:	46 95       	lsr	r20
    3f30:	f1 df       	rcall	.-30     	; 0x3f14 <__fp_splitA>
    3f32:	08 c0       	rjmp	.+16     	; 0x3f44 <__fp_splitA+0x30>
    3f34:	16 16       	cp	r1, r22
    3f36:	17 06       	cpc	r1, r23
    3f38:	18 06       	cpc	r1, r24
    3f3a:	99 1f       	adc	r25, r25
    3f3c:	f1 cf       	rjmp	.-30     	; 0x3f20 <__fp_splitA+0xc>
    3f3e:	86 95       	lsr	r24
    3f40:	71 05       	cpc	r23, r1
    3f42:	61 05       	cpc	r22, r1
    3f44:	08 94       	sec
    3f46:	08 95       	ret

00003f48 <__fp_trunc>:
    3f48:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__fp_splitA>
    3f4c:	a0 f0       	brcs	.+40     	; 0x3f76 <__fp_trunc+0x2e>
    3f4e:	be e7       	ldi	r27, 0x7E	; 126
    3f50:	b9 17       	cp	r27, r25
    3f52:	88 f4       	brcc	.+34     	; 0x3f76 <__fp_trunc+0x2e>
    3f54:	bb 27       	eor	r27, r27
    3f56:	9f 38       	cpi	r25, 0x8F	; 143
    3f58:	60 f4       	brcc	.+24     	; 0x3f72 <__fp_trunc+0x2a>
    3f5a:	16 16       	cp	r1, r22
    3f5c:	b1 1d       	adc	r27, r1
    3f5e:	67 2f       	mov	r22, r23
    3f60:	78 2f       	mov	r23, r24
    3f62:	88 27       	eor	r24, r24
    3f64:	98 5f       	subi	r25, 0xF8	; 248
    3f66:	f7 cf       	rjmp	.-18     	; 0x3f56 <__fp_trunc+0xe>
    3f68:	86 95       	lsr	r24
    3f6a:	77 95       	ror	r23
    3f6c:	67 95       	ror	r22
    3f6e:	b1 1d       	adc	r27, r1
    3f70:	93 95       	inc	r25
    3f72:	96 39       	cpi	r25, 0x96	; 150
    3f74:	c8 f3       	brcs	.-14     	; 0x3f68 <__fp_trunc+0x20>
    3f76:	08 95       	ret

00003f78 <__fp_zero>:
    3f78:	e8 94       	clt

00003f7a <__fp_szero>:
    3f7a:	bb 27       	eor	r27, r27
    3f7c:	66 27       	eor	r22, r22
    3f7e:	77 27       	eor	r23, r23
    3f80:	cb 01       	movw	r24, r22
    3f82:	97 f9       	bld	r25, 7
    3f84:	08 95       	ret

00003f86 <__gesf2>:
    3f86:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__fp_cmp>
    3f8a:	08 f4       	brcc	.+2      	; 0x3f8e <__gesf2+0x8>
    3f8c:	8f ef       	ldi	r24, 0xFF	; 255
    3f8e:	08 95       	ret

00003f90 <inverse>:
    3f90:	9b 01       	movw	r18, r22
    3f92:	ac 01       	movw	r20, r24
    3f94:	60 e0       	ldi	r22, 0x00	; 0
    3f96:	70 e0       	ldi	r23, 0x00	; 0
    3f98:	80 e8       	ldi	r24, 0x80	; 128
    3f9a:	9f e3       	ldi	r25, 0x3F	; 63
    3f9c:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__divsf3>
    3fa0:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__fp_inf>
    3fa4:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__fp_mpack>

00003fa8 <ldexp>:
    3fa8:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__fp_splitA>
    3fac:	d8 f3       	brcs	.-10     	; 0x3fa4 <inverse+0x14>
    3fae:	99 23       	and	r25, r25
    3fb0:	c9 f3       	breq	.-14     	; 0x3fa4 <inverse+0x14>
    3fb2:	94 0f       	add	r25, r20
    3fb4:	51 1d       	adc	r21, r1
    3fb6:	a3 f3       	brvs	.-24     	; 0x3fa0 <inverse+0x10>
    3fb8:	91 50       	subi	r25, 0x01	; 1
    3fba:	50 40       	sbci	r21, 0x00	; 0
    3fbc:	94 f0       	brlt	.+36     	; 0x3fe2 <ldexp+0x3a>
    3fbe:	59 f0       	breq	.+22     	; 0x3fd6 <ldexp+0x2e>
    3fc0:	88 23       	and	r24, r24
    3fc2:	32 f0       	brmi	.+12     	; 0x3fd0 <ldexp+0x28>
    3fc4:	66 0f       	add	r22, r22
    3fc6:	77 1f       	adc	r23, r23
    3fc8:	88 1f       	adc	r24, r24
    3fca:	91 50       	subi	r25, 0x01	; 1
    3fcc:	50 40       	sbci	r21, 0x00	; 0
    3fce:	c1 f7       	brne	.-16     	; 0x3fc0 <ldexp+0x18>
    3fd0:	9e 3f       	cpi	r25, 0xFE	; 254
    3fd2:	51 05       	cpc	r21, r1
    3fd4:	2c f7       	brge	.-54     	; 0x3fa0 <inverse+0x10>
    3fd6:	88 0f       	add	r24, r24
    3fd8:	91 1d       	adc	r25, r1
    3fda:	96 95       	lsr	r25
    3fdc:	87 95       	ror	r24
    3fde:	97 f9       	bld	r25, 7
    3fe0:	08 95       	ret
    3fe2:	5f 3f       	cpi	r21, 0xFF	; 255
    3fe4:	ac f0       	brlt	.+42     	; 0x4010 <ldexp+0x68>
    3fe6:	98 3e       	cpi	r25, 0xE8	; 232
    3fe8:	9c f0       	brlt	.+38     	; 0x4010 <ldexp+0x68>
    3fea:	bb 27       	eor	r27, r27
    3fec:	86 95       	lsr	r24
    3fee:	77 95       	ror	r23
    3ff0:	67 95       	ror	r22
    3ff2:	b7 95       	ror	r27
    3ff4:	08 f4       	brcc	.+2      	; 0x3ff8 <ldexp+0x50>
    3ff6:	b1 60       	ori	r27, 0x01	; 1
    3ff8:	93 95       	inc	r25
    3ffa:	c1 f7       	brne	.-16     	; 0x3fec <ldexp+0x44>
    3ffc:	bb 0f       	add	r27, r27
    3ffe:	58 f7       	brcc	.-42     	; 0x3fd6 <ldexp+0x2e>
    4000:	11 f4       	brne	.+4      	; 0x4006 <ldexp+0x5e>
    4002:	60 ff       	sbrs	r22, 0
    4004:	e8 cf       	rjmp	.-48     	; 0x3fd6 <ldexp+0x2e>
    4006:	6f 5f       	subi	r22, 0xFF	; 255
    4008:	7f 4f       	sbci	r23, 0xFF	; 255
    400a:	8f 4f       	sbci	r24, 0xFF	; 255
    400c:	9f 4f       	sbci	r25, 0xFF	; 255
    400e:	e3 cf       	rjmp	.-58     	; 0x3fd6 <ldexp+0x2e>
    4010:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__fp_szero>

00004014 <log10>:
    4014:	0e 94 1a 20 	call	0x4034	; 0x4034 <log>
    4018:	29 ed       	ldi	r18, 0xD9	; 217
    401a:	3b e5       	ldi	r19, 0x5B	; 91
    401c:	4e ed       	ldi	r20, 0xDE	; 222
    401e:	5e e3       	ldi	r21, 0x3E	; 62
    4020:	0c 94 96 20 	jmp	0x412c	; 0x412c <__mulsf3>
    4024:	16 f0       	brts	.+4      	; 0x402a <log10+0x16>
    4026:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__fp_mpack>
    402a:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__fp_nan>
    402e:	68 94       	set
    4030:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__fp_inf>

00004034 <log>:
    4034:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__fp_splitA>
    4038:	a8 f3       	brcs	.-22     	; 0x4024 <log10+0x10>
    403a:	99 23       	and	r25, r25
    403c:	c1 f3       	breq	.-16     	; 0x402e <log10+0x1a>
    403e:	ae f3       	brts	.-22     	; 0x402a <log10+0x16>
    4040:	df 93       	push	r29
    4042:	cf 93       	push	r28
    4044:	1f 93       	push	r17
    4046:	0f 93       	push	r16
    4048:	ff 92       	push	r15
    404a:	c9 2f       	mov	r28, r25
    404c:	dd 27       	eor	r29, r29
    404e:	88 23       	and	r24, r24
    4050:	2a f0       	brmi	.+10     	; 0x405c <log+0x28>
    4052:	21 97       	sbiw	r28, 0x01	; 1
    4054:	66 0f       	add	r22, r22
    4056:	77 1f       	adc	r23, r23
    4058:	88 1f       	adc	r24, r24
    405a:	da f7       	brpl	.-10     	; 0x4052 <log+0x1e>
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	40 e8       	ldi	r20, 0x80	; 128
    4062:	5f eb       	ldi	r21, 0xBF	; 191
    4064:	9f e3       	ldi	r25, 0x3F	; 63
    4066:	88 39       	cpi	r24, 0x98	; 152
    4068:	20 f0       	brcs	.+8      	; 0x4072 <log+0x3e>
    406a:	80 3e       	cpi	r24, 0xE0	; 224
    406c:	38 f0       	brcs	.+14     	; 0x407c <log+0x48>
    406e:	21 96       	adiw	r28, 0x01	; 1
    4070:	8f 77       	andi	r24, 0x7F	; 127
    4072:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    4076:	e3 e0       	ldi	r30, 0x03	; 3
    4078:	f1 e0       	ldi	r31, 0x01	; 1
    407a:	04 c0       	rjmp	.+8      	; 0x4084 <log+0x50>
    407c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    4080:	e0 e3       	ldi	r30, 0x30	; 48
    4082:	f1 e0       	ldi	r31, 0x01	; 1
    4084:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <__fp_powser>
    4088:	8b 01       	movw	r16, r22
    408a:	be 01       	movw	r22, r28
    408c:	ec 01       	movw	r28, r24
    408e:	fb 2e       	mov	r15, r27
    4090:	6f 57       	subi	r22, 0x7F	; 127
    4092:	71 09       	sbc	r23, r1
    4094:	75 95       	asr	r23
    4096:	77 1f       	adc	r23, r23
    4098:	88 0b       	sbc	r24, r24
    409a:	99 0b       	sbc	r25, r25
    409c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__floatsisf>
    40a0:	28 e1       	ldi	r18, 0x18	; 24
    40a2:	32 e7       	ldi	r19, 0x72	; 114
    40a4:	41 e3       	ldi	r20, 0x31	; 49
    40a6:	5f e3       	ldi	r21, 0x3F	; 63
    40a8:	0e 94 a9 20 	call	0x4152	; 0x4152 <__mulsf3x>
    40ac:	af 2d       	mov	r26, r15
    40ae:	98 01       	movw	r18, r16
    40b0:	ae 01       	movw	r20, r28
    40b2:	ff 90       	pop	r15
    40b4:	0f 91       	pop	r16
    40b6:	1f 91       	pop	r17
    40b8:	cf 91       	pop	r28
    40ba:	df 91       	pop	r29
    40bc:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__addsf3x>
    40c0:	0c 94 5d 1f 	jmp	0x3eba	; 0x3eba <__fp_round>

000040c4 <modf>:
    40c4:	fa 01       	movw	r30, r20
    40c6:	dc 01       	movw	r26, r24
    40c8:	aa 0f       	add	r26, r26
    40ca:	bb 1f       	adc	r27, r27
    40cc:	9b 01       	movw	r18, r22
    40ce:	ac 01       	movw	r20, r24
    40d0:	bf 57       	subi	r27, 0x7F	; 127
    40d2:	28 f4       	brcc	.+10     	; 0x40de <modf+0x1a>
    40d4:	22 27       	eor	r18, r18
    40d6:	33 27       	eor	r19, r19
    40d8:	44 27       	eor	r20, r20
    40da:	50 78       	andi	r21, 0x80	; 128
    40dc:	20 c0       	rjmp	.+64     	; 0x411e <modf+0x5a>
    40de:	b7 51       	subi	r27, 0x17	; 23
    40e0:	90 f4       	brcc	.+36     	; 0x4106 <modf+0x42>
    40e2:	ab 2f       	mov	r26, r27
    40e4:	00 24       	eor	r0, r0
    40e6:	46 95       	lsr	r20
    40e8:	37 95       	ror	r19
    40ea:	27 95       	ror	r18
    40ec:	01 1c       	adc	r0, r1
    40ee:	a3 95       	inc	r26
    40f0:	d2 f3       	brmi	.-12     	; 0x40e6 <modf+0x22>
    40f2:	00 20       	and	r0, r0
    40f4:	71 f0       	breq	.+28     	; 0x4112 <modf+0x4e>
    40f6:	22 0f       	add	r18, r18
    40f8:	33 1f       	adc	r19, r19
    40fa:	44 1f       	adc	r20, r20
    40fc:	b3 95       	inc	r27
    40fe:	da f3       	brmi	.-10     	; 0x40f6 <modf+0x32>
    4100:	0e d0       	rcall	.+28     	; 0x411e <modf+0x5a>
    4102:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__subsf3>
    4106:	61 30       	cpi	r22, 0x01	; 1
    4108:	71 05       	cpc	r23, r1
    410a:	a0 e8       	ldi	r26, 0x80	; 128
    410c:	8a 07       	cpc	r24, r26
    410e:	b9 46       	sbci	r27, 0x69	; 105
    4110:	30 f4       	brcc	.+12     	; 0x411e <modf+0x5a>
    4112:	9b 01       	movw	r18, r22
    4114:	ac 01       	movw	r20, r24
    4116:	66 27       	eor	r22, r22
    4118:	77 27       	eor	r23, r23
    411a:	88 27       	eor	r24, r24
    411c:	90 78       	andi	r25, 0x80	; 128
    411e:	30 96       	adiw	r30, 0x00	; 0
    4120:	21 f0       	breq	.+8      	; 0x412a <modf+0x66>
    4122:	20 83       	st	Z, r18
    4124:	31 83       	std	Z+1, r19	; 0x01
    4126:	42 83       	std	Z+2, r20	; 0x02
    4128:	53 83       	std	Z+3, r21	; 0x03
    412a:	08 95       	ret

0000412c <__mulsf3>:
    412c:	0e 94 a9 20 	call	0x4152	; 0x4152 <__mulsf3x>
    4130:	0c 94 5d 1f 	jmp	0x3eba	; 0x3eba <__fp_round>
    4134:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__fp_pscA>
    4138:	38 f0       	brcs	.+14     	; 0x4148 <__mulsf3+0x1c>
    413a:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <__fp_pscB>
    413e:	20 f0       	brcs	.+8      	; 0x4148 <__mulsf3+0x1c>
    4140:	95 23       	and	r25, r21
    4142:	11 f0       	breq	.+4      	; 0x4148 <__mulsf3+0x1c>
    4144:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__fp_inf>
    4148:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__fp_nan>
    414c:	11 24       	eor	r1, r1
    414e:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__fp_szero>

00004152 <__mulsf3x>:
    4152:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <__fp_split3>
    4156:	70 f3       	brcs	.-36     	; 0x4134 <__mulsf3+0x8>

00004158 <__mulsf3_pse>:
    4158:	95 9f       	mul	r25, r21
    415a:	c1 f3       	breq	.-16     	; 0x414c <__mulsf3+0x20>
    415c:	95 0f       	add	r25, r21
    415e:	50 e0       	ldi	r21, 0x00	; 0
    4160:	55 1f       	adc	r21, r21
    4162:	62 9f       	mul	r22, r18
    4164:	f0 01       	movw	r30, r0
    4166:	72 9f       	mul	r23, r18
    4168:	bb 27       	eor	r27, r27
    416a:	f0 0d       	add	r31, r0
    416c:	b1 1d       	adc	r27, r1
    416e:	63 9f       	mul	r22, r19
    4170:	aa 27       	eor	r26, r26
    4172:	f0 0d       	add	r31, r0
    4174:	b1 1d       	adc	r27, r1
    4176:	aa 1f       	adc	r26, r26
    4178:	64 9f       	mul	r22, r20
    417a:	66 27       	eor	r22, r22
    417c:	b0 0d       	add	r27, r0
    417e:	a1 1d       	adc	r26, r1
    4180:	66 1f       	adc	r22, r22
    4182:	82 9f       	mul	r24, r18
    4184:	22 27       	eor	r18, r18
    4186:	b0 0d       	add	r27, r0
    4188:	a1 1d       	adc	r26, r1
    418a:	62 1f       	adc	r22, r18
    418c:	73 9f       	mul	r23, r19
    418e:	b0 0d       	add	r27, r0
    4190:	a1 1d       	adc	r26, r1
    4192:	62 1f       	adc	r22, r18
    4194:	83 9f       	mul	r24, r19
    4196:	a0 0d       	add	r26, r0
    4198:	61 1d       	adc	r22, r1
    419a:	22 1f       	adc	r18, r18
    419c:	74 9f       	mul	r23, r20
    419e:	33 27       	eor	r19, r19
    41a0:	a0 0d       	add	r26, r0
    41a2:	61 1d       	adc	r22, r1
    41a4:	23 1f       	adc	r18, r19
    41a6:	84 9f       	mul	r24, r20
    41a8:	60 0d       	add	r22, r0
    41aa:	21 1d       	adc	r18, r1
    41ac:	82 2f       	mov	r24, r18
    41ae:	76 2f       	mov	r23, r22
    41b0:	6a 2f       	mov	r22, r26
    41b2:	11 24       	eor	r1, r1
    41b4:	9f 57       	subi	r25, 0x7F	; 127
    41b6:	50 40       	sbci	r21, 0x00	; 0
    41b8:	9a f0       	brmi	.+38     	; 0x41e0 <__mulsf3_pse+0x88>
    41ba:	f1 f0       	breq	.+60     	; 0x41f8 <__mulsf3_pse+0xa0>
    41bc:	88 23       	and	r24, r24
    41be:	4a f0       	brmi	.+18     	; 0x41d2 <__mulsf3_pse+0x7a>
    41c0:	ee 0f       	add	r30, r30
    41c2:	ff 1f       	adc	r31, r31
    41c4:	bb 1f       	adc	r27, r27
    41c6:	66 1f       	adc	r22, r22
    41c8:	77 1f       	adc	r23, r23
    41ca:	88 1f       	adc	r24, r24
    41cc:	91 50       	subi	r25, 0x01	; 1
    41ce:	50 40       	sbci	r21, 0x00	; 0
    41d0:	a9 f7       	brne	.-22     	; 0x41bc <__mulsf3_pse+0x64>
    41d2:	9e 3f       	cpi	r25, 0xFE	; 254
    41d4:	51 05       	cpc	r21, r1
    41d6:	80 f0       	brcs	.+32     	; 0x41f8 <__mulsf3_pse+0xa0>
    41d8:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__fp_inf>
    41dc:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__fp_szero>
    41e0:	5f 3f       	cpi	r21, 0xFF	; 255
    41e2:	e4 f3       	brlt	.-8      	; 0x41dc <__mulsf3_pse+0x84>
    41e4:	98 3e       	cpi	r25, 0xE8	; 232
    41e6:	d4 f3       	brlt	.-12     	; 0x41dc <__mulsf3_pse+0x84>
    41e8:	86 95       	lsr	r24
    41ea:	77 95       	ror	r23
    41ec:	67 95       	ror	r22
    41ee:	b7 95       	ror	r27
    41f0:	f7 95       	ror	r31
    41f2:	e7 95       	ror	r30
    41f4:	9f 5f       	subi	r25, 0xFF	; 255
    41f6:	c1 f7       	brne	.-16     	; 0x41e8 <__mulsf3_pse+0x90>
    41f8:	fe 2b       	or	r31, r30
    41fa:	88 0f       	add	r24, r24
    41fc:	91 1d       	adc	r25, r1
    41fe:	96 95       	lsr	r25
    4200:	87 95       	ror	r24
    4202:	97 f9       	bld	r25, 7
    4204:	08 95       	ret

00004206 <pow>:
    4206:	fa 01       	movw	r30, r20
    4208:	ee 0f       	add	r30, r30
    420a:	ff 1f       	adc	r31, r31
    420c:	30 96       	adiw	r30, 0x00	; 0
    420e:	21 05       	cpc	r18, r1
    4210:	31 05       	cpc	r19, r1
    4212:	a1 f1       	breq	.+104    	; 0x427c <pow+0x76>
    4214:	61 15       	cp	r22, r1
    4216:	71 05       	cpc	r23, r1
    4218:	61 f4       	brne	.+24     	; 0x4232 <pow+0x2c>
    421a:	80 38       	cpi	r24, 0x80	; 128
    421c:	bf e3       	ldi	r27, 0x3F	; 63
    421e:	9b 07       	cpc	r25, r27
    4220:	49 f1       	breq	.+82     	; 0x4274 <pow+0x6e>
    4222:	68 94       	set
    4224:	90 38       	cpi	r25, 0x80	; 128
    4226:	81 05       	cpc	r24, r1
    4228:	61 f0       	breq	.+24     	; 0x4242 <pow+0x3c>
    422a:	80 38       	cpi	r24, 0x80	; 128
    422c:	bf ef       	ldi	r27, 0xFF	; 255
    422e:	9b 07       	cpc	r25, r27
    4230:	41 f0       	breq	.+16     	; 0x4242 <pow+0x3c>
    4232:	99 23       	and	r25, r25
    4234:	4a f5       	brpl	.+82     	; 0x4288 <pow+0x82>
    4236:	ff 3f       	cpi	r31, 0xFF	; 255
    4238:	e1 05       	cpc	r30, r1
    423a:	31 05       	cpc	r19, r1
    423c:	21 05       	cpc	r18, r1
    423e:	19 f1       	breq	.+70     	; 0x4286 <pow+0x80>
    4240:	e8 94       	clt
    4242:	08 94       	sec
    4244:	e7 95       	ror	r30
    4246:	d9 01       	movw	r26, r18
    4248:	aa 23       	and	r26, r26
    424a:	29 f4       	brne	.+10     	; 0x4256 <pow+0x50>
    424c:	ab 2f       	mov	r26, r27
    424e:	be 2f       	mov	r27, r30
    4250:	f8 5f       	subi	r31, 0xF8	; 248
    4252:	d0 f3       	brcs	.-12     	; 0x4248 <pow+0x42>
    4254:	10 c0       	rjmp	.+32     	; 0x4276 <pow+0x70>
    4256:	ff 5f       	subi	r31, 0xFF	; 255
    4258:	70 f4       	brcc	.+28     	; 0x4276 <pow+0x70>
    425a:	a6 95       	lsr	r26
    425c:	e0 f7       	brcc	.-8      	; 0x4256 <pow+0x50>
    425e:	f7 39       	cpi	r31, 0x97	; 151
    4260:	50 f0       	brcs	.+20     	; 0x4276 <pow+0x70>
    4262:	19 f0       	breq	.+6      	; 0x426a <pow+0x64>
    4264:	ff 3a       	cpi	r31, 0xAF	; 175
    4266:	38 f4       	brcc	.+14     	; 0x4276 <pow+0x70>
    4268:	9f 77       	andi	r25, 0x7F	; 127
    426a:	9f 93       	push	r25
    426c:	0d d0       	rcall	.+26     	; 0x4288 <pow+0x82>
    426e:	0f 90       	pop	r0
    4270:	07 fc       	sbrc	r0, 7
    4272:	90 58       	subi	r25, 0x80	; 128
    4274:	08 95       	ret
    4276:	46 f0       	brts	.+16     	; 0x4288 <pow+0x82>
    4278:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__fp_nan>
    427c:	60 e0       	ldi	r22, 0x00	; 0
    427e:	70 e0       	ldi	r23, 0x00	; 0
    4280:	80 e8       	ldi	r24, 0x80	; 128
    4282:	9f e3       	ldi	r25, 0x3F	; 63
    4284:	08 95       	ret
    4286:	4f e7       	ldi	r20, 0x7F	; 127
    4288:	9f 77       	andi	r25, 0x7F	; 127
    428a:	5f 93       	push	r21
    428c:	4f 93       	push	r20
    428e:	3f 93       	push	r19
    4290:	2f 93       	push	r18
    4292:	0e 94 1a 20 	call	0x4034	; 0x4034 <log>
    4296:	2f 91       	pop	r18
    4298:	3f 91       	pop	r19
    429a:	4f 91       	pop	r20
    429c:	5f 91       	pop	r21
    429e:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    42a2:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <exp>

000042a6 <round>:
    42a6:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__fp_splitA>
    42aa:	e8 f0       	brcs	.+58     	; 0x42e6 <round+0x40>
    42ac:	9e 37       	cpi	r25, 0x7E	; 126
    42ae:	e8 f0       	brcs	.+58     	; 0x42ea <round+0x44>
    42b0:	96 39       	cpi	r25, 0x96	; 150
    42b2:	b8 f4       	brcc	.+46     	; 0x42e2 <round+0x3c>
    42b4:	9e 38       	cpi	r25, 0x8E	; 142
    42b6:	48 f4       	brcc	.+18     	; 0x42ca <round+0x24>
    42b8:	67 2f       	mov	r22, r23
    42ba:	78 2f       	mov	r23, r24
    42bc:	88 27       	eor	r24, r24
    42be:	98 5f       	subi	r25, 0xF8	; 248
    42c0:	f9 cf       	rjmp	.-14     	; 0x42b4 <round+0xe>
    42c2:	86 95       	lsr	r24
    42c4:	77 95       	ror	r23
    42c6:	67 95       	ror	r22
    42c8:	93 95       	inc	r25
    42ca:	95 39       	cpi	r25, 0x95	; 149
    42cc:	d0 f3       	brcs	.-12     	; 0x42c2 <round+0x1c>
    42ce:	b6 2f       	mov	r27, r22
    42d0:	b1 70       	andi	r27, 0x01	; 1
    42d2:	6b 0f       	add	r22, r27
    42d4:	71 1d       	adc	r23, r1
    42d6:	81 1d       	adc	r24, r1
    42d8:	20 f4       	brcc	.+8      	; 0x42e2 <round+0x3c>
    42da:	87 95       	ror	r24
    42dc:	77 95       	ror	r23
    42de:	67 95       	ror	r22
    42e0:	93 95       	inc	r25
    42e2:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <__fp_mintl>
    42e6:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__fp_mpack>
    42ea:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__fp_szero>

000042ee <sinh>:
    42ee:	9f 93       	push	r25
    42f0:	9f 77       	andi	r25, 0x7F	; 127
    42f2:	fe e3       	ldi	r31, 0x3E	; 62
    42f4:	80 3a       	cpi	r24, 0xA0	; 160
    42f6:	9f 07       	cpc	r25, r31
    42f8:	28 f4       	brcc	.+10     	; 0x4304 <sinh+0x16>
    42fa:	ed e5       	ldi	r30, 0x5D	; 93
    42fc:	f1 e0       	ldi	r31, 0x01	; 1
    42fe:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <__fp_powsodd>
    4302:	17 c0       	rjmp	.+46     	; 0x4332 <sinh+0x44>
    4304:	90 68       	ori	r25, 0x80	; 128
    4306:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <exp>
    430a:	4f ef       	ldi	r20, 0xFF	; 255
    430c:	5f ef       	ldi	r21, 0xFF	; 255
    430e:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <ldexp>
    4312:	9f 93       	push	r25
    4314:	8f 93       	push	r24
    4316:	7f 93       	push	r23
    4318:	6f 93       	push	r22
    431a:	42 e0       	ldi	r20, 0x02	; 2
    431c:	50 e0       	ldi	r21, 0x00	; 0
    431e:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <ldexp>
    4322:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <inverse>
    4326:	2f 91       	pop	r18
    4328:	3f 91       	pop	r19
    432a:	4f 91       	pop	r20
    432c:	5f 91       	pop	r21
    432e:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    4332:	0f 90       	pop	r0
    4334:	07 fc       	sbrc	r0, 7
    4336:	90 68       	ori	r25, 0x80	; 128
    4338:	08 95       	ret

0000433a <sin>:
    433a:	9f 93       	push	r25
    433c:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__fp_rempio2>
    4340:	0f 90       	pop	r0
    4342:	07 fc       	sbrc	r0, 7
    4344:	ee 5f       	subi	r30, 0xFE	; 254
    4346:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__fp_sinus>
    434a:	19 f4       	brne	.+6      	; 0x4352 <sin+0x18>
    434c:	16 f4       	brtc	.+4      	; 0x4352 <sin+0x18>
    434e:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__fp_nan>
    4352:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__fp_mpack>

00004356 <sqrt>:
    4356:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__fp_splitA>
    435a:	b8 f3       	brcs	.-18     	; 0x434a <sin+0x10>
    435c:	99 23       	and	r25, r25
    435e:	c9 f3       	breq	.-14     	; 0x4352 <sin+0x18>
    4360:	b6 f3       	brts	.-20     	; 0x434e <sin+0x14>
    4362:	9f 57       	subi	r25, 0x7F	; 127
    4364:	55 0b       	sbc	r21, r21
    4366:	87 ff       	sbrs	r24, 7
    4368:	0e 94 48 22 	call	0x4490	; 0x4490 <__fp_norm2>
    436c:	00 24       	eor	r0, r0
    436e:	a0 e6       	ldi	r26, 0x60	; 96
    4370:	40 ea       	ldi	r20, 0xA0	; 160
    4372:	90 01       	movw	r18, r0
    4374:	80 58       	subi	r24, 0x80	; 128
    4376:	56 95       	lsr	r21
    4378:	97 95       	ror	r25
    437a:	28 f4       	brcc	.+10     	; 0x4386 <sqrt+0x30>
    437c:	80 5c       	subi	r24, 0xC0	; 192
    437e:	66 0f       	add	r22, r22
    4380:	77 1f       	adc	r23, r23
    4382:	88 1f       	adc	r24, r24
    4384:	20 f0       	brcs	.+8      	; 0x438e <sqrt+0x38>
    4386:	26 17       	cp	r18, r22
    4388:	37 07       	cpc	r19, r23
    438a:	48 07       	cpc	r20, r24
    438c:	30 f4       	brcc	.+12     	; 0x439a <sqrt+0x44>
    438e:	62 1b       	sub	r22, r18
    4390:	73 0b       	sbc	r23, r19
    4392:	84 0b       	sbc	r24, r20
    4394:	20 29       	or	r18, r0
    4396:	31 29       	or	r19, r1
    4398:	4a 2b       	or	r20, r26
    439a:	a6 95       	lsr	r26
    439c:	17 94       	ror	r1
    439e:	07 94       	ror	r0
    43a0:	20 25       	eor	r18, r0
    43a2:	31 25       	eor	r19, r1
    43a4:	4a 27       	eor	r20, r26
    43a6:	58 f7       	brcc	.-42     	; 0x437e <sqrt+0x28>
    43a8:	66 0f       	add	r22, r22
    43aa:	77 1f       	adc	r23, r23
    43ac:	88 1f       	adc	r24, r24
    43ae:	20 f0       	brcs	.+8      	; 0x43b8 <sqrt+0x62>
    43b0:	26 17       	cp	r18, r22
    43b2:	37 07       	cpc	r19, r23
    43b4:	48 07       	cpc	r20, r24
    43b6:	30 f4       	brcc	.+12     	; 0x43c4 <sqrt+0x6e>
    43b8:	62 0b       	sbc	r22, r18
    43ba:	73 0b       	sbc	r23, r19
    43bc:	84 0b       	sbc	r24, r20
    43be:	20 0d       	add	r18, r0
    43c0:	31 1d       	adc	r19, r1
    43c2:	41 1d       	adc	r20, r1
    43c4:	a0 95       	com	r26
    43c6:	81 f7       	brne	.-32     	; 0x43a8 <sqrt+0x52>
    43c8:	b9 01       	movw	r22, r18
    43ca:	84 2f       	mov	r24, r20
    43cc:	91 58       	subi	r25, 0x81	; 129
    43ce:	88 0f       	add	r24, r24
    43d0:	96 95       	lsr	r25
    43d2:	87 95       	ror	r24
    43d4:	08 95       	ret

000043d6 <square>:
    43d6:	9b 01       	movw	r18, r22
    43d8:	ac 01       	movw	r20, r24
    43da:	0c 94 96 20 	jmp	0x412c	; 0x412c <__mulsf3>

000043de <tanh>:
    43de:	9f 93       	push	r25
    43e0:	9f 77       	andi	r25, 0x7F	; 127
    43e2:	fe e3       	ldi	r31, 0x3E	; 62
    43e4:	80 31       	cpi	r24, 0x10	; 16
    43e6:	9f 07       	cpc	r25, r31
    43e8:	28 f4       	brcc	.+10     	; 0x43f4 <tanh+0x16>
    43ea:	ec e6       	ldi	r30, 0x6C	; 108
    43ec:	f1 e0       	ldi	r31, 0x01	; 1
    43ee:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <__fp_powsodd>
    43f2:	25 c0       	rjmp	.+74     	; 0x443e <tanh+0x60>
    43f4:	90 68       	ori	r25, 0x80	; 128
    43f6:	41 e0       	ldi	r20, 0x01	; 1
    43f8:	50 e0       	ldi	r21, 0x00	; 0
    43fa:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <ldexp>
    43fe:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <exp>
    4402:	9f 93       	push	r25
    4404:	8f 93       	push	r24
    4406:	7f 93       	push	r23
    4408:	6f 93       	push	r22
    440a:	20 e0       	ldi	r18, 0x00	; 0
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	40 e8       	ldi	r20, 0x80	; 128
    4410:	5f e3       	ldi	r21, 0x3F	; 63
    4412:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__addsf3>
    4416:	2f 91       	pop	r18
    4418:	3f 91       	pop	r19
    441a:	4f 91       	pop	r20
    441c:	5f 91       	pop	r21
    441e:	9f 93       	push	r25
    4420:	8f 93       	push	r24
    4422:	7f 93       	push	r23
    4424:	6f 93       	push	r22
    4426:	60 e0       	ldi	r22, 0x00	; 0
    4428:	70 e0       	ldi	r23, 0x00	; 0
    442a:	80 e8       	ldi	r24, 0x80	; 128
    442c:	9f e3       	ldi	r25, 0x3F	; 63
    442e:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__subsf3>
    4432:	2f 91       	pop	r18
    4434:	3f 91       	pop	r19
    4436:	4f 91       	pop	r20
    4438:	5f 91       	pop	r21
    443a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divsf3>
    443e:	0f 90       	pop	r0
    4440:	07 fc       	sbrc	r0, 7
    4442:	90 58       	subi	r25, 0x80	; 128
    4444:	08 95       	ret

00004446 <tan>:
    4446:	df 93       	push	r29
    4448:	d9 2f       	mov	r29, r25
    444a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__fp_rempio2>
    444e:	e6 95       	lsr	r30
    4450:	d7 95       	ror	r29
    4452:	2a ed       	ldi	r18, 0xDA	; 218
    4454:	3f e0       	ldi	r19, 0x0F	; 15
    4456:	49 e4       	ldi	r20, 0x49	; 73
    4458:	5f e3       	ldi	r21, 0x3F	; 63
    445a:	b3 3a       	cpi	r27, 0xA3	; 163
    445c:	62 07       	cpc	r22, r18
    445e:	73 07       	cpc	r23, r19
    4460:	84 07       	cpc	r24, r20
    4462:	95 07       	cpc	r25, r21
    4464:	d7 95       	ror	r29
    4466:	3a f0       	brmi	.+14     	; 0x4476 <tan+0x30>
    4468:	a2 ea       	ldi	r26, 0xA2	; 162
    446a:	49 ec       	ldi	r20, 0xC9	; 201
    446c:	90 68       	ori	r25, 0x80	; 128
    446e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__addsf3x>
    4472:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__fp_round>
    4476:	eb e7       	ldi	r30, 0x7B	; 123
    4478:	f1 e0       	ldi	r31, 0x01	; 1
    447a:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <__fp_powsodd>
    447e:	dd 0f       	add	r29, r29
    4480:	13 f0       	brvs	.+4      	; 0x4486 <tan+0x40>
    4482:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <inverse>
    4486:	dd 0f       	add	r29, r29
    4488:	0b f4       	brvc	.+2      	; 0x448c <tan+0x46>
    448a:	90 58       	subi	r25, 0x80	; 128
    448c:	df 91       	pop	r29
    448e:	08 95       	ret

00004490 <__fp_norm2>:
    4490:	91 50       	subi	r25, 0x01	; 1
    4492:	50 40       	sbci	r21, 0x00	; 0
    4494:	66 0f       	add	r22, r22
    4496:	77 1f       	adc	r23, r23
    4498:	88 1f       	adc	r24, r24
    449a:	d2 f7       	brpl	.-12     	; 0x4490 <__fp_norm2>
    449c:	08 95       	ret

0000449e <__tablejump2__>:
    449e:	ee 0f       	add	r30, r30
    44a0:	ff 1f       	adc	r31, r31
    44a2:	05 90       	lpm	r0, Z+
    44a4:	f4 91       	lpm	r31, Z
    44a6:	e0 2d       	mov	r30, r0
    44a8:	09 94       	ijmp

000044aa <dtostrf>:
    44aa:	ef 92       	push	r14
    44ac:	0f 93       	push	r16
    44ae:	1f 93       	push	r17
    44b0:	cf 93       	push	r28
    44b2:	df 93       	push	r29
    44b4:	e8 01       	movw	r28, r16
    44b6:	47 fd       	sbrc	r20, 7
    44b8:	02 c0       	rjmp	.+4      	; 0x44be <dtostrf+0x14>
    44ba:	34 e0       	ldi	r19, 0x04	; 4
    44bc:	01 c0       	rjmp	.+2      	; 0x44c0 <dtostrf+0x16>
    44be:	34 e1       	ldi	r19, 0x14	; 20
    44c0:	04 2e       	mov	r0, r20
    44c2:	00 0c       	add	r0, r0
    44c4:	55 0b       	sbc	r21, r21
    44c6:	57 ff       	sbrs	r21, 7
    44c8:	03 c0       	rjmp	.+6      	; 0x44d0 <dtostrf+0x26>
    44ca:	51 95       	neg	r21
    44cc:	41 95       	neg	r20
    44ce:	51 09       	sbc	r21, r1
    44d0:	e3 2e       	mov	r14, r19
    44d2:	02 2f       	mov	r16, r18
    44d4:	24 2f       	mov	r18, r20
    44d6:	ae 01       	movw	r20, r28
    44d8:	0e 94 bb 22 	call	0x4576	; 0x4576 <dtoa_prf>
    44dc:	ce 01       	movw	r24, r28
    44de:	df 91       	pop	r29
    44e0:	cf 91       	pop	r28
    44e2:	1f 91       	pop	r17
    44e4:	0f 91       	pop	r16
    44e6:	ef 90       	pop	r14
    44e8:	08 95       	ret

000044ea <atof>:
    44ea:	66 27       	eor	r22, r22
    44ec:	77 27       	eor	r23, r23
    44ee:	0c 94 15 24 	jmp	0x482a	; 0x482a <strtod>

000044f2 <isupper>:
    44f2:	85 fd       	sbrc	r24, 5
    44f4:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__ctype_isfalse>

000044f8 <isalpha>:
    44f8:	80 62       	ori	r24, 0x20	; 32

000044fa <islower>:
    44fa:	91 11       	cpse	r25, r1
    44fc:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__ctype_isfalse>
    4500:	81 56       	subi	r24, 0x61	; 97
    4502:	8a 51       	subi	r24, 0x1A	; 26
    4504:	d8 f7       	brcc	.-10     	; 0x44fc <islower+0x2>
    4506:	08 95       	ret

00004508 <isspace>:
    4508:	91 11       	cpse	r25, r1
    450a:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__ctype_isfalse>
    450e:	80 32       	cpi	r24, 0x20	; 32
    4510:	19 f0       	breq	.+6      	; 0x4518 <isspace+0x10>
    4512:	89 50       	subi	r24, 0x09	; 9
    4514:	85 50       	subi	r24, 0x05	; 5
    4516:	c8 f7       	brcc	.-14     	; 0x450a <isspace+0x2>
    4518:	08 95       	ret

0000451a <toupper>:
    451a:	91 11       	cpse	r25, r1
    451c:	08 95       	ret
    451e:	81 56       	subi	r24, 0x61	; 97
    4520:	8a 51       	subi	r24, 0x1A	; 26
    4522:	08 f4       	brcc	.+2      	; 0x4526 <toupper+0xc>
    4524:	80 52       	subi	r24, 0x20	; 32
    4526:	85 58       	subi	r24, 0x85	; 133
    4528:	08 95       	ret

0000452a <strcat>:
    452a:	fb 01       	movw	r30, r22
    452c:	dc 01       	movw	r26, r24
    452e:	0d 90       	ld	r0, X+
    4530:	00 20       	and	r0, r0
    4532:	e9 f7       	brne	.-6      	; 0x452e <strcat+0x4>
    4534:	11 97       	sbiw	r26, 0x01	; 1
    4536:	01 90       	ld	r0, Z+
    4538:	0d 92       	st	X+, r0
    453a:	00 20       	and	r0, r0
    453c:	e1 f7       	brne	.-8      	; 0x4536 <strcat+0xc>
    453e:	08 95       	ret

00004540 <strchr>:
    4540:	fc 01       	movw	r30, r24
    4542:	81 91       	ld	r24, Z+
    4544:	86 17       	cp	r24, r22
    4546:	21 f0       	breq	.+8      	; 0x4550 <strchr+0x10>
    4548:	88 23       	and	r24, r24
    454a:	d9 f7       	brne	.-10     	; 0x4542 <strchr+0x2>
    454c:	99 27       	eor	r25, r25
    454e:	08 95       	ret
    4550:	31 97       	sbiw	r30, 0x01	; 1
    4552:	cf 01       	movw	r24, r30
    4554:	08 95       	ret

00004556 <strcmp>:
    4556:	fb 01       	movw	r30, r22
    4558:	dc 01       	movw	r26, r24
    455a:	8d 91       	ld	r24, X+
    455c:	01 90       	ld	r0, Z+
    455e:	80 19       	sub	r24, r0
    4560:	01 10       	cpse	r0, r1
    4562:	d9 f3       	breq	.-10     	; 0x455a <strcmp+0x4>
    4564:	99 0b       	sbc	r25, r25
    4566:	08 95       	ret

00004568 <strcpy>:
    4568:	fb 01       	movw	r30, r22
    456a:	dc 01       	movw	r26, r24
    456c:	01 90       	ld	r0, Z+
    456e:	0d 92       	st	X+, r0
    4570:	00 20       	and	r0, r0
    4572:	e1 f7       	brne	.-8      	; 0x456c <strcpy+0x4>
    4574:	08 95       	ret

00004576 <dtoa_prf>:
    4576:	a9 e0       	ldi	r26, 0x09	; 9
    4578:	b0 e0       	ldi	r27, 0x00	; 0
    457a:	e1 ec       	ldi	r30, 0xC1	; 193
    457c:	f2 e2       	ldi	r31, 0x22	; 34
    457e:	0c 94 67 26 	jmp	0x4cce	; 0x4cce <__prologue_saves__+0xc>
    4582:	6a 01       	movw	r12, r20
    4584:	12 2f       	mov	r17, r18
    4586:	b0 2e       	mov	r11, r16
    4588:	2b e3       	ldi	r18, 0x3B	; 59
    458a:	20 17       	cp	r18, r16
    458c:	20 f0       	brcs	.+8      	; 0x4596 <dtoa_prf+0x20>
    458e:	ff 24       	eor	r15, r15
    4590:	f3 94       	inc	r15
    4592:	f0 0e       	add	r15, r16
    4594:	02 c0       	rjmp	.+4      	; 0x459a <dtoa_prf+0x24>
    4596:	2c e3       	ldi	r18, 0x3C	; 60
    4598:	f2 2e       	mov	r15, r18
    459a:	0f 2d       	mov	r16, r15
    459c:	27 e0       	ldi	r18, 0x07	; 7
    459e:	ae 01       	movw	r20, r28
    45a0:	4f 5f       	subi	r20, 0xFF	; 255
    45a2:	5f 4f       	sbci	r21, 0xFF	; 255
    45a4:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <__ftoa_engine>
    45a8:	bc 01       	movw	r22, r24
    45aa:	49 81       	ldd	r20, Y+1	; 0x01
    45ac:	84 2f       	mov	r24, r20
    45ae:	89 70       	andi	r24, 0x09	; 9
    45b0:	81 30       	cpi	r24, 0x01	; 1
    45b2:	31 f0       	breq	.+12     	; 0x45c0 <dtoa_prf+0x4a>
    45b4:	e1 fc       	sbrc	r14, 1
    45b6:	06 c0       	rjmp	.+12     	; 0x45c4 <dtoa_prf+0x4e>
    45b8:	e0 fe       	sbrs	r14, 0
    45ba:	06 c0       	rjmp	.+12     	; 0x45c8 <dtoa_prf+0x52>
    45bc:	90 e2       	ldi	r25, 0x20	; 32
    45be:	05 c0       	rjmp	.+10     	; 0x45ca <dtoa_prf+0x54>
    45c0:	9d e2       	ldi	r25, 0x2D	; 45
    45c2:	03 c0       	rjmp	.+6      	; 0x45ca <dtoa_prf+0x54>
    45c4:	9b e2       	ldi	r25, 0x2B	; 43
    45c6:	01 c0       	rjmp	.+2      	; 0x45ca <dtoa_prf+0x54>
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	5e 2d       	mov	r21, r14
    45cc:	50 71       	andi	r21, 0x10	; 16
    45ce:	43 ff       	sbrs	r20, 3
    45d0:	3c c0       	rjmp	.+120    	; 0x464a <dtoa_prf+0xd4>
    45d2:	91 11       	cpse	r25, r1
    45d4:	02 c0       	rjmp	.+4      	; 0x45da <dtoa_prf+0x64>
    45d6:	83 e0       	ldi	r24, 0x03	; 3
    45d8:	01 c0       	rjmp	.+2      	; 0x45dc <dtoa_prf+0x66>
    45da:	84 e0       	ldi	r24, 0x04	; 4
    45dc:	81 17       	cp	r24, r17
    45de:	18 f4       	brcc	.+6      	; 0x45e6 <dtoa_prf+0x70>
    45e0:	21 2f       	mov	r18, r17
    45e2:	28 1b       	sub	r18, r24
    45e4:	01 c0       	rjmp	.+2      	; 0x45e8 <dtoa_prf+0x72>
    45e6:	20 e0       	ldi	r18, 0x00	; 0
    45e8:	51 11       	cpse	r21, r1
    45ea:	0b c0       	rjmp	.+22     	; 0x4602 <dtoa_prf+0x8c>
    45ec:	f6 01       	movw	r30, r12
    45ee:	82 2f       	mov	r24, r18
    45f0:	30 e2       	ldi	r19, 0x20	; 32
    45f2:	88 23       	and	r24, r24
    45f4:	19 f0       	breq	.+6      	; 0x45fc <dtoa_prf+0x86>
    45f6:	31 93       	st	Z+, r19
    45f8:	81 50       	subi	r24, 0x01	; 1
    45fa:	fb cf       	rjmp	.-10     	; 0x45f2 <dtoa_prf+0x7c>
    45fc:	c2 0e       	add	r12, r18
    45fe:	d1 1c       	adc	r13, r1
    4600:	20 e0       	ldi	r18, 0x00	; 0
    4602:	99 23       	and	r25, r25
    4604:	29 f0       	breq	.+10     	; 0x4610 <dtoa_prf+0x9a>
    4606:	d6 01       	movw	r26, r12
    4608:	9c 93       	st	X, r25
    460a:	f6 01       	movw	r30, r12
    460c:	31 96       	adiw	r30, 0x01	; 1
    460e:	6f 01       	movw	r12, r30
    4610:	c6 01       	movw	r24, r12
    4612:	03 96       	adiw	r24, 0x03	; 3
    4614:	e2 fe       	sbrs	r14, 2
    4616:	0a c0       	rjmp	.+20     	; 0x462c <dtoa_prf+0xb6>
    4618:	3e e4       	ldi	r19, 0x4E	; 78
    461a:	d6 01       	movw	r26, r12
    461c:	3c 93       	st	X, r19
    461e:	41 e4       	ldi	r20, 0x41	; 65
    4620:	11 96       	adiw	r26, 0x01	; 1
    4622:	4c 93       	st	X, r20
    4624:	11 97       	sbiw	r26, 0x01	; 1
    4626:	12 96       	adiw	r26, 0x02	; 2
    4628:	3c 93       	st	X, r19
    462a:	06 c0       	rjmp	.+12     	; 0x4638 <dtoa_prf+0xc2>
    462c:	3e e6       	ldi	r19, 0x6E	; 110
    462e:	f6 01       	movw	r30, r12
    4630:	30 83       	st	Z, r19
    4632:	41 e6       	ldi	r20, 0x61	; 97
    4634:	41 83       	std	Z+1, r20	; 0x01
    4636:	32 83       	std	Z+2, r19	; 0x02
    4638:	fc 01       	movw	r30, r24
    463a:	32 2f       	mov	r19, r18
    463c:	40 e2       	ldi	r20, 0x20	; 32
    463e:	33 23       	and	r19, r19
    4640:	09 f4       	brne	.+2      	; 0x4644 <dtoa_prf+0xce>
    4642:	42 c0       	rjmp	.+132    	; 0x46c8 <dtoa_prf+0x152>
    4644:	41 93       	st	Z+, r20
    4646:	31 50       	subi	r19, 0x01	; 1
    4648:	fa cf       	rjmp	.-12     	; 0x463e <dtoa_prf+0xc8>
    464a:	42 ff       	sbrs	r20, 2
    464c:	44 c0       	rjmp	.+136    	; 0x46d6 <dtoa_prf+0x160>
    464e:	91 11       	cpse	r25, r1
    4650:	02 c0       	rjmp	.+4      	; 0x4656 <dtoa_prf+0xe0>
    4652:	83 e0       	ldi	r24, 0x03	; 3
    4654:	01 c0       	rjmp	.+2      	; 0x4658 <dtoa_prf+0xe2>
    4656:	84 e0       	ldi	r24, 0x04	; 4
    4658:	81 17       	cp	r24, r17
    465a:	18 f4       	brcc	.+6      	; 0x4662 <dtoa_prf+0xec>
    465c:	21 2f       	mov	r18, r17
    465e:	28 1b       	sub	r18, r24
    4660:	01 c0       	rjmp	.+2      	; 0x4664 <dtoa_prf+0xee>
    4662:	20 e0       	ldi	r18, 0x00	; 0
    4664:	51 11       	cpse	r21, r1
    4666:	0b c0       	rjmp	.+22     	; 0x467e <dtoa_prf+0x108>
    4668:	f6 01       	movw	r30, r12
    466a:	82 2f       	mov	r24, r18
    466c:	30 e2       	ldi	r19, 0x20	; 32
    466e:	88 23       	and	r24, r24
    4670:	19 f0       	breq	.+6      	; 0x4678 <dtoa_prf+0x102>
    4672:	31 93       	st	Z+, r19
    4674:	81 50       	subi	r24, 0x01	; 1
    4676:	fb cf       	rjmp	.-10     	; 0x466e <dtoa_prf+0xf8>
    4678:	c2 0e       	add	r12, r18
    467a:	d1 1c       	adc	r13, r1
    467c:	20 e0       	ldi	r18, 0x00	; 0
    467e:	99 23       	and	r25, r25
    4680:	29 f0       	breq	.+10     	; 0x468c <dtoa_prf+0x116>
    4682:	d6 01       	movw	r26, r12
    4684:	9c 93       	st	X, r25
    4686:	f6 01       	movw	r30, r12
    4688:	31 96       	adiw	r30, 0x01	; 1
    468a:	6f 01       	movw	r12, r30
    468c:	c6 01       	movw	r24, r12
    468e:	03 96       	adiw	r24, 0x03	; 3
    4690:	e2 fe       	sbrs	r14, 2
    4692:	0b c0       	rjmp	.+22     	; 0x46aa <dtoa_prf+0x134>
    4694:	39 e4       	ldi	r19, 0x49	; 73
    4696:	d6 01       	movw	r26, r12
    4698:	3c 93       	st	X, r19
    469a:	3e e4       	ldi	r19, 0x4E	; 78
    469c:	11 96       	adiw	r26, 0x01	; 1
    469e:	3c 93       	st	X, r19
    46a0:	11 97       	sbiw	r26, 0x01	; 1
    46a2:	36 e4       	ldi	r19, 0x46	; 70
    46a4:	12 96       	adiw	r26, 0x02	; 2
    46a6:	3c 93       	st	X, r19
    46a8:	07 c0       	rjmp	.+14     	; 0x46b8 <dtoa_prf+0x142>
    46aa:	39 e6       	ldi	r19, 0x69	; 105
    46ac:	f6 01       	movw	r30, r12
    46ae:	30 83       	st	Z, r19
    46b0:	3e e6       	ldi	r19, 0x6E	; 110
    46b2:	31 83       	std	Z+1, r19	; 0x01
    46b4:	36 e6       	ldi	r19, 0x66	; 102
    46b6:	32 83       	std	Z+2, r19	; 0x02
    46b8:	fc 01       	movw	r30, r24
    46ba:	32 2f       	mov	r19, r18
    46bc:	40 e2       	ldi	r20, 0x20	; 32
    46be:	33 23       	and	r19, r19
    46c0:	19 f0       	breq	.+6      	; 0x46c8 <dtoa_prf+0x152>
    46c2:	41 93       	st	Z+, r20
    46c4:	31 50       	subi	r19, 0x01	; 1
    46c6:	fb cf       	rjmp	.-10     	; 0x46be <dtoa_prf+0x148>
    46c8:	fc 01       	movw	r30, r24
    46ca:	e2 0f       	add	r30, r18
    46cc:	f1 1d       	adc	r31, r1
    46ce:	10 82       	st	Z, r1
    46d0:	8e ef       	ldi	r24, 0xFE	; 254
    46d2:	9f ef       	ldi	r25, 0xFF	; 255
    46d4:	a6 c0       	rjmp	.+332    	; 0x4822 <dtoa_prf+0x2ac>
    46d6:	21 e0       	ldi	r18, 0x01	; 1
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	91 11       	cpse	r25, r1
    46dc:	02 c0       	rjmp	.+4      	; 0x46e2 <dtoa_prf+0x16c>
    46de:	20 e0       	ldi	r18, 0x00	; 0
    46e0:	30 e0       	ldi	r19, 0x00	; 0
    46e2:	16 16       	cp	r1, r22
    46e4:	17 06       	cpc	r1, r23
    46e6:	1c f4       	brge	.+6      	; 0x46ee <dtoa_prf+0x178>
    46e8:	fb 01       	movw	r30, r22
    46ea:	31 96       	adiw	r30, 0x01	; 1
    46ec:	02 c0       	rjmp	.+4      	; 0x46f2 <dtoa_prf+0x17c>
    46ee:	e1 e0       	ldi	r30, 0x01	; 1
    46f0:	f0 e0       	ldi	r31, 0x00	; 0
    46f2:	2e 0f       	add	r18, r30
    46f4:	3f 1f       	adc	r19, r31
    46f6:	bb 20       	and	r11, r11
    46f8:	21 f0       	breq	.+8      	; 0x4702 <dtoa_prf+0x18c>
    46fa:	eb 2d       	mov	r30, r11
    46fc:	f0 e0       	ldi	r31, 0x00	; 0
    46fe:	31 96       	adiw	r30, 0x01	; 1
    4700:	02 c0       	rjmp	.+4      	; 0x4706 <dtoa_prf+0x190>
    4702:	e0 e0       	ldi	r30, 0x00	; 0
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	2e 0f       	add	r18, r30
    4708:	3f 1f       	adc	r19, r31
    470a:	e1 2f       	mov	r30, r17
    470c:	f0 e0       	ldi	r31, 0x00	; 0
    470e:	2e 17       	cp	r18, r30
    4710:	3f 07       	cpc	r19, r31
    4712:	1c f4       	brge	.+6      	; 0x471a <dtoa_prf+0x1a4>
    4714:	12 1b       	sub	r17, r18
    4716:	21 2f       	mov	r18, r17
    4718:	01 c0       	rjmp	.+2      	; 0x471c <dtoa_prf+0x1a6>
    471a:	20 e0       	ldi	r18, 0x00	; 0
    471c:	8e 2d       	mov	r24, r14
    471e:	88 71       	andi	r24, 0x18	; 24
    4720:	59 f4       	brne	.+22     	; 0x4738 <dtoa_prf+0x1c2>
    4722:	f6 01       	movw	r30, r12
    4724:	82 2f       	mov	r24, r18
    4726:	30 e2       	ldi	r19, 0x20	; 32
    4728:	88 23       	and	r24, r24
    472a:	19 f0       	breq	.+6      	; 0x4732 <dtoa_prf+0x1bc>
    472c:	31 93       	st	Z+, r19
    472e:	81 50       	subi	r24, 0x01	; 1
    4730:	fb cf       	rjmp	.-10     	; 0x4728 <dtoa_prf+0x1b2>
    4732:	c2 0e       	add	r12, r18
    4734:	d1 1c       	adc	r13, r1
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	99 23       	and	r25, r25
    473a:	29 f0       	breq	.+10     	; 0x4746 <dtoa_prf+0x1d0>
    473c:	d6 01       	movw	r26, r12
    473e:	9c 93       	st	X, r25
    4740:	f6 01       	movw	r30, r12
    4742:	31 96       	adiw	r30, 0x01	; 1
    4744:	6f 01       	movw	r12, r30
    4746:	51 11       	cpse	r21, r1
    4748:	0b c0       	rjmp	.+22     	; 0x4760 <dtoa_prf+0x1ea>
    474a:	f6 01       	movw	r30, r12
    474c:	82 2f       	mov	r24, r18
    474e:	90 e3       	ldi	r25, 0x30	; 48
    4750:	88 23       	and	r24, r24
    4752:	19 f0       	breq	.+6      	; 0x475a <dtoa_prf+0x1e4>
    4754:	91 93       	st	Z+, r25
    4756:	81 50       	subi	r24, 0x01	; 1
    4758:	fb cf       	rjmp	.-10     	; 0x4750 <dtoa_prf+0x1da>
    475a:	c2 0e       	add	r12, r18
    475c:	d1 1c       	adc	r13, r1
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	0f 2d       	mov	r16, r15
    4762:	06 0f       	add	r16, r22
    4764:	9a 81       	ldd	r25, Y+2	; 0x02
    4766:	34 2f       	mov	r19, r20
    4768:	30 71       	andi	r19, 0x10	; 16
    476a:	44 ff       	sbrs	r20, 4
    476c:	03 c0       	rjmp	.+6      	; 0x4774 <dtoa_prf+0x1fe>
    476e:	91 33       	cpi	r25, 0x31	; 49
    4770:	09 f4       	brne	.+2      	; 0x4774 <dtoa_prf+0x1fe>
    4772:	01 50       	subi	r16, 0x01	; 1
    4774:	10 16       	cp	r1, r16
    4776:	24 f4       	brge	.+8      	; 0x4780 <dtoa_prf+0x20a>
    4778:	09 30       	cpi	r16, 0x09	; 9
    477a:	18 f0       	brcs	.+6      	; 0x4782 <dtoa_prf+0x20c>
    477c:	08 e0       	ldi	r16, 0x08	; 8
    477e:	01 c0       	rjmp	.+2      	; 0x4782 <dtoa_prf+0x20c>
    4780:	01 e0       	ldi	r16, 0x01	; 1
    4782:	ab 01       	movw	r20, r22
    4784:	77 ff       	sbrs	r23, 7
    4786:	02 c0       	rjmp	.+4      	; 0x478c <dtoa_prf+0x216>
    4788:	40 e0       	ldi	r20, 0x00	; 0
    478a:	50 e0       	ldi	r21, 0x00	; 0
    478c:	fb 01       	movw	r30, r22
    478e:	e4 1b       	sub	r30, r20
    4790:	f5 0b       	sbc	r31, r21
    4792:	a1 e0       	ldi	r26, 0x01	; 1
    4794:	b0 e0       	ldi	r27, 0x00	; 0
    4796:	ac 0f       	add	r26, r28
    4798:	bd 1f       	adc	r27, r29
    479a:	ea 0f       	add	r30, r26
    479c:	fb 1f       	adc	r31, r27
    479e:	8e e2       	ldi	r24, 0x2E	; 46
    47a0:	a8 2e       	mov	r10, r24
    47a2:	4b 01       	movw	r8, r22
    47a4:	80 1a       	sub	r8, r16
    47a6:	91 08       	sbc	r9, r1
    47a8:	0b 2d       	mov	r16, r11
    47aa:	10 e0       	ldi	r17, 0x00	; 0
    47ac:	11 95       	neg	r17
    47ae:	01 95       	neg	r16
    47b0:	11 09       	sbc	r17, r1
    47b2:	4f 3f       	cpi	r20, 0xFF	; 255
    47b4:	bf ef       	ldi	r27, 0xFF	; 255
    47b6:	5b 07       	cpc	r21, r27
    47b8:	21 f4       	brne	.+8      	; 0x47c2 <dtoa_prf+0x24c>
    47ba:	d6 01       	movw	r26, r12
    47bc:	ac 92       	st	X, r10
    47be:	11 96       	adiw	r26, 0x01	; 1
    47c0:	6d 01       	movw	r12, r26
    47c2:	64 17       	cp	r22, r20
    47c4:	75 07       	cpc	r23, r21
    47c6:	2c f0       	brlt	.+10     	; 0x47d2 <dtoa_prf+0x25c>
    47c8:	84 16       	cp	r8, r20
    47ca:	95 06       	cpc	r9, r21
    47cc:	14 f4       	brge	.+4      	; 0x47d2 <dtoa_prf+0x25c>
    47ce:	81 81       	ldd	r24, Z+1	; 0x01
    47d0:	01 c0       	rjmp	.+2      	; 0x47d4 <dtoa_prf+0x25e>
    47d2:	80 e3       	ldi	r24, 0x30	; 48
    47d4:	41 50       	subi	r20, 0x01	; 1
    47d6:	51 09       	sbc	r21, r1
    47d8:	31 96       	adiw	r30, 0x01	; 1
    47da:	d6 01       	movw	r26, r12
    47dc:	11 96       	adiw	r26, 0x01	; 1
    47de:	7d 01       	movw	r14, r26
    47e0:	40 17       	cp	r20, r16
    47e2:	51 07       	cpc	r21, r17
    47e4:	24 f0       	brlt	.+8      	; 0x47ee <dtoa_prf+0x278>
    47e6:	d6 01       	movw	r26, r12
    47e8:	8c 93       	st	X, r24
    47ea:	67 01       	movw	r12, r14
    47ec:	e2 cf       	rjmp	.-60     	; 0x47b2 <dtoa_prf+0x23c>
    47ee:	64 17       	cp	r22, r20
    47f0:	75 07       	cpc	r23, r21
    47f2:	39 f4       	brne	.+14     	; 0x4802 <dtoa_prf+0x28c>
    47f4:	96 33       	cpi	r25, 0x36	; 54
    47f6:	20 f4       	brcc	.+8      	; 0x4800 <dtoa_prf+0x28a>
    47f8:	95 33       	cpi	r25, 0x35	; 53
    47fa:	19 f4       	brne	.+6      	; 0x4802 <dtoa_prf+0x28c>
    47fc:	31 11       	cpse	r19, r1
    47fe:	01 c0       	rjmp	.+2      	; 0x4802 <dtoa_prf+0x28c>
    4800:	81 e3       	ldi	r24, 0x31	; 49
    4802:	f6 01       	movw	r30, r12
    4804:	80 83       	st	Z, r24
    4806:	f7 01       	movw	r30, r14
    4808:	82 2f       	mov	r24, r18
    480a:	90 e2       	ldi	r25, 0x20	; 32
    480c:	88 23       	and	r24, r24
    480e:	19 f0       	breq	.+6      	; 0x4816 <dtoa_prf+0x2a0>
    4810:	91 93       	st	Z+, r25
    4812:	81 50       	subi	r24, 0x01	; 1
    4814:	fb cf       	rjmp	.-10     	; 0x480c <dtoa_prf+0x296>
    4816:	f7 01       	movw	r30, r14
    4818:	e2 0f       	add	r30, r18
    481a:	f1 1d       	adc	r31, r1
    481c:	10 82       	st	Z, r1
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	29 96       	adiw	r28, 0x09	; 9
    4824:	ec e0       	ldi	r30, 0x0C	; 12
    4826:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__epilogue_restores__+0xc>

0000482a <strtod>:
    482a:	a0 e0       	ldi	r26, 0x00	; 0
    482c:	b0 e0       	ldi	r27, 0x00	; 0
    482e:	eb e1       	ldi	r30, 0x1B	; 27
    4830:	f4 e2       	ldi	r31, 0x24	; 36
    4832:	0c 94 67 26 	jmp	0x4cce	; 0x4cce <__prologue_saves__+0xc>
    4836:	ec 01       	movw	r28, r24
    4838:	6b 01       	movw	r12, r22
    483a:	61 15       	cp	r22, r1
    483c:	71 05       	cpc	r23, r1
    483e:	19 f0       	breq	.+6      	; 0x4846 <strtod+0x1c>
    4840:	fb 01       	movw	r30, r22
    4842:	91 83       	std	Z+1, r25	; 0x01
    4844:	80 83       	st	Z, r24
    4846:	7e 01       	movw	r14, r28
    4848:	ff ef       	ldi	r31, 0xFF	; 255
    484a:	ef 1a       	sub	r14, r31
    484c:	ff 0a       	sbc	r15, r31
    484e:	08 81       	ld	r16, Y
    4850:	80 2f       	mov	r24, r16
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	0e 94 84 22 	call	0x4508	; 0x4508 <isspace>
    4858:	89 2b       	or	r24, r25
    485a:	11 f0       	breq	.+4      	; 0x4860 <strtod+0x36>
    485c:	e7 01       	movw	r28, r14
    485e:	f3 cf       	rjmp	.-26     	; 0x4846 <strtod+0x1c>
    4860:	0d 32       	cpi	r16, 0x2D	; 45
    4862:	39 f4       	brne	.+14     	; 0x4872 <strtod+0x48>
    4864:	7e 01       	movw	r14, r28
    4866:	82 e0       	ldi	r24, 0x02	; 2
    4868:	e8 0e       	add	r14, r24
    486a:	f1 1c       	adc	r15, r1
    486c:	09 81       	ldd	r16, Y+1	; 0x01
    486e:	11 e0       	ldi	r17, 0x01	; 1
    4870:	08 c0       	rjmp	.+16     	; 0x4882 <strtod+0x58>
    4872:	0b 32       	cpi	r16, 0x2B	; 43
    4874:	29 f4       	brne	.+10     	; 0x4880 <strtod+0x56>
    4876:	7e 01       	movw	r14, r28
    4878:	92 e0       	ldi	r25, 0x02	; 2
    487a:	e9 0e       	add	r14, r25
    487c:	f1 1c       	adc	r15, r1
    487e:	09 81       	ldd	r16, Y+1	; 0x01
    4880:	10 e0       	ldi	r17, 0x00	; 0
    4882:	e7 01       	movw	r28, r14
    4884:	21 97       	sbiw	r28, 0x01	; 1
    4886:	43 e0       	ldi	r20, 0x03	; 3
    4888:	50 e0       	ldi	r21, 0x00	; 0
    488a:	66 ea       	ldi	r22, 0xA6	; 166
    488c:	71 e0       	ldi	r23, 0x01	; 1
    488e:	ce 01       	movw	r24, r28
    4890:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <strncasecmp_P>
    4894:	89 2b       	or	r24, r25
    4896:	c1 f4       	brne	.+48     	; 0x48c8 <strtod+0x9e>
    4898:	23 96       	adiw	r28, 0x03	; 3
    489a:	45 e0       	ldi	r20, 0x05	; 5
    489c:	50 e0       	ldi	r21, 0x00	; 0
    489e:	61 ea       	ldi	r22, 0xA1	; 161
    48a0:	71 e0       	ldi	r23, 0x01	; 1
    48a2:	ce 01       	movw	r24, r28
    48a4:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <strncasecmp_P>
    48a8:	89 2b       	or	r24, r25
    48aa:	09 f4       	brne	.+2      	; 0x48ae <strtod+0x84>
    48ac:	25 96       	adiw	r28, 0x05	; 5
    48ae:	c1 14       	cp	r12, r1
    48b0:	d1 04       	cpc	r13, r1
    48b2:	19 f0       	breq	.+6      	; 0x48ba <strtod+0x90>
    48b4:	f6 01       	movw	r30, r12
    48b6:	d1 83       	std	Z+1, r29	; 0x01
    48b8:	c0 83       	st	Z, r28
    48ba:	11 11       	cpse	r17, r1
    48bc:	f6 c0       	rjmp	.+492    	; 0x4aaa <strtod+0x280>
    48be:	60 e0       	ldi	r22, 0x00	; 0
    48c0:	70 e0       	ldi	r23, 0x00	; 0
    48c2:	80 e8       	ldi	r24, 0x80	; 128
    48c4:	9f e7       	ldi	r25, 0x7F	; 127
    48c6:	fa c0       	rjmp	.+500    	; 0x4abc <strtod+0x292>
    48c8:	43 e0       	ldi	r20, 0x03	; 3
    48ca:	50 e0       	ldi	r21, 0x00	; 0
    48cc:	6e e9       	ldi	r22, 0x9E	; 158
    48ce:	71 e0       	ldi	r23, 0x01	; 1
    48d0:	ce 01       	movw	r24, r28
    48d2:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <strncasecmp_P>
    48d6:	89 2b       	or	r24, r25
    48d8:	59 f4       	brne	.+22     	; 0x48f0 <strtod+0xc6>
    48da:	c1 14       	cp	r12, r1
    48dc:	d1 04       	cpc	r13, r1
    48de:	09 f4       	brne	.+2      	; 0x48e2 <strtod+0xb8>
    48e0:	e9 c0       	rjmp	.+466    	; 0x4ab4 <strtod+0x28a>
    48e2:	f2 e0       	ldi	r31, 0x02	; 2
    48e4:	ef 0e       	add	r14, r31
    48e6:	f1 1c       	adc	r15, r1
    48e8:	f6 01       	movw	r30, r12
    48ea:	f1 82       	std	Z+1, r15	; 0x01
    48ec:	e0 82       	st	Z, r14
    48ee:	e2 c0       	rjmp	.+452    	; 0x4ab4 <strtod+0x28a>
    48f0:	20 e0       	ldi	r18, 0x00	; 0
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	a9 01       	movw	r20, r18
    48f6:	c0 e0       	ldi	r28, 0x00	; 0
    48f8:	d0 e0       	ldi	r29, 0x00	; 0
    48fa:	f7 01       	movw	r30, r14
    48fc:	80 ed       	ldi	r24, 0xD0	; 208
    48fe:	a8 2e       	mov	r10, r24
    4900:	a0 0e       	add	r10, r16
    4902:	89 e0       	ldi	r24, 0x09	; 9
    4904:	8a 15       	cp	r24, r10
    4906:	30 f1       	brcs	.+76     	; 0x4954 <strtod+0x12a>
    4908:	91 2f       	mov	r25, r17
    490a:	92 60       	ori	r25, 0x02	; 2
    490c:	b9 2e       	mov	r11, r25
    490e:	81 2f       	mov	r24, r17
    4910:	88 70       	andi	r24, 0x08	; 8
    4912:	12 ff       	sbrs	r17, 2
    4914:	04 c0       	rjmp	.+8      	; 0x491e <strtod+0xf4>
    4916:	81 11       	cpse	r24, r1
    4918:	24 c0       	rjmp	.+72     	; 0x4962 <strtod+0x138>
    491a:	21 96       	adiw	r28, 0x01	; 1
    491c:	22 c0       	rjmp	.+68     	; 0x4962 <strtod+0x138>
    491e:	81 11       	cpse	r24, r1
    4920:	21 97       	sbiw	r28, 0x01	; 1
    4922:	a5 e0       	ldi	r26, 0x05	; 5
    4924:	b0 e0       	ldi	r27, 0x00	; 0
    4926:	0e 94 56 26 	call	0x4cac	; 0x4cac <__muluhisi3>
    492a:	dc 01       	movw	r26, r24
    492c:	cb 01       	movw	r24, r22
    492e:	88 0f       	add	r24, r24
    4930:	99 1f       	adc	r25, r25
    4932:	aa 1f       	adc	r26, r26
    4934:	bb 1f       	adc	r27, r27
    4936:	9c 01       	movw	r18, r24
    4938:	ad 01       	movw	r20, r26
    493a:	2a 0d       	add	r18, r10
    493c:	31 1d       	adc	r19, r1
    493e:	41 1d       	adc	r20, r1
    4940:	51 1d       	adc	r21, r1
    4942:	28 39       	cpi	r18, 0x98	; 152
    4944:	89 e9       	ldi	r24, 0x99	; 153
    4946:	38 07       	cpc	r19, r24
    4948:	48 07       	cpc	r20, r24
    494a:	89 e1       	ldi	r24, 0x19	; 25
    494c:	58 07       	cpc	r21, r24
    494e:	48 f0       	brcs	.+18     	; 0x4962 <strtod+0x138>
    4950:	16 60       	ori	r17, 0x06	; 6
    4952:	06 c0       	rjmp	.+12     	; 0x4960 <strtod+0x136>
    4954:	9e ef       	ldi	r25, 0xFE	; 254
    4956:	a9 12       	cpse	r10, r25
    4958:	0a c0       	rjmp	.+20     	; 0x496e <strtod+0x144>
    495a:	13 fd       	sbrc	r17, 3
    495c:	40 c0       	rjmp	.+128    	; 0x49de <strtod+0x1b4>
    495e:	18 60       	ori	r17, 0x08	; 8
    4960:	b1 2e       	mov	r11, r17
    4962:	8f ef       	ldi	r24, 0xFF	; 255
    4964:	e8 1a       	sub	r14, r24
    4966:	f8 0a       	sbc	r15, r24
    4968:	00 81       	ld	r16, Z
    496a:	1b 2d       	mov	r17, r11
    496c:	c6 cf       	rjmp	.-116    	; 0x48fa <strtod+0xd0>
    496e:	80 2f       	mov	r24, r16
    4970:	8f 7d       	andi	r24, 0xDF	; 223
    4972:	85 34       	cpi	r24, 0x45	; 69
    4974:	a1 f5       	brne	.+104    	; 0x49de <strtod+0x1b4>
    4976:	80 81       	ld	r24, Z
    4978:	8d 32       	cpi	r24, 0x2D	; 45
    497a:	11 f4       	brne	.+4      	; 0x4980 <strtod+0x156>
    497c:	10 61       	ori	r17, 0x10	; 16
    497e:	06 c0       	rjmp	.+12     	; 0x498c <strtod+0x162>
    4980:	8b 32       	cpi	r24, 0x2B	; 43
    4982:	21 f0       	breq	.+8      	; 0x498c <strtod+0x162>
    4984:	31 96       	adiw	r30, 0x01	; 1
    4986:	61 e0       	ldi	r22, 0x01	; 1
    4988:	70 e0       	ldi	r23, 0x00	; 0
    498a:	04 c0       	rjmp	.+8      	; 0x4994 <strtod+0x16a>
    498c:	81 81       	ldd	r24, Z+1	; 0x01
    498e:	32 96       	adiw	r30, 0x02	; 2
    4990:	62 e0       	ldi	r22, 0x02	; 2
    4992:	70 e0       	ldi	r23, 0x00	; 0
    4994:	80 53       	subi	r24, 0x30	; 48
    4996:	8a 30       	cpi	r24, 0x0A	; 10
    4998:	18 f0       	brcs	.+6      	; 0x49a0 <strtod+0x176>
    499a:	e6 1b       	sub	r30, r22
    499c:	f7 0b       	sbc	r31, r23
    499e:	1f c0       	rjmp	.+62     	; 0x49de <strtod+0x1b4>
    49a0:	60 e0       	ldi	r22, 0x00	; 0
    49a2:	70 e0       	ldi	r23, 0x00	; 0
    49a4:	60 38       	cpi	r22, 0x80	; 128
    49a6:	9c e0       	ldi	r25, 0x0C	; 12
    49a8:	79 07       	cpc	r23, r25
    49aa:	5c f4       	brge	.+22     	; 0x49c2 <strtod+0x198>
    49ac:	db 01       	movw	r26, r22
    49ae:	aa 0f       	add	r26, r26
    49b0:	bb 1f       	adc	r27, r27
    49b2:	aa 0f       	add	r26, r26
    49b4:	bb 1f       	adc	r27, r27
    49b6:	6a 0f       	add	r22, r26
    49b8:	7b 1f       	adc	r23, r27
    49ba:	66 0f       	add	r22, r22
    49bc:	77 1f       	adc	r23, r23
    49be:	68 0f       	add	r22, r24
    49c0:	71 1d       	adc	r23, r1
    49c2:	31 96       	adiw	r30, 0x01	; 1
    49c4:	df 01       	movw	r26, r30
    49c6:	11 97       	sbiw	r26, 0x01	; 1
    49c8:	8c 91       	ld	r24, X
    49ca:	80 53       	subi	r24, 0x30	; 48
    49cc:	8a 30       	cpi	r24, 0x0A	; 10
    49ce:	50 f3       	brcs	.-44     	; 0x49a4 <strtod+0x17a>
    49d0:	14 ff       	sbrs	r17, 4
    49d2:	03 c0       	rjmp	.+6      	; 0x49da <strtod+0x1b0>
    49d4:	71 95       	neg	r23
    49d6:	61 95       	neg	r22
    49d8:	71 09       	sbc	r23, r1
    49da:	c6 0f       	add	r28, r22
    49dc:	d7 1f       	adc	r29, r23
    49de:	11 ff       	sbrs	r17, 1
    49e0:	08 c0       	rjmp	.+16     	; 0x49f2 <strtod+0x1c8>
    49e2:	c1 14       	cp	r12, r1
    49e4:	d1 04       	cpc	r13, r1
    49e6:	29 f0       	breq	.+10     	; 0x49f2 <strtod+0x1c8>
    49e8:	cf 01       	movw	r24, r30
    49ea:	01 97       	sbiw	r24, 0x01	; 1
    49ec:	f6 01       	movw	r30, r12
    49ee:	91 83       	std	Z+1, r25	; 0x01
    49f0:	80 83       	st	Z, r24
    49f2:	ca 01       	movw	r24, r20
    49f4:	b9 01       	movw	r22, r18
    49f6:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <__floatunsisf>
    49fa:	21 2f       	mov	r18, r17
    49fc:	23 70       	andi	r18, 0x03	; 3
    49fe:	23 30       	cpi	r18, 0x03	; 3
    4a00:	19 f0       	breq	.+6      	; 0x4a08 <strtod+0x1de>
    4a02:	4b 01       	movw	r8, r22
    4a04:	5c 01       	movw	r10, r24
    4a06:	06 c0       	rjmp	.+12     	; 0x4a14 <strtod+0x1ea>
    4a08:	4b 01       	movw	r8, r22
    4a0a:	5c 01       	movw	r10, r24
    4a0c:	b7 fa       	bst	r11, 7
    4a0e:	b0 94       	com	r11
    4a10:	b7 f8       	bld	r11, 7
    4a12:	b0 94       	com	r11
    4a14:	20 e0       	ldi	r18, 0x00	; 0
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	a9 01       	movw	r20, r18
    4a1a:	c5 01       	movw	r24, r10
    4a1c:	b4 01       	movw	r22, r8
    4a1e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    4a22:	88 23       	and	r24, r24
    4a24:	09 f4       	brne	.+2      	; 0x4a28 <strtod+0x1fe>
    4a26:	3e c0       	rjmp	.+124    	; 0x4aa4 <strtod+0x27a>
    4a28:	d7 ff       	sbrs	r29, 7
    4a2a:	06 c0       	rjmp	.+12     	; 0x4a38 <strtod+0x20e>
    4a2c:	d1 95       	neg	r29
    4a2e:	c1 95       	neg	r28
    4a30:	d1 09       	sbc	r29, r1
    4a32:	0d eb       	ldi	r16, 0xBD	; 189
    4a34:	11 e0       	ldi	r17, 0x01	; 1
    4a36:	02 c0       	rjmp	.+4      	; 0x4a3c <strtod+0x212>
    4a38:	05 ed       	ldi	r16, 0xD5	; 213
    4a3a:	11 e0       	ldi	r17, 0x01	; 1
    4a3c:	68 01       	movw	r12, r16
    4a3e:	f8 e1       	ldi	r31, 0x18	; 24
    4a40:	cf 1a       	sub	r12, r31
    4a42:	d1 08       	sbc	r13, r1
    4a44:	90 e2       	ldi	r25, 0x20	; 32
    4a46:	e9 2e       	mov	r14, r25
    4a48:	f1 2c       	mov	r15, r1
    4a4a:	ce 15       	cp	r28, r14
    4a4c:	df 05       	cpc	r29, r15
    4a4e:	74 f0       	brlt	.+28     	; 0x4a6c <strtod+0x242>
    4a50:	f8 01       	movw	r30, r16
    4a52:	25 91       	lpm	r18, Z+
    4a54:	35 91       	lpm	r19, Z+
    4a56:	45 91       	lpm	r20, Z+
    4a58:	54 91       	lpm	r21, Z
    4a5a:	c5 01       	movw	r24, r10
    4a5c:	b4 01       	movw	r22, r8
    4a5e:	0e 94 96 20 	call	0x412c	; 0x412c <__mulsf3>
    4a62:	4b 01       	movw	r8, r22
    4a64:	5c 01       	movw	r10, r24
    4a66:	ce 19       	sub	r28, r14
    4a68:	df 09       	sbc	r29, r15
    4a6a:	ef cf       	rjmp	.-34     	; 0x4a4a <strtod+0x220>
    4a6c:	04 50       	subi	r16, 0x04	; 4
    4a6e:	11 09       	sbc	r17, r1
    4a70:	f5 94       	asr	r15
    4a72:	e7 94       	ror	r14
    4a74:	0c 15       	cp	r16, r12
    4a76:	1d 05       	cpc	r17, r13
    4a78:	41 f7       	brne	.-48     	; 0x4a4a <strtod+0x220>
    4a7a:	8a 2d       	mov	r24, r10
    4a7c:	88 0f       	add	r24, r24
    4a7e:	8b 2d       	mov	r24, r11
    4a80:	88 1f       	adc	r24, r24
    4a82:	8f 3f       	cpi	r24, 0xFF	; 255
    4a84:	49 f0       	breq	.+18     	; 0x4a98 <strtod+0x26e>
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	30 e0       	ldi	r19, 0x00	; 0
    4a8a:	a9 01       	movw	r20, r18
    4a8c:	c5 01       	movw	r24, r10
    4a8e:	b4 01       	movw	r22, r8
    4a90:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__cmpsf2>
    4a94:	81 11       	cpse	r24, r1
    4a96:	06 c0       	rjmp	.+12     	; 0x4aa4 <strtod+0x27a>
    4a98:	82 e2       	ldi	r24, 0x22	; 34
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <errno+0x1>
    4aa0:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <errno>
    4aa4:	c5 01       	movw	r24, r10
    4aa6:	b4 01       	movw	r22, r8
    4aa8:	09 c0       	rjmp	.+18     	; 0x4abc <strtod+0x292>
    4aaa:	60 e0       	ldi	r22, 0x00	; 0
    4aac:	70 e0       	ldi	r23, 0x00	; 0
    4aae:	80 e8       	ldi	r24, 0x80	; 128
    4ab0:	9f ef       	ldi	r25, 0xFF	; 255
    4ab2:	04 c0       	rjmp	.+8      	; 0x4abc <strtod+0x292>
    4ab4:	60 e0       	ldi	r22, 0x00	; 0
    4ab6:	70 e0       	ldi	r23, 0x00	; 0
    4ab8:	80 ec       	ldi	r24, 0xC0	; 192
    4aba:	9f e7       	ldi	r25, 0x7F	; 127
    4abc:	cd b7       	in	r28, 0x3d	; 61
    4abe:	de b7       	in	r29, 0x3e	; 62
    4ac0:	ec e0       	ldi	r30, 0x0C	; 12
    4ac2:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__epilogue_restores__+0xc>

00004ac6 <__ftoa_engine>:
    4ac6:	28 30       	cpi	r18, 0x08	; 8
    4ac8:	08 f0       	brcs	.+2      	; 0x4acc <__ftoa_engine+0x6>
    4aca:	27 e0       	ldi	r18, 0x07	; 7
    4acc:	33 27       	eor	r19, r19
    4ace:	da 01       	movw	r26, r20
    4ad0:	99 0f       	add	r25, r25
    4ad2:	31 1d       	adc	r19, r1
    4ad4:	87 fd       	sbrc	r24, 7
    4ad6:	91 60       	ori	r25, 0x01	; 1
    4ad8:	00 96       	adiw	r24, 0x00	; 0
    4ada:	61 05       	cpc	r22, r1
    4adc:	71 05       	cpc	r23, r1
    4ade:	39 f4       	brne	.+14     	; 0x4aee <__ftoa_engine+0x28>
    4ae0:	32 60       	ori	r19, 0x02	; 2
    4ae2:	2e 5f       	subi	r18, 0xFE	; 254
    4ae4:	3d 93       	st	X+, r19
    4ae6:	30 e3       	ldi	r19, 0x30	; 48
    4ae8:	2a 95       	dec	r18
    4aea:	e1 f7       	brne	.-8      	; 0x4ae4 <__ftoa_engine+0x1e>
    4aec:	08 95       	ret
    4aee:	9f 3f       	cpi	r25, 0xFF	; 255
    4af0:	30 f0       	brcs	.+12     	; 0x4afe <__ftoa_engine+0x38>
    4af2:	80 38       	cpi	r24, 0x80	; 128
    4af4:	71 05       	cpc	r23, r1
    4af6:	61 05       	cpc	r22, r1
    4af8:	09 f0       	breq	.+2      	; 0x4afc <__ftoa_engine+0x36>
    4afa:	3c 5f       	subi	r19, 0xFC	; 252
    4afc:	3c 5f       	subi	r19, 0xFC	; 252
    4afe:	3d 93       	st	X+, r19
    4b00:	91 30       	cpi	r25, 0x01	; 1
    4b02:	08 f0       	brcs	.+2      	; 0x4b06 <__ftoa_engine+0x40>
    4b04:	80 68       	ori	r24, 0x80	; 128
    4b06:	91 1d       	adc	r25, r1
    4b08:	df 93       	push	r29
    4b0a:	cf 93       	push	r28
    4b0c:	1f 93       	push	r17
    4b0e:	0f 93       	push	r16
    4b10:	ff 92       	push	r15
    4b12:	ef 92       	push	r14
    4b14:	19 2f       	mov	r17, r25
    4b16:	98 7f       	andi	r25, 0xF8	; 248
    4b18:	96 95       	lsr	r25
    4b1a:	e9 2f       	mov	r30, r25
    4b1c:	96 95       	lsr	r25
    4b1e:	96 95       	lsr	r25
    4b20:	e9 0f       	add	r30, r25
    4b22:	ff 27       	eor	r31, r31
    4b24:	ed 5c       	subi	r30, 0xCD	; 205
    4b26:	fd 4f       	sbci	r31, 0xFD	; 253
    4b28:	99 27       	eor	r25, r25
    4b2a:	33 27       	eor	r19, r19
    4b2c:	ee 24       	eor	r14, r14
    4b2e:	ff 24       	eor	r15, r15
    4b30:	a7 01       	movw	r20, r14
    4b32:	e7 01       	movw	r28, r14
    4b34:	05 90       	lpm	r0, Z+
    4b36:	08 94       	sec
    4b38:	07 94       	ror	r0
    4b3a:	28 f4       	brcc	.+10     	; 0x4b46 <__ftoa_engine+0x80>
    4b3c:	36 0f       	add	r19, r22
    4b3e:	e7 1e       	adc	r14, r23
    4b40:	f8 1e       	adc	r15, r24
    4b42:	49 1f       	adc	r20, r25
    4b44:	51 1d       	adc	r21, r1
    4b46:	66 0f       	add	r22, r22
    4b48:	77 1f       	adc	r23, r23
    4b4a:	88 1f       	adc	r24, r24
    4b4c:	99 1f       	adc	r25, r25
    4b4e:	06 94       	lsr	r0
    4b50:	a1 f7       	brne	.-24     	; 0x4b3a <__ftoa_engine+0x74>
    4b52:	05 90       	lpm	r0, Z+
    4b54:	07 94       	ror	r0
    4b56:	28 f4       	brcc	.+10     	; 0x4b62 <__ftoa_engine+0x9c>
    4b58:	e7 0e       	add	r14, r23
    4b5a:	f8 1e       	adc	r15, r24
    4b5c:	49 1f       	adc	r20, r25
    4b5e:	56 1f       	adc	r21, r22
    4b60:	c1 1d       	adc	r28, r1
    4b62:	77 0f       	add	r23, r23
    4b64:	88 1f       	adc	r24, r24
    4b66:	99 1f       	adc	r25, r25
    4b68:	66 1f       	adc	r22, r22
    4b6a:	06 94       	lsr	r0
    4b6c:	a1 f7       	brne	.-24     	; 0x4b56 <__ftoa_engine+0x90>
    4b6e:	05 90       	lpm	r0, Z+
    4b70:	07 94       	ror	r0
    4b72:	28 f4       	brcc	.+10     	; 0x4b7e <__ftoa_engine+0xb8>
    4b74:	f8 0e       	add	r15, r24
    4b76:	49 1f       	adc	r20, r25
    4b78:	56 1f       	adc	r21, r22
    4b7a:	c7 1f       	adc	r28, r23
    4b7c:	d1 1d       	adc	r29, r1
    4b7e:	88 0f       	add	r24, r24
    4b80:	99 1f       	adc	r25, r25
    4b82:	66 1f       	adc	r22, r22
    4b84:	77 1f       	adc	r23, r23
    4b86:	06 94       	lsr	r0
    4b88:	a1 f7       	brne	.-24     	; 0x4b72 <__ftoa_engine+0xac>
    4b8a:	05 90       	lpm	r0, Z+
    4b8c:	07 94       	ror	r0
    4b8e:	20 f4       	brcc	.+8      	; 0x4b98 <__ftoa_engine+0xd2>
    4b90:	49 0f       	add	r20, r25
    4b92:	56 1f       	adc	r21, r22
    4b94:	c7 1f       	adc	r28, r23
    4b96:	d8 1f       	adc	r29, r24
    4b98:	99 0f       	add	r25, r25
    4b9a:	66 1f       	adc	r22, r22
    4b9c:	77 1f       	adc	r23, r23
    4b9e:	88 1f       	adc	r24, r24
    4ba0:	06 94       	lsr	r0
    4ba2:	a9 f7       	brne	.-22     	; 0x4b8e <__ftoa_engine+0xc8>
    4ba4:	84 91       	lpm	r24, Z
    4ba6:	10 95       	com	r17
    4ba8:	17 70       	andi	r17, 0x07	; 7
    4baa:	41 f0       	breq	.+16     	; 0x4bbc <__ftoa_engine+0xf6>
    4bac:	d6 95       	lsr	r29
    4bae:	c7 95       	ror	r28
    4bb0:	57 95       	ror	r21
    4bb2:	47 95       	ror	r20
    4bb4:	f7 94       	ror	r15
    4bb6:	e7 94       	ror	r14
    4bb8:	1a 95       	dec	r17
    4bba:	c1 f7       	brne	.-16     	; 0x4bac <__ftoa_engine+0xe6>
    4bbc:	e9 ed       	ldi	r30, 0xD9	; 217
    4bbe:	f1 e0       	ldi	r31, 0x01	; 1
    4bc0:	68 94       	set
    4bc2:	15 90       	lpm	r1, Z+
    4bc4:	15 91       	lpm	r17, Z+
    4bc6:	35 91       	lpm	r19, Z+
    4bc8:	65 91       	lpm	r22, Z+
    4bca:	95 91       	lpm	r25, Z+
    4bcc:	05 90       	lpm	r0, Z+
    4bce:	7f e2       	ldi	r23, 0x2F	; 47
    4bd0:	73 95       	inc	r23
    4bd2:	e1 18       	sub	r14, r1
    4bd4:	f1 0a       	sbc	r15, r17
    4bd6:	43 0b       	sbc	r20, r19
    4bd8:	56 0b       	sbc	r21, r22
    4bda:	c9 0b       	sbc	r28, r25
    4bdc:	d0 09       	sbc	r29, r0
    4bde:	c0 f7       	brcc	.-16     	; 0x4bd0 <__ftoa_engine+0x10a>
    4be0:	e1 0c       	add	r14, r1
    4be2:	f1 1e       	adc	r15, r17
    4be4:	43 1f       	adc	r20, r19
    4be6:	56 1f       	adc	r21, r22
    4be8:	c9 1f       	adc	r28, r25
    4bea:	d0 1d       	adc	r29, r0
    4bec:	7e f4       	brtc	.+30     	; 0x4c0c <__ftoa_engine+0x146>
    4bee:	70 33       	cpi	r23, 0x30	; 48
    4bf0:	11 f4       	brne	.+4      	; 0x4bf6 <__ftoa_engine+0x130>
    4bf2:	8a 95       	dec	r24
    4bf4:	e6 cf       	rjmp	.-52     	; 0x4bc2 <__ftoa_engine+0xfc>
    4bf6:	e8 94       	clt
    4bf8:	01 50       	subi	r16, 0x01	; 1
    4bfa:	30 f0       	brcs	.+12     	; 0x4c08 <__ftoa_engine+0x142>
    4bfc:	08 0f       	add	r16, r24
    4bfe:	0a f4       	brpl	.+2      	; 0x4c02 <__ftoa_engine+0x13c>
    4c00:	00 27       	eor	r16, r16
    4c02:	02 17       	cp	r16, r18
    4c04:	08 f4       	brcc	.+2      	; 0x4c08 <__ftoa_engine+0x142>
    4c06:	20 2f       	mov	r18, r16
    4c08:	23 95       	inc	r18
    4c0a:	02 2f       	mov	r16, r18
    4c0c:	7a 33       	cpi	r23, 0x3A	; 58
    4c0e:	28 f0       	brcs	.+10     	; 0x4c1a <__ftoa_engine+0x154>
    4c10:	79 e3       	ldi	r23, 0x39	; 57
    4c12:	7d 93       	st	X+, r23
    4c14:	2a 95       	dec	r18
    4c16:	e9 f7       	brne	.-6      	; 0x4c12 <__ftoa_engine+0x14c>
    4c18:	10 c0       	rjmp	.+32     	; 0x4c3a <__ftoa_engine+0x174>
    4c1a:	7d 93       	st	X+, r23
    4c1c:	2a 95       	dec	r18
    4c1e:	89 f6       	brne	.-94     	; 0x4bc2 <__ftoa_engine+0xfc>
    4c20:	06 94       	lsr	r0
    4c22:	97 95       	ror	r25
    4c24:	67 95       	ror	r22
    4c26:	37 95       	ror	r19
    4c28:	17 95       	ror	r17
    4c2a:	17 94       	ror	r1
    4c2c:	e1 18       	sub	r14, r1
    4c2e:	f1 0a       	sbc	r15, r17
    4c30:	43 0b       	sbc	r20, r19
    4c32:	56 0b       	sbc	r21, r22
    4c34:	c9 0b       	sbc	r28, r25
    4c36:	d0 09       	sbc	r29, r0
    4c38:	98 f0       	brcs	.+38     	; 0x4c60 <__ftoa_engine+0x19a>
    4c3a:	23 95       	inc	r18
    4c3c:	7e 91       	ld	r23, -X
    4c3e:	73 95       	inc	r23
    4c40:	7a 33       	cpi	r23, 0x3A	; 58
    4c42:	08 f0       	brcs	.+2      	; 0x4c46 <__ftoa_engine+0x180>
    4c44:	70 e3       	ldi	r23, 0x30	; 48
    4c46:	7c 93       	st	X, r23
    4c48:	20 13       	cpse	r18, r16
    4c4a:	b8 f7       	brcc	.-18     	; 0x4c3a <__ftoa_engine+0x174>
    4c4c:	7e 91       	ld	r23, -X
    4c4e:	70 61       	ori	r23, 0x10	; 16
    4c50:	7d 93       	st	X+, r23
    4c52:	30 f0       	brcs	.+12     	; 0x4c60 <__ftoa_engine+0x19a>
    4c54:	83 95       	inc	r24
    4c56:	71 e3       	ldi	r23, 0x31	; 49
    4c58:	7d 93       	st	X+, r23
    4c5a:	70 e3       	ldi	r23, 0x30	; 48
    4c5c:	2a 95       	dec	r18
    4c5e:	e1 f7       	brne	.-8      	; 0x4c58 <__ftoa_engine+0x192>
    4c60:	11 24       	eor	r1, r1
    4c62:	ef 90       	pop	r14
    4c64:	ff 90       	pop	r15
    4c66:	0f 91       	pop	r16
    4c68:	1f 91       	pop	r17
    4c6a:	cf 91       	pop	r28
    4c6c:	df 91       	pop	r29
    4c6e:	99 27       	eor	r25, r25
    4c70:	87 fd       	sbrc	r24, 7
    4c72:	90 95       	com	r25
    4c74:	08 95       	ret

00004c76 <__ctype_isfalse>:
    4c76:	99 27       	eor	r25, r25
    4c78:	88 27       	eor	r24, r24

00004c7a <__ctype_istrue>:
    4c7a:	08 95       	ret

00004c7c <strncasecmp_P>:
    4c7c:	fb 01       	movw	r30, r22
    4c7e:	dc 01       	movw	r26, r24
    4c80:	41 50       	subi	r20, 0x01	; 1
    4c82:	50 40       	sbci	r21, 0x00	; 0
    4c84:	88 f0       	brcs	.+34     	; 0x4ca8 <strncasecmp_P+0x2c>
    4c86:	8d 91       	ld	r24, X+
    4c88:	81 34       	cpi	r24, 0x41	; 65
    4c8a:	1c f0       	brlt	.+6      	; 0x4c92 <strncasecmp_P+0x16>
    4c8c:	8b 35       	cpi	r24, 0x5B	; 91
    4c8e:	0c f4       	brge	.+2      	; 0x4c92 <strncasecmp_P+0x16>
    4c90:	80 5e       	subi	r24, 0xE0	; 224
    4c92:	65 91       	lpm	r22, Z+
    4c94:	61 34       	cpi	r22, 0x41	; 65
    4c96:	1c f0       	brlt	.+6      	; 0x4c9e <strncasecmp_P+0x22>
    4c98:	6b 35       	cpi	r22, 0x5B	; 91
    4c9a:	0c f4       	brge	.+2      	; 0x4c9e <strncasecmp_P+0x22>
    4c9c:	60 5e       	subi	r22, 0xE0	; 224
    4c9e:	86 1b       	sub	r24, r22
    4ca0:	61 11       	cpse	r22, r1
    4ca2:	71 f3       	breq	.-36     	; 0x4c80 <strncasecmp_P+0x4>
    4ca4:	99 0b       	sbc	r25, r25
    4ca6:	08 95       	ret
    4ca8:	88 1b       	sub	r24, r24
    4caa:	fc cf       	rjmp	.-8      	; 0x4ca4 <strncasecmp_P+0x28>

00004cac <__muluhisi3>:
    4cac:	0e 94 98 26 	call	0x4d30	; 0x4d30 <__umulhisi3>
    4cb0:	a5 9f       	mul	r26, r21
    4cb2:	90 0d       	add	r25, r0
    4cb4:	b4 9f       	mul	r27, r20
    4cb6:	90 0d       	add	r25, r0
    4cb8:	a4 9f       	mul	r26, r20
    4cba:	80 0d       	add	r24, r0
    4cbc:	91 1d       	adc	r25, r1
    4cbe:	11 24       	eor	r1, r1
    4cc0:	08 95       	ret

00004cc2 <__prologue_saves__>:
    4cc2:	2f 92       	push	r2
    4cc4:	3f 92       	push	r3
    4cc6:	4f 92       	push	r4
    4cc8:	5f 92       	push	r5
    4cca:	6f 92       	push	r6
    4ccc:	7f 92       	push	r7
    4cce:	8f 92       	push	r8
    4cd0:	9f 92       	push	r9
    4cd2:	af 92       	push	r10
    4cd4:	bf 92       	push	r11
    4cd6:	cf 92       	push	r12
    4cd8:	df 92       	push	r13
    4cda:	ef 92       	push	r14
    4cdc:	ff 92       	push	r15
    4cde:	0f 93       	push	r16
    4ce0:	1f 93       	push	r17
    4ce2:	cf 93       	push	r28
    4ce4:	df 93       	push	r29
    4ce6:	cd b7       	in	r28, 0x3d	; 61
    4ce8:	de b7       	in	r29, 0x3e	; 62
    4cea:	ca 1b       	sub	r28, r26
    4cec:	db 0b       	sbc	r29, r27
    4cee:	0f b6       	in	r0, 0x3f	; 63
    4cf0:	f8 94       	cli
    4cf2:	de bf       	out	0x3e, r29	; 62
    4cf4:	0f be       	out	0x3f, r0	; 63
    4cf6:	cd bf       	out	0x3d, r28	; 61
    4cf8:	09 94       	ijmp

00004cfa <__epilogue_restores__>:
    4cfa:	2a 88       	ldd	r2, Y+18	; 0x12
    4cfc:	39 88       	ldd	r3, Y+17	; 0x11
    4cfe:	48 88       	ldd	r4, Y+16	; 0x10
    4d00:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d02:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d04:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d06:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d08:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d0c:	b9 84       	ldd	r11, Y+9	; 0x09
    4d0e:	c8 84       	ldd	r12, Y+8	; 0x08
    4d10:	df 80       	ldd	r13, Y+7	; 0x07
    4d12:	ee 80       	ldd	r14, Y+6	; 0x06
    4d14:	fd 80       	ldd	r15, Y+5	; 0x05
    4d16:	0c 81       	ldd	r16, Y+4	; 0x04
    4d18:	1b 81       	ldd	r17, Y+3	; 0x03
    4d1a:	aa 81       	ldd	r26, Y+2	; 0x02
    4d1c:	b9 81       	ldd	r27, Y+1	; 0x01
    4d1e:	ce 0f       	add	r28, r30
    4d20:	d1 1d       	adc	r29, r1
    4d22:	0f b6       	in	r0, 0x3f	; 63
    4d24:	f8 94       	cli
    4d26:	de bf       	out	0x3e, r29	; 62
    4d28:	0f be       	out	0x3f, r0	; 63
    4d2a:	cd bf       	out	0x3d, r28	; 61
    4d2c:	ed 01       	movw	r28, r26
    4d2e:	08 95       	ret

00004d30 <__umulhisi3>:
    4d30:	a2 9f       	mul	r26, r18
    4d32:	b0 01       	movw	r22, r0
    4d34:	b3 9f       	mul	r27, r19
    4d36:	c0 01       	movw	r24, r0
    4d38:	a3 9f       	mul	r26, r19
    4d3a:	70 0d       	add	r23, r0
    4d3c:	81 1d       	adc	r24, r1
    4d3e:	11 24       	eor	r1, r1
    4d40:	91 1d       	adc	r25, r1
    4d42:	b2 9f       	mul	r27, r18
    4d44:	70 0d       	add	r23, r0
    4d46:	81 1d       	adc	r24, r1
    4d48:	11 24       	eor	r1, r1
    4d4a:	91 1d       	adc	r25, r1
    4d4c:	08 95       	ret

00004d4e <_exit>:
    4d4e:	f8 94       	cli

00004d50 <__stop_program>:
    4d50:	ff cf       	rjmp	.-2      	; 0x4d50 <__stop_program>
