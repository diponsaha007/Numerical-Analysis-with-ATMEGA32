
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000053b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000028c  00800060  000053b8  0000544c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000044f  008002ec  008002ec  000056d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000056d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005734  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00005770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004754  00000000  00000000  000058d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a51  00000000  00000000  0000a024  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e67  00000000  00000000  0000aa75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009d4  00000000  00000000  0000c8dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ee  00000000  00000000  0000d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004ee6  00000000  00000000  0000dc9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  00012b84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__ctors_end>
       4:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
       8:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
       c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      10:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      14:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      18:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      1c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      20:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      24:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      28:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      2c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      30:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      34:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      38:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      3c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      40:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      44:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      48:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      4c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      50:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      54:	03 6e       	ori	r16, 0xE3	; 227
      56:	db 36       	cpi	r29, 0x6B	; 107
      58:	3d 9a       	sbi	0x07, 5	; 7
      5a:	99 99       	sbic	0x13, 1	; 19
      5c:	99 3d       	cpi	r25, 0xD9	; 217
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	3e 00       	.word	0x003e	; ????
      64:	00 00       	nop
      66:	80 3f       	cpi	r24, 0xF0	; 240
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	63 42       	sbci	r22, 0x23	; 35
      98:	36 b7       	in	r19, 0x36	; 54
      9a:	9b d8       	rcall	.-3786   	; 0xfffff1d2 <__eeprom_end+0xff7ef1d2>
      9c:	a7 1a       	sub	r10, r23
      9e:	39 68       	ori	r19, 0x89	; 137
      a0:	56 18       	sub	r5, r6
      a2:	ae ba       	out	0x1e, r10	; 30
      a4:	ab 55       	subi	r26, 0x5B	; 91
      a6:	8c 1d       	adc	r24, r12
      a8:	3c b7       	in	r19, 0x3c	; 60
      aa:	cc 57       	subi	r28, 0x7C	; 124
      ac:	63 bd       	out	0x23, r22	; 35
      ae:	6d ed       	ldi	r22, 0xDD	; 221
      b0:	fd 75       	andi	r31, 0x5D	; 93
      b2:	3e f6       	brtc	.-114    	; 0x42 <__SREG__+0x3>
      b4:	17 72       	andi	r17, 0x27	; 39
      b6:	31 bf       	out	0x31, r19	; 49
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 07       	cpc	r19, r31
      be:	2c 7a       	andi	r18, 0xAC	; 172
      c0:	a5 ba       	out	0x15, r10	; 21
      c2:	6c c5       	rjmp	.+2776   	; 0xb9c <_ZN6parser9eval_exp6ERd+0x80>
      c4:	90 da       	rcall	.-2784   	; 0xfffff5e6 <__eeprom_end+0xff7ef5e6>
      c6:	3b 93       	.word	0x933b	; ????
      c8:	65 fc       	sbrc	r6, 5
      ca:	8b bc       	out	0x2b, r8	; 43
      cc:	53 f8       	bld	r5, 3
      ce:	10 fd       	sbrc	r17, 0
      d0:	3c 56       	subi	r19, 0x6C	; 108
      d2:	92 83       	std	Z+2, r25	; 0x02
      d4:	4d bd       	out	0x2d, r20	; 45
      d6:	87 9d       	mul	r24, r7
      d8:	3a b6       	in	r3, 0x3a	; 58
      da:	3d cb       	rjmp	.-2438   	; 0xfffff756 <__eeprom_end+0xff7ef756>
      dc:	c9 bf       	out	0x39, r28	; 57
      de:	5b be       	out	0x3b, r5	; 59
      e0:	73 da       	rcall	.-2842   	; 0xfffff5c8 <__eeprom_end+0xff7ef5c8>
      e2:	0f c9       	rjmp	.-3554   	; 0xfffff302 <__eeprom_end+0xff7ef302>
      e4:	3f 05       	cpc	r19, r15
      e6:	a8 4c       	sbci	r26, 0xC8	; 200
      e8:	cd b2       	in	r12, 0x1d	; 29
      ea:	d4 4e       	sbci	r29, 0xE4	; 228
      ec:	b9 38       	cpi	r27, 0x89	; 137
      ee:	36 a9       	ldd	r19, Z+54	; 0x36
      f0:	02 0c       	add	r0, r2
      f2:	50 b9       	out	0x00, r21	; 0
      f4:	91 86       	std	Z+9, r9	; 0x09
      f6:	88 08       	sbc	r8, r8
      f8:	3c a6       	std	Y+44, r3	; 0x2c
      fa:	aa aa       	std	Y+50, r10	; 0x32
      fc:	2a be       	out	0x3a, r2	; 58
      fe:	00 00       	nop
     100:	00 80       	ld	r0, Z
     102:	3f 08       	sbc	r3, r15
     104:	00 00       	nop
     106:	00 be       	out	0x30, r0	; 48
     108:	92 24       	eor	r9, r2
     10a:	49 12       	cpse	r4, r25
     10c:	3e ab       	std	Y+54, r19	; 0x36
     10e:	aa aa       	std	Y+50, r10	; 0x32
     110:	2a be       	out	0x3a, r2	; 58
     112:	cd cc       	rjmp	.-1638   	; 0xfffffaae <__eeprom_end+0xff7efaae>
     114:	cc 4c       	sbci	r28, 0xCC	; 204
     116:	3e 00       	.word	0x003e	; ????
     118:	00 00       	nop
     11a:	80 be       	out	0x30, r8	; 48
     11c:	ab aa       	std	Y+51, r10	; 0x33
     11e:	aa aa       	std	Y+50, r10	; 0x32
     120:	3e 00       	.word	0x003e	; ????
     122:	00 00       	nop
     124:	00 bf       	out	0x30, r16	; 48
     126:	00 00       	nop
     128:	00 80       	ld	r0, Z
     12a:	3f 00       	.word	0x003f	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	08 41       	sbci	r16, 0x18	; 24
     132:	78 d3       	rcall	.+1776   	; 0x824 <_Z11DisplayCharhhc+0x34>
     134:	bb 43       	sbci	r27, 0x3B	; 59
     136:	87 d1       	rcall	.+782    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     138:	13 3d       	cpi	r17, 0xD3	; 211
     13a:	19 0e       	add	r1, r25
     13c:	3c c3       	rjmp	.+1656   	; 0x7b6 <_Z4lineccccc+0xae>
     13e:	bd 42       	sbci	r27, 0x2D	; 45
     140:	82 ad       	ldd	r24, Z+58	; 0x3a
     142:	2b 3e       	cpi	r18, 0xEB	; 235
     144:	68 ec       	ldi	r22, 0xC8	; 200
     146:	82 76       	andi	r24, 0x62	; 98
     148:	be d9       	rcall	.-3204   	; 0xfffff4c6 <__eeprom_end+0xff7ef4c6>
     14a:	8f e1       	ldi	r24, 0x1F	; 31
     14c:	a9 3e       	cpi	r26, 0xE9	; 233
     14e:	4c 80       	ldd	r4, Y+4	; 0x04
     150:	ef ff       	.word	0xffef	; ????
     152:	be 01       	movw	r22, r28
     154:	c4 ff       	sbrs	r28, 4
     156:	7f 3f       	cpi	r23, 0xFF	; 255
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 02       	muls	r16, r16
     15e:	89 88       	ldd	r8, Y+17	; 0x11
     160:	08 3c       	cpi	r16, 0xC8	; 200
     162:	ab aa       	std	Y+51, r10	; 0x33
     164:	aa 2a       	or	r10, r26
     166:	3e 00       	.word	0x003e	; ????
     168:	00 00       	nop
     16a:	80 3f       	cpi	r24, 0xF0	; 240
     16c:	02 89       	ldd	r16, Z+18	; 0x12
     16e:	88 08       	sbc	r8, r8
     170:	3e ab       	std	Y+54, r19	; 0x36
     172:	aa aa       	std	Y+50, r10	; 0x32
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 06       	cpc	r3, r31
     17c:	64 ec       	ldi	r22, 0xC4	; 196
     17e:	1b 3c       	cpi	r17, 0xCB	; 203
     180:	04 bc       	out	0x24, r0	; 36
     182:	16 3e       	cpi	r17, 0xE6	; 230
     184:	3b e5       	ldi	r19, 0x5B	; 91
     186:	b9 3c       	cpi	r27, 0xC9	; 201
     188:	c9 3c       	cpi	r28, 0xC9	; 201
     18a:	37 c2       	rjmp	.+1134   	; 0x5fa <_Z8PutPixelhhc+0x74>
     18c:	9e 5a       	subi	r25, 0xAE	; 174
     18e:	3d 66       	ori	r19, 0x6D	; 109
     190:	04 98       	cbi	0x00, 4	; 0
     192:	08 3e       	cpi	r16, 0xE8	; 232
     194:	ea 69       	ori	r30, 0x9A	; 154
     196:	aa aa       	std	Y+50, r10	; 0x32
     198:	3e 00       	.word	0x003e	; ????
     19a:	00 00       	nop
     19c:	80 3f       	cpi	r24, 0xF0	; 240

0000019e <__trampolines_end>:
     19e:	4e 41       	sbci	r20, 0x1E	; 30
     1a0:	4e 49       	Address 0x000001a0 is out of bounds.
.word	0xffff	; ????

000001a1 <pstr_inity>:
     1a1:	49 4e 49 54 59                                      INITY

000001a6 <pstr_inf>:
     1a6:	49 4e 46                                            INF

000001a9 <pwr_m10>:
     1a9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     1b9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001c1 <pwr_p10>:
     1c1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1d1:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     1e1:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     1f1:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     201:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     211:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     221:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     231:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     241:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     251:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     261:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     271:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     281:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     291:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     2a1:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     2b1:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     2c1:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     2d1:	3d 27                                               ='

000002d3 <_ZL10FontLookup>:
     2d3:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     2e3:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     2f3:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     303:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     313:	00 08 08 08 08 08 00 30 30 00 00 20 10 08 04 02     .......00.. ....
     323:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     333:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     343:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     353:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     363:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     373:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     383:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     393:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     3a3:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     3b3:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     3c3:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     3d3:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     3e3:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     3f3:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     403:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     413:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     423:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     433:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     443:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     453:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     463:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     473:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     483:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     493:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     4a3:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..
	...

000004b4 <__ctors_start>:
     4b4:	61 1e       	adc	r6, r17

000004b6 <__ctors_end>:
     4b6:	11 24       	eor	r1, r1
     4b8:	1f be       	out	0x3f, r1	; 63
     4ba:	cf e5       	ldi	r28, 0x5F	; 95
     4bc:	d8 e0       	ldi	r29, 0x08	; 8
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	cd bf       	out	0x3d, r28	; 61

000004c2 <__do_copy_data>:
     4c2:	12 e0       	ldi	r17, 0x02	; 2
     4c4:	a0 e6       	ldi	r26, 0x60	; 96
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e8 eb       	ldi	r30, 0xB8	; 184
     4ca:	f3 e5       	ldi	r31, 0x53	; 83
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__do_copy_data+0x10>
     4ce:	05 90       	lpm	r0, Z+
     4d0:	0d 92       	st	X+, r0
     4d2:	ac 3e       	cpi	r26, 0xEC	; 236
     4d4:	b1 07       	cpc	r27, r17
     4d6:	d9 f7       	brne	.-10     	; 0x4ce <__do_copy_data+0xc>

000004d8 <__do_clear_bss>:
     4d8:	27 e0       	ldi	r18, 0x07	; 7
     4da:	ac ee       	ldi	r26, 0xEC	; 236
     4dc:	b2 e0       	ldi	r27, 0x02	; 2
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <.do_clear_bss_start>

000004e0 <.do_clear_bss_loop>:
     4e0:	1d 92       	st	X+, r1

000004e2 <.do_clear_bss_start>:
     4e2:	ab 33       	cpi	r26, 0x3B	; 59
     4e4:	b2 07       	cpc	r27, r18
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <.do_clear_bss_loop>

000004e8 <__do_global_ctors>:
     4e8:	12 e0       	ldi	r17, 0x02	; 2
     4ea:	cb e5       	ldi	r28, 0x5B	; 91
     4ec:	d2 e0       	ldi	r29, 0x02	; 2
     4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <__do_global_ctors+0x10>
     4f0:	21 97       	sbiw	r28, 0x01	; 1
     4f2:	fe 01       	movw	r30, r28
     4f4:	0e 94 61 24 	call	0x48c2	; 0x48c2 <__tablejump2__>
     4f8:	ca 35       	cpi	r28, 0x5A	; 90
     4fa:	d1 07       	cpc	r29, r17
     4fc:	c9 f7       	brne	.-14     	; 0x4f0 <__do_global_ctors+0x8>
     4fe:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <main>
     502:	0c 94 da 29 	jmp	0x53b4	; 0x53b4 <_exit>

00000506 <__bad_interrupt>:
     506:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000050a <_Z6Epulsev>:
  {
   PutPixel(x+r,y+c1,((0x01) & (pgm_read_byte(&FontLookup1[d][r]) >> (c+3))));
   c1=c1-1;
  }
 }
}
     50a:	ac 9a       	sbi	0x15, 4	; 21
     50c:	ac 98       	cbi	0x15, 4	; 21
     50e:	08 95       	ret

00000510 <_Z7InitLCDv>:
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	81 bb       	out	0x11, r24	; 17
     514:	a0 9a       	sbi	0x14, 0	; 20
     516:	a4 9a       	sbi	0x14, 4	; 20
     518:	a3 9a       	sbi	0x14, 3	; 20
     51a:	a2 9a       	sbi	0x14, 2	; 20
     51c:	a1 9a       	sbi	0x14, 1	; 20
     51e:	a9 98       	cbi	0x15, 1	; 21
     520:	2f e7       	ldi	r18, 0x7F	; 127
     522:	88 e3       	ldi	r24, 0x38	; 56
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	21 50       	subi	r18, 0x01	; 1
     528:	80 40       	sbci	r24, 0x00	; 0
     52a:	90 40       	sbci	r25, 0x00	; 0
     52c:	e1 f7       	brne	.-8      	; 0x526 <_Z7InitLCDv+0x16>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <_Z7InitLCDv+0x20>
     530:	00 00       	nop
     532:	a9 9a       	sbi	0x15, 1	; 21
     534:	2f e7       	ldi	r18, 0x7F	; 127
     536:	88 e3       	ldi	r24, 0x38	; 56
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	21 50       	subi	r18, 0x01	; 1
     53c:	80 40       	sbci	r24, 0x00	; 0
     53e:	90 40       	sbci	r25, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <_Z7InitLCDv+0x2a>
     542:	00 c0       	rjmp	.+0      	; 0x544 <_Z7InitLCDv+0x34>
     544:	00 00       	nop
     546:	a8 98       	cbi	0x15, 0	; 21
     548:	ab 9a       	sbi	0x15, 3	; 21
     54a:	aa 9a       	sbi	0x15, 2	; 21
     54c:	8f e3       	ldi	r24, 0x3F	; 63
     54e:	82 bb       	out	0x12, r24	; 18
     550:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     554:	80 ec       	ldi	r24, 0xC0	; 192
     556:	82 bb       	out	0x12, r24	; 18
     558:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     55c:	2f e7       	ldi	r18, 0x7F	; 127
     55e:	88 e3       	ldi	r24, 0x38	; 56
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	21 50       	subi	r18, 0x01	; 1
     564:	80 40       	sbci	r24, 0x00	; 0
     566:	90 40       	sbci	r25, 0x00	; 0
     568:	e1 f7       	brne	.-8      	; 0x562 <_Z7InitLCDv+0x52>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <_Z7InitLCDv+0x5c>
     56c:	00 00       	nop
     56e:	2f e7       	ldi	r18, 0x7F	; 127
     570:	88 e3       	ldi	r24, 0x38	; 56
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	21 50       	subi	r18, 0x01	; 1
     576:	80 40       	sbci	r24, 0x00	; 0
     578:	90 40       	sbci	r25, 0x00	; 0
     57a:	e1 f7       	brne	.-8      	; 0x574 <_Z7InitLCDv+0x64>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <_Z7InitLCDv+0x6e>
     57e:	00 00       	nop
     580:	ab 98       	cbi	0x15, 3	; 21
     582:	aa 98       	cbi	0x15, 2	; 21
     584:	08 95       	ret

00000586 <_Z8PutPixelhhc>:
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	c8 2f       	mov	r28, r24
     590:	04 2f       	mov	r16, r20
     592:	68 30       	cpi	r22, 0x08	; 8
     594:	68 f0       	brcs	.+26     	; 0x5b0 <_Z8PutPixelhhc+0x2a>
     596:	86 2f       	mov	r24, r22
     598:	88 50       	subi	r24, 0x08	; 8
     59a:	88 30       	cpi	r24, 0x08	; 8
     59c:	e8 f7       	brcc	.-6      	; 0x598 <_Z8PutPixelhhc+0x12>
     59e:	16 2f       	mov	r17, r22
     5a0:	17 70       	andi	r17, 0x07	; 7
     5a2:	d8 ef       	ldi	r29, 0xF8	; 248
     5a4:	d6 0f       	add	r29, r22
     5a6:	d6 95       	lsr	r29
     5a8:	d6 95       	lsr	r29
     5aa:	d6 95       	lsr	r29
     5ac:	df 5f       	subi	r29, 0xFF	; 255
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <_Z8PutPixelhhc+0x2e>
     5b0:	16 2f       	mov	r17, r22
     5b2:	d0 e0       	ldi	r29, 0x00	; 0
     5b4:	c0 34       	cpi	r28, 0x40	; 64
     5b6:	80 f4       	brcc	.+32     	; 0x5d8 <_Z8PutPixelhhc+0x52>
     5b8:	a8 98       	cbi	0x15, 0	; 21
     5ba:	ab 9a       	sbi	0x15, 3	; 21
     5bc:	aa 98       	cbi	0x15, 2	; 21
     5be:	d7 70       	andi	r29, 0x07	; 7
     5c0:	8d 2f       	mov	r24, r29
     5c2:	88 6b       	ori	r24, 0xB8	; 184
     5c4:	82 bb       	out	0x12, r24	; 18
     5c6:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     5ca:	cf 73       	andi	r28, 0x3F	; 63
     5cc:	8c 2f       	mov	r24, r28
     5ce:	80 64       	ori	r24, 0x40	; 64
     5d0:	82 bb       	out	0x12, r24	; 18
     5d2:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     5d6:	11 c0       	rjmp	.+34     	; 0x5fa <_Z8PutPixelhhc+0x74>
     5d8:	c0 54       	subi	r28, 0x40	; 64
     5da:	a8 98       	cbi	0x15, 0	; 21
     5dc:	ab 98       	cbi	0x15, 3	; 21
     5de:	aa 9a       	sbi	0x15, 2	; 21
     5e0:	d7 70       	andi	r29, 0x07	; 7
     5e2:	8d 2f       	mov	r24, r29
     5e4:	88 6b       	ori	r24, 0xB8	; 184
     5e6:	82 bb       	out	0x12, r24	; 18
     5e8:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     5ec:	cf 73       	andi	r28, 0x3F	; 63
     5ee:	8c 2f       	mov	r24, r28
     5f0:	80 64       	ori	r24, 0x40	; 64
     5f2:	82 bb       	out	0x12, r24	; 18
     5f4:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     5f8:	c0 5c       	subi	r28, 0xC0	; 192
     5fa:	a8 9a       	sbi	0x15, 0	; 21
     5fc:	01 30       	cpi	r16, 0x01	; 1
     5fe:	d1 f4       	brne	.+52     	; 0x634 <_Z8PutPixelhhc+0xae>
     600:	ec 2f       	mov	r30, r28
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	eb 5c       	subi	r30, 0xCB	; 203
     612:	fc 4f       	sbci	r31, 0xFC	; 252
     614:	ed 0f       	add	r30, r29
     616:	f1 1d       	adc	r31, r1
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	02 c0       	rjmp	.+4      	; 0x622 <_Z8PutPixelhhc+0x9c>
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	1a 95       	dec	r17
     624:	e2 f7       	brpl	.-8      	; 0x61e <_Z8PutPixelhhc+0x98>
     626:	90 81       	ld	r25, Z
     628:	89 2b       	or	r24, r25
     62a:	80 83       	st	Z, r24
     62c:	82 bb       	out	0x12, r24	; 18
     62e:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     632:	1a c0       	rjmp	.+52     	; 0x668 <_Z8PutPixelhhc+0xe2>
     634:	ec 2f       	mov	r30, r28
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	02 c0       	rjmp	.+4      	; 0x642 <_Z8PutPixelhhc+0xbc>
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	1a 95       	dec	r17
     644:	e2 f7       	brpl	.-8      	; 0x63e <_Z8PutPixelhhc+0xb8>
     646:	80 95       	com	r24
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	ee 0f       	add	r30, r30
     64e:	ff 1f       	adc	r31, r31
     650:	ee 0f       	add	r30, r30
     652:	ff 1f       	adc	r31, r31
     654:	eb 5c       	subi	r30, 0xCB	; 203
     656:	fc 4f       	sbci	r31, 0xFC	; 252
     658:	ed 0f       	add	r30, r29
     65a:	f1 1d       	adc	r31, r1
     65c:	90 81       	ld	r25, Z
     65e:	89 23       	and	r24, r25
     660:	80 83       	st	Z, r24
     662:	82 bb       	out	0x12, r24	; 18
     664:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	08 95       	ret

00000672 <_Z9LCD_Clearv>:
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	00 e0       	ldi	r16, 0x00	; 0
     67e:	10 e0       	ldi	r17, 0x00	; 0
     680:	f1 2c       	mov	r15, r1
     682:	d0 2f       	mov	r29, r16
     684:	cf 2d       	mov	r28, r15
     686:	ec 2f       	mov	r30, r28
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	ee 0f       	add	r30, r30
     690:	ff 1f       	adc	r31, r31
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	eb 5c       	subi	r30, 0xCB	; 203
     698:	fc 4f       	sbci	r31, 0xFC	; 252
     69a:	e0 0f       	add	r30, r16
     69c:	f1 1f       	adc	r31, r17
     69e:	10 82       	st	Z, r1
     6a0:	c0 34       	cpi	r28, 0x40	; 64
     6a2:	80 f4       	brcc	.+32     	; 0x6c4 <_Z9LCD_Clearv+0x52>
     6a4:	a8 98       	cbi	0x15, 0	; 21
     6a6:	ab 9a       	sbi	0x15, 3	; 21
     6a8:	aa 98       	cbi	0x15, 2	; 21
     6aa:	d7 70       	andi	r29, 0x07	; 7
     6ac:	8d 2f       	mov	r24, r29
     6ae:	88 6b       	ori	r24, 0xB8	; 184
     6b0:	82 bb       	out	0x12, r24	; 18
     6b2:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6b6:	cf 73       	andi	r28, 0x3F	; 63
     6b8:	8c 2f       	mov	r24, r28
     6ba:	80 64       	ori	r24, 0x40	; 64
     6bc:	82 bb       	out	0x12, r24	; 18
     6be:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <_Z9LCD_Clearv+0x74>
     6c4:	c0 54       	subi	r28, 0x40	; 64
     6c6:	a8 98       	cbi	0x15, 0	; 21
     6c8:	ab 98       	cbi	0x15, 3	; 21
     6ca:	aa 9a       	sbi	0x15, 2	; 21
     6cc:	d7 70       	andi	r29, 0x07	; 7
     6ce:	8d 2f       	mov	r24, r29
     6d0:	88 6b       	ori	r24, 0xB8	; 184
     6d2:	82 bb       	out	0x12, r24	; 18
     6d4:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6d8:	cf 73       	andi	r28, 0x3F	; 63
     6da:	8c 2f       	mov	r24, r28
     6dc:	80 64       	ori	r24, 0x40	; 64
     6de:	82 bb       	out	0x12, r24	; 18
     6e0:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6e4:	c0 5c       	subi	r28, 0xC0	; 192
     6e6:	a8 9a       	sbi	0x15, 0	; 21
     6e8:	12 ba       	out	0x12, r1	; 18
     6ea:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6ee:	cf 5f       	subi	r28, 0xFF	; 255
     6f0:	52 f6       	brpl	.-108    	; 0x686 <_Z9LCD_Clearv+0x14>
     6f2:	0f 5f       	subi	r16, 0xFF	; 255
     6f4:	1f 4f       	sbci	r17, 0xFF	; 255
     6f6:	08 30       	cpi	r16, 0x08	; 8
     6f8:	11 05       	cpc	r17, r1
     6fa:	19 f6       	brne	.-122    	; 0x682 <_Z9LCD_Clearv+0x10>
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	08 95       	ret

00000708 <_Z4lineccccc>:
     708:	7f 92       	push	r7
     70a:	8f 92       	push	r8
     70c:	9f 92       	push	r9
     70e:	af 92       	push	r10
     710:	bf 92       	push	r11
     712:	cf 92       	push	r12
     714:	df 92       	push	r13
     716:	ef 92       	push	r14
     718:	ff 92       	push	r15
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	d8 2f       	mov	r29, r24
     724:	c6 2f       	mov	r28, r22
     726:	74 2e       	mov	r7, r20
     728:	82 2e       	mov	r8, r18
     72a:	a2 2e       	mov	r10, r18
     72c:	b1 2c       	mov	r11, r1
     72e:	a6 1a       	sub	r10, r22
     730:	b1 08       	sbc	r11, r1
     732:	c4 2e       	mov	r12, r20
     734:	d1 2c       	mov	r13, r1
     736:	c8 1a       	sub	r12, r24
     738:	d1 08       	sbc	r13, r1
     73a:	bb 20       	and	r11, r11
     73c:	34 f4       	brge	.+12     	; 0x74a <_Z4lineccccc+0x42>
     73e:	b1 94       	neg	r11
     740:	a1 94       	neg	r10
     742:	b1 08       	sbc	r11, r1
     744:	99 24       	eor	r9, r9
     746:	9a 94       	dec	r9
     748:	02 c0       	rjmp	.+4      	; 0x74e <_Z4lineccccc+0x46>
     74a:	99 24       	eor	r9, r9
     74c:	93 94       	inc	r9
     74e:	dd 20       	and	r13, r13
     750:	2c f4       	brge	.+10     	; 0x75c <_Z4lineccccc+0x54>
     752:	d1 94       	neg	r13
     754:	c1 94       	neg	r12
     756:	d1 08       	sbc	r13, r1
     758:	1f ef       	ldi	r17, 0xFF	; 255
     75a:	01 c0       	rjmp	.+2      	; 0x75e <_Z4lineccccc+0x56>
     75c:	11 e0       	ldi	r17, 0x01	; 1
     75e:	aa 0c       	add	r10, r10
     760:	bb 1c       	adc	r11, r11
     762:	cc 0c       	add	r12, r12
     764:	dd 1c       	adc	r13, r13
     766:	40 2f       	mov	r20, r16
     768:	6c 2f       	mov	r22, r28
     76a:	8d 2f       	mov	r24, r29
     76c:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
     770:	ac 14       	cp	r10, r12
     772:	bd 04       	cpc	r11, r13
     774:	c4 f4       	brge	.+48     	; 0x7a6 <_Z4lineccccc+0x9e>
     776:	c6 01       	movw	r24, r12
     778:	95 95       	asr	r25
     77a:	87 95       	ror	r24
     77c:	75 01       	movw	r14, r10
     77e:	e8 1a       	sub	r14, r24
     780:	f9 0a       	sbc	r15, r25
     782:	7d 16       	cp	r7, r29
     784:	39 f1       	breq	.+78     	; 0x7d4 <_Z4lineccccc+0xcc>
     786:	ff 20       	and	r15, r15
     788:	1c f0       	brlt	.+6      	; 0x790 <_Z4lineccccc+0x88>
     78a:	c9 0d       	add	r28, r9
     78c:	ec 18       	sub	r14, r12
     78e:	fd 08       	sbc	r15, r13
     790:	d1 0f       	add	r29, r17
     792:	ea 0c       	add	r14, r10
     794:	fb 1c       	adc	r15, r11
     796:	40 2f       	mov	r20, r16
     798:	6c 2f       	mov	r22, r28
     79a:	8d 2f       	mov	r24, r29
     79c:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
     7a0:	d7 11       	cpse	r29, r7
     7a2:	f1 cf       	rjmp	.-30     	; 0x786 <_Z4lineccccc+0x7e>
     7a4:	17 c0       	rjmp	.+46     	; 0x7d4 <_Z4lineccccc+0xcc>
     7a6:	c5 01       	movw	r24, r10
     7a8:	95 95       	asr	r25
     7aa:	87 95       	ror	r24
     7ac:	76 01       	movw	r14, r12
     7ae:	e8 1a       	sub	r14, r24
     7b0:	f9 0a       	sbc	r15, r25
     7b2:	8c 16       	cp	r8, r28
     7b4:	79 f0       	breq	.+30     	; 0x7d4 <_Z4lineccccc+0xcc>
     7b6:	ff 20       	and	r15, r15
     7b8:	1c f0       	brlt	.+6      	; 0x7c0 <_Z4lineccccc+0xb8>
     7ba:	d1 0f       	add	r29, r17
     7bc:	ea 18       	sub	r14, r10
     7be:	fb 08       	sbc	r15, r11
     7c0:	c9 0d       	add	r28, r9
     7c2:	ec 0c       	add	r14, r12
     7c4:	fd 1c       	adc	r15, r13
     7c6:	40 2f       	mov	r20, r16
     7c8:	6c 2f       	mov	r22, r28
     7ca:	8d 2f       	mov	r24, r29
     7cc:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
     7d0:	c8 11       	cpse	r28, r8
     7d2:	f1 cf       	rjmp	.-30     	; 0x7b6 <_Z4lineccccc+0xae>
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	9f 90       	pop	r9
     7ea:	8f 90       	pop	r8
     7ec:	7f 90       	pop	r7
     7ee:	08 95       	ret

000007f0 <_Z11DisplayCharhhc>:
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	d6 2e       	mov	r13, r22
     802:	40 52       	subi	r20, 0x20	; 32
     804:	24 2f       	mov	r18, r20
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	89 01       	movw	r16, r18
     80a:	00 0f       	add	r16, r16
     80c:	11 1f       	adc	r17, r17
     80e:	00 0f       	add	r16, r16
     810:	11 1f       	adc	r17, r17
     812:	02 0f       	add	r16, r18
     814:	13 1f       	adc	r17, r19
     816:	0d 52       	subi	r16, 0x2D	; 45
     818:	1d 4f       	sbci	r17, 0xFD	; 253
     81a:	0f 2e       	mov	r0, r31
     81c:	f5 e0       	ldi	r31, 0x05	; 5
     81e:	cf 2e       	mov	r12, r31
     820:	f0 2d       	mov	r31, r0
     822:	c8 0e       	add	r12, r24
     824:	e8 2e       	mov	r14, r24
     826:	fd 2c       	mov	r15, r13
     828:	c0 e0       	ldi	r28, 0x00	; 0
     82a:	d0 e0       	ldi	r29, 0x00	; 0
     82c:	f8 01       	movw	r30, r16
     82e:	44 91       	lpm	r20, Z
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	0c 2e       	mov	r0, r28
     834:	02 c0       	rjmp	.+4      	; 0x83a <_Z11DisplayCharhhc+0x4a>
     836:	55 95       	asr	r21
     838:	47 95       	ror	r20
     83a:	0a 94       	dec	r0
     83c:	e2 f7       	brpl	.-8      	; 0x836 <_Z11DisplayCharhhc+0x46>
     83e:	41 70       	andi	r20, 0x01	; 1
     840:	6f 2d       	mov	r22, r15
     842:	8e 2d       	mov	r24, r14
     844:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
     848:	21 96       	adiw	r28, 0x01	; 1
     84a:	f3 94       	inc	r15
     84c:	c8 30       	cpi	r28, 0x08	; 8
     84e:	d1 05       	cpc	r29, r1
     850:	69 f7       	brne	.-38     	; 0x82c <_Z11DisplayCharhhc+0x3c>
     852:	0f 5f       	subi	r16, 0xFF	; 255
     854:	1f 4f       	sbci	r17, 0xFF	; 255
     856:	e3 94       	inc	r14
     858:	ce 10       	cpse	r12, r14
     85a:	e5 cf       	rjmp	.-54     	; 0x826 <_Z11DisplayCharhhc+0x36>
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	08 95       	ret

0000086e <_Z11DisplayTexthhPc>:

/*********************************************************************************/
/*         Display Text (5x7)                       */
/*********************************************************************************/
void DisplayText(unsigned char x, unsigned char y, char d[21])
{
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
int i;
int j;
j=strlen(d);
     87a:	fa 01       	movw	r30, r20
     87c:	01 90       	ld	r0, Z+
     87e:	00 20       	and	r0, r0
     880:	e9 f7       	brne	.-6      	; 0x87c <_Z11DisplayTexthhPc+0xe>
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	e4 1b       	sub	r30, r20
     886:	f5 0b       	sbc	r31, r21
 for (i=0;i<j;i++)
     888:	1e 16       	cp	r1, r30
     88a:	1f 06       	cpc	r1, r31
     88c:	8c f4       	brge	.+34     	; 0x8b0 <_Z11DisplayTexthhPc+0x42>
     88e:	d6 2f       	mov	r29, r22
     890:	8a 01       	movw	r16, r20
     892:	7a 01       	movw	r14, r20
     894:	ee 0e       	add	r14, r30
     896:	ff 1e       	adc	r15, r31
     898:	c8 2f       	mov	r28, r24
 {
  DisplayChar((i*6)+x,y,d[i]);
     89a:	f8 01       	movw	r30, r16
     89c:	41 91       	ld	r20, Z+
     89e:	8f 01       	movw	r16, r30
     8a0:	6d 2f       	mov	r22, r29
     8a2:	8c 2f       	mov	r24, r28
     8a4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z11DisplayCharhhc>
     8a8:	ca 5f       	subi	r28, 0xFA	; 250
void DisplayText(unsigned char x, unsigned char y, char d[21])
{
int i;
int j;
j=strlen(d);
 for (i=0;i<j;i++)
     8aa:	0e 15       	cp	r16, r14
     8ac:	1f 05       	cpc	r17, r15
     8ae:	a9 f7       	brne	.-22     	; 0x89a <_Z11DisplayTexthhPc+0x2c>
 {
  DisplayChar((i*6)+x,y,d[i]);
 } 
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	08 95       	ret

000008be <_ZN6parserC1Ev>:
};
// Parser constructor.
parser::parser()
{
    int i;
    exp_ptr = NULL;
     8be:	fc 01       	movw	r30, r24
     8c0:	11 82       	std	Z+1, r1	; 0x01
     8c2:	10 82       	st	Z, r1
     8c4:	72 96       	adiw	r30, 0x12	; 18
     8c6:	9c 01       	movw	r18, r24
     8c8:	26 5c       	subi	r18, 0xC6	; 198
     8ca:	3f 4f       	sbci	r19, 0xFF	; 255
    for (i = 0; i < NUMVARS; i++)
        vars[i] = 0.0;
     8cc:	11 92       	st	Z+, r1
     8ce:	11 92       	st	Z+, r1
     8d0:	11 92       	st	Z+, r1
     8d2:	11 92       	st	Z+, r1
// Parser constructor.
parser::parser()
{
    int i;
    exp_ptr = NULL;
    for (i = 0; i < NUMVARS; i++)
     8d4:	e2 17       	cp	r30, r18
     8d6:	f3 07       	cpc	r31, r19
     8d8:	c9 f7       	brne	.-14     	; 0x8cc <_ZN6parserC1Ev+0xe>
        vars[i] = 0.0;
    errormsg[0] = '\0';
     8da:	fc 01       	movw	r30, r24
     8dc:	12 ae       	std	Z+58, r1	; 0x3a
     8de:	08 95       	ret

000008e0 <_ZN6parser9get_tokenEv>:
            strcpy(errormsg, "Syntax Error");
        }
}
// Obtain the next token.
void parser::get_token()
{
     8e0:	af 92       	push	r10
     8e2:	bf 92       	push	r11
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	6c 01       	movw	r12, r24
    register char *temp;
    tok_type = 0;
     8f6:	dc 01       	movw	r26, r24
     8f8:	51 96       	adiw	r26, 0x11	; 17
     8fa:	1c 92       	st	X, r1
     8fc:	51 97       	sbiw	r26, 0x11	; 17
    temp = token;
    *temp = '\0';
     8fe:	12 96       	adiw	r26, 0x02	; 2
     900:	1c 92       	st	X, r1
     902:	12 97       	sbiw	r26, 0x02	; 2
    if (!*exp_ptr)  // at end of expression
     904:	ed 91       	ld	r30, X+
     906:	fc 91       	ld	r31, X
     908:	80 81       	ld	r24, Z
     90a:	88 23       	and	r24, r24
     90c:	09 f4       	brne	.+2      	; 0x910 <_ZN6parser9get_tokenEv+0x30>
     90e:	a8 c0       	rjmp	.+336    	; 0xa60 <_ZN6parser9get_tokenEv+0x180>
        return;
    while (isspace(*exp_ptr))  // skip over white space
     910:	f6 01       	movw	r30, r12
     912:	c0 81       	ld	r28, Z
     914:	d1 81       	ldd	r29, Z+1	; 0x01
     916:	f8 80       	ld	r15, Y
     918:	0f 2d       	mov	r16, r15
     91a:	10 e0       	ldi	r17, 0x00	; 0
     91c:	c8 01       	movw	r24, r16
     91e:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <isspace>
     922:	89 2b       	or	r24, r25
     924:	29 f0       	breq	.+10     	; 0x930 <_ZN6parser9get_tokenEv+0x50>
        ++exp_ptr;
     926:	21 96       	adiw	r28, 0x01	; 1
     928:	d6 01       	movw	r26, r12
     92a:	cd 93       	st	X+, r28
     92c:	dc 93       	st	X, r29
    tok_type = 0;
    temp = token;
    *temp = '\0';
    if (!*exp_ptr)  // at end of expression
        return;
    while (isspace(*exp_ptr))  // skip over white space
     92e:	f0 cf       	rjmp	.-32     	; 0x910 <_ZN6parser9get_tokenEv+0x30>
        ++exp_ptr;
    if (strchr("+-*/%^=()", *exp_ptr))
     930:	b8 01       	movw	r22, r16
     932:	84 e0       	ldi	r24, 0x04	; 4
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <strchr>
     93a:	89 2b       	or	r24, r25
     93c:	89 f0       	breq	.+34     	; 0x960 <_ZN6parser9get_tokenEv+0x80>
    {
        tok_type = DELIMITER;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	f6 01       	movw	r30, r12
     942:	81 8b       	std	Z+17, r24	; 0x11
        *temp++ = *exp_ptr++;  // advance to next char
     944:	56 01       	movw	r10, r12
     946:	f3 e0       	ldi	r31, 0x03	; 3
     948:	af 0e       	add	r10, r31
     94a:	b1 1c       	adc	r11, r1
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	d6 01       	movw	r26, r12
     952:	11 96       	adiw	r26, 0x01	; 1
     954:	9c 93       	st	X, r25
     956:	8e 93       	st	-X, r24
     958:	88 81       	ld	r24, Y
     95a:	12 96       	adiw	r26, 0x02	; 2
     95c:	8c 93       	st	X, r24
     95e:	6b c0       	rjmp	.+214    	; 0xa36 <_ZN6parser9get_tokenEv+0x156>
// Obtain the next token.
void parser::get_token()
{
    register char *temp;
    tok_type = 0;
    temp = token;
     960:	56 01       	movw	r10, r12
     962:	b2 e0       	ldi	r27, 0x02	; 2
     964:	ab 0e       	add	r10, r27
     966:	b1 1c       	adc	r11, r1
    if (strchr("+-*/%^=()", *exp_ptr))
    {
        tok_type = DELIMITER;
        *temp++ = *exp_ptr++;  // advance to next char
    }
    else if (isalpha(*exp_ptr))
     968:	c8 01       	movw	r24, r16
     96a:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <isalpha>
     96e:	89 2b       	or	r24, r25
     970:	b9 f1       	breq	.+110    	; 0x9e0 <_ZN6parser9get_tokenEv+0x100>
     972:	75 01       	movw	r14, r10
     974:	57 01       	movw	r10, r14
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     976:	f6 01       	movw	r30, r12
     978:	c0 81       	ld	r28, Z
     97a:	d1 81       	ldd	r29, Z+1	; 0x01
     97c:	18 81       	ld	r17, Y
     97e:	61 2f       	mov	r22, r17
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	8e e0       	ldi	r24, 0x0E	; 14
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <strchr>
     98a:	89 2b       	or	r24, r25
     98c:	89 f4       	brne	.+34     	; 0x9b0 <_ZN6parser9get_tokenEv+0xd0>
     98e:	11 23       	and	r17, r17
     990:	79 f0       	breq	.+30     	; 0x9b0 <_ZN6parser9get_tokenEv+0xd0>
            *temp++ = toupper(*exp_ptr++);
     992:	ce 01       	movw	r24, r28
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	d6 01       	movw	r26, r12
     998:	8d 93       	st	X+, r24
     99a:	9c 93       	st	X, r25
     99c:	88 81       	ld	r24, Y
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <toupper>
     9a4:	f7 01       	movw	r30, r14
     9a6:	80 83       	st	Z, r24
     9a8:	ff ef       	ldi	r31, 0xFF	; 255
     9aa:	ef 1a       	sub	r14, r31
     9ac:	ff 0a       	sbc	r15, r31
        tok_type = DELIMITER;
        *temp++ = *exp_ptr++;  // advance to next char
    }
    else if (isalpha(*exp_ptr))
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     9ae:	e2 cf       	rjmp	.-60     	; 0x974 <_ZN6parser9get_tokenEv+0x94>
            *temp++ = toupper(*exp_ptr++);
        while (isspace(*exp_ptr))  // skip over white space
     9b0:	d6 01       	movw	r26, r12
     9b2:	cd 91       	ld	r28, X+
     9b4:	dc 91       	ld	r29, X
     9b6:	18 81       	ld	r17, Y
     9b8:	81 2f       	mov	r24, r17
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <isspace>
     9c0:	89 2b       	or	r24, r25
     9c2:	29 f0       	breq	.+10     	; 0x9ce <_ZN6parser9get_tokenEv+0xee>
            ++exp_ptr;
     9c4:	21 96       	adiw	r28, 0x01	; 1
     9c6:	f6 01       	movw	r30, r12
     9c8:	d1 83       	std	Z+1, r29	; 0x01
     9ca:	c0 83       	st	Z, r28
    }
    else if (isalpha(*exp_ptr))
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
            *temp++ = toupper(*exp_ptr++);
        while (isspace(*exp_ptr))  // skip over white space
     9cc:	f1 cf       	rjmp	.-30     	; 0x9b0 <_ZN6parser9get_tokenEv+0xd0>
            ++exp_ptr;
        tok_type = (*exp_ptr == '(') ? FUNCTION : VARIABLE;
     9ce:	18 32       	cpi	r17, 0x28	; 40
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <_ZN6parser9get_tokenEv+0xf6>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <_ZN6parser9get_tokenEv+0xf8>
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	d6 01       	movw	r26, r12
     9da:	51 96       	adiw	r26, 0x11	; 17
     9dc:	8c 93       	st	X, r24
     9de:	2b c0       	rjmp	.+86     	; 0xa36 <_ZN6parser9get_tokenEv+0x156>
    }
    else if (isdigit(*exp_ptr) || *exp_ptr == '.')
     9e0:	8f 2d       	mov	r24, r15
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	c0 97       	sbiw	r24, 0x30	; 48
     9e6:	0a 97       	sbiw	r24, 0x0a	; 10
     9e8:	18 f0       	brcs	.+6      	; 0x9f0 <_ZN6parser9get_tokenEv+0x110>
     9ea:	be e2       	ldi	r27, 0x2E	; 46
     9ec:	fb 12       	cpse	r15, r27
     9ee:	23 c0       	rjmp	.+70     	; 0xa36 <_ZN6parser9get_tokenEv+0x156>
     9f0:	75 01       	movw	r14, r10
     9f2:	57 01       	movw	r10, r14
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     9f4:	f6 01       	movw	r30, r12
     9f6:	c0 81       	ld	r28, Z
     9f8:	d1 81       	ldd	r29, Z+1	; 0x01
     9fa:	18 81       	ld	r17, Y
     9fc:	61 2f       	mov	r22, r17
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	8e e0       	ldi	r24, 0x0E	; 14
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <strchr>
     a08:	89 2b       	or	r24, r25
     a0a:	89 f4       	brne	.+34     	; 0xa2e <_ZN6parser9get_tokenEv+0x14e>
     a0c:	11 23       	and	r17, r17
     a0e:	79 f0       	breq	.+30     	; 0xa2e <_ZN6parser9get_tokenEv+0x14e>
            *temp++ = toupper(*exp_ptr++);
     a10:	ce 01       	movw	r24, r28
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	d6 01       	movw	r26, r12
     a16:	8d 93       	st	X+, r24
     a18:	9c 93       	st	X, r25
     a1a:	88 81       	ld	r24, Y
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <toupper>
     a22:	f7 01       	movw	r30, r14
     a24:	80 83       	st	Z, r24
     a26:	ff ef       	ldi	r31, 0xFF	; 255
     a28:	ef 1a       	sub	r14, r31
     a2a:	ff 0a       	sbc	r15, r31
            ++exp_ptr;
        tok_type = (*exp_ptr == '(') ? FUNCTION : VARIABLE;
    }
    else if (isdigit(*exp_ptr) || *exp_ptr == '.')
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     a2c:	e2 cf       	rjmp	.-60     	; 0x9f2 <_ZN6parser9get_tokenEv+0x112>
            *temp++ = toupper(*exp_ptr++);
        tok_type = NUMBER;
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	d6 01       	movw	r26, r12
     a32:	51 96       	adiw	r26, 0x11	; 17
     a34:	8c 93       	st	X, r24
    }
    *temp = '\0';
     a36:	f5 01       	movw	r30, r10
     a38:	10 82       	st	Z, r1
    if ((tok_type == VARIABLE) && (token[1]))
     a3a:	d6 01       	movw	r26, r12
     a3c:	51 96       	adiw	r26, 0x11	; 17
     a3e:	8c 91       	ld	r24, X
     a40:	51 97       	sbiw	r26, 0x11	; 17
     a42:	82 30       	cpi	r24, 0x02	; 2
     a44:	69 f4       	brne	.+26     	; 0xa60 <_ZN6parser9get_tokenEv+0x180>
     a46:	13 96       	adiw	r26, 0x03	; 3
     a48:	8c 91       	ld	r24, X
     a4a:	13 97       	sbiw	r26, 0x03	; 3
     a4c:	88 23       	and	r24, r24
     a4e:	41 f0       	breq	.+16     	; 0xa60 <_ZN6parser9get_tokenEv+0x180>
        strcpy(errormsg, "Only first letter of variables is considered");
     a50:	da 96       	adiw	r26, 0x3a	; 58
     a52:	8d e2       	ldi	r24, 0x2D	; 45
     a54:	eb e1       	ldi	r30, 0x1B	; 27
     a56:	f1 e0       	ldi	r31, 0x01	; 1
     a58:	01 90       	ld	r0, Z+
     a5a:	0d 92       	st	X+, r0
     a5c:	8a 95       	dec	r24
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <_ZN6parser9get_tokenEv+0x178>
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	08 95       	ret

00000a76 <_ZN6parser9eval_exp2ERd>:
    }
    eval_exp2(result);
}
// Add or subtract two terms.
void parser::eval_exp2(double &result)
{
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	00 d0       	rcall	.+0      	; 0xa84 <_ZN6parser9eval_exp2ERd+0xe>
     a84:	00 d0       	rcall	.+0      	; 0xa86 <_ZN6parser9eval_exp2ERd+0x10>
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	8c 01       	movw	r16, r24
     a8c:	7b 01       	movw	r14, r22
    register char op;
    double temp;
    eval_exp3(result);
     a8e:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN6parser9eval_exp3ERd>
    while ((op = *token) == '+' || op == '-')
     a92:	f8 01       	movw	r30, r16
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	8b 32       	cpi	r24, 0x2B	; 43
     a98:	e1 f0       	breq	.+56     	; 0xad2 <_ZN6parser9eval_exp2ERd+0x5c>
     a9a:	8d 32       	cpi	r24, 0x2D	; 45
     a9c:	a1 f5       	brne	.+104    	; 0xb06 <_ZN6parser9eval_exp2ERd+0x90>
    {
        get_token();
     a9e:	c8 01       	movw	r24, r16
     aa0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp3(temp);
     aa4:	be 01       	movw	r22, r28
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	c8 01       	movw	r24, r16
     aac:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN6parser9eval_exp3ERd>
        switch (op)
        {
        case '-':
            result = result - temp;
     ab0:	29 81       	ldd	r18, Y+1	; 0x01
     ab2:	3a 81       	ldd	r19, Y+2	; 0x02
     ab4:	4b 81       	ldd	r20, Y+3	; 0x03
     ab6:	5c 81       	ldd	r21, Y+4	; 0x04
     ab8:	f7 01       	movw	r30, r14
     aba:	60 81       	ld	r22, Z
     abc:	71 81       	ldd	r23, Z+1	; 0x01
     abe:	82 81       	ldd	r24, Z+2	; 0x02
     ac0:	93 81       	ldd	r25, Z+3	; 0x03
     ac2:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
     ac6:	f7 01       	movw	r30, r14
     ac8:	60 83       	st	Z, r22
     aca:	71 83       	std	Z+1, r23	; 0x01
     acc:	82 83       	std	Z+2, r24	; 0x02
     ace:	93 83       	std	Z+3, r25	; 0x03
            break;
     ad0:	e0 cf       	rjmp	.-64     	; 0xa92 <_ZN6parser9eval_exp2ERd+0x1c>
    register char op;
    double temp;
    eval_exp3(result);
    while ((op = *token) == '+' || op == '-')
    {
        get_token();
     ad2:	c8 01       	movw	r24, r16
     ad4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp3(temp);
     ad8:	be 01       	movw	r22, r28
     ada:	6f 5f       	subi	r22, 0xFF	; 255
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	c8 01       	movw	r24, r16
     ae0:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN6parser9eval_exp3ERd>
        {
        case '-':
            result = result - temp;
            break;
        case '+':
            result = result + temp;
     ae4:	29 81       	ldd	r18, Y+1	; 0x01
     ae6:	3a 81       	ldd	r19, Y+2	; 0x02
     ae8:	4b 81       	ldd	r20, Y+3	; 0x03
     aea:	5c 81       	ldd	r21, Y+4	; 0x04
     aec:	f7 01       	movw	r30, r14
     aee:	60 81       	ld	r22, Z
     af0:	71 81       	ldd	r23, Z+1	; 0x01
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
     afa:	f7 01       	movw	r30, r14
     afc:	60 83       	st	Z, r22
     afe:	71 83       	std	Z+1, r23	; 0x01
     b00:	82 83       	std	Z+2, r24	; 0x02
     b02:	93 83       	std	Z+3, r25	; 0x03
            break;
     b04:	c6 cf       	rjmp	.-116    	; 0xa92 <_ZN6parser9eval_exp2ERd+0x1c>
        }
    }
}
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	08 95       	ret

00000b1c <_ZN6parser9eval_exp6ERd>:
    if (op == '-')
        result = -result;
}
// Process a function, a parenthesized expression, a value or a variable
void parser::eval_exp6(double &result)
{
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	2f 97       	sbiw	r28, 0x0f	; 15
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	8c 01       	movw	r16, r24
     b3c:	7b 01       	movw	r14, r22
    bool isfunc = (tok_type == FUNCTION);
     b3e:	dc 01       	movw	r26, r24
     b40:	51 96       	adiw	r26, 0x11	; 17
     b42:	dc 90       	ld	r13, X
    char temp_token[15];
    if (isfunc)
     b44:	b4 e0       	ldi	r27, 0x04	; 4
     b46:	db 12       	cpse	r13, r27
     b48:	0a c0       	rjmp	.+20     	; 0xb5e <_ZN6parser9eval_exp6ERd+0x42>
    {
        strcpy(temp_token, token);
     b4a:	bc 01       	movw	r22, r24
     b4c:	6e 5f       	subi	r22, 0xFE	; 254
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 e7 25 	call	0x4bce	; 0x4bce <strcpy>
        get_token();
     b58:	c8 01       	movw	r24, r16
     b5a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
    }
    if ((*token == '('))
     b5e:	d8 01       	movw	r26, r16
     b60:	12 96       	adiw	r26, 0x02	; 2
     b62:	ec 91       	ld	r30, X
     b64:	e8 32       	cpi	r30, 0x28	; 40
     b66:	09 f0       	breq	.+2      	; 0xb6a <_ZN6parser9eval_exp6ERd+0x4e>
     b68:	b5 c1       	rjmp	.+874    	; 0xed4 <_ZN6parser9eval_exp6ERd+0x3b8>
    {
        get_token();
     b6a:	c8 01       	movw	r24, r16
     b6c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp2(result);
     b70:	b7 01       	movw	r22, r14
     b72:	c8 01       	movw	r24, r16
     b74:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN6parser9eval_exp2ERd>
        if (*token != ')')
     b78:	f8 01       	movw	r30, r16
     b7a:	82 81       	ldd	r24, Z+2	; 0x02
     b7c:	89 32       	cpi	r24, 0x29	; 41
     b7e:	49 f0       	breq	.+18     	; 0xb92 <_ZN6parser9eval_exp6ERd+0x76>
            strcpy(errormsg, "Unbalanced Parentheses");
     b80:	87 e1       	ldi	r24, 0x17	; 23
     b82:	e8 e4       	ldi	r30, 0x48	; 72
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	d8 01       	movw	r26, r16
     b88:	da 96       	adiw	r26, 0x3a	; 58
     b8a:	01 90       	ld	r0, Z+
     b8c:	0d 92       	st	X+, r0
     b8e:	8a 95       	dec	r24
     b90:	e1 f7       	brne	.-8      	; 0xb8a <_ZN6parser9eval_exp6ERd+0x6e>
        if (isfunc)
     b92:	f4 e0       	ldi	r31, 0x04	; 4
     b94:	df 12       	cpse	r13, r31
     b96:	9a c1       	rjmp	.+820    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
        {
            if (!strcmp(temp_token, "SIN"))
     b98:	60 e6       	ldi	r22, 0x60	; 96
     b9a:	71 e0       	ldi	r23, 0x01	; 1
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     ba4:	89 2b       	or	r24, r25
     ba6:	69 f4       	brne	.+26     	; 0xbc2 <_ZN6parser9eval_exp6ERd+0xa6>
                result = sin(result);
     ba8:	d7 01       	movw	r26, r14
     baa:	6d 91       	ld	r22, X+
     bac:	7d 91       	ld	r23, X+
     bae:	8d 91       	ld	r24, X+
     bb0:	9c 91       	ld	r25, X
     bb2:	0e 94 af 23 	call	0x475e	; 0x475e <sin>
     bb6:	f7 01       	movw	r30, r14
     bb8:	60 83       	st	Z, r22
     bba:	71 83       	std	Z+1, r23	; 0x01
     bbc:	82 83       	std	Z+2, r24	; 0x02
     bbe:	93 83       	std	Z+3, r25	; 0x03
     bc0:	85 c1       	rjmp	.+778    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "COS"))
     bc2:	65 e6       	ldi	r22, 0x65	; 101
     bc4:	71 e0       	ldi	r23, 0x01	; 1
     bc6:	ce 01       	movw	r24, r28
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     bce:	89 2b       	or	r24, r25
     bd0:	69 f4       	brne	.+26     	; 0xbec <_ZN6parser9eval_exp6ERd+0xd0>
                result = cos(result);
     bd2:	d7 01       	movw	r26, r14
     bd4:	6d 91       	ld	r22, X+
     bd6:	7d 91       	ld	r23, X+
     bd8:	8d 91       	ld	r24, X+
     bda:	9c 91       	ld	r25, X
     bdc:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <cos>
     be0:	f7 01       	movw	r30, r14
     be2:	60 83       	st	Z, r22
     be4:	71 83       	std	Z+1, r23	; 0x01
     be6:	82 83       	std	Z+2, r24	; 0x02
     be8:	93 83       	std	Z+3, r25	; 0x03
     bea:	70 c1       	rjmp	.+736    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "TAN"))
     bec:	6a e6       	ldi	r22, 0x6A	; 106
     bee:	71 e0       	ldi	r23, 0x01	; 1
     bf0:	ce 01       	movw	r24, r28
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     bf8:	89 2b       	or	r24, r25
     bfa:	69 f4       	brne	.+26     	; 0xc16 <_ZN6parser9eval_exp6ERd+0xfa>
                result = tan(result);
     bfc:	d7 01       	movw	r26, r14
     bfe:	6d 91       	ld	r22, X+
     c00:	7d 91       	ld	r23, X+
     c02:	8d 91       	ld	r24, X+
     c04:	9c 91       	ld	r25, X
     c06:	0e 94 35 24 	call	0x486a	; 0x486a <tan>
     c0a:	f7 01       	movw	r30, r14
     c0c:	60 83       	st	Z, r22
     c0e:	71 83       	std	Z+1, r23	; 0x01
     c10:	82 83       	std	Z+2, r24	; 0x02
     c12:	93 83       	std	Z+3, r25	; 0x03
     c14:	5b c1       	rjmp	.+694    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ASIN"))
     c16:	6f e5       	ldi	r22, 0x5F	; 95
     c18:	71 e0       	ldi	r23, 0x01	; 1
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     c22:	89 2b       	or	r24, r25
     c24:	69 f4       	brne	.+26     	; 0xc40 <_ZN6parser9eval_exp6ERd+0x124>
                result = asin(result);
     c26:	d7 01       	movw	r26, r14
     c28:	6d 91       	ld	r22, X+
     c2a:	7d 91       	ld	r23, X+
     c2c:	8d 91       	ld	r24, X+
     c2e:	9c 91       	ld	r25, X
     c30:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <asin>
     c34:	f7 01       	movw	r30, r14
     c36:	60 83       	st	Z, r22
     c38:	71 83       	std	Z+1, r23	; 0x01
     c3a:	82 83       	std	Z+2, r24	; 0x02
     c3c:	93 83       	std	Z+3, r25	; 0x03
     c3e:	46 c1       	rjmp	.+652    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ACOS"))
     c40:	64 e6       	ldi	r22, 0x64	; 100
     c42:	71 e0       	ldi	r23, 0x01	; 1
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     c4c:	89 2b       	or	r24, r25
     c4e:	69 f4       	brne	.+26     	; 0xc6a <_ZN6parser9eval_exp6ERd+0x14e>
                result = acos(result);
     c50:	d7 01       	movw	r26, r14
     c52:	6d 91       	ld	r22, X+
     c54:	7d 91       	ld	r23, X+
     c56:	8d 91       	ld	r24, X+
     c58:	9c 91       	ld	r25, X
     c5a:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <acos>
     c5e:	f7 01       	movw	r30, r14
     c60:	60 83       	st	Z, r22
     c62:	71 83       	std	Z+1, r23	; 0x01
     c64:	82 83       	std	Z+2, r24	; 0x02
     c66:	93 83       	std	Z+3, r25	; 0x03
     c68:	31 c1       	rjmp	.+610    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ATAN"))
     c6a:	69 e6       	ldi	r22, 0x69	; 105
     c6c:	71 e0       	ldi	r23, 0x01	; 1
     c6e:	ce 01       	movw	r24, r28
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     c76:	89 2b       	or	r24, r25
     c78:	69 f4       	brne	.+26     	; 0xc94 <_ZN6parser9eval_exp6ERd+0x178>
                result = atan(result);
     c7a:	d7 01       	movw	r26, r14
     c7c:	6d 91       	ld	r22, X+
     c7e:	7d 91       	ld	r23, X+
     c80:	8d 91       	ld	r24, X+
     c82:	9c 91       	ld	r25, X
     c84:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <atan>
     c88:	f7 01       	movw	r30, r14
     c8a:	60 83       	st	Z, r22
     c8c:	71 83       	std	Z+1, r23	; 0x01
     c8e:	82 83       	std	Z+2, r24	; 0x02
     c90:	93 83       	std	Z+3, r25	; 0x03
     c92:	1c c1       	rjmp	.+568    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "SINH"))
     c94:	6f e6       	ldi	r22, 0x6F	; 111
     c96:	71 e0       	ldi	r23, 0x01	; 1
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     ca0:	89 2b       	or	r24, r25
     ca2:	69 f4       	brne	.+26     	; 0xcbe <_ZN6parser9eval_exp6ERd+0x1a2>
                result = sinh(result);
     ca4:	d7 01       	movw	r26, r14
     ca6:	6d 91       	ld	r22, X+
     ca8:	7d 91       	ld	r23, X+
     caa:	8d 91       	ld	r24, X+
     cac:	9c 91       	ld	r25, X
     cae:	0e 94 89 23 	call	0x4712	; 0x4712 <sinh>
     cb2:	f7 01       	movw	r30, r14
     cb4:	60 83       	st	Z, r22
     cb6:	71 83       	std	Z+1, r23	; 0x01
     cb8:	82 83       	std	Z+2, r24	; 0x02
     cba:	93 83       	std	Z+3, r25	; 0x03
     cbc:	07 c1       	rjmp	.+526    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "COSH"))
     cbe:	65 e7       	ldi	r22, 0x75	; 117
     cc0:	71 e0       	ldi	r23, 0x01	; 1
     cc2:	ce 01       	movw	r24, r28
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     cca:	89 2b       	or	r24, r25
     ccc:	69 f4       	brne	.+26     	; 0xce8 <_ZN6parser9eval_exp6ERd+0x1cc>
                result = cosh(result);
     cce:	d7 01       	movw	r26, r14
     cd0:	6d 91       	ld	r22, X+
     cd2:	7d 91       	ld	r23, X+
     cd4:	8d 91       	ld	r24, X+
     cd6:	9c 91       	ld	r25, X
     cd8:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <cosh>
     cdc:	f7 01       	movw	r30, r14
     cde:	60 83       	st	Z, r22
     ce0:	71 83       	std	Z+1, r23	; 0x01
     ce2:	82 83       	std	Z+2, r24	; 0x02
     ce4:	93 83       	std	Z+3, r25	; 0x03
     ce6:	f2 c0       	rjmp	.+484    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "TANH"))
     ce8:	6b e7       	ldi	r22, 0x7B	; 123
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     cf4:	89 2b       	or	r24, r25
     cf6:	69 f4       	brne	.+26     	; 0xd12 <_ZN6parser9eval_exp6ERd+0x1f6>
                result = tanh(result);
     cf8:	d7 01       	movw	r26, r14
     cfa:	6d 91       	ld	r22, X+
     cfc:	7d 91       	ld	r23, X+
     cfe:	8d 91       	ld	r24, X+
     d00:	9c 91       	ld	r25, X
     d02:	0e 94 01 24 	call	0x4802	; 0x4802 <tanh>
     d06:	f7 01       	movw	r30, r14
     d08:	60 83       	st	Z, r22
     d0a:	71 83       	std	Z+1, r23	; 0x01
     d0c:	82 83       	std	Z+2, r24	; 0x02
     d0e:	93 83       	std	Z+3, r25	; 0x03
     d10:	dd c0       	rjmp	.+442    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ASINH"))
     d12:	6e e6       	ldi	r22, 0x6E	; 110
     d14:	71 e0       	ldi	r23, 0x01	; 1
     d16:	ce 01       	movw	r24, r28
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     d1e:	89 2b       	or	r24, r25
     d20:	69 f4       	brne	.+26     	; 0xd3c <_ZN6parser9eval_exp6ERd+0x220>
                result = asin(result);
     d22:	d7 01       	movw	r26, r14
     d24:	6d 91       	ld	r22, X+
     d26:	7d 91       	ld	r23, X+
     d28:	8d 91       	ld	r24, X+
     d2a:	9c 91       	ld	r25, X
     d2c:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <asin>
     d30:	f7 01       	movw	r30, r14
     d32:	60 83       	st	Z, r22
     d34:	71 83       	std	Z+1, r23	; 0x01
     d36:	82 83       	std	Z+2, r24	; 0x02
     d38:	93 83       	std	Z+3, r25	; 0x03
     d3a:	c8 c0       	rjmp	.+400    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ACOSH"))
     d3c:	64 e7       	ldi	r22, 0x74	; 116
     d3e:	71 e0       	ldi	r23, 0x01	; 1
     d40:	ce 01       	movw	r24, r28
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     d48:	89 2b       	or	r24, r25
     d4a:	69 f4       	brne	.+26     	; 0xd66 <_ZN6parser9eval_exp6ERd+0x24a>
                result = acos(result);
     d4c:	d7 01       	movw	r26, r14
     d4e:	6d 91       	ld	r22, X+
     d50:	7d 91       	ld	r23, X+
     d52:	8d 91       	ld	r24, X+
     d54:	9c 91       	ld	r25, X
     d56:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <acos>
     d5a:	f7 01       	movw	r30, r14
     d5c:	60 83       	st	Z, r22
     d5e:	71 83       	std	Z+1, r23	; 0x01
     d60:	82 83       	std	Z+2, r24	; 0x02
     d62:	93 83       	std	Z+3, r25	; 0x03
     d64:	b3 c0       	rjmp	.+358    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ATANH"))
     d66:	6a e7       	ldi	r22, 0x7A	; 122
     d68:	71 e0       	ldi	r23, 0x01	; 1
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     d72:	89 2b       	or	r24, r25
     d74:	69 f4       	brne	.+26     	; 0xd90 <_ZN6parser9eval_exp6ERd+0x274>
                result = atan(result);
     d76:	d7 01       	movw	r26, r14
     d78:	6d 91       	ld	r22, X+
     d7a:	7d 91       	ld	r23, X+
     d7c:	8d 91       	ld	r24, X+
     d7e:	9c 91       	ld	r25, X
     d80:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <atan>
     d84:	f7 01       	movw	r30, r14
     d86:	60 83       	st	Z, r22
     d88:	71 83       	std	Z+1, r23	; 0x01
     d8a:	82 83       	std	Z+2, r24	; 0x02
     d8c:	93 83       	std	Z+3, r25	; 0x03
     d8e:	9e c0       	rjmp	.+316    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "LN"))
     d90:	60 e8       	ldi	r22, 0x80	; 128
     d92:	71 e0       	ldi	r23, 0x01	; 1
     d94:	ce 01       	movw	r24, r28
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     d9c:	89 2b       	or	r24, r25
     d9e:	69 f4       	brne	.+26     	; 0xdba <_ZN6parser9eval_exp6ERd+0x29e>
                result = log(result);
     da0:	d7 01       	movw	r26, r14
     da2:	6d 91       	ld	r22, X+
     da4:	7d 91       	ld	r23, X+
     da6:	8d 91       	ld	r24, X+
     da8:	9c 91       	ld	r25, X
     daa:	0e 94 2c 22 	call	0x4458	; 0x4458 <log>
     dae:	f7 01       	movw	r30, r14
     db0:	60 83       	st	Z, r22
     db2:	71 83       	std	Z+1, r23	; 0x01
     db4:	82 83       	std	Z+2, r24	; 0x02
     db6:	93 83       	std	Z+3, r25	; 0x03
     db8:	89 c0       	rjmp	.+274    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "LOG"))
     dba:	63 e8       	ldi	r22, 0x83	; 131
     dbc:	71 e0       	ldi	r23, 0x01	; 1
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     dc6:	89 2b       	or	r24, r25
     dc8:	69 f4       	brne	.+26     	; 0xde4 <_ZN6parser9eval_exp6ERd+0x2c8>
                result = log10(result);
     dca:	d7 01       	movw	r26, r14
     dcc:	6d 91       	ld	r22, X+
     dce:	7d 91       	ld	r23, X+
     dd0:	8d 91       	ld	r24, X+
     dd2:	9c 91       	ld	r25, X
     dd4:	0e 94 1c 22 	call	0x4438	; 0x4438 <log10>
     dd8:	f7 01       	movw	r30, r14
     dda:	60 83       	st	Z, r22
     ddc:	71 83       	std	Z+1, r23	; 0x01
     dde:	82 83       	std	Z+2, r24	; 0x02
     de0:	93 83       	std	Z+3, r25	; 0x03
     de2:	74 c0       	rjmp	.+232    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "EXP"))
     de4:	67 e8       	ldi	r22, 0x87	; 135
     de6:	71 e0       	ldi	r23, 0x01	; 1
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     df0:	89 2b       	or	r24, r25
     df2:	69 f4       	brne	.+26     	; 0xe0e <_ZN6parser9eval_exp6ERd+0x2f2>
                result = exp(result);
     df4:	d7 01       	movw	r26, r14
     df6:	6d 91       	ld	r22, X+
     df8:	7d 91       	ld	r23, X+
     dfa:	8d 91       	ld	r24, X+
     dfc:	9c 91       	ld	r25, X
     dfe:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <exp>
     e02:	f7 01       	movw	r30, r14
     e04:	60 83       	st	Z, r22
     e06:	71 83       	std	Z+1, r23	; 0x01
     e08:	82 83       	std	Z+2, r24	; 0x02
     e0a:	93 83       	std	Z+3, r25	; 0x03
     e0c:	5f c0       	rjmp	.+190    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "SQRT"))
     e0e:	6b e8       	ldi	r22, 0x8B	; 139
     e10:	71 e0       	ldi	r23, 0x01	; 1
     e12:	ce 01       	movw	r24, r28
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     e1a:	89 2b       	or	r24, r25
     e1c:	69 f4       	brne	.+26     	; 0xe38 <_ZN6parser9eval_exp6ERd+0x31c>
                result = sqrt(result);
     e1e:	d7 01       	movw	r26, r14
     e20:	6d 91       	ld	r22, X+
     e22:	7d 91       	ld	r23, X+
     e24:	8d 91       	ld	r24, X+
     e26:	9c 91       	ld	r25, X
     e28:	0e 94 bd 23 	call	0x477a	; 0x477a <sqrt>
     e2c:	f7 01       	movw	r30, r14
     e2e:	60 83       	st	Z, r22
     e30:	71 83       	std	Z+1, r23	; 0x01
     e32:	82 83       	std	Z+2, r24	; 0x02
     e34:	93 83       	std	Z+3, r25	; 0x03
     e36:	4a c0       	rjmp	.+148    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "SQR"))
     e38:	60 e9       	ldi	r22, 0x90	; 144
     e3a:	71 e0       	ldi	r23, 0x01	; 1
     e3c:	ce 01       	movw	r24, r28
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     e44:	89 2b       	or	r24, r25
     e46:	79 f4       	brne	.+30     	; 0xe66 <_ZN6parser9eval_exp6ERd+0x34a>
                result = result*result;
     e48:	d7 01       	movw	r26, r14
     e4a:	6d 91       	ld	r22, X+
     e4c:	7d 91       	ld	r23, X+
     e4e:	8d 91       	ld	r24, X+
     e50:	9c 91       	ld	r25, X
     e52:	9b 01       	movw	r18, r22
     e54:	ac 01       	movw	r20, r24
     e56:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
     e5a:	f7 01       	movw	r30, r14
     e5c:	60 83       	st	Z, r22
     e5e:	71 83       	std	Z+1, r23	; 0x01
     e60:	82 83       	std	Z+2, r24	; 0x02
     e62:	93 83       	std	Z+3, r25	; 0x03
     e64:	33 c0       	rjmp	.+102    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ROUND"))
     e66:	64 e9       	ldi	r22, 0x94	; 148
     e68:	71 e0       	ldi	r23, 0x01	; 1
     e6a:	ce 01       	movw	r24, r28
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     e72:	89 2b       	or	r24, r25
     e74:	69 f4       	brne	.+26     	; 0xe90 <_ZN6parser9eval_exp6ERd+0x374>
                result = round(result);
     e76:	d7 01       	movw	r26, r14
     e78:	6d 91       	ld	r22, X+
     e7a:	7d 91       	ld	r23, X+
     e7c:	8d 91       	ld	r24, X+
     e7e:	9c 91       	ld	r25, X
     e80:	0e 94 65 23 	call	0x46ca	; 0x46ca <round>
     e84:	f7 01       	movw	r30, r14
     e86:	60 83       	st	Z, r22
     e88:	71 83       	std	Z+1, r23	; 0x01
     e8a:	82 83       	std	Z+2, r24	; 0x02
     e8c:	93 83       	std	Z+3, r25	; 0x03
     e8e:	1e c0       	rjmp	.+60     	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "INT"))
     e90:	6a e9       	ldi	r22, 0x9A	; 154
     e92:	71 e0       	ldi	r23, 0x01	; 1
     e94:	ce 01       	movw	r24, r28
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <strcmp>
     e9c:	89 2b       	or	r24, r25
     e9e:	69 f4       	brne	.+26     	; 0xeba <_ZN6parser9eval_exp6ERd+0x39e>
                result = floor(result);
     ea0:	d7 01       	movw	r26, r14
     ea2:	6d 91       	ld	r22, X+
     ea4:	7d 91       	ld	r23, X+
     ea6:	8d 91       	ld	r24, X+
     ea8:	9c 91       	ld	r25, X
     eaa:	0e 94 6e 20 	call	0x40dc	; 0x40dc <floor>
     eae:	f7 01       	movw	r30, r14
     eb0:	60 83       	st	Z, r22
     eb2:	71 83       	std	Z+1, r23	; 0x01
     eb4:	82 83       	std	Z+2, r24	; 0x02
     eb6:	93 83       	std	Z+3, r25	; 0x03
     eb8:	09 c0       	rjmp	.+18     	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else
                strcpy(errormsg, "Unknown Function");
     eba:	81 e1       	ldi	r24, 0x11	; 17
     ebc:	ee e9       	ldi	r30, 0x9E	; 158
     ebe:	f1 e0       	ldi	r31, 0x01	; 1
     ec0:	d8 01       	movw	r26, r16
     ec2:	da 96       	adiw	r26, 0x3a	; 58
     ec4:	01 90       	ld	r0, Z+
     ec6:	0d 92       	st	X+, r0
     ec8:	8a 95       	dec	r24
     eca:	e1 f7       	brne	.-8      	; 0xec4 <_ZN6parser9eval_exp6ERd+0x3a8>
        }
        get_token();
     ecc:	c8 01       	movw	r24, r16
     ece:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
     ed2:	35 c0       	rjmp	.+106    	; 0xf3e <_ZN6parser9eval_exp6ERd+0x422>
    }
    else
        switch (tok_type)
     ed4:	d8 01       	movw	r26, r16
     ed6:	51 96       	adiw	r26, 0x11	; 17
     ed8:	8c 91       	ld	r24, X
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	19 f0       	breq	.+6      	; 0xee4 <_ZN6parser9eval_exp6ERd+0x3c8>
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	b9 f0       	breq	.+46     	; 0xf10 <_ZN6parser9eval_exp6ERd+0x3f4>
     ee2:	24 c0       	rjmp	.+72     	; 0xf2c <_ZN6parser9eval_exp6ERd+0x410>
        {
        case VARIABLE:
            result = vars[*token - 'A'];
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	e1 54       	subi	r30, 0x41	; 65
     ee8:	f1 09       	sbc	r31, r1
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	e0 0f       	add	r30, r16
     ef4:	f1 1f       	adc	r31, r17
     ef6:	82 89       	ldd	r24, Z+18	; 0x12
     ef8:	93 89       	ldd	r25, Z+19	; 0x13
     efa:	a4 89       	ldd	r26, Z+20	; 0x14
     efc:	b5 89       	ldd	r27, Z+21	; 0x15
     efe:	f7 01       	movw	r30, r14
     f00:	80 83       	st	Z, r24
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	a2 83       	std	Z+2, r26	; 0x02
     f06:	b3 83       	std	Z+3, r27	; 0x03
            get_token();
     f08:	c8 01       	movw	r24, r16
     f0a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
            return;
     f0e:	17 c0       	rjmp	.+46     	; 0xf3e <_ZN6parser9eval_exp6ERd+0x422>
        case NUMBER:
            result = atof(token);
     f10:	c8 01       	movw	r24, r16
     f12:	02 96       	adiw	r24, 0x02	; 2
     f14:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <atof>
     f18:	d7 01       	movw	r26, r14
     f1a:	6d 93       	st	X+, r22
     f1c:	7d 93       	st	X+, r23
     f1e:	8d 93       	st	X+, r24
     f20:	9c 93       	st	X, r25
     f22:	13 97       	sbiw	r26, 0x03	; 3
            get_token();
     f24:	c8 01       	movw	r24, r16
     f26:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
            return;
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <_ZN6parser9eval_exp6ERd+0x422>
        default:
            strcpy(errormsg, "Syntax Error");
     f2c:	d8 01       	movw	r26, r16
     f2e:	da 96       	adiw	r26, 0x3a	; 58
     f30:	8d e0       	ldi	r24, 0x0D	; 13
     f32:	ef ea       	ldi	r30, 0xAF	; 175
     f34:	f1 e0       	ldi	r31, 0x01	; 1
     f36:	01 90       	ld	r0, Z+
     f38:	0d 92       	st	X+, r0
     f3a:	8a 95       	dec	r24
     f3c:	e1 f7       	brne	.-8      	; 0xf36 <_ZN6parser9eval_exp6ERd+0x41a>
        }
}
     f3e:	2f 96       	adiw	r28, 0x0f	; 15
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	08 95       	ret

00000f5a <_ZN6parser9eval_exp5ERd>:
        result = pow(result, temp);
    }
}
// Evaluate a unary + or -.
void parser::eval_exp5(double &result)
{
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	ec 01       	movw	r28, r24
     f64:	8b 01       	movw	r16, r22
    register char op;
    op = 0;
    if ((tok_type == DELIMITER) && *token == '+' || *token == '-')
     f66:	89 89       	ldd	r24, Y+17	; 0x11
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	19 f4       	brne	.+6      	; 0xf72 <_ZN6parser9eval_exp5ERd+0x18>
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	8b 32       	cpi	r24, 0x2B	; 43
     f70:	41 f0       	breq	.+16     	; 0xf82 <_ZN6parser9eval_exp5ERd+0x28>
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	8d 32       	cpi	r24, 0x2D	; 45
     f76:	69 f0       	breq	.+26     	; 0xf92 <_ZN6parser9eval_exp5ERd+0x38>
    {
        op = *token;
        get_token();
    }
    eval_exp6(result);
     f78:	b8 01       	movw	r22, r16
     f7a:	ce 01       	movw	r24, r28
     f7c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN6parser9eval_exp6ERd>
     f80:	19 c0       	rjmp	.+50     	; 0xfb4 <_ZN6parser9eval_exp5ERd+0x5a>
    register char op;
    op = 0;
    if ((tok_type == DELIMITER) && *token == '+' || *token == '-')
    {
        op = *token;
        get_token();
     f82:	ce 01       	movw	r24, r28
     f84:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
    }
    eval_exp6(result);
     f88:	b8 01       	movw	r22, r16
     f8a:	ce 01       	movw	r24, r28
     f8c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN6parser9eval_exp6ERd>
     f90:	11 c0       	rjmp	.+34     	; 0xfb4 <_ZN6parser9eval_exp5ERd+0x5a>
    register char op;
    op = 0;
    if ((tok_type == DELIMITER) && *token == '+' || *token == '-')
    {
        op = *token;
        get_token();
     f92:	ce 01       	movw	r24, r28
     f94:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
    }
    eval_exp6(result);
     f98:	b8 01       	movw	r22, r16
     f9a:	ce 01       	movw	r24, r28
     f9c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN6parser9eval_exp6ERd>
    if (op == '-')
        result = -result;
     fa0:	f8 01       	movw	r30, r16
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	a2 81       	ldd	r26, Z+2	; 0x02
     fa8:	b3 81       	ldd	r27, Z+3	; 0x03
     faa:	b0 58       	subi	r27, 0x80	; 128
     fac:	80 83       	st	Z, r24
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	a2 83       	std	Z+2, r26	; 0x02
     fb2:	b3 83       	std	Z+3, r27	; 0x03
}
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <_ZN6parser9eval_exp4ERd>:
        }
    }
}
// Process an exponent.
void parser::eval_exp4(double &result)
{
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	00 d0       	rcall	.+0      	; 0xfcc <_ZN6parser9eval_exp4ERd+0xe>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <_ZN6parser9eval_exp4ERd+0x10>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	8c 01       	movw	r16, r24
     fd4:	7b 01       	movw	r14, r22
    double temp;
    eval_exp5(result);
     fd6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN6parser9eval_exp5ERd>
    while (*token == '^')
     fda:	f8 01       	movw	r30, r16
     fdc:	82 81       	ldd	r24, Z+2	; 0x02
     fde:	8e 35       	cpi	r24, 0x5E	; 94
     fe0:	e9 f4       	brne	.+58     	; 0x101c <_ZN6parser9eval_exp4ERd+0x5e>
    {
        get_token();
     fe2:	c8 01       	movw	r24, r16
     fe4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp5(temp);
     fe8:	be 01       	movw	r22, r28
     fea:	6f 5f       	subi	r22, 0xFF	; 255
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	c8 01       	movw	r24, r16
     ff0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN6parser9eval_exp5ERd>
        result = pow(result, temp);
     ff4:	29 81       	ldd	r18, Y+1	; 0x01
     ff6:	3a 81       	ldd	r19, Y+2	; 0x02
     ff8:	4b 81       	ldd	r20, Y+3	; 0x03
     ffa:	5c 81       	ldd	r21, Y+4	; 0x04
     ffc:	f7 01       	movw	r30, r14
     ffe:	60 81       	ld	r22, Z
    1000:	71 81       	ldd	r23, Z+1	; 0x01
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	93 81       	ldd	r25, Z+3	; 0x03
    1006:	0e 94 15 23 	call	0x462a	; 0x462a <pow>
    100a:	f7 01       	movw	r30, r14
    100c:	60 83       	st	Z, r22
    100e:	71 83       	std	Z+1, r23	; 0x01
    1010:	82 83       	std	Z+2, r24	; 0x02
    1012:	93 83       	std	Z+3, r25	; 0x03
// Process an exponent.
void parser::eval_exp4(double &result)
{
    double temp;
    eval_exp5(result);
    while (*token == '^')
    1014:	f8 01       	movw	r30, r16
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	8e 35       	cpi	r24, 0x5E	; 94
    101a:	19 f3       	breq	.-58     	; 0xfe2 <_ZN6parser9eval_exp4ERd+0x24>
    {
        get_token();
        eval_exp5(temp);
        result = pow(result, temp);
    }
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	08 95       	ret

00001032 <_ZN6parser9eval_exp3ERd>:
        }
    }
}
// Multiply or divide two factors.
void parser::eval_exp3(double &result)
{
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	00 d0       	rcall	.+0      	; 0x1040 <_ZN6parser9eval_exp3ERd+0xe>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <_ZN6parser9eval_exp3ERd+0x10>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	8c 01       	movw	r16, r24
    1048:	7b 01       	movw	r14, r22
    register char op;
    double temp;
    eval_exp4(result);
    104a:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN6parser9eval_exp4ERd>
    while ((op = *token) == '*' || op == '/')
    104e:	f8 01       	movw	r30, r16
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	8a 32       	cpi	r24, 0x2A	; 42
    1054:	19 f0       	breq	.+6      	; 0x105c <_ZN6parser9eval_exp3ERd+0x2a>
    1056:	8f 32       	cpi	r24, 0x2F	; 47
    1058:	d9 f0       	breq	.+54     	; 0x1090 <_ZN6parser9eval_exp3ERd+0x5e>
    105a:	34 c0       	rjmp	.+104    	; 0x10c4 <_ZN6parser9eval_exp3ERd+0x92>
    {
        get_token();
    105c:	c8 01       	movw	r24, r16
    105e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp4(temp);
    1062:	be 01       	movw	r22, r28
    1064:	6f 5f       	subi	r22, 0xFF	; 255
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	c8 01       	movw	r24, r16
    106a:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN6parser9eval_exp4ERd>
        switch (op)
        {
        case '*':
            result = result * temp;
    106e:	29 81       	ldd	r18, Y+1	; 0x01
    1070:	3a 81       	ldd	r19, Y+2	; 0x02
    1072:	4b 81       	ldd	r20, Y+3	; 0x03
    1074:	5c 81       	ldd	r21, Y+4	; 0x04
    1076:	f7 01       	movw	r30, r14
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	82 81       	ldd	r24, Z+2	; 0x02
    107e:	93 81       	ldd	r25, Z+3	; 0x03
    1080:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    1084:	f7 01       	movw	r30, r14
    1086:	60 83       	st	Z, r22
    1088:	71 83       	std	Z+1, r23	; 0x01
    108a:	82 83       	std	Z+2, r24	; 0x02
    108c:	93 83       	std	Z+3, r25	; 0x03
            break;
    108e:	df cf       	rjmp	.-66     	; 0x104e <_ZN6parser9eval_exp3ERd+0x1c>
    register char op;
    double temp;
    eval_exp4(result);
    while ((op = *token) == '*' || op == '/')
    {
        get_token();
    1090:	c8 01       	movw	r24, r16
    1092:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp4(temp);
    1096:	be 01       	movw	r22, r28
    1098:	6f 5f       	subi	r22, 0xFF	; 255
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	c8 01       	movw	r24, r16
    109e:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN6parser9eval_exp4ERd>
        {
        case '*':
            result = result * temp;
            break;
        case '/':
            result = result / temp;
    10a2:	29 81       	ldd	r18, Y+1	; 0x01
    10a4:	3a 81       	ldd	r19, Y+2	; 0x02
    10a6:	4b 81       	ldd	r20, Y+3	; 0x03
    10a8:	5c 81       	ldd	r21, Y+4	; 0x04
    10aa:	f7 01       	movw	r30, r14
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    10b8:	f7 01       	movw	r30, r14
    10ba:	60 83       	st	Z, r22
    10bc:	71 83       	std	Z+1, r23	; 0x01
    10be:	82 83       	std	Z+2, r24	; 0x02
    10c0:	93 83       	std	Z+3, r25	; 0x03
            break;
    10c2:	c5 cf       	rjmp	.-118    	; 0x104e <_ZN6parser9eval_exp3ERd+0x1c>
        }
    }
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	08 95       	ret

000010da <_ZN6parser9eval_exp1ERd>:
        strcpy(errormsg, "Syntax Error");
    return result;
}
// Process an assignment.
void parser::eval_exp1(double &result)
{
    10da:	8f 92       	push	r8
    10dc:	9f 92       	push	r9
    10de:	bf 92       	push	r11
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	2f 97       	sbiw	r28, 0x0f	; 15
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	8c 01       	movw	r16, r24
    1102:	7b 01       	movw	r14, r22
    int slot;
    char temp_token[15];
    if (tok_type == VARIABLE)
    1104:	fc 01       	movw	r30, r24
    1106:	81 89       	ldd	r24, Z+17	; 0x11
    1108:	82 30       	cpi	r24, 0x02	; 2
    110a:	c9 f5       	brne	.+114    	; 0x117e <_ZN6parser9eval_exp1ERd+0xa4>
    {
        // save old token
        char *t_ptr = exp_ptr;
    110c:	81 90       	ld	r8, Z+
    110e:	91 90       	ld	r9, Z+
    1110:	6f 01       	movw	r12, r30
        strcpy(temp_token, token);
    1112:	bf 01       	movw	r22, r30
    1114:	ce 01       	movw	r24, r28
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	0e 94 e7 25 	call	0x4bce	; 0x4bce <strcpy>
        // compute the index of the variable
        slot = *token - 'A';
    111c:	f8 01       	movw	r30, r16
    111e:	b2 80       	ldd	r11, Z+2	; 0x02
        get_token();
    1120:	c8 01       	movw	r24, r16
    1122:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        if (*token != '=')
    1126:	f8 01       	movw	r30, r16
    1128:	82 81       	ldd	r24, Z+2	; 0x02
    112a:	8d 33       	cpi	r24, 0x3D	; 61
    112c:	61 f0       	breq	.+24     	; 0x1146 <_ZN6parser9eval_exp1ERd+0x6c>
        {
            exp_ptr = t_ptr; // return current token
    112e:	91 82       	std	Z+1, r9	; 0x01
    1130:	80 82       	st	Z, r8
            strcpy(token, temp_token); // restore old token
    1132:	be 01       	movw	r22, r28
    1134:	6f 5f       	subi	r22, 0xFF	; 255
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	c6 01       	movw	r24, r12
    113a:	0e 94 e7 25 	call	0x4bce	; 0x4bce <strcpy>
            tok_type = VARIABLE;
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	f8 01       	movw	r30, r16
    1142:	81 8b       	std	Z+17, r24	; 0x11
    1144:	1c c0       	rjmp	.+56     	; 0x117e <_ZN6parser9eval_exp1ERd+0xa4>
        }
        else {
            get_token(); // get next part of exp
    1146:	c8 01       	movw	r24, r16
    1148:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
            eval_exp2(result);
    114c:	b7 01       	movw	r22, r14
    114e:	c8 01       	movw	r24, r16
    1150:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN6parser9eval_exp2ERd>
            vars[slot] = result;
    1154:	f7 01       	movw	r30, r14
    1156:	40 81       	ld	r20, Z
    1158:	51 81       	ldd	r21, Z+1	; 0x01
    115a:	62 81       	ldd	r22, Z+2	; 0x02
    115c:	73 81       	ldd	r23, Z+3	; 0x03
    115e:	8b 2d       	mov	r24, r11
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	81 54       	subi	r24, 0x41	; 65
    1164:	91 09       	sbc	r25, r1
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	f8 01       	movw	r30, r16
    1170:	e8 0f       	add	r30, r24
    1172:	f9 1f       	adc	r31, r25
    1174:	42 8b       	std	Z+18, r20	; 0x12
    1176:	53 8b       	std	Z+19, r21	; 0x13
    1178:	64 8b       	std	Z+20, r22	; 0x14
    117a:	75 8b       	std	Z+21, r23	; 0x15
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <_ZN6parser9eval_exp1ERd+0xac>
            return;
        }
    }
    eval_exp2(result);
    117e:	b7 01       	movw	r22, r14
    1180:	c8 01       	movw	r24, r16
    1182:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN6parser9eval_exp2ERd>
}
    1186:	2f 96       	adiw	r28, 0x0f	; 15
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	bf 90       	pop	r11
    11a4:	9f 90       	pop	r9
    11a6:	8f 90       	pop	r8
    11a8:	08 95       	ret

000011aa <_ZN6parser8eval_expEPc>:
        vars[i] = 0.0;
    errormsg[0] = '\0';
}
// Parser entry point.
double parser::eval_exp(char *exp)
{
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <_ZN6parser8eval_expEPc+0xa>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <_ZN6parser8eval_expEPc+0xc>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	8c 01       	movw	r16, r24
    errormsg[0] = '\0';
    11bc:	fc 01       	movw	r30, r24
    11be:	12 ae       	std	Z+58, r1	; 0x3a
    double result;
    exp_ptr = exp;
    11c0:	71 83       	std	Z+1, r23	; 0x01
    11c2:	60 83       	st	Z, r22
    get_token();
    11c4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
    if (!*token)
    11c8:	f8 01       	movw	r30, r16
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	81 11       	cpse	r24, r1
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <_ZN6parser8eval_expEPc+0x40>
    {
        strcpy(errormsg, "No Expression Present"); // no expression present
    11d0:	d8 01       	movw	r26, r16
    11d2:	da 96       	adiw	r26, 0x3a	; 58
    11d4:	86 e1       	ldi	r24, 0x16	; 22
    11d6:	ec eb       	ldi	r30, 0xBC	; 188
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	01 90       	ld	r0, Z+
    11dc:	0d 92       	st	X+, r0
    11de:	8a 95       	dec	r24
    11e0:	e1 f7       	brne	.-8      	; 0x11da <_ZN6parser8eval_expEPc+0x30>
        return (double)0;
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	cb 01       	movw	r24, r22
    11e8:	17 c0       	rjmp	.+46     	; 0x1218 <_ZN6parser8eval_expEPc+0x6e>
    }
    eval_exp1(result);
    11ea:	be 01       	movw	r22, r28
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	c8 01       	movw	r24, r16
    11f2:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN6parser9eval_exp1ERd>
    if (*token) // last token must be null
    11f6:	f8 01       	movw	r30, r16
    11f8:	82 81       	ldd	r24, Z+2	; 0x02
    11fa:	88 23       	and	r24, r24
    11fc:	49 f0       	breq	.+18     	; 0x1210 <_ZN6parser8eval_expEPc+0x66>
        strcpy(errormsg, "Syntax Error");
    11fe:	d8 01       	movw	r26, r16
    1200:	da 96       	adiw	r26, 0x3a	; 58
    1202:	8d e0       	ldi	r24, 0x0D	; 13
    1204:	ef ea       	ldi	r30, 0xAF	; 175
    1206:	f1 e0       	ldi	r31, 0x01	; 1
    1208:	01 90       	ld	r0, Z+
    120a:	0d 92       	st	X+, r0
    120c:	8a 95       	dec	r24
    120e:	e1 f7       	brne	.-8      	; 0x1208 <_ZN6parser8eval_expEPc+0x5e>
    return result;
    1210:	69 81       	ldd	r22, Y+1	; 0x01
    1212:	7a 81       	ldd	r23, Y+2	; 0x02
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	08 95       	ret

0000122a <_Z10gauss_algoiiPdPS_>:
int gauss_algo (int n, int m, double *ans , double **a)
{
    122a:	2f 92       	push	r2
    122c:	3f 92       	push	r3
    122e:	4f 92       	push	r4
    1230:	5f 92       	push	r5
    1232:	6f 92       	push	r6
    1234:	7f 92       	push	r7
    1236:	8f 92       	push	r8
    1238:	9f 92       	push	r9
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	64 97       	sbiw	r28, 0x14	; 20
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	9a 87       	std	Y+10, r25	; 0x0a
    1260:	89 87       	std	Y+9, r24	; 0x09
    1262:	1b 01       	movw	r2, r22
    1264:	58 8b       	std	Y+16, r21	; 0x10
    1266:	4f 87       	std	Y+15, r20	; 0x0f
    1268:	29 01       	movw	r4, r18
	//returns 1 if a single solution
	//returns 2 if infinite solution
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-7;
	int *where = (int*)malloc(m * sizeof(int));
    126a:	9b 01       	movw	r18, r22
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	3a 83       	std	Y+2, r19	; 0x02
    1272:	29 83       	std	Y+1, r18	; 0x01
    1274:	c9 01       	movw	r24, r18
    1276:	0e 94 87 24 	call	0x490e	; 0x490e <malloc>
    127a:	9a 8b       	std	Y+18, r25	; 0x12
    127c:	89 8b       	std	Y+17, r24	; 0x11
	for(int i=0; i<m; i++)
    127e:	12 14       	cp	r1, r2
    1280:	13 04       	cpc	r1, r3
    1282:	0c f0       	brlt	.+2      	; 0x1286 <_Z10gauss_algoiiPdPS_+0x5c>
    1284:	56 c1       	rjmp	.+684    	; 0x1532 <_Z10gauss_algoiiPdPS_+0x308>
    1286:	9e 87       	std	Y+14, r25	; 0x0e
    1288:	8d 87       	std	Y+13, r24	; 0x0d
    128a:	69 81       	ldd	r22, Y+1	; 0x01
    128c:	7a 81       	ldd	r23, Y+2	; 0x02
    128e:	68 0f       	add	r22, r24
    1290:	79 1f       	adc	r23, r25
    1292:	fc 01       	movw	r30, r24
		where[i] = -1;
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	9f ef       	ldi	r25, 0xFF	; 255
    1298:	7a 83       	std	Y+2, r23	; 0x02
    129a:	69 83       	std	Y+1, r22	; 0x01
    129c:	81 93       	st	Z+, r24
    129e:	91 93       	st	Z+, r25
	//returns 2 if infinite solution
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-7;
	int *where = (int*)malloc(m * sizeof(int));
	for(int i=0; i<m; i++)
    12a0:	a9 81       	ldd	r26, Y+1	; 0x01
    12a2:	ba 81       	ldd	r27, Y+2	; 0x02
    12a4:	ae 17       	cp	r26, r30
    12a6:	bf 07       	cpc	r27, r31
    12a8:	c9 f7       	brne	.-14     	; 0x129c <_Z10gauss_algoiiPdPS_+0x72>
    12aa:	2e c2       	rjmp	.+1116   	; 0x1708 <_Z10gauss_algoiiPdPS_+0x4de>
    12ac:	b4 e0       	ldi	r27, 0x04	; 4
    12ae:	6b 0e       	add	r6, r27
    12b0:	71 1c       	adc	r7, r1
    12b2:	ed 85       	ldd	r30, Y+13	; 0x0d
    12b4:	fe 85       	ldd	r31, Y+14	; 0x0e
    12b6:	32 96       	adiw	r30, 0x02	; 2
    12b8:	fe 87       	std	Y+14, r31	; 0x0e
    12ba:	ed 87       	std	Y+13, r30	; 0x0d
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
    12bc:	29 85       	ldd	r18, Y+9	; 0x09
    12be:	3a 85       	ldd	r19, Y+10	; 0x0a
    12c0:	a2 16       	cp	r10, r18
    12c2:	b3 06       	cpc	r11, r19
    12c4:	0c f0       	brlt	.+2      	; 0x12c8 <_Z10gauss_algoiiPdPS_+0x9e>
    12c6:	26 c2       	rjmp	.+1100   	; 0x1714 <_Z10gauss_algoiiPdPS_+0x4ea>
    12c8:	bc 86       	std	Y+12, r11	; 0x0c
    12ca:	ab 86       	std	Y+11, r10	; 0x0b
    12cc:	c5 01       	movw	r24, r10
    12ce:	0a c0       	rjmp	.+20     	; 0x12e4 <_Z10gauss_algoiiPdPS_+0xba>
    12d0:	61 2c       	mov	r6, r1
    12d2:	71 2c       	mov	r7, r1
    12d4:	1c 86       	std	Y+12, r1	; 0x0c
    12d6:	1b 86       	std	Y+11, r1	; 0x0b
    12d8:	18 86       	std	Y+8, r1	; 0x08
    12da:	1f 82       	std	Y+7, r1	; 0x07
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a1 2c       	mov	r10, r1
    12e2:	b1 2c       	mov	r11, r1
	{
		int sel = row;
		for (int i=row; i<n; ++i)
    12e4:	69 85       	ldd	r22, Y+9	; 0x09
    12e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    12e8:	86 17       	cp	r24, r22
    12ea:	97 07       	cpc	r25, r23
    12ec:	0c f0       	brlt	.+2      	; 0x12f0 <_Z10gauss_algoiiPdPS_+0xc6>
    12ee:	41 c0       	rjmp	.+130    	; 0x1372 <_Z10gauss_algoiiPdPS_+0x148>
    12f0:	75 01       	movw	r14, r10
    12f2:	ee 0c       	add	r14, r14
    12f4:	ff 1c       	adc	r15, r15
    12f6:	e4 0c       	add	r14, r4
    12f8:	f5 1c       	adc	r15, r5
    12fa:	ba 82       	std	Y+2, r11	; 0x02
    12fc:	a9 82       	std	Y+1, r10	; 0x01
    12fe:	65 01       	movw	r12, r10
    1300:	4b 01       	movw	r8, r22
		if (abs (a[i][col]) > abs (a[sel][col]))
    1302:	d7 01       	movw	r26, r14
    1304:	ed 91       	ld	r30, X+
    1306:	fd 91       	ld	r31, X+
    1308:	7d 01       	movw	r14, r26
    130a:	e6 0d       	add	r30, r6
    130c:	f7 1d       	adc	r31, r7
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	93 81       	ldd	r25, Z+3	; 0x03
    1316:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <__fixsfsi>
    131a:	8b 01       	movw	r16, r22
    131c:	77 23       	and	r23, r23
    131e:	24 f4       	brge	.+8      	; 0x1328 <_Z10gauss_algoiiPdPS_+0xfe>
    1320:	00 27       	eor	r16, r16
    1322:	11 27       	eor	r17, r17
    1324:	06 1b       	sub	r16, r22
    1326:	17 0b       	sbc	r17, r23
    1328:	f6 01       	movw	r30, r12
    132a:	ee 0f       	add	r30, r30
    132c:	ff 1f       	adc	r31, r31
    132e:	e4 0d       	add	r30, r4
    1330:	f5 1d       	adc	r31, r5
    1332:	01 90       	ld	r0, Z+
    1334:	f0 81       	ld	r31, Z
    1336:	e0 2d       	mov	r30, r0
    1338:	e6 0d       	add	r30, r6
    133a:	f7 1d       	adc	r31, r7
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <__fixsfsi>
    1348:	9b 01       	movw	r18, r22
    134a:	77 23       	and	r23, r23
    134c:	24 f4       	brge	.+8      	; 0x1356 <_Z10gauss_algoiiPdPS_+0x12c>
    134e:	22 27       	eor	r18, r18
    1350:	33 27       	eor	r19, r19
    1352:	26 1b       	sub	r18, r22
    1354:	37 0b       	sbc	r19, r23
    1356:	20 17       	cp	r18, r16
    1358:	31 07       	cpc	r19, r17
    135a:	14 f4       	brge	.+4      	; 0x1360 <_Z10gauss_algoiiPdPS_+0x136>
    135c:	c9 80       	ldd	r12, Y+1	; 0x01
    135e:	da 80       	ldd	r13, Y+2	; 0x02
	for(int i=0; i<m; i++)
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
	{
		int sel = row;
		for (int i=row; i<n; ++i)
    1360:	e9 81       	ldd	r30, Y+1	; 0x01
    1362:	fa 81       	ldd	r31, Y+2	; 0x02
    1364:	31 96       	adiw	r30, 0x01	; 1
    1366:	fa 83       	std	Y+2, r31	; 0x02
    1368:	e9 83       	std	Y+1, r30	; 0x01
    136a:	e8 15       	cp	r30, r8
    136c:	f9 05       	cpc	r31, r9
    136e:	4c f2       	brlt	.-110    	; 0x1302 <_Z10gauss_algoiiPdPS_+0xd8>
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <_Z10gauss_algoiiPdPS_+0x14a>
    1372:	65 01       	movw	r12, r10
		if (abs (a[i][col]) > abs (a[sel][col]))
		sel = i;
		if (abs (a[sel][col]) < EPS)
    1374:	cc 0c       	add	r12, r12
    1376:	dd 1c       	adc	r13, r13
    1378:	92 01       	movw	r18, r4
    137a:	2c 0d       	add	r18, r12
    137c:	3d 1d       	adc	r19, r13
    137e:	3a 83       	std	Y+2, r19	; 0x02
    1380:	29 83       	std	Y+1, r18	; 0x01
    1382:	d9 01       	movw	r26, r18
    1384:	ed 91       	ld	r30, X+
    1386:	fc 91       	ld	r31, X
    1388:	e6 0d       	add	r30, r6
    138a:	f7 1d       	adc	r31, r7
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <__fixsfsi>
    1398:	9b 01       	movw	r18, r22
    139a:	77 23       	and	r23, r23
    139c:	24 f4       	brge	.+8      	; 0x13a6 <_Z10gauss_algoiiPdPS_+0x17c>
    139e:	22 27       	eor	r18, r18
    13a0:	33 27       	eor	r19, r19
    13a2:	26 1b       	sub	r18, r22
    13a4:	37 0b       	sbc	r19, r23
    13a6:	b9 01       	movw	r22, r18
    13a8:	33 0f       	add	r19, r19
    13aa:	88 0b       	sbc	r24, r24
    13ac:	99 0b       	sbc	r25, r25
    13ae:	0e 94 33 20 	call	0x4066	; 0x4066 <__floatsisf>
    13b2:	25 e9       	ldi	r18, 0x95	; 149
    13b4:	3f eb       	ldi	r19, 0xBF	; 191
    13b6:	46 ed       	ldi	r20, 0xD6	; 214
    13b8:	53 e3       	ldi	r21, 0x33	; 51
    13ba:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    13be:	88 23       	and	r24, r24
    13c0:	0c f4       	brge	.+2      	; 0x13c4 <_Z10gauss_algoiiPdPS_+0x19a>
    13c2:	a4 c0       	rjmp	.+328    	; 0x150c <_Z10gauss_algoiiPdPS_+0x2e2>
		continue;
		for (int i=col; i<=m; ++i)
    13c4:	ef 81       	ldd	r30, Y+7	; 0x07
    13c6:	f8 85       	ldd	r31, Y+8	; 0x08
    13c8:	2e 16       	cp	r2, r30
    13ca:	3f 06       	cpc	r3, r31
    13cc:	0c f4       	brge	.+2      	; 0x13d0 <_Z10gauss_algoiiPdPS_+0x1a6>
    13ce:	a8 c1       	rjmp	.+848    	; 0x1720 <_Z10gauss_algoiiPdPS_+0x4f6>
		{
			double tmp = a[sel][i];
			a[sel][i] = a[row][i];
    13d0:	4b 85       	ldd	r20, Y+11	; 0x0b
    13d2:	5c 85       	ldd	r21, Y+12	; 0x0c
    13d4:	44 0f       	add	r20, r20
    13d6:	55 1f       	adc	r21, r21
    13d8:	44 0d       	add	r20, r4
    13da:	55 1d       	adc	r21, r5
    13dc:	c3 01       	movw	r24, r6
    13de:	9f 01       	movw	r18, r30
    13e0:	09 81       	ldd	r16, Y+1	; 0x01
    13e2:	1a 81       	ldd	r17, Y+2	; 0x02
		sel = i;
		if (abs (a[sel][col]) < EPS)
		continue;
		for (int i=col; i<=m; ++i)
		{
			double tmp = a[sel][i];
    13e4:	d8 01       	movw	r26, r16
    13e6:	ed 91       	ld	r30, X+
    13e8:	fc 91       	ld	r31, X
    13ea:	e8 0f       	add	r30, r24
    13ec:	f9 1f       	adc	r31, r25
    13ee:	c0 80       	ld	r12, Z
    13f0:	d1 80       	ldd	r13, Z+1	; 0x01
    13f2:	e2 80       	ldd	r14, Z+2	; 0x02
    13f4:	f3 80       	ldd	r15, Z+3	; 0x03
			a[sel][i] = a[row][i];
    13f6:	da 01       	movw	r26, r20
    13f8:	6d 91       	ld	r22, X+
    13fa:	7c 91       	ld	r23, X
    13fc:	db 01       	movw	r26, r22
    13fe:	a8 0f       	add	r26, r24
    1400:	b9 1f       	adc	r27, r25
    1402:	8d 90       	ld	r8, X+
    1404:	9d 90       	ld	r9, X+
    1406:	ad 90       	ld	r10, X+
    1408:	bc 90       	ld	r11, X
    140a:	80 82       	st	Z, r8
    140c:	91 82       	std	Z+1, r9	; 0x01
    140e:	a2 82       	std	Z+2, r10	; 0x02
    1410:	b3 82       	std	Z+3, r11	; 0x03
			a[row][i] = tmp;
    1412:	da 01       	movw	r26, r20
    1414:	ed 91       	ld	r30, X+
    1416:	fc 91       	ld	r31, X
    1418:	e8 0f       	add	r30, r24
    141a:	f9 1f       	adc	r31, r25
    141c:	c0 82       	st	Z, r12
    141e:	d1 82       	std	Z+1, r13	; 0x01
    1420:	e2 82       	std	Z+2, r14	; 0x02
    1422:	f3 82       	std	Z+3, r15	; 0x03
		for (int i=row; i<n; ++i)
		if (abs (a[i][col]) > abs (a[sel][col]))
		sel = i;
		if (abs (a[sel][col]) < EPS)
		continue;
		for (int i=col; i<=m; ++i)
    1424:	2f 5f       	subi	r18, 0xFF	; 255
    1426:	3f 4f       	sbci	r19, 0xFF	; 255
    1428:	04 96       	adiw	r24, 0x04	; 4
    142a:	22 16       	cp	r2, r18
    142c:	33 06       	cpc	r3, r19
    142e:	d4 f6       	brge	.-76     	; 0x13e4 <_Z10gauss_algoiiPdPS_+0x1ba>
    1430:	77 c1       	rjmp	.+750    	; 0x1720 <_Z10gauss_algoiiPdPS_+0x4f6>
			a[sel][i] = a[row][i];
			a[row][i] = tmp;
		}
		where[col] = row;
		for (int i=0; i<n; ++i)
		if (i != row)
    1432:	eb 85       	ldd	r30, Y+11	; 0x0b
    1434:	fc 85       	ldd	r31, Y+12	; 0x0c
    1436:	ea 15       	cp	r30, r10
    1438:	fb 05       	cpc	r31, r11
    143a:	09 f4       	brne	.+2      	; 0x143e <_Z10gauss_algoiiPdPS_+0x214>
    143c:	53 c0       	rjmp	.+166    	; 0x14e4 <_Z10gauss_algoiiPdPS_+0x2ba>
    143e:	cd 80       	ldd	r12, Y+5	; 0x05
    1440:	de 80       	ldd	r13, Y+6	; 0x06
		{
			double c = a[i][col] / a[row][col];
    1442:	d6 01       	movw	r26, r12
    1444:	ed 91       	ld	r30, X+
    1446:	fc 91       	ld	r31, X
    1448:	cf 01       	movw	r24, r30
    144a:	86 0d       	add	r24, r6
    144c:	97 1d       	adc	r25, r7
    144e:	f4 01       	movw	r30, r8
    1450:	a0 81       	ld	r26, Z
    1452:	b1 81       	ldd	r27, Z+1	; 0x01
    1454:	a6 0d       	add	r26, r6
    1456:	b7 1d       	adc	r27, r7
    1458:	2d 91       	ld	r18, X+
    145a:	3d 91       	ld	r19, X+
    145c:	4d 91       	ld	r20, X+
    145e:	5c 91       	ld	r21, X
    1460:	dc 01       	movw	r26, r24
    1462:	6d 91       	ld	r22, X+
    1464:	7d 91       	ld	r23, X+
    1466:	8d 91       	ld	r24, X+
    1468:	9c 91       	ld	r25, X
    146a:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    146e:	69 83       	std	Y+1, r22	; 0x01
    1470:	7a 83       	std	Y+2, r23	; 0x02
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	9c 83       	std	Y+4, r25	; 0x04
			for (int j=col; j<=m; ++j)
    1476:	ef 81       	ldd	r30, Y+7	; 0x07
    1478:	f8 85       	ldd	r31, Y+8	; 0x08
    147a:	2e 16       	cp	r2, r30
    147c:	3f 06       	cpc	r3, r31
    147e:	94 f1       	brlt	.+100    	; 0x14e4 <_Z10gauss_algoiiPdPS_+0x2ba>
    1480:	83 01       	movw	r16, r6
    1482:	7f 01       	movw	r14, r30
			a[i][j] -= a[row][j] * c;
    1484:	d6 01       	movw	r26, r12
    1486:	0d 90       	ld	r0, X+
    1488:	bc 91       	ld	r27, X
    148a:	a0 2d       	mov	r26, r0
    148c:	a0 0f       	add	r26, r16
    148e:	b1 1f       	adc	r27, r17
    1490:	bc 8b       	std	Y+20, r27	; 0x14
    1492:	ab 8b       	std	Y+19, r26	; 0x13
    1494:	d4 01       	movw	r26, r8
    1496:	ed 91       	ld	r30, X+
    1498:	fc 91       	ld	r31, X
    149a:	e0 0f       	add	r30, r16
    149c:	f1 1f       	adc	r31, r17
    149e:	20 81       	ld	r18, Z
    14a0:	31 81       	ldd	r19, Z+1	; 0x01
    14a2:	42 81       	ldd	r20, Z+2	; 0x02
    14a4:	53 81       	ldd	r21, Z+3	; 0x03
    14a6:	69 81       	ldd	r22, Y+1	; 0x01
    14a8:	7a 81       	ldd	r23, Y+2	; 0x02
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    14b2:	9b 01       	movw	r18, r22
    14b4:	ac 01       	movw	r20, r24
    14b6:	eb 89       	ldd	r30, Y+19	; 0x13
    14b8:	fc 89       	ldd	r31, Y+20	; 0x14
    14ba:	60 81       	ld	r22, Z
    14bc:	71 81       	ldd	r23, Z+1	; 0x01
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	93 81       	ldd	r25, Z+3	; 0x03
    14c2:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    14c6:	ab 89       	ldd	r26, Y+19	; 0x13
    14c8:	bc 89       	ldd	r27, Y+20	; 0x14
    14ca:	6d 93       	st	X+, r22
    14cc:	7d 93       	st	X+, r23
    14ce:	8d 93       	st	X+, r24
    14d0:	9c 93       	st	X, r25
    14d2:	13 97       	sbiw	r26, 0x03	; 3
		where[col] = row;
		for (int i=0; i<n; ++i)
		if (i != row)
		{
			double c = a[i][col] / a[row][col];
			for (int j=col; j<=m; ++j)
    14d4:	bf ef       	ldi	r27, 0xFF	; 255
    14d6:	eb 1a       	sub	r14, r27
    14d8:	fb 0a       	sbc	r15, r27
    14da:	0c 5f       	subi	r16, 0xFC	; 252
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
    14de:	2e 14       	cp	r2, r14
    14e0:	3f 04       	cpc	r3, r15
    14e2:	84 f6       	brge	.-96     	; 0x1484 <_Z10gauss_algoiiPdPS_+0x25a>
			double tmp = a[sel][i];
			a[sel][i] = a[row][i];
			a[row][i] = tmp;
		}
		where[col] = row;
		for (int i=0; i<n; ++i)
    14e4:	ef ef       	ldi	r30, 0xFF	; 255
    14e6:	ae 1a       	sub	r10, r30
    14e8:	be 0a       	sbc	r11, r30
    14ea:	2d 81       	ldd	r18, Y+5	; 0x05
    14ec:	3e 81       	ldd	r19, Y+6	; 0x06
    14ee:	2e 5f       	subi	r18, 0xFE	; 254
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	3e 83       	std	Y+6, r19	; 0x06
    14f4:	2d 83       	std	Y+5, r18	; 0x05
    14f6:	69 85       	ldd	r22, Y+9	; 0x09
    14f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    14fa:	6a 15       	cp	r22, r10
    14fc:	7b 05       	cpc	r23, r11
    14fe:	09 f0       	breq	.+2      	; 0x1502 <_Z10gauss_algoiiPdPS_+0x2d8>
    1500:	98 cf       	rjmp	.-208    	; 0x1432 <_Z10gauss_algoiiPdPS_+0x208>
		{
			double c = a[i][col] / a[row][col];
			for (int j=col; j<=m; ++j)
			a[i][j] -= a[row][j] * c;
		}
		++row;
    1502:	ab 84       	ldd	r10, Y+11	; 0x0b
    1504:	bc 84       	ldd	r11, Y+12	; 0x0c
    1506:	7f ef       	ldi	r23, 0xFF	; 255
    1508:	a7 1a       	sub	r10, r23
    150a:	b7 0a       	sbc	r11, r23
	//returns a solution if there is at least one solution
	const double EPS = 1e-7;
	int *where = (int*)malloc(m * sizeof(int));
	for(int i=0; i<m; i++)
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
    150c:	8f 81       	ldd	r24, Y+7	; 0x07
    150e:	98 85       	ldd	r25, Y+8	; 0x08
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	98 87       	std	Y+8, r25	; 0x08
    1514:	8f 83       	std	Y+7, r24	; 0x07
    1516:	28 16       	cp	r2, r24
    1518:	39 06       	cpc	r3, r25
    151a:	09 f0       	breq	.+2      	; 0x151e <_Z10gauss_algoiiPdPS_+0x2f4>
    151c:	c7 ce       	rjmp	.-626    	; 0x12ac <_Z10gauss_algoiiPdPS_+0x82>
    151e:	fa c0       	rjmp	.+500    	; 0x1714 <_Z10gauss_algoiiPdPS_+0x4ea>
		}
		++row;
	}

	for(int i=0; i<m; i++)
	ans[i] =0;
    1520:	11 92       	st	Z+, r1
    1522:	11 92       	st	Z+, r1
    1524:	11 92       	st	Z+, r1
    1526:	11 92       	st	Z+, r1
			a[i][j] -= a[row][j] * c;
		}
		++row;
	}

	for(int i=0; i<m; i++)
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	82 15       	cp	r24, r2
    152c:	93 05       	cpc	r25, r3
    152e:	c4 f3       	brlt	.-16     	; 0x1520 <_Z10gauss_algoiiPdPS_+0x2f6>
    1530:	07 c0       	rjmp	.+14     	; 0x1540 <_Z10gauss_algoiiPdPS_+0x316>
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
    1532:	a9 85       	ldd	r26, Y+9	; 0x09
    1534:	ba 85       	ldd	r27, Y+10	; 0x0a
    1536:	1a 16       	cp	r1, r26
    1538:	1b 06       	cpc	r1, r27
    153a:	0c f4       	brge	.+2      	; 0x153e <_Z10gauss_algoiiPdPS_+0x314>
    153c:	43 c0       	rjmp	.+134    	; 0x15c4 <_Z10gauss_algoiiPdPS_+0x39a>
    153e:	da c0       	rjmp	.+436    	; 0x16f4 <_Z10gauss_algoiiPdPS_+0x4ca>

	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
    1540:	61 01       	movw	r12, r2
    1542:	cc 0c       	add	r12, r12
    1544:	dd 1c       	adc	r13, r13
    1546:	cc 0c       	add	r12, r12
    1548:	dd 1c       	adc	r13, r13
    154a:	a9 88       	ldd	r10, Y+17	; 0x11
    154c:	ba 88       	ldd	r11, Y+18	; 0x12
    154e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1550:	f8 89       	ldd	r31, Y+16	; 0x10
    1552:	00 e0       	ldi	r16, 0x00	; 0
    1554:	10 e0       	ldi	r17, 0x00	; 0
    1556:	fa 83       	std	Y+2, r31	; 0x02
    1558:	e9 83       	std	Y+1, r30	; 0x01
	}

	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
    155a:	d5 01       	movw	r26, r10
    155c:	8d 91       	ld	r24, X+
    155e:	9d 91       	ld	r25, X+
    1560:	5d 01       	movw	r10, r26
    1562:	8f 3f       	cpi	r24, 0xFF	; 255
    1564:	bf ef       	ldi	r27, 0xFF	; 255
    1566:	9b 07       	cpc	r25, r27
    1568:	09 f1       	breq	.+66     	; 0x15ac <_Z10gauss_algoiiPdPS_+0x382>
	ans[i] = a[where[i]][m] / a[where[i]][i];
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	f2 01       	movw	r30, r4
    1570:	e8 0f       	add	r30, r24
    1572:	f9 1f       	adc	r31, r25
    1574:	01 90       	ld	r0, Z+
    1576:	f0 81       	ld	r31, Z
    1578:	e0 2d       	mov	r30, r0
    157a:	df 01       	movw	r26, r30
    157c:	ac 0d       	add	r26, r12
    157e:	bd 1d       	adc	r27, r13
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	8e 19       	sub	r24, r14
    1586:	9f 09       	sbc	r25, r15
    1588:	e8 0f       	add	r30, r24
    158a:	f9 1f       	adc	r31, r25
    158c:	20 81       	ld	r18, Z
    158e:	31 81       	ldd	r19, Z+1	; 0x01
    1590:	42 81       	ldd	r20, Z+2	; 0x02
    1592:	53 81       	ldd	r21, Z+3	; 0x03
    1594:	6d 91       	ld	r22, X+
    1596:	7d 91       	ld	r23, X+
    1598:	8d 91       	ld	r24, X+
    159a:	9c 91       	ld	r25, X
    159c:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    15a0:	e9 81       	ldd	r30, Y+1	; 0x01
    15a2:	fa 81       	ldd	r31, Y+2	; 0x02
    15a4:	60 83       	st	Z, r22
    15a6:	71 83       	std	Z+1, r23	; 0x01
    15a8:	82 83       	std	Z+2, r24	; 0x02
    15aa:	93 83       	std	Z+3, r25	; 0x03
		++row;
	}

	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
    15ac:	0f 5f       	subi	r16, 0xFF	; 255
    15ae:	1f 4f       	sbci	r17, 0xFF	; 255
    15b0:	29 81       	ldd	r18, Y+1	; 0x01
    15b2:	3a 81       	ldd	r19, Y+2	; 0x02
    15b4:	2c 5f       	subi	r18, 0xFC	; 252
    15b6:	3f 4f       	sbci	r19, 0xFF	; 255
    15b8:	3a 83       	std	Y+2, r19	; 0x02
    15ba:	29 83       	std	Y+1, r18	; 0x01
    15bc:	02 15       	cp	r16, r2
    15be:	13 05       	cpc	r17, r3
    15c0:	64 f2       	brlt	.-104    	; 0x155a <_Z10gauss_algoiiPdPS_+0x330>
    15c2:	bf c0       	rjmp	.+382    	; 0x1742 <_Z10gauss_algoiiPdPS_+0x518>
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
    15c4:	b1 01       	movw	r22, r2
    15c6:	66 0f       	add	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	66 0f       	add	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	7a 83       	std	Y+2, r23	; 0x02
    15d0:	69 83       	std	Y+1, r22	; 0x01
    15d2:	42 01       	movw	r8, r4
    15d4:	af 84       	ldd	r10, Y+15	; 0x0f
    15d6:	b8 88       	ldd	r11, Y+16	; 0x10
    15d8:	a6 0e       	add	r10, r22
    15da:	b7 1e       	adc	r11, r23
    15dc:	61 2c       	mov	r6, r1
    15de:	71 2c       	mov	r7, r1
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
    15e0:	41 2c       	mov	r4, r1
    15e2:	51 2c       	mov	r5, r1
    15e4:	12 14       	cp	r1, r2
    15e6:	13 04       	cpc	r1, r3
    15e8:	34 f0       	brlt	.+12     	; 0x15f6 <_Z10gauss_algoiiPdPS_+0x3cc>
    15ea:	31 c0       	rjmp	.+98     	; 0x164e <_Z10gauss_algoiiPdPS_+0x424>
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
    15ec:	12 14       	cp	r1, r2
    15ee:	13 04       	cpc	r1, r3
    15f0:	0c f4       	brge	.+2      	; 0x15f4 <_Z10gauss_algoiiPdPS_+0x3ca>
    15f2:	64 c0       	rjmp	.+200    	; 0x16bc <_Z10gauss_algoiiPdPS_+0x492>
    15f4:	7f c0       	rjmp	.+254    	; 0x16f4 <_Z10gauss_algoiiPdPS_+0x4ca>
    15f6:	0f 85       	ldd	r16, Y+15	; 0x0f
    15f8:	18 89       	ldd	r17, Y+16	; 0x10
    15fa:	d4 01       	movw	r26, r8
    15fc:	0d 90       	ld	r0, X+
    15fe:	bc 91       	ld	r27, X
    1600:	a0 2d       	mov	r26, r0
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
		sum += ans[j] * a[i][j];
    1602:	e1 2c       	mov	r14, r1
    1604:	f1 2c       	mov	r15, r1
    1606:	c4 2c       	mov	r12, r4
    1608:	d5 2c       	mov	r13, r5
    160a:	be 83       	std	Y+6, r27	; 0x06
    160c:	ad 83       	std	Y+5, r26	; 0x05
    160e:	f8 01       	movw	r30, r16
    1610:	61 91       	ld	r22, Z+
    1612:	71 91       	ld	r23, Z+
    1614:	81 91       	ld	r24, Z+
    1616:	91 91       	ld	r25, Z+
    1618:	8f 01       	movw	r16, r30
    161a:	ad 81       	ldd	r26, Y+5	; 0x05
    161c:	be 81       	ldd	r27, Y+6	; 0x06
    161e:	2d 91       	ld	r18, X+
    1620:	3d 91       	ld	r19, X+
    1622:	4d 91       	ld	r20, X+
    1624:	5d 91       	ld	r21, X+
    1626:	be 83       	std	Y+6, r27	; 0x06
    1628:	ad 83       	std	Y+5, r26	; 0x05
    162a:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    162e:	9b 01       	movw	r18, r22
    1630:	ac 01       	movw	r20, r24
    1632:	6e 2d       	mov	r22, r14
    1634:	7f 2d       	mov	r23, r15
    1636:	8c 2d       	mov	r24, r12
    1638:	9d 2d       	mov	r25, r13
    163a:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    163e:	e6 2e       	mov	r14, r22
    1640:	f7 2e       	mov	r15, r23
    1642:	c8 2e       	mov	r12, r24
    1644:	d9 2e       	mov	r13, r25
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
    1646:	a0 16       	cp	r10, r16
    1648:	b1 06       	cpc	r11, r17
    164a:	09 f7       	brne	.-62     	; 0x160e <_Z10gauss_algoiiPdPS_+0x3e4>
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <_Z10gauss_algoiiPdPS_+0x42c>
    164e:	e1 2c       	mov	r14, r1
    1650:	f1 2c       	mov	r15, r1
    1652:	c4 2c       	mov	r12, r4
    1654:	d5 2c       	mov	r13, r5
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
    1656:	d4 01       	movw	r26, r8
    1658:	ed 91       	ld	r30, X+
    165a:	fd 91       	ld	r31, X+
    165c:	4d 01       	movw	r8, r26
    165e:	29 81       	ldd	r18, Y+1	; 0x01
    1660:	3a 81       	ldd	r19, Y+2	; 0x02
    1662:	e2 0f       	add	r30, r18
    1664:	f3 1f       	adc	r31, r19
    1666:	20 81       	ld	r18, Z
    1668:	31 81       	ldd	r19, Z+1	; 0x01
    166a:	42 81       	ldd	r20, Z+2	; 0x02
    166c:	53 81       	ldd	r21, Z+3	; 0x03
    166e:	6e 2d       	mov	r22, r14
    1670:	7f 2d       	mov	r23, r15
    1672:	8c 2d       	mov	r24, r12
    1674:	9d 2d       	mov	r25, r13
    1676:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    167a:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <__fixsfsi>
    167e:	9b 01       	movw	r18, r22
    1680:	77 23       	and	r23, r23
    1682:	24 f4       	brge	.+8      	; 0x168c <_Z10gauss_algoiiPdPS_+0x462>
    1684:	22 27       	eor	r18, r18
    1686:	33 27       	eor	r19, r19
    1688:	26 1b       	sub	r18, r22
    168a:	37 0b       	sbc	r19, r23
    168c:	b9 01       	movw	r22, r18
    168e:	33 0f       	add	r19, r19
    1690:	88 0b       	sbc	r24, r24
    1692:	99 0b       	sbc	r25, r25
    1694:	0e 94 33 20 	call	0x4066	; 0x4066 <__floatsisf>
    1698:	25 e9       	ldi	r18, 0x95	; 149
    169a:	3f eb       	ldi	r19, 0xBF	; 191
    169c:	46 ed       	ldi	r20, 0xD6	; 214
    169e:	53 e3       	ldi	r21, 0x33	; 51
    16a0:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__gesf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	6c f1       	brlt	.+90     	; 0x1702 <_Z10gauss_algoiiPdPS_+0x4d8>
	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
    16a8:	3f ef       	ldi	r19, 0xFF	; 255
    16aa:	63 1a       	sub	r6, r19
    16ac:	73 0a       	sbc	r7, r19
    16ae:	69 85       	ldd	r22, Y+9	; 0x09
    16b0:	7a 85       	ldd	r23, Y+10	; 0x0a
    16b2:	66 16       	cp	r6, r22
    16b4:	77 06       	cpc	r7, r23
    16b6:	0c f4       	brge	.+2      	; 0x16ba <_Z10gauss_algoiiPdPS_+0x490>
    16b8:	95 cf       	rjmp	.-214    	; 0x15e4 <_Z10gauss_algoiiPdPS_+0x3ba>
    16ba:	98 cf       	rjmp	.-208    	; 0x15ec <_Z10gauss_algoiiPdPS_+0x3c2>
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
		if (where[i] == -1){
    16bc:	a9 89       	ldd	r26, Y+17	; 0x11
    16be:	ba 89       	ldd	r27, Y+18	; 0x12
    16c0:	8d 91       	ld	r24, X+
    16c2:	9c 91       	ld	r25, X
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	69 f4       	brne	.+26     	; 0x16e2 <_Z10gauss_algoiiPdPS_+0x4b8>
    16c8:	05 c0       	rjmp	.+10     	; 0x16d4 <_Z10gauss_algoiiPdPS_+0x4aa>
    16ca:	21 91       	ld	r18, Z+
    16cc:	31 91       	ld	r19, Z+
    16ce:	2f 3f       	cpi	r18, 0xFF	; 255
    16d0:	3f 4f       	sbci	r19, 0xFF	; 255
    16d2:	61 f4       	brne	.+24     	; 0x16ec <_Z10gauss_algoiiPdPS_+0x4c2>
			free(where);
    16d4:	89 89       	ldd	r24, Y+17	; 0x11
    16d6:	9a 89       	ldd	r25, Y+18	; 0x12
    16d8:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <free>
			return 2;
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	37 c0       	rjmp	.+110    	; 0x1750 <_Z10gauss_algoiiPdPS_+0x526>
    16e2:	e9 89       	ldd	r30, Y+17	; 0x11
    16e4:	fa 89       	ldd	r31, Y+18	; 0x12
    16e6:	32 96       	adiw	r30, 0x02	; 2
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
		if (where[i] == -1){
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	82 15       	cp	r24, r2
    16f0:	93 05       	cpc	r25, r3
    16f2:	5c f3       	brlt	.-42     	; 0x16ca <_Z10gauss_algoiiPdPS_+0x4a0>
		if (where[i] == -1){
			free(where);
			return 2;
		}
	}
	free(where);
    16f4:	89 89       	ldd	r24, Y+17	; 0x11
    16f6:	9a 89       	ldd	r25, Y+18	; 0x12
    16f8:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <free>
	return 1;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	27 c0       	rjmp	.+78     	; 0x1750 <_Z10gauss_algoiiPdPS_+0x526>
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
		return 0;
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	24 c0       	rjmp	.+72     	; 0x1750 <_Z10gauss_algoiiPdPS_+0x526>
	//returns a solution if there is at least one solution
	const double EPS = 1e-7;
	int *where = (int*)malloc(m * sizeof(int));
	for(int i=0; i<m; i++)
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
    1708:	69 85       	ldd	r22, Y+9	; 0x09
    170a:	7a 85       	ldd	r23, Y+10	; 0x0a
    170c:	16 16       	cp	r1, r22
    170e:	17 06       	cpc	r1, r23
    1710:	0c f4       	brge	.+2      	; 0x1714 <_Z10gauss_algoiiPdPS_+0x4ea>
    1712:	de cd       	rjmp	.-1092   	; 0x12d0 <_Z10gauss_algoiiPdPS_+0xa6>
    1714:	ef 84       	ldd	r14, Y+15	; 0x0f
    1716:	f8 88       	ldd	r15, Y+16	; 0x10
		where[col] = row;
		for (int i=0; i<n; ++i)
		if (i != row)
		{
			double c = a[i][col] / a[row][col];
			for (int j=col; j<=m; ++j)
    1718:	f7 01       	movw	r30, r14
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	00 cf       	rjmp	.-512    	; 0x1520 <_Z10gauss_algoiiPdPS_+0x2f6>
		{
			double tmp = a[sel][i];
			a[sel][i] = a[row][i];
			a[row][i] = tmp;
		}
		where[col] = row;
    1720:	eb 85       	ldd	r30, Y+11	; 0x0b
    1722:	fc 85       	ldd	r31, Y+12	; 0x0c
    1724:	ad 85       	ldd	r26, Y+13	; 0x0d
    1726:	be 85       	ldd	r27, Y+14	; 0x0e
    1728:	ed 93       	st	X+, r30
    172a:	fc 93       	st	X, r31
		for (int i=0; i<n; ++i)
		if (i != row)
		{
			double c = a[i][col] / a[row][col];
    172c:	cf 01       	movw	r24, r30
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	42 01       	movw	r8, r4
    1734:	88 0e       	add	r8, r24
    1736:	99 1e       	adc	r9, r25
    1738:	5e 82       	std	Y+6, r5	; 0x06
    173a:	4d 82       	std	Y+5, r4	; 0x05
    173c:	a1 2c       	mov	r10, r1
    173e:	b1 2c       	mov	r11, r1
    1740:	78 ce       	rjmp	.-784    	; 0x1432 <_Z10gauss_algoiiPdPS_+0x208>
	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
    1742:	29 85       	ldd	r18, Y+9	; 0x09
    1744:	3a 85       	ldd	r19, Y+10	; 0x0a
    1746:	12 16       	cp	r1, r18
    1748:	13 06       	cpc	r1, r19
    174a:	0c f4       	brge	.+2      	; 0x174e <_Z10gauss_algoiiPdPS_+0x524>
    174c:	3b cf       	rjmp	.-394    	; 0x15c4 <_Z10gauss_algoiiPdPS_+0x39a>
    174e:	b6 cf       	rjmp	.-148    	; 0x16bc <_Z10gauss_algoiiPdPS_+0x492>
			return 2;
		}
	}
	free(where);
	return 1;
}
    1750:	64 96       	adiw	r28, 0x14	; 20
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	df 90       	pop	r13
    176a:	cf 90       	pop	r12
    176c:	bf 90       	pop	r11
    176e:	af 90       	pop	r10
    1770:	9f 90       	pop	r9
    1772:	8f 90       	pop	r8
    1774:	7f 90       	pop	r7
    1776:	6f 90       	pop	r6
    1778:	5f 90       	pop	r5
    177a:	4f 90       	pop	r4
    177c:	3f 90       	pop	r3
    177e:	2f 90       	pop	r2
    1780:	08 95       	ret

00001782 <_Z17evaluate_functionPcd>:
parser ob;
double evaluate_function(char str[], double a)
{
    1782:	8f 92       	push	r8
    1784:	9f 92       	push	r9
    1786:	af 92       	push	r10
    1788:	bf 92       	push	r11
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	e7 97       	sbiw	r28, 0x37	; 55
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	fc 01       	movw	r30, r24
    17ac:	4a 01       	movw	r8, r20
    17ae:	5b 01       	movw	r10, r22
	char s[40];
	int idx = 0;
	for(int i=0;str[i]!=0;i++)
    17b0:	90 81       	ld	r25, Z
    17b2:	99 23       	and	r25, r25
    17b4:	a1 f1       	breq	.+104    	; 0x181e <_Z17evaluate_functionPcd+0x9c>
    17b6:	6f 01       	movw	r12, r30
    17b8:	8f ef       	ldi	r24, 0xFF	; 255
    17ba:	c8 1a       	sub	r12, r24
    17bc:	d8 0a       	sbc	r13, r24
    17be:	e1 2c       	mov	r14, r1
    17c0:	f1 2c       	mov	r15, r1
	{
		if(str[i]=='x')
    17c2:	98 37       	cpi	r25, 0x78	; 120
    17c4:	e1 f4       	brne	.+56     	; 0x17fe <_Z17evaluate_functionPcd+0x7c>
		{
			char tmp[15];
			dtostrf(a,1,8,tmp);
    17c6:	8e 01       	movw	r16, r28
    17c8:	07 5d       	subi	r16, 0xD7	; 215
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	28 e0       	ldi	r18, 0x08	; 8
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	c5 01       	movw	r24, r10
    17d2:	b4 01       	movw	r22, r8
    17d4:	0e 94 67 24 	call	0x48ce	; 0x48ce <dtostrf>
			for(int j=0;tmp[j]!=0;j++)
    17d8:	99 a5       	ldd	r25, Y+41	; 0x29
    17da:	99 23       	and	r25, r25
    17dc:	d1 f0       	breq	.+52     	; 0x1812 <_Z17evaluate_functionPcd+0x90>
    17de:	a1 e0       	ldi	r26, 0x01	; 1
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	ac 0f       	add	r26, r28
    17e4:	bd 1f       	adc	r27, r29
    17e6:	ae 0d       	add	r26, r14
    17e8:	bf 1d       	adc	r27, r15
    17ea:	fe 01       	movw	r30, r28
    17ec:	ba 96       	adiw	r30, 0x2a	; 42
			{
				s[idx] = tmp[j];
    17ee:	9d 93       	st	X+, r25
				idx++;
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	e8 1a       	sub	r14, r24
    17f4:	f8 0a       	sbc	r15, r24
	{
		if(str[i]=='x')
		{
			char tmp[15];
			dtostrf(a,1,8,tmp);
			for(int j=0;tmp[j]!=0;j++)
    17f6:	91 91       	ld	r25, Z+
    17f8:	91 11       	cpse	r25, r1
    17fa:	f9 cf       	rjmp	.-14     	; 0x17ee <_Z17evaluate_functionPcd+0x6c>
    17fc:	0a c0       	rjmp	.+20     	; 0x1812 <_Z17evaluate_functionPcd+0x90>
				s[idx] = tmp[j];
				idx++;
			}
		}
		else{
			s[idx] = str[i];
    17fe:	e1 e0       	ldi	r30, 0x01	; 1
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	ec 0f       	add	r30, r28
    1804:	fd 1f       	adc	r31, r29
    1806:	ee 0d       	add	r30, r14
    1808:	ff 1d       	adc	r31, r15
    180a:	90 83       	st	Z, r25
			idx++;
    180c:	ef ef       	ldi	r30, 0xFF	; 255
    180e:	ee 1a       	sub	r14, r30
    1810:	fe 0a       	sbc	r15, r30
parser ob;
double evaluate_function(char str[], double a)
{
	char s[40];
	int idx = 0;
	for(int i=0;str[i]!=0;i++)
    1812:	f6 01       	movw	r30, r12
    1814:	91 91       	ld	r25, Z+
    1816:	6f 01       	movw	r12, r30
    1818:	91 11       	cpse	r25, r1
    181a:	d3 cf       	rjmp	.-90     	; 0x17c2 <_Z17evaluate_functionPcd+0x40>
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <_Z17evaluate_functionPcd+0xa0>
parser ob;
double evaluate_function(char str[], double a)
{
	char s[40];
	int idx = 0;
    181e:	e1 2c       	mov	r14, r1
    1820:	f1 2c       	mov	r15, r1
		else{
			s[idx] = str[i];
			idx++;
		}
	}
	s[idx] = 0;
    1822:	e1 e0       	ldi	r30, 0x01	; 1
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	ec 0f       	add	r30, r28
    1828:	fd 1f       	adc	r31, r29
    182a:	ee 0d       	add	r30, r14
    182c:	ff 1d       	adc	r31, r15
    182e:	10 82       	st	Z, r1
	
	double ans=ob.eval_exp(s);
    1830:	be 01       	movw	r22, r28
    1832:	6f 5f       	subi	r22, 0xFF	; 255
    1834:	7f 4f       	sbci	r23, 0xFF	; 255
    1836:	8c ee       	ldi	r24, 0xEC	; 236
    1838:	92 e0       	ldi	r25, 0x02	; 2
    183a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN6parser8eval_expEPc>
	return ans;
}
    183e:	e7 96       	adiw	r28, 0x37	; 55
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	df 90       	pop	r13
    1858:	cf 90       	pop	r12
    185a:	bf 90       	pop	r11
    185c:	af 90       	pop	r10
    185e:	9f 90       	pop	r9
    1860:	8f 90       	pop	r8
    1862:	08 95       	ret

00001864 <_Z19simpson_integrationPcdd>:

double simpson_integration(char str[] , double a, double b){
    1864:	2f 92       	push	r2
    1866:	3f 92       	push	r3
    1868:	4f 92       	push	r4
    186a:	5f 92       	push	r5
    186c:	6f 92       	push	r6
    186e:	7f 92       	push	r7
    1870:	8f 92       	push	r8
    1872:	9f 92       	push	r9
    1874:	af 92       	push	r10
    1876:	bf 92       	push	r11
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	28 97       	sbiw	r28, 0x08	; 8
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	7c 01       	movw	r14, r24
    189a:	2a 01       	movw	r4, r20
    189c:	3b 01       	movw	r6, r22
    189e:	48 01       	movw	r8, r16
    18a0:	59 01       	movw	r10, r18
	const int N = 500;
	double h = (b - a) / N;
    18a2:	9a 01       	movw	r18, r20
    18a4:	ab 01       	movw	r20, r22
    18a6:	c5 01       	movw	r24, r10
    18a8:	b4 01       	movw	r22, r8
    18aa:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a ef       	ldi	r20, 0xFA	; 250
    18b4:	53 e4       	ldi	r21, 0x43	; 67
    18b6:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    18ba:	69 83       	std	Y+1, r22	; 0x01
    18bc:	7a 83       	std	Y+2, r23	; 0x02
    18be:	8b 83       	std	Y+3, r24	; 0x03
    18c0:	9c 83       	std	Y+4, r25	; 0x04
	double s = evaluate_function(str, a) + evaluate_function(str , b);
    18c2:	b3 01       	movw	r22, r6
    18c4:	a2 01       	movw	r20, r4
    18c6:	c7 01       	movw	r24, r14
    18c8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_Z17evaluate_functionPcd>
    18cc:	6d 83       	std	Y+5, r22	; 0x05
    18ce:	7e 83       	std	Y+6, r23	; 0x06
    18d0:	8f 83       	std	Y+7, r24	; 0x07
    18d2:	98 87       	std	Y+8, r25	; 0x08
    18d4:	b5 01       	movw	r22, r10
    18d6:	a4 01       	movw	r20, r8
    18d8:	c7 01       	movw	r24, r14
    18da:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_Z17evaluate_functionPcd>
    18de:	9b 01       	movw	r18, r22
    18e0:	ac 01       	movw	r20, r24
    18e2:	6d 81       	ldd	r22, Y+5	; 0x05
    18e4:	7e 81       	ldd	r23, Y+6	; 0x06
    18e6:	8f 81       	ldd	r24, Y+7	; 0x07
    18e8:	98 85       	ldd	r25, Y+8	; 0x08
    18ea:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    18ee:	4b 01       	movw	r8, r22
    18f0:	5c 01       	movw	r10, r24
	for (int i = 1; i <= N - 1; ++i) {
		double x = a + h * i;
		s += evaluate_function(str , x) * ((i & 1) ? 4 : 2);
    18f2:	29 81       	ldd	r18, Y+1	; 0x01
    18f4:	3a 81       	ldd	r19, Y+2	; 0x02
    18f6:	4b 81       	ldd	r20, Y+3	; 0x03
    18f8:	5c 81       	ldd	r21, Y+4	; 0x04
    18fa:	c3 01       	movw	r24, r6
    18fc:	b2 01       	movw	r22, r4
    18fe:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    1902:	ab 01       	movw	r20, r22
    1904:	bc 01       	movw	r22, r24
    1906:	c7 01       	movw	r24, r14
    1908:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_Z17evaluate_functionPcd>
    190c:	9b 01       	movw	r18, r22
    190e:	ac 01       	movw	r20, r24

double simpson_integration(char str[] , double a, double b){
	const int N = 500;
	double h = (b - a) / N;
	double s = evaluate_function(str, a) + evaluate_function(str , b);
	for (int i = 1; i <= N - 1; ++i) {
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
		double x = a + h * i;
		s += evaluate_function(str , x) * ((i & 1) ? 4 : 2);
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	a0 e0       	ldi	r26, 0x00	; 0
    1918:	f0 e8       	ldi	r31, 0x80	; 128
    191a:	e0 e4       	ldi	r30, 0x40	; 64
    191c:	d1 2c       	mov	r13, r1
    191e:	00 e8       	ldi	r16, 0x80	; 128
    1920:	c1 2c       	mov	r12, r1
    1922:	31 2c       	mov	r3, r1
    1924:	21 2c       	mov	r2, r1
    1926:	10 e4       	ldi	r17, 0x40	; 64
    1928:	9e 83       	std	Y+6, r25	; 0x06
    192a:	8d 83       	std	Y+5, r24	; 0x05
    192c:	25 c0       	rjmp	.+74     	; 0x1978 <_Z19simpson_integrationPcdd+0x114>
    192e:	2d 81       	ldd	r18, Y+5	; 0x05
    1930:	3e 81       	ldd	r19, Y+6	; 0x06
    1932:	b9 01       	movw	r22, r18
    1934:	33 0f       	add	r19, r19
    1936:	88 0b       	sbc	r24, r24
    1938:	99 0b       	sbc	r25, r25
    193a:	0e 94 33 20 	call	0x4066	; 0x4066 <__floatsisf>
    193e:	29 81       	ldd	r18, Y+1	; 0x01
    1940:	3a 81       	ldd	r19, Y+2	; 0x02
    1942:	4b 81       	ldd	r20, Y+3	; 0x03
    1944:	5c 81       	ldd	r21, Y+4	; 0x04
    1946:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    194a:	a3 01       	movw	r20, r6
    194c:	92 01       	movw	r18, r4
    194e:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    1952:	ab 01       	movw	r20, r22
    1954:	bc 01       	movw	r22, r24
    1956:	c7 01       	movw	r24, r14
    1958:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_Z17evaluate_functionPcd>
    195c:	9b 01       	movw	r18, r22
    195e:	ac 01       	movw	r20, r24
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	80 fd       	sbrc	r24, 0
    1964:	05 c0       	rjmp	.+10     	; 0x1970 <_Z19simpson_integrationPcdd+0x10c>
    1966:	bc 2d       	mov	r27, r12
    1968:	a3 2d       	mov	r26, r3
    196a:	f2 2d       	mov	r31, r2
    196c:	e1 2f       	mov	r30, r17
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <_Z19simpson_integrationPcdd+0x114>
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ad 2d       	mov	r26, r13
    1974:	f0 2f       	mov	r31, r16
    1976:	e0 e4       	ldi	r30, 0x40	; 64
    1978:	6b 2f       	mov	r22, r27
    197a:	7a 2f       	mov	r23, r26
    197c:	8f 2f       	mov	r24, r31
    197e:	9e 2f       	mov	r25, r30
    1980:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    1984:	9b 01       	movw	r18, r22
    1986:	ac 01       	movw	r20, r24
    1988:	c5 01       	movw	r24, r10
    198a:	b4 01       	movw	r22, r8
    198c:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    1990:	4b 01       	movw	r8, r22
    1992:	5c 01       	movw	r10, r24

double simpson_integration(char str[] , double a, double b){
	const int N = 500;
	double h = (b - a) / N;
	double s = evaluate_function(str, a) + evaluate_function(str , b);
	for (int i = 1; i <= N - 1; ++i) {
    1994:	2d 81       	ldd	r18, Y+5	; 0x05
    1996:	3e 81       	ldd	r19, Y+6	; 0x06
    1998:	2f 5f       	subi	r18, 0xFF	; 255
    199a:	3f 4f       	sbci	r19, 0xFF	; 255
    199c:	3e 83       	std	Y+6, r19	; 0x06
    199e:	2d 83       	std	Y+5, r18	; 0x05
    19a0:	24 3f       	cpi	r18, 0xF4	; 244
    19a2:	31 40       	sbci	r19, 0x01	; 1
    19a4:	21 f6       	brne	.-120    	; 0x192e <_Z19simpson_integrationPcdd+0xca>
		double x = a + h * i;
		s += evaluate_function(str , x) * ((i & 1) ? 4 : 2);
	}
	s *= h / 3;
	return s;
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e4       	ldi	r20, 0x40	; 64
    19ac:	50 e4       	ldi	r21, 0x40	; 64
    19ae:	69 81       	ldd	r22, Y+1	; 0x01
    19b0:	7a 81       	ldd	r23, Y+2	; 0x02
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    19ba:	a5 01       	movw	r20, r10
    19bc:	94 01       	movw	r18, r8
    19be:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
}
    19c2:	28 96       	adiw	r28, 0x08	; 8
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	ff 90       	pop	r15
    19d8:	ef 90       	pop	r14
    19da:	df 90       	pop	r13
    19dc:	cf 90       	pop	r12
    19de:	bf 90       	pop	r11
    19e0:	af 90       	pop	r10
    19e2:	9f 90       	pop	r9
    19e4:	8f 90       	pop	r8
    19e6:	7f 90       	pop	r7
    19e8:	6f 90       	pop	r6
    19ea:	5f 90       	pop	r5
    19ec:	4f 90       	pop	r4
    19ee:	3f 90       	pop	r3
    19f0:	2f 90       	pop	r2
    19f2:	08 95       	ret

000019f4 <_Z6appendPciS_>:
char mat[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};
char mat2[4][4][6]={{"sin(","cos(","tan(","sqrt("},{"^","x","y","<-"},{",",".","(",")"},{"C","C","C","C"}};
	
void append(char s[] , int len , char s2[])
{
    19f4:	9c 01       	movw	r18, r24
	for(int i=0;s2[i]!=0;i++)
    19f6:	fa 01       	movw	r30, r20
    19f8:	90 81       	ld	r25, Z
    19fa:	99 23       	and	r25, r25
    19fc:	51 f0       	breq	.+20     	; 0x1a12 <_Z6appendPciS_+0x1e>
    19fe:	d9 01       	movw	r26, r18
    1a00:	a6 0f       	add	r26, r22
    1a02:	b7 1f       	adc	r27, r23
    1a04:	31 96       	adiw	r30, 0x01	; 1
	{
		s[len] = s2[i];
    1a06:	9d 93       	st	X+, r25
		len++;
    1a08:	6f 5f       	subi	r22, 0xFF	; 255
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255
char mat[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};
char mat2[4][4][6]={{"sin(","cos(","tan(","sqrt("},{"^","x","y","<-"},{",",".","(",")"},{"C","C","C","C"}};
	
void append(char s[] , int len , char s2[])
{
	for(int i=0;s2[i]!=0;i++)
    1a0c:	91 91       	ld	r25, Z+
    1a0e:	91 11       	cpse	r25, r1
    1a10:	fa cf       	rjmp	.-12     	; 0x1a06 <_Z6appendPciS_+0x12>
	{
		s[len] = s2[i];
		len++;
	}
	s[len] = 0;
    1a12:	f9 01       	movw	r30, r18
    1a14:	e6 0f       	add	r30, r22
    1a16:	f7 1f       	adc	r31, r23
    1a18:	10 82       	st	Z, r1
    1a1a:	08 95       	ret

00001a1c <_Z12show_and_getPcS_>:
#include <assert.h>
void show_and_get(char *F, char * s)
{
    1a1c:	2f 92       	push	r2
    1a1e:	3f 92       	push	r3
    1a20:	4f 92       	push	r4
    1a22:	5f 92       	push	r5
    1a24:	6f 92       	push	r6
    1a26:	7f 92       	push	r7
    1a28:	8f 92       	push	r8
    1a2a:	9f 92       	push	r9
    1a2c:	af 92       	push	r10
    1a2e:	bf 92       	push	r11
    1a30:	cf 92       	push	r12
    1a32:	df 92       	push	r13
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	ec 01       	movw	r28, r24
    1a42:	6b 01       	movw	r12, r22
	LCD_Clear();
    1a44:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a48:	2f ef       	ldi	r18, 0xFF	; 255
    1a4a:	81 ee       	ldi	r24, 0xE1	; 225
    1a4c:	94 e0       	ldi	r25, 0x04	; 4
    1a4e:	21 50       	subi	r18, 0x01	; 1
    1a50:	80 40       	sbci	r24, 0x00	; 0
    1a52:	90 40       	sbci	r25, 0x00	; 0
    1a54:	e1 f7       	brne	.-8      	; 0x1a4e <_Z12show_and_getPcS_+0x32>
    1a56:	00 c0       	rjmp	.+0      	; 0x1a58 <_Z12show_and_getPcS_+0x3c>
    1a58:	00 00       	nop
	_delay_ms(200);
	DisplayText(1,1,F);
    1a5a:	ae 01       	movw	r20, r28
    1a5c:	61 e0       	ldi	r22, 0x01	; 1
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
    1a64:	ef ef       	ldi	r30, 0xFF	; 255
    1a66:	f1 ee       	ldi	r31, 0xE1	; 225
    1a68:	24 e0       	ldi	r18, 0x04	; 4
    1a6a:	e1 50       	subi	r30, 0x01	; 1
    1a6c:	f0 40       	sbci	r31, 0x00	; 0
    1a6e:	20 40       	sbci	r18, 0x00	; 0
    1a70:	e1 f7       	brne	.-8      	; 0x1a6a <_Z12show_and_getPcS_+0x4e>
    1a72:	00 c0       	rjmp	.+0      	; 0x1a74 <_Z12show_and_getPcS_+0x58>
    1a74:	00 00       	nop
	_delay_ms(200);
	
	int len=0;
	int where=12;
    1a76:	0f 2e       	mov	r0, r31
    1a78:	fc e0       	ldi	r31, 0x0C	; 12
    1a7a:	4f 2e       	mov	r4, r31
    1a7c:	51 2c       	mov	r5, r1
    1a7e:	f0 2d       	mov	r31, r0
	LCD_Clear();
	_delay_ms(200);
	DisplayText(1,1,F);
	_delay_ms(200);
	
	int len=0;
    1a80:	00 e0       	ldi	r16, 0x00	; 0
    1a82:	10 e0       	ldi	r17, 0x00	; 0
	int where=12;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    1a84:	22 24       	eor	r2, r2
    1a86:	23 94       	inc	r2
    1a88:	31 2c       	mov	r3, r1
    1a8a:	0f 2e       	mov	r0, r31
    1a8c:	f6 e6       	ldi	r31, 0x66	; 102
    1a8e:	6f 2e       	mov	r6, r31
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	7f 2e       	mov	r7, r31
    1a94:	f0 2d       	mov	r31, r0
	
	int len=0;
	int where=12;
	while (1)
	{
		for(int c=4;c<8;c++)
    1a96:	68 94       	set
    1a98:	aa 24       	eor	r10, r10
    1a9a:	a2 f8       	bld	r10, 2
    1a9c:	b1 2c       	mov	r11, r1
		{
			PORTB=1<<c;
    1a9e:	c1 01       	movw	r24, r2
    1aa0:	0a 2c       	mov	r0, r10
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <_Z12show_and_getPcS_+0x8c>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <_Z12show_and_getPcS_+0x88>
    1aac:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    1aae:	8b bb       	out	0x1b, r24	; 27
    1ab0:	c5 01       	movw	r24, r10
    1ab2:	8e 53       	subi	r24, 0x3E	; 62
    1ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab6:	4c 01       	movw	r8, r24
    1ab8:	73 01       	movw	r14, r6
			for(int r=0;r<4;r++)
    1aba:	c0 e0       	ldi	r28, 0x00	; 0
    1abc:	d0 e0       	ldi	r29, 0x00	; 0
			{
				if(PINB&(1<<r))
    1abe:	86 b3       	in	r24, 0x16	; 22
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0c 2e       	mov	r0, r28
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <_Z12show_and_getPcS_+0xae>
    1ac6:	95 95       	asr	r25
    1ac8:	87 95       	ror	r24
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <_Z12show_and_getPcS_+0xaa>
    1ace:	80 ff       	sbrs	r24, 0
    1ad0:	39 c0       	rjmp	.+114    	; 0x1b44 <_Z12show_and_getPcS_+0x128>
				{
					if(mat[r][c-4]=='C')
    1ad2:	f4 01       	movw	r30, r8
    1ad4:	80 81       	ld	r24, Z
    1ad6:	83 34       	cpi	r24, 0x43	; 67
    1ad8:	79 f4       	brne	.+30     	; 0x1af8 <_Z12show_and_getPcS_+0xdc>
					{
						len=0;
						s[0]=0;
    1ada:	f6 01       	movw	r30, r12
    1adc:	10 82       	st	Z, r1
						where=1;
						LCD_Clear();
    1ade:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    1ae2:	a6 01       	movw	r20, r12
    1ae4:	61 e0       	ldi	r22, 0x01	; 1
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    1aec:	44 24       	eor	r4, r4
    1aee:	43 94       	inc	r4
    1af0:	51 2c       	mov	r5, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    1af2:	00 e0       	ldi	r16, 0x00	; 0
    1af4:	10 e0       	ldi	r17, 0x00	; 0
    1af6:	1c c0       	rjmp	.+56     	; 0x1b30 <_Z12show_and_getPcS_+0x114>
						where=1;
						LCD_Clear();
					}
					else
					{
						if(mat[r][c-4]=='=')
    1af8:	8d 33       	cpi	r24, 0x3D	; 61
    1afa:	09 f4       	brne	.+2      	; 0x1afe <_Z12show_and_getPcS_+0xe2>
    1afc:	92 c0       	rjmp	.+292    	; 0x1c22 <_Z12show_and_getPcS_+0x206>
						{
							return;
						}
						s[len]=mat[r][c-4];
    1afe:	f6 01       	movw	r30, r12
    1b00:	e0 0f       	add	r30, r16
    1b02:	f1 1f       	adc	r31, r17
    1b04:	80 83       	st	Z, r24
						len+=1;
    1b06:	0f 5f       	subi	r16, 0xFF	; 255
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
						s[len]=0;
    1b0a:	f6 01       	movw	r30, r12
    1b0c:	e0 0f       	add	r30, r16
    1b0e:	f1 1f       	adc	r31, r17
    1b10:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    1b12:	a6 01       	movw	r20, r12
    1b14:	64 2d       	mov	r22, r4
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    1b1c:	04 31       	cpi	r16, 0x14	; 20
    1b1e:	11 05       	cpc	r17, r1
    1b20:	39 f4       	brne	.+14     	; 0x1b30 <_Z12show_and_getPcS_+0x114>
					{
						where+=12;
    1b22:	fc e0       	ldi	r31, 0x0C	; 12
    1b24:	4f 0e       	add	r4, r31
    1b26:	51 1c       	adc	r5, r1
						len=0;
						s[0]=0;
    1b28:	f6 01       	movw	r30, r12
    1b2a:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    1b2c:	00 e0       	ldi	r16, 0x00	; 0
    1b2e:	10 e0       	ldi	r17, 0x00	; 0
    1b30:	ff ef       	ldi	r31, 0xFF	; 255
    1b32:	24 e3       	ldi	r18, 0x34	; 52
    1b34:	8c e0       	ldi	r24, 0x0C	; 12
    1b36:	f1 50       	subi	r31, 0x01	; 1
    1b38:	20 40       	sbci	r18, 0x00	; 0
    1b3a:	80 40       	sbci	r24, 0x00	; 0
    1b3c:	e1 f7       	brne	.-8      	; 0x1b36 <_Z12show_and_getPcS_+0x11a>
    1b3e:	00 c0       	rjmp	.+0      	; 0x1b40 <_Z12show_and_getPcS_+0x124>
    1b40:	00 00       	nop
    1b42:	52 c0       	rjmp	.+164    	; 0x1be8 <_Z12show_and_getPcS_+0x1cc>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    1b44:	89 b3       	in	r24, 0x19	; 25
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0c 2e       	mov	r0, r28
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <_Z12show_and_getPcS_+0x134>
    1b4c:	95 95       	asr	r25
    1b4e:	87 95       	ror	r24
    1b50:	0a 94       	dec	r0
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <_Z12show_and_getPcS_+0x130>
    1b54:	80 ff       	sbrs	r24, 0
    1b56:	48 c0       	rjmp	.+144    	; 0x1be8 <_Z12show_and_getPcS_+0x1cc>
				{
					if(mat2[r][c-4][0]=='<')
    1b58:	f7 01       	movw	r30, r14
    1b5a:	80 81       	ld	r24, Z
    1b5c:	8c 33       	cpi	r24, 0x3C	; 60
    1b5e:	f9 f4       	brne	.+62     	; 0x1b9e <_Z12show_and_getPcS_+0x182>
					{
						if(len==0){
    1b60:	01 15       	cp	r16, r1
    1b62:	11 05       	cpc	r17, r1
    1b64:	51 f4       	brne	.+20     	; 0x1b7a <_Z12show_and_getPcS_+0x15e>
    1b66:	ff ef       	ldi	r31, 0xFF	; 255
    1b68:	24 e3       	ldi	r18, 0x34	; 52
    1b6a:	8c e0       	ldi	r24, 0x0C	; 12
    1b6c:	f1 50       	subi	r31, 0x01	; 1
    1b6e:	20 40       	sbci	r18, 0x00	; 0
    1b70:	80 40       	sbci	r24, 0x00	; 0
    1b72:	e1 f7       	brne	.-8      	; 0x1b6c <_Z12show_and_getPcS_+0x150>
    1b74:	00 c0       	rjmp	.+0      	; 0x1b76 <_Z12show_and_getPcS_+0x15a>
    1b76:	00 00       	nop
    1b78:	37 c0       	rjmp	.+110    	; 0x1be8 <_Z12show_and_getPcS_+0x1cc>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    1b7a:	f6 01       	movw	r30, r12
    1b7c:	e0 0f       	add	r30, r16
    1b7e:	f1 1f       	adc	r31, r17
    1b80:	31 97       	sbiw	r30, 0x01	; 1
    1b82:	90 e2       	ldi	r25, 0x20	; 32
    1b84:	90 83       	st	Z, r25
						DisplayText(1,where,s);
    1b86:	a6 01       	movw	r20, r12
    1b88:	64 2d       	mov	r22, r4
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						len--;
    1b90:	01 50       	subi	r16, 0x01	; 1
    1b92:	11 09       	sbc	r17, r1
						s[len]=0;
    1b94:	f6 01       	movw	r30, r12
    1b96:	e0 0f       	add	r30, r16
    1b98:	f1 1f       	adc	r31, r17
    1b9a:	10 82       	st	Z, r1
    1b9c:	0d c0       	rjmp	.+26     	; 0x1bb8 <_Z12show_and_getPcS_+0x19c>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    1b9e:	a7 01       	movw	r20, r14
    1ba0:	b8 01       	movw	r22, r16
    1ba2:	c6 01       	movw	r24, r12
    1ba4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <_Z6appendPciS_>
						len = strlen(s);
    1ba8:	f6 01       	movw	r30, r12
    1baa:	01 90       	ld	r0, Z+
    1bac:	00 20       	and	r0, r0
    1bae:	e9 f7       	brne	.-6      	; 0x1baa <_Z12show_and_getPcS_+0x18e>
    1bb0:	31 97       	sbiw	r30, 0x01	; 1
    1bb2:	8f 01       	movw	r16, r30
    1bb4:	0c 19       	sub	r16, r12
    1bb6:	1d 09       	sbc	r17, r13
					}
					DisplayText(1,where,s);
    1bb8:	a6 01       	movw	r20, r12
    1bba:	64 2d       	mov	r22, r4
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    1bc2:	04 31       	cpi	r16, 0x14	; 20
    1bc4:	11 05       	cpc	r17, r1
    1bc6:	39 f4       	brne	.+14     	; 0x1bd6 <_Z12show_and_getPcS_+0x1ba>
					{
						where+=12;
    1bc8:	ec e0       	ldi	r30, 0x0C	; 12
    1bca:	4e 0e       	add	r4, r30
    1bcc:	51 1c       	adc	r5, r1
						len=0;
						s[0]=0;
    1bce:	f6 01       	movw	r30, r12
    1bd0:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    1bd2:	00 e0       	ldi	r16, 0x00	; 0
    1bd4:	10 e0       	ldi	r17, 0x00	; 0
    1bd6:	ff ef       	ldi	r31, 0xFF	; 255
    1bd8:	24 e3       	ldi	r18, 0x34	; 52
    1bda:	8c e0       	ldi	r24, 0x0C	; 12
    1bdc:	f1 50       	subi	r31, 0x01	; 1
    1bde:	20 40       	sbci	r18, 0x00	; 0
    1be0:	80 40       	sbci	r24, 0x00	; 0
    1be2:	e1 f7       	brne	.-8      	; 0x1bdc <_Z12show_and_getPcS_+0x1c0>
    1be4:	00 c0       	rjmp	.+0      	; 0x1be6 <_Z12show_and_getPcS_+0x1ca>
    1be6:	00 00       	nop
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    1be8:	21 96       	adiw	r28, 0x01	; 1
    1bea:	98 e1       	ldi	r25, 0x18	; 24
    1bec:	e9 0e       	add	r14, r25
    1bee:	f1 1c       	adc	r15, r1
    1bf0:	e4 e0       	ldi	r30, 0x04	; 4
    1bf2:	8e 0e       	add	r8, r30
    1bf4:	91 1c       	adc	r9, r1
    1bf6:	c4 30       	cpi	r28, 0x04	; 4
    1bf8:	d1 05       	cpc	r29, r1
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <_Z12show_and_getPcS_+0x1e2>
    1bfc:	60 cf       	rjmp	.-320    	; 0x1abe <_Z12show_and_getPcS_+0xa2>
    1bfe:	8f e1       	ldi	r24, 0x1F	; 31
    1c00:	9e e4       	ldi	r25, 0x4E	; 78
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <_Z12show_and_getPcS_+0x1e6>
    1c06:	00 c0       	rjmp	.+0      	; 0x1c08 <_Z12show_and_getPcS_+0x1ec>
    1c08:	00 00       	nop
	
	int len=0;
	int where=12;
	while (1)
	{
		for(int c=4;c<8;c++)
    1c0a:	9f ef       	ldi	r25, 0xFF	; 255
    1c0c:	a9 1a       	sub	r10, r25
    1c0e:	b9 0a       	sbc	r11, r25
    1c10:	e6 e0       	ldi	r30, 0x06	; 6
    1c12:	6e 0e       	add	r6, r30
    1c14:	71 1c       	adc	r7, r1
    1c16:	f8 e0       	ldi	r31, 0x08	; 8
    1c18:	af 16       	cp	r10, r31
    1c1a:	b1 04       	cpc	r11, r1
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <_Z12show_and_getPcS_+0x204>
    1c1e:	3f cf       	rjmp	.-386    	; 0x1a9e <_Z12show_and_getPcS_+0x82>
    1c20:	34 cf       	rjmp	.-408    	; 0x1a8a <_Z12show_and_getPcS_+0x6e>
			}
			
			_delay_ms(10);
		}
	}
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	df 90       	pop	r13
    1c30:	cf 90       	pop	r12
    1c32:	bf 90       	pop	r11
    1c34:	af 90       	pop	r10
    1c36:	9f 90       	pop	r9
    1c38:	8f 90       	pop	r8
    1c3a:	7f 90       	pop	r7
    1c3c:	6f 90       	pop	r6
    1c3e:	5f 90       	pop	r5
    1c40:	4f 90       	pop	r4
    1c42:	3f 90       	pop	r3
    1c44:	2f 90       	pop	r2
    1c46:	08 95       	ret

00001c48 <_Z10graph_plotv>:


void graph_plot()
{
    1c48:	2f 92       	push	r2
    1c4a:	3f 92       	push	r3
    1c4c:	4f 92       	push	r4
    1c4e:	5f 92       	push	r5
    1c50:	6f 92       	push	r6
    1c52:	7f 92       	push	r7
    1c54:	8f 92       	push	r8
    1c56:	9f 92       	push	r9
    1c58:	af 92       	push	r10
    1c5a:	bf 92       	push	r11
    1c5c:	cf 92       	push	r12
    1c5e:	df 92       	push	r13
    1c60:	ef 92       	push	r14
    1c62:	ff 92       	push	r15
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	cd 50       	subi	r28, 0x0D	; 13
    1c72:	d1 40       	sbci	r29, 0x01	; 1
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
	char F1[]="F(x) = ";
    1c7e:	88 e0       	ldi	r24, 0x08	; 8
    1c80:	e2 ed       	ldi	r30, 0xD2	; 210
    1c82:	f1 e0       	ldi	r31, 0x01	; 1
    1c84:	de 01       	movw	r26, r28
    1c86:	11 96       	adiw	r26, 0x01	; 1
    1c88:	01 90       	ld	r0, Z+
    1c8a:	0d 92       	st	X+, r0
    1c8c:	8a 95       	dec	r24
    1c8e:	e1 f7       	brne	.-8      	; 0x1c88 <_Z10graph_plotv+0x40>
	char s1[15];
	show_and_get(F1,s1);
    1c90:	be 01       	movw	r22, r28
    1c92:	67 5f       	subi	r22, 0xF7	; 247
    1c94:	7f 4f       	sbci	r23, 0xFF	; 255
    1c96:	ce 01       	movw	r24, r28
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_Z12show_and_getPcS_>
	
	char F2[]="minX = ";
    1c9e:	88 e0       	ldi	r24, 0x08	; 8
    1ca0:	ea ed       	ldi	r30, 0xDA	; 218
    1ca2:	f1 e0       	ldi	r31, 0x01	; 1
    1ca4:	de 01       	movw	r26, r28
    1ca6:	58 96       	adiw	r26, 0x18	; 24
    1ca8:	01 90       	ld	r0, Z+
    1caa:	0d 92       	st	X+, r0
    1cac:	8a 95       	dec	r24
    1cae:	e1 f7       	brne	.-8      	; 0x1ca8 <_Z10graph_plotv+0x60>
	char s2[10];
	show_and_get(F2,s2);
    1cb0:	be 01       	movw	r22, r28
    1cb2:	60 5e       	subi	r22, 0xE0	; 224
    1cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	48 96       	adiw	r24, 0x18	; 24
    1cba:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_Z12show_and_getPcS_>
	
	char F3[]="maxX = ";
    1cbe:	88 e0       	ldi	r24, 0x08	; 8
    1cc0:	e2 ee       	ldi	r30, 0xE2	; 226
    1cc2:	f1 e0       	ldi	r31, 0x01	; 1
    1cc4:	de 01       	movw	r26, r28
    1cc6:	9a 96       	adiw	r26, 0x2a	; 42
    1cc8:	01 90       	ld	r0, Z+
    1cca:	0d 92       	st	X+, r0
    1ccc:	8a 95       	dec	r24
    1cce:	e1 f7       	brne	.-8      	; 0x1cc8 <_Z10graph_plotv+0x80>
	char s3[10];
	show_and_get(F3,s3);
    1cd0:	be 01       	movw	r22, r28
    1cd2:	6e 5c       	subi	r22, 0xCE	; 206
    1cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	8a 96       	adiw	r24, 0x2a	; 42
    1cda:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_Z12show_and_getPcS_>
	
	
	const int T=25;
	
	parser ob;
    1cde:	ce 01       	movw	r24, r28
    1ce0:	cc 96       	adiw	r24, 0x3c	; 60
    1ce2:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN6parserC1Ev>
	double l=ob.eval_exp(s2);
    1ce6:	be 01       	movw	r22, r28
    1ce8:	60 5e       	subi	r22, 0xE0	; 224
    1cea:	7f 4f       	sbci	r23, 0xFF	; 255
    1cec:	ce 01       	movw	r24, r28
    1cee:	cc 96       	adiw	r24, 0x3c	; 60
    1cf0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN6parser8eval_expEPc>
    1cf4:	c3 51       	subi	r28, 0x13	; 19
    1cf6:	df 4f       	sbci	r29, 0xFF	; 255
    1cf8:	68 83       	st	Y, r22
    1cfa:	cd 5e       	subi	r28, 0xED	; 237
    1cfc:	d0 40       	sbci	r29, 0x00	; 0
    1cfe:	c2 51       	subi	r28, 0x12	; 18
    1d00:	df 4f       	sbci	r29, 0xFF	; 255
    1d02:	78 83       	st	Y, r23
    1d04:	ce 5e       	subi	r28, 0xEE	; 238
    1d06:	d0 40       	sbci	r29, 0x00	; 0
    1d08:	c1 51       	subi	r28, 0x11	; 17
    1d0a:	df 4f       	sbci	r29, 0xFF	; 255
    1d0c:	88 83       	st	Y, r24
    1d0e:	cf 5e       	subi	r28, 0xEF	; 239
    1d10:	d0 40       	sbci	r29, 0x00	; 0
    1d12:	19 2f       	mov	r17, r25
	double r=ob.eval_exp(s3);
    1d14:	be 01       	movw	r22, r28
    1d16:	6e 5c       	subi	r22, 0xCE	; 206
    1d18:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	cc 96       	adiw	r24, 0x3c	; 60
    1d1e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN6parser8eval_expEPc>
    1d22:	66 2e       	mov	r6, r22
    1d24:	77 2e       	mov	r7, r23
    1d26:	88 2e       	mov	r8, r24
    1d28:	99 2e       	mov	r9, r25
	
	
	if(l>r)
    1d2a:	26 2f       	mov	r18, r22
    1d2c:	37 2f       	mov	r19, r23
    1d2e:	48 2f       	mov	r20, r24
    1d30:	59 2f       	mov	r21, r25
    1d32:	c3 51       	subi	r28, 0x13	; 19
    1d34:	df 4f       	sbci	r29, 0xFF	; 255
    1d36:	68 81       	ld	r22, Y
    1d38:	cd 5e       	subi	r28, 0xED	; 237
    1d3a:	d0 40       	sbci	r29, 0x00	; 0
    1d3c:	c2 51       	subi	r28, 0x12	; 18
    1d3e:	df 4f       	sbci	r29, 0xFF	; 255
    1d40:	78 81       	ld	r23, Y
    1d42:	ce 5e       	subi	r28, 0xEE	; 238
    1d44:	d0 40       	sbci	r29, 0x00	; 0
    1d46:	c1 51       	subi	r28, 0x11	; 17
    1d48:	df 4f       	sbci	r29, 0xFF	; 255
    1d4a:	88 81       	ld	r24, Y
    1d4c:	cf 5e       	subi	r28, 0xEF	; 239
    1d4e:	d0 40       	sbci	r29, 0x00	; 0
    1d50:	91 2f       	mov	r25, r17
    1d52:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__gesf2>
    1d56:	18 16       	cp	r1, r24
    1d58:	24 f5       	brge	.+72     	; 0x1da2 <_Z10graph_plotv+0x15a>
    1d5a:	c3 51       	subi	r28, 0x13	; 19
    1d5c:	df 4f       	sbci	r29, 0xFF	; 255
    1d5e:	38 81       	ld	r19, Y
    1d60:	cd 5e       	subi	r28, 0xED	; 237
    1d62:	d0 40       	sbci	r29, 0x00	; 0
    1d64:	c2 51       	subi	r28, 0x12	; 18
    1d66:	df 4f       	sbci	r29, 0xFF	; 255
    1d68:	28 81       	ld	r18, Y
    1d6a:	ce 5e       	subi	r28, 0xEE	; 238
    1d6c:	d0 40       	sbci	r29, 0x00	; 0
    1d6e:	c1 51       	subi	r28, 0x11	; 17
    1d70:	df 4f       	sbci	r29, 0xFF	; 255
    1d72:	98 81       	ld	r25, Y
    1d74:	cf 5e       	subi	r28, 0xEF	; 239
    1d76:	d0 40       	sbci	r29, 0x00	; 0
    1d78:	81 2f       	mov	r24, r17
	{
		double t=r;
		r=l;
		l=t;
    1d7a:	c3 51       	subi	r28, 0x13	; 19
    1d7c:	df 4f       	sbci	r29, 0xFF	; 255
    1d7e:	68 82       	st	Y, r6
    1d80:	cd 5e       	subi	r28, 0xED	; 237
    1d82:	d0 40       	sbci	r29, 0x00	; 0
    1d84:	c2 51       	subi	r28, 0x12	; 18
    1d86:	df 4f       	sbci	r29, 0xFF	; 255
    1d88:	78 82       	st	Y, r7
    1d8a:	ce 5e       	subi	r28, 0xEE	; 238
    1d8c:	d0 40       	sbci	r29, 0x00	; 0
    1d8e:	c1 51       	subi	r28, 0x11	; 17
    1d90:	df 4f       	sbci	r29, 0xFF	; 255
    1d92:	88 82       	st	Y, r8
    1d94:	cf 5e       	subi	r28, 0xEF	; 239
    1d96:	d0 40       	sbci	r29, 0x00	; 0
    1d98:	19 2d       	mov	r17, r9
	
	
	if(l>r)
	{
		double t=r;
		r=l;
    1d9a:	63 2e       	mov	r6, r19
    1d9c:	72 2e       	mov	r7, r18
    1d9e:	89 2e       	mov	r8, r25
    1da0:	98 2e       	mov	r9, r24
    1da2:	2e 01       	movw	r4, r28
    1da4:	25 e8       	ldi	r18, 0x85	; 133
    1da6:	42 0e       	add	r4, r18
    1da8:	51 1c       	adc	r5, r1
    1daa:	1e 01       	movw	r2, r28
    1dac:	89 ee       	ldi	r24, 0xE9	; 233
    1dae:	28 0e       	add	r2, r24
    1db0:	31 1c       	adc	r3, r1
    1db2:	72 01       	movw	r14, r4
	}
	
	double save_y[T];
	
	int w=0;
	for(double x=l;w<T;w++)
    1db4:	c3 51       	subi	r28, 0x13	; 19
    1db6:	df 4f       	sbci	r29, 0xFF	; 255
    1db8:	d8 80       	ld	r13, Y
    1dba:	cd 5e       	subi	r28, 0xED	; 237
    1dbc:	d0 40       	sbci	r29, 0x00	; 0
    1dbe:	c2 51       	subi	r28, 0x12	; 18
    1dc0:	df 4f       	sbci	r29, 0xFF	; 255
    1dc2:	c8 80       	ld	r12, Y
    1dc4:	ce 5e       	subi	r28, 0xEE	; 238
    1dc6:	d0 40       	sbci	r29, 0x00	; 0
    1dc8:	c1 51       	subi	r28, 0x11	; 17
    1dca:	df 4f       	sbci	r29, 0xFF	; 255
    1dcc:	b8 80       	ld	r11, Y
    1dce:	cf 5e       	subi	r28, 0xEF	; 239
    1dd0:	d0 40       	sbci	r29, 0x00	; 0
    1dd2:	a1 2e       	mov	r10, r17
	{
		save_y[w]=evaluate_function(s1,x);
    1dd4:	c0 50       	subi	r28, 0x00	; 0
    1dd6:	df 4f       	sbci	r29, 0xFF	; 255
    1dd8:	59 82       	std	Y+1, r5	; 0x01
    1dda:	48 82       	st	Y, r4
    1ddc:	c0 50       	subi	r28, 0x00	; 0
    1dde:	d1 40       	sbci	r29, 0x01	; 1
    1de0:	56 2c       	mov	r5, r6
    1de2:	47 2c       	mov	r4, r7
    1de4:	71 2e       	mov	r7, r17
    1de6:	c7 51       	subi	r28, 0x17	; 23
    1de8:	df 4f       	sbci	r29, 0xFF	; 255
    1dea:	88 82       	st	Y, r8
    1dec:	c9 5e       	subi	r28, 0xE9	; 233
    1dee:	d0 40       	sbci	r29, 0x00	; 0
    1df0:	69 2c       	mov	r6, r9
    1df2:	1b 2d       	mov	r17, r11
    1df4:	0a 2d       	mov	r16, r10
    1df6:	4d 2d       	mov	r20, r13
    1df8:	5c 2d       	mov	r21, r12
    1dfa:	61 2f       	mov	r22, r17
    1dfc:	70 2f       	mov	r23, r16
    1dfe:	ce 01       	movw	r24, r28
    1e00:	09 96       	adiw	r24, 0x09	; 9
    1e02:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_Z17evaluate_functionPcd>
    1e06:	f7 01       	movw	r30, r14
    1e08:	61 93       	st	Z+, r22
    1e0a:	71 93       	st	Z+, r23
    1e0c:	81 93       	st	Z+, r24
    1e0e:	91 93       	st	Z+, r25
    1e10:	7f 01       	movw	r14, r30
		_delay_ms(500);
		dtostrf(save_y[w],1,2,t2);
		show_and_get(t2,t2);
		*/
		//_delay_ms(1000);
		x+=(r-l)/(T-1);
    1e12:	c3 51       	subi	r28, 0x13	; 19
    1e14:	df 4f       	sbci	r29, 0xFF	; 255
    1e16:	28 81       	ld	r18, Y
    1e18:	cd 5e       	subi	r28, 0xED	; 237
    1e1a:	d0 40       	sbci	r29, 0x00	; 0
    1e1c:	c2 51       	subi	r28, 0x12	; 18
    1e1e:	df 4f       	sbci	r29, 0xFF	; 255
    1e20:	38 81       	ld	r19, Y
    1e22:	ce 5e       	subi	r28, 0xEE	; 238
    1e24:	d0 40       	sbci	r29, 0x00	; 0
    1e26:	c1 51       	subi	r28, 0x11	; 17
    1e28:	df 4f       	sbci	r29, 0xFF	; 255
    1e2a:	48 81       	ld	r20, Y
    1e2c:	cf 5e       	subi	r28, 0xEF	; 239
    1e2e:	d0 40       	sbci	r29, 0x00	; 0
    1e30:	57 2d       	mov	r21, r7
    1e32:	65 2d       	mov	r22, r5
    1e34:	74 2d       	mov	r23, r4
    1e36:	c7 51       	subi	r28, 0x17	; 23
    1e38:	df 4f       	sbci	r29, 0xFF	; 255
    1e3a:	88 81       	ld	r24, Y
    1e3c:	c9 5e       	subi	r28, 0xE9	; 233
    1e3e:	d0 40       	sbci	r29, 0x00	; 0
    1e40:	96 2d       	mov	r25, r6
    1e42:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    1e46:	4b 01       	movw	r8, r22
    1e48:	5c 01       	movw	r10, r24
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 ec       	ldi	r20, 0xC0	; 192
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    1e56:	9b 01       	movw	r18, r22
    1e58:	ac 01       	movw	r20, r24
    1e5a:	6d 2d       	mov	r22, r13
    1e5c:	7c 2d       	mov	r23, r12
    1e5e:	81 2f       	mov	r24, r17
    1e60:	90 2f       	mov	r25, r16
    1e62:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    1e66:	d6 2e       	mov	r13, r22
    1e68:	c7 2e       	mov	r12, r23
    1e6a:	18 2f       	mov	r17, r24
    1e6c:	09 2f       	mov	r16, r25
	}
	
	double save_y[T];
	
	int w=0;
	for(double x=l;w<T;w++)
    1e6e:	2e 14       	cp	r2, r14
    1e70:	3f 04       	cpc	r3, r15
    1e72:	09 f6       	brne	.-126    	; 0x1df6 <_Z10graph_plotv+0x1ae>
    1e74:	c0 50       	subi	r28, 0x00	; 0
    1e76:	df 4f       	sbci	r29, 0xFF	; 255
    1e78:	48 80       	ld	r4, Y
    1e7a:	59 80       	ldd	r5, Y+1	; 0x01
    1e7c:	c0 50       	subi	r28, 0x00	; 0
    1e7e:	d1 40       	sbci	r29, 0x01	; 1
    1e80:	c0 50       	subi	r28, 0x00	; 0
    1e82:	df 4f       	sbci	r29, 0xFF	; 255
    1e84:	88 82       	st	Y, r8
    1e86:	99 82       	std	Y+1, r9	; 0x01
    1e88:	aa 82       	std	Y+2, r10	; 0x02
    1e8a:	bb 82       	std	Y+3, r11	; 0x03
    1e8c:	c0 50       	subi	r28, 0x00	; 0
    1e8e:	d1 40       	sbci	r29, 0x01	; 1
    1e90:	17 2d       	mov	r17, r7
    1e92:	62 01       	movw	r12, r4
    1e94:	61 2c       	mov	r6, r1
    1e96:	71 2c       	mov	r7, r1
    1e98:	c8 50       	subi	r28, 0x08	; 8
    1e9a:	df 4f       	sbci	r29, 0xFF	; 255
    1e9c:	18 82       	st	Y, r1
    1e9e:	c8 5f       	subi	r28, 0xF8	; 248
    1ea0:	d0 40       	sbci	r29, 0x00	; 0
    1ea2:	c4 50       	subi	r28, 0x04	; 4
    1ea4:	df 4f       	sbci	r29, 0xFF	; 255
    1ea6:	18 82       	st	Y, r1
    1ea8:	cc 5f       	subi	r28, 0xFC	; 252
    1eaa:	d0 40       	sbci	r29, 0x00	; 0
    1eac:	cc 5f       	subi	r28, 0xFC	; 252
    1eae:	de 4f       	sbci	r29, 0xFE	; 254
    1eb0:	18 82       	st	Y, r1
    1eb2:	c4 50       	subi	r28, 0x04	; 4
    1eb4:	d1 40       	sbci	r29, 0x01	; 1
    1eb6:	cb 5f       	subi	r28, 0xFB	; 251
    1eb8:	de 4f       	sbci	r29, 0xFE	; 254
    1eba:	18 82       	st	Y, r1
    1ebc:	c5 50       	subi	r28, 0x05	; 5
    1ebe:	d1 40       	sbci	r29, 0x01	; 1
    1ec0:	c7 51       	subi	r28, 0x17	; 23
    1ec2:	df 4f       	sbci	r29, 0xFF	; 255
    1ec4:	18 82       	st	Y, r1
    1ec6:	19 82       	std	Y+1, r1	; 0x01
    1ec8:	1a 82       	std	Y+2, r1	; 0x02
    1eca:	1b 82       	std	Y+3, r1	; 0x03
    1ecc:	c9 5e       	subi	r28, 0xE9	; 233
    1ece:	d0 40       	sbci	r29, 0x00	; 0
    1ed0:	ca 5f       	subi	r28, 0xFA	; 250
    1ed2:	de 4f       	sbci	r29, 0xFE	; 254
    1ed4:	18 82       	st	Y, r1
    1ed6:	c6 50       	subi	r28, 0x06	; 6
    1ed8:	d1 40       	sbci	r29, 0x01	; 1
    1eda:	c9 5f       	subi	r28, 0xF9	; 249
    1edc:	de 4f       	sbci	r29, 0xFE	; 254
    1ede:	18 82       	st	Y, r1
    1ee0:	c7 50       	subi	r28, 0x07	; 7
    1ee2:	d1 40       	sbci	r29, 0x01	; 1
    1ee4:	c8 5f       	subi	r28, 0xF8	; 248
    1ee6:	de 4f       	sbci	r29, 0xFE	; 254
    1ee8:	18 82       	st	Y, r1
    1eea:	c8 50       	subi	r28, 0x08	; 8
    1eec:	d1 40       	sbci	r29, 0x01	; 1
    1eee:	c7 5f       	subi	r28, 0xF7	; 247
    1ef0:	de 4f       	sbci	r29, 0xFE	; 254
    1ef2:	18 82       	st	Y, r1
    1ef4:	c9 50       	subi	r28, 0x09	; 9
    1ef6:	d1 40       	sbci	r29, 0x01	; 1
    1ef8:	00 e0       	ldi	r16, 0x00	; 0
    1efa:	91 2c       	mov	r9, r1
    1efc:	c0 51       	subi	r28, 0x10	; 16
    1efe:	df 4f       	sbci	r29, 0xFF	; 255
    1f00:	18 82       	st	Y, r1
    1f02:	c0 5f       	subi	r28, 0xF0	; 240
    1f04:	d0 40       	sbci	r29, 0x00	; 0
    1f06:	cc 50       	subi	r28, 0x0C	; 12
    1f08:	df 4f       	sbci	r29, 0xFF	; 255
    1f0a:	18 82       	st	Y, r1
    1f0c:	c4 5f       	subi	r28, 0xF4	; 244
    1f0e:	d0 40       	sbci	r29, 0x00	; 0
    1f10:	c6 5f       	subi	r28, 0xF6	; 246
    1f12:	de 4f       	sbci	r29, 0xFE	; 254
    1f14:	59 82       	std	Y+1, r5	; 0x01
    1f16:	48 82       	st	Y, r4
    1f18:	ca 50       	subi	r28, 0x0A	; 10
    1f1a:	d1 40       	sbci	r29, 0x01	; 1
    1f1c:	c4 5f       	subi	r28, 0xF4	; 244
    1f1e:	de 4f       	sbci	r29, 0xFE	; 254
    1f20:	39 82       	std	Y+1, r3	; 0x01
    1f22:	28 82       	st	Y, r2
    1f24:	cc 50       	subi	r28, 0x0C	; 12
    1f26:	d1 40       	sbci	r29, 0x01	; 1
    1f28:	41 2e       	mov	r4, r17
    1f2a:	30 2e       	mov	r3, r16
    1f2c:	59 2c       	mov	r5, r9

	
	double mxX=0,mxY=0,mnX=0,mnY=0;
	for(int i=0;i<T;i++)
	{
		if(l+i*(r-l)/(T-1)>mxX) mxX=l+i*(r-l)/(T-1);
    1f2e:	b3 01       	movw	r22, r6
    1f30:	07 2c       	mov	r0, r7
    1f32:	00 0c       	add	r0, r0
    1f34:	88 0b       	sbc	r24, r24
    1f36:	99 0b       	sbc	r25, r25
    1f38:	0e 94 33 20 	call	0x4066	; 0x4066 <__floatsisf>
    1f3c:	c0 50       	subi	r28, 0x00	; 0
    1f3e:	df 4f       	sbci	r29, 0xFF	; 255
    1f40:	28 81       	ld	r18, Y
    1f42:	39 81       	ldd	r19, Y+1	; 0x01
    1f44:	4a 81       	ldd	r20, Y+2	; 0x02
    1f46:	5b 81       	ldd	r21, Y+3	; 0x03
    1f48:	c0 50       	subi	r28, 0x00	; 0
    1f4a:	d1 40       	sbci	r29, 0x01	; 1
    1f4c:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 ec       	ldi	r20, 0xC0	; 192
    1f56:	51 e4       	ldi	r21, 0x41	; 65
    1f58:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    1f5c:	c3 51       	subi	r28, 0x13	; 19
    1f5e:	df 4f       	sbci	r29, 0xFF	; 255
    1f60:	28 81       	ld	r18, Y
    1f62:	cd 5e       	subi	r28, 0xED	; 237
    1f64:	d0 40       	sbci	r29, 0x00	; 0
    1f66:	c2 51       	subi	r28, 0x12	; 18
    1f68:	df 4f       	sbci	r29, 0xFF	; 255
    1f6a:	38 81       	ld	r19, Y
    1f6c:	ce 5e       	subi	r28, 0xEE	; 238
    1f6e:	d0 40       	sbci	r29, 0x00	; 0
    1f70:	c1 51       	subi	r28, 0x11	; 17
    1f72:	df 4f       	sbci	r29, 0xFF	; 255
    1f74:	48 81       	ld	r20, Y
    1f76:	cf 5e       	subi	r28, 0xEF	; 239
    1f78:	d0 40       	sbci	r29, 0x00	; 0
    1f7a:	54 2d       	mov	r21, r4
    1f7c:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    1f80:	06 2f       	mov	r16, r22
    1f82:	17 2f       	mov	r17, r23
    1f84:	f8 2e       	mov	r15, r24
    1f86:	e9 2e       	mov	r14, r25
    1f88:	23 2d       	mov	r18, r3
    1f8a:	35 2d       	mov	r19, r5
    1f8c:	c0 51       	subi	r28, 0x10	; 16
    1f8e:	df 4f       	sbci	r29, 0xFF	; 255
    1f90:	48 81       	ld	r20, Y
    1f92:	c0 5f       	subi	r28, 0xF0	; 240
    1f94:	d0 40       	sbci	r29, 0x00	; 0
    1f96:	cc 50       	subi	r28, 0x0C	; 12
    1f98:	df 4f       	sbci	r29, 0xFF	; 255
    1f9a:	58 81       	ld	r21, Y
    1f9c:	c4 5f       	subi	r28, 0xF4	; 244
    1f9e:	d0 40       	sbci	r29, 0x00	; 0
    1fa0:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__gesf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	64 f4       	brge	.+24     	; 0x1fc0 <_Z10graph_plotv+0x378>
    1fa8:	30 2e       	mov	r3, r16
    1faa:	51 2e       	mov	r5, r17
    1fac:	c0 51       	subi	r28, 0x10	; 16
    1fae:	df 4f       	sbci	r29, 0xFF	; 255
    1fb0:	f8 82       	st	Y, r15
    1fb2:	c0 5f       	subi	r28, 0xF0	; 240
    1fb4:	d0 40       	sbci	r29, 0x00	; 0
    1fb6:	cc 50       	subi	r28, 0x0C	; 12
    1fb8:	df 4f       	sbci	r29, 0xFF	; 255
    1fba:	e8 82       	st	Y, r14
    1fbc:	c4 5f       	subi	r28, 0xF4	; 244
    1fbe:	d0 40       	sbci	r29, 0x00	; 0
		if(save_y[i]>mxY) mxY=save_y[i];
    1fc0:	f6 01       	movw	r30, r12
    1fc2:	81 90       	ld	r8, Z+
    1fc4:	91 90       	ld	r9, Z+
    1fc6:	a1 90       	ld	r10, Z+
    1fc8:	b1 90       	ld	r11, Z+
    1fca:	6f 01       	movw	r12, r30
    1fcc:	ca 5f       	subi	r28, 0xFA	; 250
    1fce:	de 4f       	sbci	r29, 0xFE	; 254
    1fd0:	28 81       	ld	r18, Y
    1fd2:	c6 50       	subi	r28, 0x06	; 6
    1fd4:	d1 40       	sbci	r29, 0x01	; 1
    1fd6:	c9 5f       	subi	r28, 0xF9	; 249
    1fd8:	de 4f       	sbci	r29, 0xFE	; 254
    1fda:	38 81       	ld	r19, Y
    1fdc:	c7 50       	subi	r28, 0x07	; 7
    1fde:	d1 40       	sbci	r29, 0x01	; 1
    1fe0:	c8 5f       	subi	r28, 0xF8	; 248
    1fe2:	de 4f       	sbci	r29, 0xFE	; 254
    1fe4:	48 81       	ld	r20, Y
    1fe6:	c8 50       	subi	r28, 0x08	; 8
    1fe8:	d1 40       	sbci	r29, 0x01	; 1
    1fea:	c7 5f       	subi	r28, 0xF7	; 247
    1fec:	de 4f       	sbci	r29, 0xFE	; 254
    1fee:	58 81       	ld	r21, Y
    1ff0:	c9 50       	subi	r28, 0x09	; 9
    1ff2:	d1 40       	sbci	r29, 0x01	; 1
    1ff4:	c5 01       	movw	r24, r10
    1ff6:	b4 01       	movw	r22, r8
    1ff8:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__gesf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	a4 f4       	brge	.+40     	; 0x2028 <_Z10graph_plotv+0x3e0>
    2000:	ca 5f       	subi	r28, 0xFA	; 250
    2002:	de 4f       	sbci	r29, 0xFE	; 254
    2004:	88 82       	st	Y, r8
    2006:	c6 50       	subi	r28, 0x06	; 6
    2008:	d1 40       	sbci	r29, 0x01	; 1
    200a:	c9 5f       	subi	r28, 0xF9	; 249
    200c:	de 4f       	sbci	r29, 0xFE	; 254
    200e:	98 82       	st	Y, r9
    2010:	c7 50       	subi	r28, 0x07	; 7
    2012:	d1 40       	sbci	r29, 0x01	; 1
    2014:	c8 5f       	subi	r28, 0xF8	; 248
    2016:	de 4f       	sbci	r29, 0xFE	; 254
    2018:	a8 82       	st	Y, r10
    201a:	c8 50       	subi	r28, 0x08	; 8
    201c:	d1 40       	sbci	r29, 0x01	; 1
    201e:	c7 5f       	subi	r28, 0xF7	; 247
    2020:	de 4f       	sbci	r29, 0xFE	; 254
    2022:	b8 82       	st	Y, r11
    2024:	c9 50       	subi	r28, 0x09	; 9
    2026:	d1 40       	sbci	r29, 0x01	; 1
		
		if(l+i*(r-l)/(T-1)<mnX) mnX=l+i*(r-l)/(T-1);
    2028:	c7 51       	subi	r28, 0x17	; 23
    202a:	df 4f       	sbci	r29, 0xFF	; 255
    202c:	28 81       	ld	r18, Y
    202e:	39 81       	ldd	r19, Y+1	; 0x01
    2030:	4a 81       	ldd	r20, Y+2	; 0x02
    2032:	5b 81       	ldd	r21, Y+3	; 0x03
    2034:	c9 5e       	subi	r28, 0xE9	; 233
    2036:	d0 40       	sbci	r29, 0x00	; 0
    2038:	60 2f       	mov	r22, r16
    203a:	71 2f       	mov	r23, r17
    203c:	8f 2d       	mov	r24, r15
    203e:	9e 2d       	mov	r25, r14
    2040:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    2044:	88 23       	and	r24, r24
    2046:	64 f4       	brge	.+24     	; 0x2060 <_Z10graph_plotv+0x418>
    2048:	80 2f       	mov	r24, r16
    204a:	91 2f       	mov	r25, r17
    204c:	af 2d       	mov	r26, r15
    204e:	be 2d       	mov	r27, r14
    2050:	c7 51       	subi	r28, 0x17	; 23
    2052:	df 4f       	sbci	r29, 0xFF	; 255
    2054:	88 83       	st	Y, r24
    2056:	99 83       	std	Y+1, r25	; 0x01
    2058:	aa 83       	std	Y+2, r26	; 0x02
    205a:	bb 83       	std	Y+3, r27	; 0x03
    205c:	c9 5e       	subi	r28, 0xE9	; 233
    205e:	d0 40       	sbci	r29, 0x00	; 0
		if(save_y[i]<mnY) mnY=save_y[i];	
    2060:	c8 50       	subi	r28, 0x08	; 8
    2062:	df 4f       	sbci	r29, 0xFF	; 255
    2064:	28 81       	ld	r18, Y
    2066:	c8 5f       	subi	r28, 0xF8	; 248
    2068:	d0 40       	sbci	r29, 0x00	; 0
    206a:	c4 50       	subi	r28, 0x04	; 4
    206c:	df 4f       	sbci	r29, 0xFF	; 255
    206e:	38 81       	ld	r19, Y
    2070:	cc 5f       	subi	r28, 0xFC	; 252
    2072:	d0 40       	sbci	r29, 0x00	; 0
    2074:	cc 5f       	subi	r28, 0xFC	; 252
    2076:	de 4f       	sbci	r29, 0xFE	; 254
    2078:	48 81       	ld	r20, Y
    207a:	c4 50       	subi	r28, 0x04	; 4
    207c:	d1 40       	sbci	r29, 0x01	; 1
    207e:	cb 5f       	subi	r28, 0xFB	; 251
    2080:	de 4f       	sbci	r29, 0xFE	; 254
    2082:	58 81       	ld	r21, Y
    2084:	c5 50       	subi	r28, 0x05	; 5
    2086:	d1 40       	sbci	r29, 0x01	; 1
    2088:	c5 01       	movw	r24, r10
    208a:	b4 01       	movw	r22, r8
    208c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    2090:	88 23       	and	r24, r24
    2092:	a4 f4       	brge	.+40     	; 0x20bc <_Z10graph_plotv+0x474>
    2094:	c8 50       	subi	r28, 0x08	; 8
    2096:	df 4f       	sbci	r29, 0xFF	; 255
    2098:	88 82       	st	Y, r8
    209a:	c8 5f       	subi	r28, 0xF8	; 248
    209c:	d0 40       	sbci	r29, 0x00	; 0
    209e:	c4 50       	subi	r28, 0x04	; 4
    20a0:	df 4f       	sbci	r29, 0xFF	; 255
    20a2:	98 82       	st	Y, r9
    20a4:	cc 5f       	subi	r28, 0xFC	; 252
    20a6:	d0 40       	sbci	r29, 0x00	; 0
    20a8:	cc 5f       	subi	r28, 0xFC	; 252
    20aa:	de 4f       	sbci	r29, 0xFE	; 254
    20ac:	a8 82       	st	Y, r10
    20ae:	c4 50       	subi	r28, 0x04	; 4
    20b0:	d1 40       	sbci	r29, 0x01	; 1
    20b2:	cb 5f       	subi	r28, 0xFB	; 251
    20b4:	de 4f       	sbci	r29, 0xFE	; 254
    20b6:	b8 82       	st	Y, r11
    20b8:	c5 50       	subi	r28, 0x05	; 5
    20ba:	d1 40       	sbci	r29, 0x01	; 1
	}
	//l+i*(r-l)/(T-1)

	
	double mxX=0,mxY=0,mnX=0,mnY=0;
	for(int i=0;i<T;i++)
    20bc:	ff ef       	ldi	r31, 0xFF	; 255
    20be:	6f 1a       	sub	r6, r31
    20c0:	7f 0a       	sbc	r7, r31
    20c2:	29 e1       	ldi	r18, 0x19	; 25
    20c4:	62 16       	cp	r6, r18
    20c6:	71 04       	cpc	r7, r1
    20c8:	09 f0       	breq	.+2      	; 0x20cc <_Z10graph_plotv+0x484>
    20ca:	31 cf       	rjmp	.-414    	; 0x1f2e <_Z10graph_plotv+0x2e6>
    20cc:	14 2d       	mov	r17, r4
    20ce:	03 2d       	mov	r16, r3
    20d0:	c4 5f       	subi	r28, 0xF4	; 244
    20d2:	de 4f       	sbci	r29, 0xFE	; 254
    20d4:	28 80       	ld	r2, Y
    20d6:	39 80       	ldd	r3, Y+1	; 0x01
    20d8:	cc 50       	subi	r28, 0x0C	; 12
    20da:	d1 40       	sbci	r29, 0x01	; 1
    20dc:	95 2c       	mov	r9, r5
    20de:	c6 5f       	subi	r28, 0xF6	; 246
    20e0:	de 4f       	sbci	r29, 0xFE	; 254
    20e2:	48 80       	ld	r4, Y
    20e4:	59 80       	ldd	r5, Y+1	; 0x01
    20e6:	ca 50       	subi	r28, 0x0A	; 10
    20e8:	d1 40       	sbci	r29, 0x01	; 1
    20ea:	72 01       	movw	r14, r4
    20ec:	c8 50       	subi	r28, 0x08	; 8
    20ee:	df 4f       	sbci	r29, 0xFF	; 255
    20f0:	d8 80       	ld	r13, Y
    20f2:	c8 5f       	subi	r28, 0xF8	; 248
    20f4:	d0 40       	sbci	r29, 0x00	; 0
    20f6:	c4 50       	subi	r28, 0x04	; 4
    20f8:	df 4f       	sbci	r29, 0xFF	; 255
    20fa:	c8 80       	ld	r12, Y
    20fc:	cc 5f       	subi	r28, 0xFC	; 252
    20fe:	d0 40       	sbci	r29, 0x00	; 0
    2100:	cc 5f       	subi	r28, 0xFC	; 252
    2102:	de 4f       	sbci	r29, 0xFE	; 254
    2104:	b8 80       	ld	r11, Y
    2106:	c4 50       	subi	r28, 0x04	; 4
    2108:	d1 40       	sbci	r29, 0x01	; 1
    210a:	cb 5f       	subi	r28, 0xFB	; 251
    210c:	de 4f       	sbci	r29, 0xFE	; 254
    210e:	a8 80       	ld	r10, Y
    2110:	c5 50       	subi	r28, 0x05	; 5
    2112:	d1 40       	sbci	r29, 0x01	; 1
		if(l+i*(r-l)/(T-1)<mnX) mnX=l+i*(r-l)/(T-1);
		if(save_y[i]<mnY) mnY=save_y[i];	
	}
	for(int i=0;i<T;i++)
	{
		save_y[i]-=mnY;
    2114:	2d 2d       	mov	r18, r13
    2116:	3c 2d       	mov	r19, r12
    2118:	4b 2d       	mov	r20, r11
    211a:	5a 2d       	mov	r21, r10
    211c:	f7 01       	movw	r30, r14
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    212a:	f7 01       	movw	r30, r14
    212c:	61 93       	st	Z+, r22
    212e:	71 93       	st	Z+, r23
    2130:	81 93       	st	Z+, r24
    2132:	91 93       	st	Z+, r25
    2134:	7f 01       	movw	r14, r30
		if(save_y[i]>mxY) mxY=save_y[i];
		
		if(l+i*(r-l)/(T-1)<mnX) mnX=l+i*(r-l)/(T-1);
		if(save_y[i]<mnY) mnY=save_y[i];	
	}
	for(int i=0;i<T;i++)
    2136:	2e 16       	cp	r2, r30
    2138:	3f 06       	cpc	r3, r31
    213a:	61 f7       	brne	.-40     	; 0x2114 <_Z10graph_plotv+0x4cc>
	{
		save_y[i]-=mnY;
	}
	//((l+i*(r-l)/(T-1))-mnX)
	double scaleX=120/(mxX-mnX);
    213c:	c7 51       	subi	r28, 0x17	; 23
    213e:	df 4f       	sbci	r29, 0xFF	; 255
    2140:	28 81       	ld	r18, Y
    2142:	39 81       	ldd	r19, Y+1	; 0x01
    2144:	4a 81       	ldd	r20, Y+2	; 0x02
    2146:	5b 81       	ldd	r21, Y+3	; 0x03
    2148:	c9 5e       	subi	r28, 0xE9	; 233
    214a:	d0 40       	sbci	r29, 0x00	; 0
    214c:	60 2f       	mov	r22, r16
    214e:	79 2d       	mov	r23, r9
    2150:	c0 51       	subi	r28, 0x10	; 16
    2152:	df 4f       	sbci	r29, 0xFF	; 255
    2154:	88 81       	ld	r24, Y
    2156:	c0 5f       	subi	r28, 0xF0	; 240
    2158:	d0 40       	sbci	r29, 0x00	; 0
    215a:	cc 50       	subi	r28, 0x0C	; 12
    215c:	df 4f       	sbci	r29, 0xFF	; 255
    215e:	98 81       	ld	r25, Y
    2160:	c4 5f       	subi	r28, 0xF4	; 244
    2162:	d0 40       	sbci	r29, 0x00	; 0
    2164:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    2168:	9b 01       	movw	r18, r22
    216a:	ac 01       	movw	r20, r24
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	80 ef       	ldi	r24, 0xF0	; 240
    2172:	92 e4       	ldi	r25, 0x42	; 66
    2174:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    2178:	c0 51       	subi	r28, 0x10	; 16
    217a:	df 4f       	sbci	r29, 0xFF	; 255
    217c:	68 83       	st	Y, r22
    217e:	79 83       	std	Y+1, r23	; 0x01
    2180:	8a 83       	std	Y+2, r24	; 0x02
    2182:	9b 83       	std	Y+3, r25	; 0x03
    2184:	c0 5f       	subi	r28, 0xF0	; 240
    2186:	d0 40       	sbci	r29, 0x00	; 0
	double scaleY=60/(mxY-mnY);
    2188:	c8 50       	subi	r28, 0x08	; 8
    218a:	df 4f       	sbci	r29, 0xFF	; 255
    218c:	28 81       	ld	r18, Y
    218e:	c8 5f       	subi	r28, 0xF8	; 248
    2190:	d0 40       	sbci	r29, 0x00	; 0
    2192:	c4 50       	subi	r28, 0x04	; 4
    2194:	df 4f       	sbci	r29, 0xFF	; 255
    2196:	38 81       	ld	r19, Y
    2198:	cc 5f       	subi	r28, 0xFC	; 252
    219a:	d0 40       	sbci	r29, 0x00	; 0
    219c:	cc 5f       	subi	r28, 0xFC	; 252
    219e:	de 4f       	sbci	r29, 0xFE	; 254
    21a0:	48 81       	ld	r20, Y
    21a2:	c4 50       	subi	r28, 0x04	; 4
    21a4:	d1 40       	sbci	r29, 0x01	; 1
    21a6:	cb 5f       	subi	r28, 0xFB	; 251
    21a8:	de 4f       	sbci	r29, 0xFE	; 254
    21aa:	58 81       	ld	r21, Y
    21ac:	c5 50       	subi	r28, 0x05	; 5
    21ae:	d1 40       	sbci	r29, 0x01	; 1
    21b0:	ca 5f       	subi	r28, 0xFA	; 250
    21b2:	de 4f       	sbci	r29, 0xFE	; 254
    21b4:	68 81       	ld	r22, Y
    21b6:	c6 50       	subi	r28, 0x06	; 6
    21b8:	d1 40       	sbci	r29, 0x01	; 1
    21ba:	c9 5f       	subi	r28, 0xF9	; 249
    21bc:	de 4f       	sbci	r29, 0xFE	; 254
    21be:	78 81       	ld	r23, Y
    21c0:	c7 50       	subi	r28, 0x07	; 7
    21c2:	d1 40       	sbci	r29, 0x01	; 1
    21c4:	c8 5f       	subi	r28, 0xF8	; 248
    21c6:	de 4f       	sbci	r29, 0xFE	; 254
    21c8:	88 81       	ld	r24, Y
    21ca:	c8 50       	subi	r28, 0x08	; 8
    21cc:	d1 40       	sbci	r29, 0x01	; 1
    21ce:	c7 5f       	subi	r28, 0xF7	; 247
    21d0:	de 4f       	sbci	r29, 0xFE	; 254
    21d2:	98 81       	ld	r25, Y
    21d4:	c9 50       	subi	r28, 0x09	; 9
    21d6:	d1 40       	sbci	r29, 0x01	; 1
    21d8:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    21dc:	9b 01       	movw	r18, r22
    21de:	ac 01       	movw	r20, r24
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	80 e7       	ldi	r24, 0x70	; 112
    21e6:	92 e4       	ldi	r25, 0x42	; 66
    21e8:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    21ec:	cc 50       	subi	r28, 0x0C	; 12
    21ee:	df 4f       	sbci	r29, 0xFF	; 255
    21f0:	68 83       	st	Y, r22
    21f2:	79 83       	std	Y+1, r23	; 0x01
    21f4:	8a 83       	std	Y+2, r24	; 0x02
    21f6:	9b 83       	std	Y+3, r25	; 0x03
    21f8:	c4 5f       	subi	r28, 0xF4	; 244
    21fa:	d0 40       	sbci	r29, 0x00	; 0

	LCD_Clear();
    21fc:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
    2200:	ff ef       	ldi	r31, 0xFF	; 255
    2202:	24 e3       	ldi	r18, 0x34	; 52
    2204:	8c e0       	ldi	r24, 0x0C	; 12
    2206:	f1 50       	subi	r31, 0x01	; 1
    2208:	20 40       	sbci	r18, 0x00	; 0
    220a:	80 40       	sbci	r24, 0x00	; 0
    220c:	e1 f7       	brne	.-8      	; 0x2206 <_Z10graph_plotv+0x5be>
    220e:	00 c0       	rjmp	.+0      	; 0x2210 <_Z10graph_plotv+0x5c8>
    2210:	00 00       	nop
    2212:	89 e1       	ldi	r24, 0x19	; 25
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	01 97       	sbiw	r24, 0x01	; 1
	_delay_ms(500);
	
	
	for(int i=0;i<T;i++)
    2218:	f1 f7       	brne	.-4      	; 0x2216 <_Z10graph_plotv+0x5ce>
		//i_x[i]=round(save_x[i]*scaleX);
		//i_y[i]=63-round(save_y[i]*scaleY);
	}
	for(int y=0;y<64;y++)
	{
		int x=round((-mnX)*scaleX);
    221a:	c0 51       	subi	r28, 0x10	; 16
    221c:	df 4f       	sbci	r29, 0xFF	; 255
    221e:	28 81       	ld	r18, Y
    2220:	39 81       	ldd	r19, Y+1	; 0x01
    2222:	4a 81       	ldd	r20, Y+2	; 0x02
    2224:	5b 81       	ldd	r21, Y+3	; 0x03
    2226:	c0 5f       	subi	r28, 0xF0	; 240
    2228:	d0 40       	sbci	r29, 0x00	; 0
    222a:	c7 51       	subi	r28, 0x17	; 23
    222c:	df 4f       	sbci	r29, 0xFF	; 255
    222e:	68 81       	ld	r22, Y
    2230:	79 81       	ldd	r23, Y+1	; 0x01
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	9b 81       	ldd	r25, Y+3	; 0x03
    2236:	c9 5e       	subi	r28, 0xE9	; 233
    2238:	d0 40       	sbci	r29, 0x00	; 0
    223a:	90 58       	subi	r25, 0x80	; 128
    223c:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    2240:	0e 94 65 23 	call	0x46ca	; 0x46ca <round>
		PutPixel(x,y,1);
    2244:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <__fixsfsi>
    2248:	f6 2e       	mov	r15, r22
    224a:	00 e0       	ldi	r16, 0x00	; 0
    224c:	41 e0       	ldi	r20, 0x01	; 1
    224e:	60 2f       	mov	r22, r16
    2250:	8f 2d       	mov	r24, r15
    2252:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
    2256:	0f 5f       	subi	r16, 0xFF	; 255
	for(int i=0;i<T;i++)
	{
		//i_x[i]=round(save_x[i]*scaleX);
		//i_y[i]=63-round(save_y[i]*scaleY);
	}
	for(int y=0;y<64;y++)
    2258:	00 34       	cpi	r16, 0x40	; 64
    225a:	c1 f7       	brne	.-16     	; 0x224c <_Z10graph_plotv+0x604>
		int x=round((-mnX)*scaleX);
		PutPixel(x,y,1);
	}
	for(int x=0;x<128;x++)
	{
		int y=63-round((-mnY)*scaleY);
    225c:	cc 50       	subi	r28, 0x0C	; 12
    225e:	df 4f       	sbci	r29, 0xFF	; 255
    2260:	28 81       	ld	r18, Y
    2262:	39 81       	ldd	r19, Y+1	; 0x01
    2264:	4a 81       	ldd	r20, Y+2	; 0x02
    2266:	5b 81       	ldd	r21, Y+3	; 0x03
    2268:	c4 5f       	subi	r28, 0xF4	; 244
    226a:	d0 40       	sbci	r29, 0x00	; 0
    226c:	c8 50       	subi	r28, 0x08	; 8
    226e:	df 4f       	sbci	r29, 0xFF	; 255
    2270:	68 81       	ld	r22, Y
    2272:	c8 5f       	subi	r28, 0xF8	; 248
    2274:	d0 40       	sbci	r29, 0x00	; 0
    2276:	c4 50       	subi	r28, 0x04	; 4
    2278:	df 4f       	sbci	r29, 0xFF	; 255
    227a:	78 81       	ld	r23, Y
    227c:	cc 5f       	subi	r28, 0xFC	; 252
    227e:	d0 40       	sbci	r29, 0x00	; 0
    2280:	cc 5f       	subi	r28, 0xFC	; 252
    2282:	de 4f       	sbci	r29, 0xFE	; 254
    2284:	88 81       	ld	r24, Y
    2286:	c4 50       	subi	r28, 0x04	; 4
    2288:	d1 40       	sbci	r29, 0x01	; 1
    228a:	cb 5f       	subi	r28, 0xFB	; 251
    228c:	de 4f       	sbci	r29, 0xFE	; 254
    228e:	98 81       	ld	r25, Y
    2290:	c5 50       	subi	r28, 0x05	; 5
    2292:	d1 40       	sbci	r29, 0x01	; 1
    2294:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    2298:	0e 94 65 23 	call	0x46ca	; 0x46ca <round>
		PutPixel(x,y,1);
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	4c e7       	ldi	r20, 0x7C	; 124
    22a2:	52 e4       	ldi	r21, 0x42	; 66
    22a4:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    22a8:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <__fixsfsi>
    22ac:	f6 2e       	mov	r15, r22
    22ae:	00 e0       	ldi	r16, 0x00	; 0
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	6f 2d       	mov	r22, r15
    22b4:	80 2f       	mov	r24, r16
    22b6:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
    22ba:	0f 5f       	subi	r16, 0xFF	; 255
	for(int y=0;y<64;y++)
	{
		int x=round((-mnX)*scaleX);
		PutPixel(x,y,1);
	}
	for(int x=0;x<128;x++)
    22bc:	00 38       	cpi	r16, 0x80	; 128
    22be:	c1 f7       	brne	.-16     	; 0x22b0 <_Z10graph_plotv+0x668>
    22c0:	22 24       	eor	r2, r2
    22c2:	23 94       	inc	r2
    22c4:	31 2c       	mov	r3, r1
    22c6:	71 2e       	mov	r7, r17
	}
	
	for(int i=1;i<T;i++)
	{
		//PutPixel(i_x[i],i_y[i],1);
		line(round(((l+(i-1)*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i-1]*scaleY),round(((l+i*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i]*scaleY),1);
    22c8:	f2 01       	movw	r30, r4
    22ca:	24 81       	ldd	r18, Z+4	; 0x04
    22cc:	35 81       	ldd	r19, Z+5	; 0x05
    22ce:	46 81       	ldd	r20, Z+6	; 0x06
    22d0:	57 81       	ldd	r21, Z+7	; 0x07
    22d2:	cc 50       	subi	r28, 0x0C	; 12
    22d4:	df 4f       	sbci	r29, 0xFF	; 255
    22d6:	68 81       	ld	r22, Y
    22d8:	79 81       	ldd	r23, Y+1	; 0x01
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	9b 81       	ldd	r25, Y+3	; 0x03
    22de:	c4 5f       	subi	r28, 0xF4	; 244
    22e0:	d0 40       	sbci	r29, 0x00	; 0
    22e2:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    22e6:	0e 94 65 23 	call	0x46ca	; 0x46ca <round>
    22ea:	c8 50       	subi	r28, 0x08	; 8
    22ec:	df 4f       	sbci	r29, 0xFF	; 255
    22ee:	68 83       	st	Y, r22
    22f0:	79 83       	std	Y+1, r23	; 0x01
    22f2:	8a 83       	std	Y+2, r24	; 0x02
    22f4:	9b 83       	std	Y+3, r25	; 0x03
    22f6:	c8 5f       	subi	r28, 0xF8	; 248
    22f8:	d0 40       	sbci	r29, 0x00	; 0
    22fa:	b1 01       	movw	r22, r2
    22fc:	03 2c       	mov	r0, r3
    22fe:	00 0c       	add	r0, r0
    2300:	88 0b       	sbc	r24, r24
    2302:	99 0b       	sbc	r25, r25
    2304:	0e 94 33 20 	call	0x4066	; 0x4066 <__floatsisf>
    2308:	c0 50       	subi	r28, 0x00	; 0
    230a:	df 4f       	sbci	r29, 0xFF	; 255
    230c:	28 81       	ld	r18, Y
    230e:	39 81       	ldd	r19, Y+1	; 0x01
    2310:	4a 81       	ldd	r20, Y+2	; 0x02
    2312:	5b 81       	ldd	r21, Y+3	; 0x03
    2314:	c0 50       	subi	r28, 0x00	; 0
    2316:	d1 40       	sbci	r29, 0x01	; 1
    2318:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 ec       	ldi	r20, 0xC0	; 192
    2322:	51 e4       	ldi	r21, 0x41	; 65
    2324:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    2328:	c3 51       	subi	r28, 0x13	; 19
    232a:	df 4f       	sbci	r29, 0xFF	; 255
    232c:	28 81       	ld	r18, Y
    232e:	cd 5e       	subi	r28, 0xED	; 237
    2330:	d0 40       	sbci	r29, 0x00	; 0
    2332:	c2 51       	subi	r28, 0x12	; 18
    2334:	df 4f       	sbci	r29, 0xFF	; 255
    2336:	38 81       	ld	r19, Y
    2338:	ce 5e       	subi	r28, 0xEE	; 238
    233a:	d0 40       	sbci	r29, 0x00	; 0
    233c:	c1 51       	subi	r28, 0x11	; 17
    233e:	df 4f       	sbci	r29, 0xFF	; 255
    2340:	48 81       	ld	r20, Y
    2342:	cf 5e       	subi	r28, 0xEF	; 239
    2344:	d0 40       	sbci	r29, 0x00	; 0
    2346:	57 2d       	mov	r21, r7
    2348:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    234c:	c7 51       	subi	r28, 0x17	; 23
    234e:	df 4f       	sbci	r29, 0xFF	; 255
    2350:	28 81       	ld	r18, Y
    2352:	39 81       	ldd	r19, Y+1	; 0x01
    2354:	4a 81       	ldd	r20, Y+2	; 0x02
    2356:	5b 81       	ldd	r21, Y+3	; 0x03
    2358:	c9 5e       	subi	r28, 0xE9	; 233
    235a:	d0 40       	sbci	r29, 0x00	; 0
    235c:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    2360:	c0 51       	subi	r28, 0x10	; 16
    2362:	df 4f       	sbci	r29, 0xFF	; 255
    2364:	28 81       	ld	r18, Y
    2366:	39 81       	ldd	r19, Y+1	; 0x01
    2368:	4a 81       	ldd	r20, Y+2	; 0x02
    236a:	5b 81       	ldd	r21, Y+3	; 0x03
    236c:	c0 5f       	subi	r28, 0xF0	; 240
    236e:	d0 40       	sbci	r29, 0x00	; 0
    2370:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    2374:	0e 94 65 23 	call	0x46ca	; 0x46ca <round>
    2378:	c4 50       	subi	r28, 0x04	; 4
    237a:	df 4f       	sbci	r29, 0xFF	; 255
    237c:	68 83       	st	Y, r22
    237e:	79 83       	std	Y+1, r23	; 0x01
    2380:	8a 83       	std	Y+2, r24	; 0x02
    2382:	9b 83       	std	Y+3, r25	; 0x03
    2384:	cc 5f       	subi	r28, 0xFC	; 252
    2386:	d0 40       	sbci	r29, 0x00	; 0
    2388:	f2 01       	movw	r30, r4
    238a:	20 81       	ld	r18, Z
    238c:	31 81       	ldd	r19, Z+1	; 0x01
    238e:	42 81       	ldd	r20, Z+2	; 0x02
    2390:	53 81       	ldd	r21, Z+3	; 0x03
    2392:	f4 e0       	ldi	r31, 0x04	; 4
    2394:	4f 0e       	add	r4, r31
    2396:	51 1c       	adc	r5, r1
    2398:	cc 50       	subi	r28, 0x0C	; 12
    239a:	df 4f       	sbci	r29, 0xFF	; 255
    239c:	68 81       	ld	r22, Y
    239e:	79 81       	ldd	r23, Y+1	; 0x01
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	9b 81       	ldd	r25, Y+3	; 0x03
    23a4:	c4 5f       	subi	r28, 0xF4	; 244
    23a6:	d0 40       	sbci	r29, 0x00	; 0
    23a8:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    23ac:	0e 94 65 23 	call	0x46ca	; 0x46ca <round>
    23b0:	4b 01       	movw	r8, r22
    23b2:	5c 01       	movw	r10, r24
    23b4:	b1 01       	movw	r22, r2
    23b6:	61 50       	subi	r22, 0x01	; 1
    23b8:	71 09       	sbc	r23, r1
    23ba:	07 2e       	mov	r0, r23
    23bc:	00 0c       	add	r0, r0
    23be:	88 0b       	sbc	r24, r24
    23c0:	99 0b       	sbc	r25, r25
    23c2:	0e 94 33 20 	call	0x4066	; 0x4066 <__floatsisf>
    23c6:	c0 50       	subi	r28, 0x00	; 0
    23c8:	df 4f       	sbci	r29, 0xFF	; 255
    23ca:	28 81       	ld	r18, Y
    23cc:	39 81       	ldd	r19, Y+1	; 0x01
    23ce:	4a 81       	ldd	r20, Y+2	; 0x02
    23d0:	5b 81       	ldd	r21, Y+3	; 0x03
    23d2:	c0 50       	subi	r28, 0x00	; 0
    23d4:	d1 40       	sbci	r29, 0x01	; 1
    23d6:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 ec       	ldi	r20, 0xC0	; 192
    23e0:	51 e4       	ldi	r21, 0x41	; 65
    23e2:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    23e6:	c3 51       	subi	r28, 0x13	; 19
    23e8:	df 4f       	sbci	r29, 0xFF	; 255
    23ea:	28 81       	ld	r18, Y
    23ec:	cd 5e       	subi	r28, 0xED	; 237
    23ee:	d0 40       	sbci	r29, 0x00	; 0
    23f0:	c2 51       	subi	r28, 0x12	; 18
    23f2:	df 4f       	sbci	r29, 0xFF	; 255
    23f4:	38 81       	ld	r19, Y
    23f6:	ce 5e       	subi	r28, 0xEE	; 238
    23f8:	d0 40       	sbci	r29, 0x00	; 0
    23fa:	c1 51       	subi	r28, 0x11	; 17
    23fc:	df 4f       	sbci	r29, 0xFF	; 255
    23fe:	48 81       	ld	r20, Y
    2400:	cf 5e       	subi	r28, 0xEF	; 239
    2402:	d0 40       	sbci	r29, 0x00	; 0
    2404:	57 2d       	mov	r21, r7
    2406:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    240a:	c7 51       	subi	r28, 0x17	; 23
    240c:	df 4f       	sbci	r29, 0xFF	; 255
    240e:	28 81       	ld	r18, Y
    2410:	39 81       	ldd	r19, Y+1	; 0x01
    2412:	4a 81       	ldd	r20, Y+2	; 0x02
    2414:	5b 81       	ldd	r21, Y+3	; 0x03
    2416:	c9 5e       	subi	r28, 0xE9	; 233
    2418:	d0 40       	sbci	r29, 0x00	; 0
    241a:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    241e:	c0 51       	subi	r28, 0x10	; 16
    2420:	df 4f       	sbci	r29, 0xFF	; 255
    2422:	28 81       	ld	r18, Y
    2424:	39 81       	ldd	r19, Y+1	; 0x01
    2426:	4a 81       	ldd	r20, Y+2	; 0x02
    2428:	5b 81       	ldd	r21, Y+3	; 0x03
    242a:	c0 5f       	subi	r28, 0xF0	; 240
    242c:	d0 40       	sbci	r29, 0x00	; 0
    242e:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    2432:	0e 94 65 23 	call	0x46ca	; 0x46ca <round>
    2436:	6b 01       	movw	r12, r22
    2438:	7c 01       	movw	r14, r24
    243a:	c8 50       	subi	r28, 0x08	; 8
    243c:	df 4f       	sbci	r29, 0xFF	; 255
    243e:	28 81       	ld	r18, Y
    2440:	39 81       	ldd	r19, Y+1	; 0x01
    2442:	4a 81       	ldd	r20, Y+2	; 0x02
    2444:	5b 81       	ldd	r21, Y+3	; 0x03
    2446:	c8 5f       	subi	r28, 0xF8	; 248
    2448:	d0 40       	sbci	r29, 0x00	; 0
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	8c e7       	ldi	r24, 0x7C	; 124
    2450:	92 e4       	ldi	r25, 0x42	; 66
    2452:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    2456:	0e 94 02 20 	call	0x4004	; 0x4004 <__fixunssfsi>
    245a:	16 2f       	mov	r17, r22
    245c:	c4 50       	subi	r28, 0x04	; 4
    245e:	df 4f       	sbci	r29, 0xFF	; 255
    2460:	68 81       	ld	r22, Y
    2462:	79 81       	ldd	r23, Y+1	; 0x01
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	9b 81       	ldd	r25, Y+3	; 0x03
    2468:	cc 5f       	subi	r28, 0xFC	; 252
    246a:	d0 40       	sbci	r29, 0x00	; 0
    246c:	0e 94 02 20 	call	0x4004	; 0x4004 <__fixunssfsi>
    2470:	66 2e       	mov	r6, r22
    2472:	a5 01       	movw	r20, r10
    2474:	94 01       	movw	r18, r8
    2476:	60 e0       	ldi	r22, 0x00	; 0
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	8c e7       	ldi	r24, 0x7C	; 124
    247c:	92 e4       	ldi	r25, 0x42	; 66
    247e:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    2482:	0e 94 02 20 	call	0x4004	; 0x4004 <__fixunssfsi>
    2486:	b6 2e       	mov	r11, r22
    2488:	c7 01       	movw	r24, r14
    248a:	b6 01       	movw	r22, r12
    248c:	0e 94 02 20 	call	0x4004	; 0x4004 <__fixunssfsi>
    2490:	86 2f       	mov	r24, r22
    2492:	01 e0       	ldi	r16, 0x01	; 1
    2494:	21 2f       	mov	r18, r17
    2496:	46 2d       	mov	r20, r6
    2498:	6b 2d       	mov	r22, r11
    249a:	0e 94 84 03 	call	0x708	; 0x708 <_Z4lineccccc>
    249e:	2f e7       	ldi	r18, 0x7F	; 127
    24a0:	88 e3       	ldi	r24, 0x38	; 56
    24a2:	91 e0       	ldi	r25, 0x01	; 1
    24a4:	21 50       	subi	r18, 0x01	; 1
    24a6:	80 40       	sbci	r24, 0x00	; 0
    24a8:	90 40       	sbci	r25, 0x00	; 0
    24aa:	e1 f7       	brne	.-8      	; 0x24a4 <_Z10graph_plotv+0x85c>
    24ac:	00 c0       	rjmp	.+0      	; 0x24ae <_Z10graph_plotv+0x866>
    24ae:	00 00       	nop
	{
		int y=63-round((-mnY)*scaleY);
		PutPixel(x,y,1);
	}
	
	for(int i=1;i<T;i++)
    24b0:	ef ef       	ldi	r30, 0xFF	; 255
    24b2:	2e 1a       	sub	r2, r30
    24b4:	3e 0a       	sbc	r3, r30
    24b6:	f9 e1       	ldi	r31, 0x19	; 25
    24b8:	2f 16       	cp	r2, r31
    24ba:	31 04       	cpc	r3, r1
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <_Z10graph_plotv+0x878>
    24be:	04 cf       	rjmp	.-504    	; 0x22c8 <_Z10graph_plotv+0x680>
		line(round(((l+(i-1)*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i-1]*scaleY),round(((l+i*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i]*scaleY),1);
		_delay_ms(50);
	}

	
    24c0:	c3 5f       	subi	r28, 0xF3	; 243
    24c2:	de 4f       	sbci	r29, 0xFE	; 254
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	ff 90       	pop	r15
    24d8:	ef 90       	pop	r14
    24da:	df 90       	pop	r13
    24dc:	cf 90       	pop	r12
    24de:	bf 90       	pop	r11
    24e0:	af 90       	pop	r10
    24e2:	9f 90       	pop	r9
    24e4:	8f 90       	pop	r8
    24e6:	7f 90       	pop	r7
    24e8:	6f 90       	pop	r6
    24ea:	5f 90       	pop	r5
    24ec:	4f 90       	pop	r4
    24ee:	3f 90       	pop	r3
    24f0:	2f 90       	pop	r2
    24f2:	08 95       	ret

000024f4 <_Z13diffentiationPcd>:
double diffentiation(char str[],double x)
{
    24f4:	8f 92       	push	r8
    24f6:	9f 92       	push	r9
    24f8:	af 92       	push	r10
    24fa:	bf 92       	push	r11
    24fc:	cf 92       	push	r12
    24fe:	df 92       	push	r13
    2500:	ef 92       	push	r14
    2502:	ff 92       	push	r15
    2504:	cf 93       	push	r28
    2506:	df 93       	push	r29
    2508:	ec 01       	movw	r28, r24
    250a:	6a 01       	movw	r12, r20
    250c:	7b 01       	movw	r14, r22
	double h = 1e-6;
	return (evaluate_function(str , x+h)-evaluate_function(str, x-h))/(2.00*h);
    250e:	2d eb       	ldi	r18, 0xBD	; 189
    2510:	37 e3       	ldi	r19, 0x37	; 55
    2512:	46 e8       	ldi	r20, 0x86	; 134
    2514:	55 e3       	ldi	r21, 0x35	; 53
    2516:	c7 01       	movw	r24, r14
    2518:	b6 01       	movw	r22, r12
    251a:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    251e:	ab 01       	movw	r20, r22
    2520:	bc 01       	movw	r22, r24
    2522:	ce 01       	movw	r24, r28
    2524:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_Z17evaluate_functionPcd>
    2528:	4b 01       	movw	r8, r22
    252a:	5c 01       	movw	r10, r24
    252c:	2d eb       	ldi	r18, 0xBD	; 189
    252e:	37 e3       	ldi	r19, 0x37	; 55
    2530:	46 e8       	ldi	r20, 0x86	; 134
    2532:	55 e3       	ldi	r21, 0x35	; 53
    2534:	c7 01       	movw	r24, r14
    2536:	b6 01       	movw	r22, r12
    2538:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    253c:	ab 01       	movw	r20, r22
    253e:	bc 01       	movw	r22, r24
    2540:	ce 01       	movw	r24, r28
    2542:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_Z17evaluate_functionPcd>
    2546:	9b 01       	movw	r18, r22
    2548:	ac 01       	movw	r20, r24
    254a:	c5 01       	movw	r24, r10
    254c:	b4 01       	movw	r22, r8
    254e:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    2552:	2d eb       	ldi	r18, 0xBD	; 189
    2554:	37 e3       	ldi	r19, 0x37	; 55
    2556:	46 e0       	ldi	r20, 0x06	; 6
    2558:	56 e3       	ldi	r21, 0x36	; 54
    255a:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
}
    255e:	df 91       	pop	r29
    2560:	cf 91       	pop	r28
    2562:	ff 90       	pop	r15
    2564:	ef 90       	pop	r14
    2566:	df 90       	pop	r13
    2568:	cf 90       	pop	r12
    256a:	bf 90       	pop	r11
    256c:	af 90       	pop	r10
    256e:	9f 90       	pop	r9
    2570:	8f 90       	pop	r8
    2572:	08 95       	ret

00002574 <_Z6newtonPcd>:

double newton(char str[],double guess)
{
    2574:	8f 92       	push	r8
    2576:	9f 92       	push	r9
    2578:	af 92       	push	r10
    257a:	bf 92       	push	r11
    257c:	cf 92       	push	r12
    257e:	df 92       	push	r13
    2580:	ef 92       	push	r14
    2582:	ff 92       	push	r15
    2584:	0f 93       	push	r16
    2586:	1f 93       	push	r17
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	8c 01       	movw	r16, r24
    258e:	e4 2e       	mov	r14, r20
    2590:	f5 2e       	mov	r15, r21
    2592:	d6 2e       	mov	r13, r22
    2594:	c7 2e       	mov	r12, r23
    2596:	c1 e5       	ldi	r28, 0x51	; 81
    2598:	d0 e0       	ldi	r29, 0x00	; 0
	double x = guess;
	for (int rep = 0; rep<=80; rep++)
	{
		double nx = x - (evaluate_function(str, x)/diffentiation(str , x));
    259a:	4e 2d       	mov	r20, r14
    259c:	5f 2d       	mov	r21, r15
    259e:	6d 2d       	mov	r22, r13
    25a0:	7c 2d       	mov	r23, r12
    25a2:	c8 01       	movw	r24, r16
    25a4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_Z17evaluate_functionPcd>
    25a8:	4b 01       	movw	r8, r22
    25aa:	5c 01       	movw	r10, r24
    25ac:	4e 2d       	mov	r20, r14
    25ae:	5f 2d       	mov	r21, r15
    25b0:	6d 2d       	mov	r22, r13
    25b2:	7c 2d       	mov	r23, r12
    25b4:	c8 01       	movw	r24, r16
    25b6:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <_Z13diffentiationPcd>
    25ba:	9b 01       	movw	r18, r22
    25bc:	ac 01       	movw	r20, r24
    25be:	c5 01       	movw	r24, r10
    25c0:	b4 01       	movw	r22, r8
    25c2:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    25c6:	9b 01       	movw	r18, r22
    25c8:	ac 01       	movw	r20, r24
    25ca:	6e 2d       	mov	r22, r14
    25cc:	7f 2d       	mov	r23, r15
    25ce:	8d 2d       	mov	r24, r13
    25d0:	9c 2d       	mov	r25, r12
    25d2:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
	"mov	%0, %C1		\n\t"
	"lsl	%0		\n\t"
	"mov	%0, %D1		\n\t"
	"rol	%0		"
	: "=r" (__exp)
	: "r" (__x)	);
    25d6:	28 2f       	mov	r18, r24
    25d8:	22 0f       	add	r18, r18
    25da:	29 2f       	mov	r18, r25
    25dc:	22 1f       	adc	r18, r18
		if(!isfinite(nx))
    25de:	2f 3f       	cpi	r18, 0xFF	; 255
    25e0:	31 f0       	breq	.+12     	; 0x25ee <_Z6newtonPcd+0x7a>
    25e2:	21 97       	sbiw	r28, 0x01	; 1
double newton(char str[],double guess)
{
	double x = guess;
	for (int rep = 0; rep<=80; rep++)
	{
		double nx = x - (evaluate_function(str, x)/diffentiation(str , x));
    25e4:	e6 2e       	mov	r14, r22
    25e6:	f7 2e       	mov	r15, r23
    25e8:	d8 2e       	mov	r13, r24
    25ea:	c9 2e       	mov	r12, r25
}

double newton(char str[],double guess)
{
	double x = guess;
	for (int rep = 0; rep<=80; rep++)
    25ec:	b1 f6       	brne	.-84     	; 0x259a <_Z6newtonPcd+0x26>
			break;
		}
		x = nx;
	}
	return x;
}
    25ee:	6e 2d       	mov	r22, r14
    25f0:	7f 2d       	mov	r23, r15
    25f2:	8d 2d       	mov	r24, r13
    25f4:	9c 2d       	mov	r25, r12
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	ff 90       	pop	r15
    2600:	ef 90       	pop	r14
    2602:	df 90       	pop	r13
    2604:	cf 90       	pop	r12
    2606:	bf 90       	pop	r11
    2608:	af 90       	pop	r10
    260a:	9f 90       	pop	r9
    260c:	8f 90       	pop	r8
    260e:	08 95       	ret

00002610 <_Z12initial_pagev>:
#include "extras.h"
#include "graph_plot.h"
#include "Newton.h"

void initial_page()
{
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	cd 54       	subi	r28, 0x4D	; 77
    261a:	d1 09       	sbc	r29, r1
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
	char s[] = "1.Calculator";
    2626:	8d e0       	ldi	r24, 0x0D	; 13
    2628:	ea ee       	ldi	r30, 0xEA	; 234
    262a:	f1 e0       	ldi	r31, 0x01	; 1
    262c:	de 01       	movw	r26, r28
    262e:	11 96       	adiw	r26, 0x01	; 1
    2630:	01 90       	ld	r0, Z+
    2632:	0d 92       	st	X+, r0
    2634:	8a 95       	dec	r24
    2636:	e1 f7       	brne	.-8      	; 0x2630 <_Z12initial_pagev+0x20>
	DisplayText(1,1,s);
    2638:	ae 01       	movw	r20, r28
    263a:	4f 5f       	subi	r20, 0xFF	; 255
    263c:	5f 4f       	sbci	r21, 0xFF	; 255
    263e:	61 e0       	ldi	r22, 0x01	; 1
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	char s2[] = "2.Gauss Elimination";
    2646:	84 e1       	ldi	r24, 0x14	; 20
    2648:	e7 ef       	ldi	r30, 0xF7	; 247
    264a:	f1 e0       	ldi	r31, 0x01	; 1
    264c:	de 01       	movw	r26, r28
    264e:	1e 96       	adiw	r26, 0x0e	; 14
    2650:	01 90       	ld	r0, Z+
    2652:	0d 92       	st	X+, r0
    2654:	8a 95       	dec	r24
    2656:	e1 f7       	brne	.-8      	; 0x2650 <_Z12initial_pagev+0x40>
	DisplayText(1,12,s2);
    2658:	ae 01       	movw	r20, r28
    265a:	42 5f       	subi	r20, 0xF2	; 242
    265c:	5f 4f       	sbci	r21, 0xFF	; 255
    265e:	6c e0       	ldi	r22, 0x0C	; 12
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	char s3[] = "3.Newton Raphson";
    2666:	81 e1       	ldi	r24, 0x11	; 17
    2668:	eb e0       	ldi	r30, 0x0B	; 11
    266a:	f2 e0       	ldi	r31, 0x02	; 2
    266c:	de 01       	movw	r26, r28
    266e:	92 96       	adiw	r26, 0x22	; 34
    2670:	01 90       	ld	r0, Z+
    2672:	0d 92       	st	X+, r0
    2674:	8a 95       	dec	r24
    2676:	e1 f7       	brne	.-8      	; 0x2670 <_Z12initial_pagev+0x60>
	DisplayText(1,24,s3);
    2678:	ae 01       	movw	r20, r28
    267a:	4e 5d       	subi	r20, 0xDE	; 222
    267c:	5f 4f       	sbci	r21, 0xFF	; 255
    267e:	68 e1       	ldi	r22, 0x18	; 24
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	char s4[] = "4.Integration";
    2686:	8e e0       	ldi	r24, 0x0E	; 14
    2688:	ec e1       	ldi	r30, 0x1C	; 28
    268a:	f2 e0       	ldi	r31, 0x02	; 2
    268c:	de 01       	movw	r26, r28
    268e:	d3 96       	adiw	r26, 0x33	; 51
    2690:	01 90       	ld	r0, Z+
    2692:	0d 92       	st	X+, r0
    2694:	8a 95       	dec	r24
    2696:	e1 f7       	brne	.-8      	; 0x2690 <_Z12initial_pagev+0x80>
	DisplayText(1,36,s4);
    2698:	ae 01       	movw	r20, r28
    269a:	4d 5c       	subi	r20, 0xCD	; 205
    269c:	5f 4f       	sbci	r21, 0xFF	; 255
    269e:	64 e2       	ldi	r22, 0x24	; 36
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	char s5[]="5.Graph Plot";
    26a6:	8d e0       	ldi	r24, 0x0D	; 13
    26a8:	ea e2       	ldi	r30, 0x2A	; 42
    26aa:	f2 e0       	ldi	r31, 0x02	; 2
    26ac:	de 01       	movw	r26, r28
    26ae:	af 5b       	subi	r26, 0xBF	; 191
    26b0:	bf 4f       	sbci	r27, 0xFF	; 255
    26b2:	01 90       	ld	r0, Z+
    26b4:	0d 92       	st	X+, r0
    26b6:	8a 95       	dec	r24
    26b8:	e1 f7       	brne	.-8      	; 0x26b2 <_Z12initial_pagev+0xa2>
	DisplayText(1,48,s5);
    26ba:	ae 01       	movw	r20, r28
    26bc:	4f 5b       	subi	r20, 0xBF	; 191
    26be:	5f 4f       	sbci	r21, 0xFF	; 255
    26c0:	60 e3       	ldi	r22, 0x30	; 48
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
}
    26c8:	c3 5b       	subi	r28, 0xB3	; 179
    26ca:	df 4f       	sbci	r29, 0xFF	; 255
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	08 95       	ret

000026dc <_Z13mode_selectorv>:



char mode_selector()
{
    26dc:	cf 93       	push	r28
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    26de:	a1 e0       	ldi	r26, 0x01	; 1
    26e0:	b0 e0       	ldi	r27, 0x00	; 0

char mode_selector()
{
	while (1)
	{
		for(int c=4;c<8;c++)
    26e2:	64 e0       	ldi	r22, 0x04	; 4
    26e4:	70 e0       	ldi	r23, 0x00	; 0
		{
			PORTB=1<<c;
    26e6:	cd 01       	movw	r24, r26
    26e8:	06 2e       	mov	r0, r22
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <_Z13mode_selectorv+0x14>
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	0a 94       	dec	r0
    26f2:	e2 f7       	brpl	.-8      	; 0x26ec <_Z13mode_selectorv+0x10>
    26f4:	88 bb       	out	0x18, r24	; 24
    26f6:	cb 01       	movw	r24, r22
    26f8:	04 97       	sbiw	r24, 0x04	; 4
    26fa:	fc 01       	movw	r30, r24
    26fc:	ea 53       	subi	r30, 0x3A	; 58
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	c8 2f       	mov	r28, r24
    2706:	59 2f       	mov	r21, r25
			{
				if(PINB&(1<<r))
    2708:	86 b3       	in	r24, 0x16	; 22
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	02 2e       	mov	r0, r18
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <_Z13mode_selectorv+0x38>
    2710:	95 95       	asr	r25
    2712:	87 95       	ror	r24
    2714:	0a 94       	dec	r0
    2716:	e2 f7       	brpl	.-8      	; 0x2710 <_Z13mode_selectorv+0x34>
    2718:	80 ff       	sbrs	r24, 0
    271a:	23 c0       	rjmp	.+70     	; 0x2762 <_Z13mode_selectorv+0x86>
    271c:	8c 2f       	mov	r24, r28
    271e:	95 2f       	mov	r25, r21
				{
					if(mat[r][c-4]>='1' && mat[r][c-4]<='5')
    2720:	40 81       	ld	r20, Z
    2722:	41 53       	subi	r20, 0x31	; 49
    2724:	45 30       	cpi	r20, 0x05	; 5
    2726:	a0 f4       	brcc	.+40     	; 0x2750 <_Z13mode_selectorv+0x74>
    2728:	4f ef       	ldi	r20, 0xFF	; 255
    272a:	54 e3       	ldi	r21, 0x34	; 52
    272c:	6c e0       	ldi	r22, 0x0C	; 12
    272e:	41 50       	subi	r20, 0x01	; 1
    2730:	50 40       	sbci	r21, 0x00	; 0
    2732:	60 40       	sbci	r22, 0x00	; 0
    2734:	e1 f7       	brne	.-8      	; 0x272e <_Z13mode_selectorv+0x52>
    2736:	00 c0       	rjmp	.+0      	; 0x2738 <_Z13mode_selectorv+0x5c>
    2738:	00 00       	nop
					{
						_delay_ms(500);
						return mat[r][c-4];
    273a:	22 0f       	add	r18, r18
    273c:	33 1f       	adc	r19, r19
    273e:	22 0f       	add	r18, r18
    2740:	33 1f       	adc	r19, r19
    2742:	2a 53       	subi	r18, 0x3A	; 58
    2744:	3f 4f       	sbci	r19, 0xFF	; 255
    2746:	f9 01       	movw	r30, r18
    2748:	e8 0f       	add	r30, r24
    274a:	f9 1f       	adc	r31, r25
    274c:	80 81       	ld	r24, Z
    274e:	1c c0       	rjmp	.+56     	; 0x2788 <_Z13mode_selectorv+0xac>
    2750:	8f ef       	ldi	r24, 0xFF	; 255
    2752:	94 e3       	ldi	r25, 0x34	; 52
    2754:	4c e0       	ldi	r20, 0x0C	; 12
    2756:	81 50       	subi	r24, 0x01	; 1
    2758:	90 40       	sbci	r25, 0x00	; 0
    275a:	40 40       	sbci	r20, 0x00	; 0
    275c:	e1 f7       	brne	.-8      	; 0x2756 <_Z13mode_selectorv+0x7a>
    275e:	00 c0       	rjmp	.+0      	; 0x2760 <_Z13mode_selectorv+0x84>
    2760:	00 00       	nop
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    2762:	2f 5f       	subi	r18, 0xFF	; 255
    2764:	3f 4f       	sbci	r19, 0xFF	; 255
    2766:	34 96       	adiw	r30, 0x04	; 4
    2768:	24 30       	cpi	r18, 0x04	; 4
    276a:	31 05       	cpc	r19, r1
    276c:	69 f6       	brne	.-102    	; 0x2708 <_Z13mode_selectorv+0x2c>
    276e:	8f e1       	ldi	r24, 0x1F	; 31
    2770:	9e e4       	ldi	r25, 0x4E	; 78
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <_Z13mode_selectorv+0x96>
    2776:	00 c0       	rjmp	.+0      	; 0x2778 <_Z13mode_selectorv+0x9c>
    2778:	00 00       	nop

char mode_selector()
{
	while (1)
	{
		for(int c=4;c<8;c++)
    277a:	6f 5f       	subi	r22, 0xFF	; 255
    277c:	7f 4f       	sbci	r23, 0xFF	; 255
    277e:	68 30       	cpi	r22, 0x08	; 8
    2780:	71 05       	cpc	r23, r1
    2782:	09 f0       	breq	.+2      	; 0x2786 <_Z13mode_selectorv+0xaa>
    2784:	b0 cf       	rjmp	.-160    	; 0x26e6 <_Z13mode_selectorv+0xa>
    2786:	ad cf       	rjmp	.-166    	; 0x26e2 <_Z13mode_selectorv+0x6>
				}
			}
			_delay_ms(10);
		}
	}
}
    2788:	cf 91       	pop	r28
    278a:	08 95       	ret

0000278c <_Z10calculatorv>:


void calculator()
{
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	cf 57       	subi	r28, 0x7F	; 127
    2796:	d1 09       	sbc	r29, r1
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    27a2:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	char s[50];
	int len=0;
	int where=1;
    27a6:	88 24       	eor	r8, r8
    27a8:	83 94       	inc	r8
    27aa:	91 2c       	mov	r9, r1

void calculator()
{
	LCD_Clear();
	char s[50];
	int len=0;
    27ac:	c1 2c       	mov	r12, r1
    27ae:	d1 2c       	mov	r13, r1
					else
					{
						append(s , len , mat2[r][c-4]);
						len = strlen(s);
					}
					DisplayText(1,where,s);
    27b0:	9e 01       	movw	r18, r28
    27b2:	2f 5f       	subi	r18, 0xFF	; 255
    27b4:	3f 4f       	sbci	r19, 0xFF	; 255
    27b6:	19 01       	movw	r2, r18
    27b8:	ed 96       	adiw	r28, 0x3d	; 61
    27ba:	2f af       	std	Y+63, r18	; 0x3f
    27bc:	ed 97       	sbiw	r28, 0x3d	; 61
    27be:	ee 96       	adiw	r28, 0x3e	; 62
    27c0:	3f ae       	std	Y+63, r3	; 0x3f
    27c2:	ee 97       	sbiw	r28, 0x3e	; 62
    27c4:	0f 2e       	mov	r0, r31
    27c6:	f6 e6       	ldi	r31, 0x66	; 102
    27c8:	4f 2e       	mov	r4, r31
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	5f 2e       	mov	r5, r31
    27ce:	f0 2d       	mov	r31, r0
	char s[50];
	int len=0;
	int where=1;
	while (1)
	{
		for(int c=4;c<8;c++)
    27d0:	68 94       	set
    27d2:	ee 24       	eor	r14, r14
    27d4:	e2 f8       	bld	r14, 2
    27d6:	f1 2c       	mov	r15, r1
		{
			PORTB=1<<c;
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 2c       	mov	r0, r14
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <_Z10calculatorv+0x58>
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	0a 94       	dec	r0
    27e6:	e2 f7       	brpl	.-8      	; 0x27e0 <_Z10calculatorv+0x54>
    27e8:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    27ea:	8b bb       	out	0x1b, r24	; 27
    27ec:	c7 01       	movw	r24, r14
    27ee:	8e 53       	subi	r24, 0x3E	; 62
    27f0:	9f 4f       	sbci	r25, 0xFF	; 255
    27f2:	5c 01       	movw	r10, r24
    27f4:	32 01       	movw	r6, r4
			for(int r=0;r<4;r++)
    27f6:	00 e0       	ldi	r16, 0x00	; 0
    27f8:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    27fa:	86 b3       	in	r24, 0x16	; 22
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	00 2e       	mov	r0, r16
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <_Z10calculatorv+0x7a>
    2802:	95 95       	asr	r25
    2804:	87 95       	ror	r24
    2806:	0a 94       	dec	r0
    2808:	e2 f7       	brpl	.-8      	; 0x2802 <_Z10calculatorv+0x76>
    280a:	80 ff       	sbrs	r24, 0
    280c:	83 c0       	rjmp	.+262    	; 0x2914 <_Z10calculatorv+0x188>
				{
					if(mat[r][c-4]=='C')
    280e:	f5 01       	movw	r30, r10
    2810:	80 81       	ld	r24, Z
    2812:	83 34       	cpi	r24, 0x43	; 67
    2814:	99 f4       	brne	.+38     	; 0x283c <_Z10calculatorv+0xb0>
					{
						len=0;
						s[0]=0;
    2816:	19 82       	std	Y+1, r1	; 0x01
						where=1;
						LCD_Clear();
    2818:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    281c:	ed 96       	adiw	r28, 0x3d	; 61
    281e:	4f ad       	ldd	r20, Y+63	; 0x3f
    2820:	ed 97       	sbiw	r28, 0x3d	; 61
    2822:	ee 96       	adiw	r28, 0x3e	; 62
    2824:	5f ad       	ldd	r21, Y+63	; 0x3f
    2826:	ee 97       	sbiw	r28, 0x3e	; 62
    2828:	61 e0       	ldi	r22, 0x01	; 1
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    2830:	88 24       	eor	r8, r8
    2832:	83 94       	inc	r8
    2834:	91 2c       	mov	r9, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    2836:	c1 2c       	mov	r12, r1
    2838:	d1 2c       	mov	r13, r1
    283a:	62 c0       	rjmp	.+196    	; 0x2900 <_Z10calculatorv+0x174>
						where=1;
						LCD_Clear();
					}
					else
					{	
						if(mat[r][c-4]=='=')
    283c:	8d 33       	cpi	r24, 0x3D	; 61
    283e:	09 f0       	breq	.+2      	; 0x2842 <_Z10calculatorv+0xb6>
    2840:	40 c0       	rjmp	.+128    	; 0x28c2 <_Z10calculatorv+0x136>
						{
							parser ob;
    2842:	ce 01       	movw	r24, r28
    2844:	c3 96       	adiw	r24, 0x33	; 51
    2846:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN6parserC1Ev>
							double ans=ob.eval_exp(s);
    284a:	ed 96       	adiw	r28, 0x3d	; 61
    284c:	6f ad       	ldd	r22, Y+63	; 0x3f
    284e:	ed 97       	sbiw	r28, 0x3d	; 61
    2850:	ee 96       	adiw	r28, 0x3e	; 62
    2852:	7f ad       	ldd	r23, Y+63	; 0x3f
    2854:	ee 97       	sbiw	r28, 0x3e	; 62
    2856:	ce 01       	movw	r24, r28
    2858:	c3 96       	adiw	r24, 0x33	; 51
    285a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN6parser8eval_expEPc>
    285e:	ff ef       	ldi	r31, 0xFF	; 255
    2860:	20 e7       	ldi	r18, 0x70	; 112
    2862:	32 e0       	ldi	r19, 0x02	; 2
    2864:	f1 50       	subi	r31, 0x01	; 1
    2866:	20 40       	sbci	r18, 0x00	; 0
    2868:	30 40       	sbci	r19, 0x00	; 0
    286a:	e1 f7       	brne	.-8      	; 0x2864 <_Z10calculatorv+0xd8>
    286c:	00 c0       	rjmp	.+0      	; 0x286e <_Z10calculatorv+0xe2>
    286e:	00 00       	nop
							_delay_ms(100);
							dtostrf(ans,1,2,s);
    2870:	ed 96       	adiw	r28, 0x3d	; 61
    2872:	0f ad       	ldd	r16, Y+63	; 0x3f
    2874:	ed 97       	sbiw	r28, 0x3d	; 61
    2876:	ee 96       	adiw	r28, 0x3e	; 62
    2878:	1f ad       	ldd	r17, Y+63	; 0x3f
    287a:	ee 97       	sbiw	r28, 0x3e	; 62
    287c:	22 e0       	ldi	r18, 0x02	; 2
    287e:	41 e0       	ldi	r20, 0x01	; 1
    2880:	0e 94 67 24 	call	0x48ce	; 0x48ce <dtostrf>
    2884:	4f ef       	ldi	r20, 0xFF	; 255
    2886:	80 e7       	ldi	r24, 0x70	; 112
    2888:	92 e0       	ldi	r25, 0x02	; 2
    288a:	41 50       	subi	r20, 0x01	; 1
    288c:	80 40       	sbci	r24, 0x00	; 0
    288e:	90 40       	sbci	r25, 0x00	; 0
    2890:	e1 f7       	brne	.-8      	; 0x288a <_Z10calculatorv+0xfe>
    2892:	00 c0       	rjmp	.+0      	; 0x2894 <_Z10calculatorv+0x108>
    2894:	00 00       	nop
							_delay_ms(100);
							LCD_Clear();
    2896:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
    289a:	ef ef       	ldi	r30, 0xFF	; 255
    289c:	f0 e7       	ldi	r31, 0x70	; 112
    289e:	22 e0       	ldi	r18, 0x02	; 2
    28a0:	e1 50       	subi	r30, 0x01	; 1
    28a2:	f0 40       	sbci	r31, 0x00	; 0
    28a4:	20 40       	sbci	r18, 0x00	; 0
    28a6:	e1 f7       	brne	.-8      	; 0x28a0 <_Z10calculatorv+0x114>
    28a8:	00 c0       	rjmp	.+0      	; 0x28aa <_Z10calculatorv+0x11e>
    28aa:	00 00       	nop
							_delay_ms(100);
							DisplayText(1,1,s);
    28ac:	ed 96       	adiw	r28, 0x3d	; 61
    28ae:	4f ad       	ldd	r20, Y+63	; 0x3f
    28b0:	ed 97       	sbiw	r28, 0x3d	; 61
    28b2:	ee 96       	adiw	r28, 0x3e	; 62
    28b4:	5f ad       	ldd	r21, Y+63	; 0x3f
    28b6:	ee 97       	sbiw	r28, 0x3e	; 62
    28b8:	61 e0       	ldi	r22, 0x01	; 1
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
    28c0:	a0 c0       	rjmp	.+320    	; 0x2a02 <_Z10calculatorv+0x276>
							break;
						}
						s[len]=mat[r][c-4];
    28c2:	f1 01       	movw	r30, r2
    28c4:	ec 0d       	add	r30, r12
    28c6:	fd 1d       	adc	r31, r13
    28c8:	80 83       	st	Z, r24
						len+=1;
    28ca:	3f ef       	ldi	r19, 0xFF	; 255
    28cc:	c3 1a       	sub	r12, r19
    28ce:	d3 0a       	sbc	r13, r19
						s[len]=0;
    28d0:	f1 01       	movw	r30, r2
    28d2:	ec 0d       	add	r30, r12
    28d4:	fd 1d       	adc	r31, r13
    28d6:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    28d8:	ed 96       	adiw	r28, 0x3d	; 61
    28da:	4f ad       	ldd	r20, Y+63	; 0x3f
    28dc:	ed 97       	sbiw	r28, 0x3d	; 61
    28de:	ee 96       	adiw	r28, 0x3e	; 62
    28e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    28e2:	ee 97       	sbiw	r28, 0x3e	; 62
    28e4:	68 2d       	mov	r22, r8
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    28ec:	44 e1       	ldi	r20, 0x14	; 20
    28ee:	c4 16       	cp	r12, r20
    28f0:	d1 04       	cpc	r13, r1
    28f2:	31 f4       	brne	.+12     	; 0x2900 <_Z10calculatorv+0x174>
					{
						where+=12;
    28f4:	8c e0       	ldi	r24, 0x0C	; 12
    28f6:	88 0e       	add	r8, r24
    28f8:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    28fa:	19 82       	std	Y+1, r1	; 0x01
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    28fc:	c1 2c       	mov	r12, r1
    28fe:	d1 2c       	mov	r13, r1
    2900:	9f ef       	ldi	r25, 0xFF	; 255
    2902:	e4 e3       	ldi	r30, 0x34	; 52
    2904:	fc e0       	ldi	r31, 0x0C	; 12
    2906:	91 50       	subi	r25, 0x01	; 1
    2908:	e0 40       	sbci	r30, 0x00	; 0
    290a:	f0 40       	sbci	r31, 0x00	; 0
    290c:	e1 f7       	brne	.-8      	; 0x2906 <_Z10calculatorv+0x17a>
    290e:	00 c0       	rjmp	.+0      	; 0x2910 <_Z10calculatorv+0x184>
    2910:	00 00       	nop
    2912:	6b c0       	rjmp	.+214    	; 0x29ea <_Z10calculatorv+0x25e>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    2914:	89 b3       	in	r24, 0x19	; 25
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	00 2e       	mov	r0, r16
    291a:	02 c0       	rjmp	.+4      	; 0x2920 <_Z10calculatorv+0x194>
    291c:	95 95       	asr	r25
    291e:	87 95       	ror	r24
    2920:	0a 94       	dec	r0
    2922:	e2 f7       	brpl	.-8      	; 0x291c <_Z10calculatorv+0x190>
    2924:	80 ff       	sbrs	r24, 0
    2926:	61 c0       	rjmp	.+194    	; 0x29ea <_Z10calculatorv+0x25e>
				{
					if(mat2[r][c-4][0]=='<')
    2928:	f3 01       	movw	r30, r6
    292a:	80 81       	ld	r24, Z
    292c:	8c 33       	cpi	r24, 0x3C	; 60
    292e:	71 f5       	brne	.+92     	; 0x298c <_Z10calculatorv+0x200>
					{
						if(len==0){
    2930:	c1 14       	cp	r12, r1
    2932:	d1 04       	cpc	r13, r1
    2934:	51 f4       	brne	.+20     	; 0x294a <_Z10calculatorv+0x1be>
    2936:	ff ef       	ldi	r31, 0xFF	; 255
    2938:	24 e3       	ldi	r18, 0x34	; 52
    293a:	3c e0       	ldi	r19, 0x0C	; 12
    293c:	f1 50       	subi	r31, 0x01	; 1
    293e:	20 40       	sbci	r18, 0x00	; 0
    2940:	30 40       	sbci	r19, 0x00	; 0
    2942:	e1 f7       	brne	.-8      	; 0x293c <_Z10calculatorv+0x1b0>
    2944:	00 c0       	rjmp	.+0      	; 0x2946 <_Z10calculatorv+0x1ba>
    2946:	00 00       	nop
    2948:	50 c0       	rjmp	.+160    	; 0x29ea <_Z10calculatorv+0x25e>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    294a:	41 e0       	ldi	r20, 0x01	; 1
    294c:	c4 1a       	sub	r12, r20
    294e:	d1 08       	sbc	r13, r1
    2950:	c1 01       	movw	r24, r2
    2952:	8c 0d       	add	r24, r12
    2954:	9d 1d       	adc	r25, r13
    2956:	c2 58       	subi	r28, 0x82	; 130
    2958:	df 4f       	sbci	r29, 0xFF	; 255
    295a:	99 83       	std	Y+1, r25	; 0x01
    295c:	88 83       	st	Y, r24
    295e:	ce 57       	subi	r28, 0x7E	; 126
    2960:	d0 40       	sbci	r29, 0x00	; 0
    2962:	20 e2       	ldi	r18, 0x20	; 32
    2964:	fc 01       	movw	r30, r24
    2966:	20 83       	st	Z, r18
						DisplayText(1,where,s);
    2968:	ed 96       	adiw	r28, 0x3d	; 61
    296a:	4f ad       	ldd	r20, Y+63	; 0x3f
    296c:	ed 97       	sbiw	r28, 0x3d	; 61
    296e:	ee 96       	adiw	r28, 0x3e	; 62
    2970:	5f ad       	ldd	r21, Y+63	; 0x3f
    2972:	ee 97       	sbiw	r28, 0x3e	; 62
    2974:	68 2d       	mov	r22, r8
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						len--;
						s[len]=0;
    297c:	c2 58       	subi	r28, 0x82	; 130
    297e:	df 4f       	sbci	r29, 0xFF	; 255
    2980:	e8 81       	ld	r30, Y
    2982:	f9 81       	ldd	r31, Y+1	; 0x01
    2984:	ce 57       	subi	r28, 0x7E	; 126
    2986:	d0 40       	sbci	r29, 0x00	; 0
    2988:	10 82       	st	Z, r1
    298a:	12 c0       	rjmp	.+36     	; 0x29b0 <_Z10calculatorv+0x224>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    298c:	a3 01       	movw	r20, r6
    298e:	b6 01       	movw	r22, r12
    2990:	ed 96       	adiw	r28, 0x3d	; 61
    2992:	8f ad       	ldd	r24, Y+63	; 0x3f
    2994:	ed 97       	sbiw	r28, 0x3d	; 61
    2996:	ee 96       	adiw	r28, 0x3e	; 62
    2998:	9f ad       	ldd	r25, Y+63	; 0x3f
    299a:	ee 97       	sbiw	r28, 0x3e	; 62
    299c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <_Z6appendPciS_>
						len = strlen(s);
    29a0:	f1 01       	movw	r30, r2
    29a2:	01 90       	ld	r0, Z+
    29a4:	00 20       	and	r0, r0
    29a6:	e9 f7       	brne	.-6      	; 0x29a2 <_Z10calculatorv+0x216>
    29a8:	31 97       	sbiw	r30, 0x01	; 1
    29aa:	6f 01       	movw	r12, r30
    29ac:	c2 18       	sub	r12, r2
    29ae:	d3 08       	sbc	r13, r3
					}
					DisplayText(1,where,s);
    29b0:	ed 96       	adiw	r28, 0x3d	; 61
    29b2:	4f ad       	ldd	r20, Y+63	; 0x3f
    29b4:	ed 97       	sbiw	r28, 0x3d	; 61
    29b6:	ee 96       	adiw	r28, 0x3e	; 62
    29b8:	5f ad       	ldd	r21, Y+63	; 0x3f
    29ba:	ee 97       	sbiw	r28, 0x3e	; 62
    29bc:	68 2d       	mov	r22, r8
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    29c4:	f4 e1       	ldi	r31, 0x14	; 20
    29c6:	cf 16       	cp	r12, r31
    29c8:	d1 04       	cpc	r13, r1
    29ca:	31 f4       	brne	.+12     	; 0x29d8 <_Z10calculatorv+0x24c>
					{
						where+=12;
    29cc:	2c e0       	ldi	r18, 0x0C	; 12
    29ce:	82 0e       	add	r8, r18
    29d0:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    29d2:	19 82       	std	Y+1, r1	; 0x01
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    29d4:	c1 2c       	mov	r12, r1
    29d6:	d1 2c       	mov	r13, r1
    29d8:	3f ef       	ldi	r19, 0xFF	; 255
    29da:	44 e3       	ldi	r20, 0x34	; 52
    29dc:	8c e0       	ldi	r24, 0x0C	; 12
    29de:	31 50       	subi	r19, 0x01	; 1
    29e0:	40 40       	sbci	r20, 0x00	; 0
    29e2:	80 40       	sbci	r24, 0x00	; 0
    29e4:	e1 f7       	brne	.-8      	; 0x29de <_Z10calculatorv+0x252>
    29e6:	00 c0       	rjmp	.+0      	; 0x29e8 <_Z10calculatorv+0x25c>
    29e8:	00 00       	nop
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    29ea:	0f 5f       	subi	r16, 0xFF	; 255
    29ec:	1f 4f       	sbci	r17, 0xFF	; 255
    29ee:	98 e1       	ldi	r25, 0x18	; 24
    29f0:	69 0e       	add	r6, r25
    29f2:	71 1c       	adc	r7, r1
    29f4:	e4 e0       	ldi	r30, 0x04	; 4
    29f6:	ae 0e       	add	r10, r30
    29f8:	b1 1c       	adc	r11, r1
    29fa:	04 30       	cpi	r16, 0x04	; 4
    29fc:	11 05       	cpc	r17, r1
    29fe:	09 f0       	breq	.+2      	; 0x2a02 <_Z10calculatorv+0x276>
    2a00:	fc ce       	rjmp	.-520    	; 0x27fa <_Z10calculatorv+0x6e>
    2a02:	8f e1       	ldi	r24, 0x1F	; 31
    2a04:	9e e4       	ldi	r25, 0x4E	; 78
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <_Z10calculatorv+0x27a>
    2a0a:	00 c0       	rjmp	.+0      	; 0x2a0c <_Z10calculatorv+0x280>
    2a0c:	00 00       	nop
	char s[50];
	int len=0;
	int where=1;
	while (1)
	{
		for(int c=4;c<8;c++)
    2a0e:	9f ef       	ldi	r25, 0xFF	; 255
    2a10:	e9 1a       	sub	r14, r25
    2a12:	f9 0a       	sbc	r15, r25
    2a14:	e6 e0       	ldi	r30, 0x06	; 6
    2a16:	4e 0e       	add	r4, r30
    2a18:	51 1c       	adc	r5, r1
    2a1a:	f8 e0       	ldi	r31, 0x08	; 8
    2a1c:	ef 16       	cp	r14, r31
    2a1e:	f1 04       	cpc	r15, r1
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <_Z10calculatorv+0x298>
    2a22:	d0 ce       	rjmp	.-608    	; 0x27c4 <_Z10calculatorv+0x38>
    2a24:	d9 ce       	rjmp	.-590    	; 0x27d8 <_Z10calculatorv+0x4c>

00002a26 <_Z16int_number_inputi>:
}


//helper functions and gauss
int int_number_input(int pos)
{
    2a26:	df 92       	push	r13
    2a28:	ef 92       	push	r14
    2a2a:	ff 92       	push	r15
    2a2c:	0f 93       	push	r16
    2a2e:	1f 93       	push	r17
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <_Z16int_number_inputi+0x10>
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
	//pos is position where u want to show the text
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    2a3a:	a1 e0       	ldi	r26, 0x01	; 1
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
int int_number_input(int pos)
{
	//pos is position where u want to show the text
	while (1)
	{
		for(int c=4;c<8;c++)
    2a3e:	44 e0       	ldi	r20, 0x04	; 4
    2a40:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB=1<<c;
    2a42:	9d 01       	movw	r18, r26
    2a44:	04 2e       	mov	r0, r20
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <_Z16int_number_inputi+0x26>
    2a48:	22 0f       	add	r18, r18
    2a4a:	33 1f       	adc	r19, r19
    2a4c:	0a 94       	dec	r0
    2a4e:	e2 f7       	brpl	.-8      	; 0x2a48 <_Z16int_number_inputi+0x22>
    2a50:	28 bb       	out	0x18, r18	; 24
    2a52:	9a 01       	movw	r18, r20
    2a54:	24 50       	subi	r18, 0x04	; 4
    2a56:	31 09       	sbc	r19, r1
    2a58:	f9 01       	movw	r30, r18
    2a5a:	ea 53       	subi	r30, 0x3A	; 58
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    2a5e:	00 e0       	ldi	r16, 0x00	; 0
    2a60:	10 e0       	ldi	r17, 0x00	; 0
    2a62:	d2 2e       	mov	r13, r18
    2a64:	73 2f       	mov	r23, r19
			{
				if(PINB&(1<<r))
    2a66:	26 b3       	in	r18, 0x16	; 22
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	00 2e       	mov	r0, r16
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <_Z16int_number_inputi+0x4c>
    2a6e:	35 95       	asr	r19
    2a70:	27 95       	ror	r18
    2a72:	0a 94       	dec	r0
    2a74:	e2 f7       	brpl	.-8      	; 0x2a6e <_Z16int_number_inputi+0x48>
    2a76:	20 ff       	sbrs	r18, 0
    2a78:	2f c0       	rjmp	.+94     	; 0x2ad8 <_Z16int_number_inputi+0xb2>
    2a7a:	ed 2c       	mov	r14, r13
    2a7c:	f7 2e       	mov	r15, r23
				{
					if(mat[r][c-4]>='1' && mat[r][c-4]<='7')
    2a7e:	90 81       	ld	r25, Z
    2a80:	2f ec       	ldi	r18, 0xCF	; 207
    2a82:	29 0f       	add	r18, r25
    2a84:	27 30       	cpi	r18, 0x07	; 7
    2a86:	f8 f4       	brcc	.+62     	; 0x2ac6 <_Z16int_number_inputi+0xa0>
					{
						char tmp[2];
						tmp[0] = mat[r][c-4];
    2a88:	99 83       	std	Y+1, r25	; 0x01
						tmp[1] = 0;
    2a8a:	1a 82       	std	Y+2, r1	; 0x02
						DisplayText(1,pos,tmp);
    2a8c:	ae 01       	movw	r20, r28
    2a8e:	4f 5f       	subi	r20, 0xFF	; 255
    2a90:	5f 4f       	sbci	r21, 0xFF	; 255
    2a92:	68 2f       	mov	r22, r24
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
    2a9a:	2f ef       	ldi	r18, 0xFF	; 255
    2a9c:	34 e3       	ldi	r19, 0x34	; 52
    2a9e:	8c e0       	ldi	r24, 0x0C	; 12
    2aa0:	21 50       	subi	r18, 0x01	; 1
    2aa2:	30 40       	sbci	r19, 0x00	; 0
    2aa4:	80 40       	sbci	r24, 0x00	; 0
    2aa6:	e1 f7       	brne	.-8      	; 0x2aa0 <_Z16int_number_inputi+0x7a>
    2aa8:	00 c0       	rjmp	.+0      	; 0x2aaa <_Z16int_number_inputi+0x84>
    2aaa:	00 00       	nop
						_delay_ms(500);
						return mat[r][c-4]-'0';
    2aac:	00 0f       	add	r16, r16
    2aae:	11 1f       	adc	r17, r17
    2ab0:	00 0f       	add	r16, r16
    2ab2:	11 1f       	adc	r17, r17
    2ab4:	0a 53       	subi	r16, 0x3A	; 58
    2ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab8:	f8 01       	movw	r30, r16
    2aba:	ee 0d       	add	r30, r14
    2abc:	ff 1d       	adc	r31, r15
    2abe:	80 81       	ld	r24, Z
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	c0 97       	sbiw	r24, 0x30	; 48
    2ac4:	1c c0       	rjmp	.+56     	; 0x2afe <_Z16int_number_inputi+0xd8>
    2ac6:	9f ef       	ldi	r25, 0xFF	; 255
    2ac8:	24 e3       	ldi	r18, 0x34	; 52
    2aca:	3c e0       	ldi	r19, 0x0C	; 12
    2acc:	91 50       	subi	r25, 0x01	; 1
    2ace:	20 40       	sbci	r18, 0x00	; 0
    2ad0:	30 40       	sbci	r19, 0x00	; 0
    2ad2:	e1 f7       	brne	.-8      	; 0x2acc <_Z16int_number_inputi+0xa6>
    2ad4:	00 c0       	rjmp	.+0      	; 0x2ad6 <_Z16int_number_inputi+0xb0>
    2ad6:	00 00       	nop
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    2ad8:	0f 5f       	subi	r16, 0xFF	; 255
    2ada:	1f 4f       	sbci	r17, 0xFF	; 255
    2adc:	34 96       	adiw	r30, 0x04	; 4
    2ade:	04 30       	cpi	r16, 0x04	; 4
    2ae0:	11 05       	cpc	r17, r1
    2ae2:	09 f6       	brne	.-126    	; 0x2a66 <_Z16int_number_inputi+0x40>
    2ae4:	ef e1       	ldi	r30, 0x1F	; 31
    2ae6:	fe e4       	ldi	r31, 0x4E	; 78
    2ae8:	31 97       	sbiw	r30, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <_Z16int_number_inputi+0xc2>
    2aec:	00 c0       	rjmp	.+0      	; 0x2aee <_Z16int_number_inputi+0xc8>
    2aee:	00 00       	nop
int int_number_input(int pos)
{
	//pos is position where u want to show the text
	while (1)
	{
		for(int c=4;c<8;c++)
    2af0:	4f 5f       	subi	r20, 0xFF	; 255
    2af2:	5f 4f       	sbci	r21, 0xFF	; 255
    2af4:	48 30       	cpi	r20, 0x08	; 8
    2af6:	51 05       	cpc	r21, r1
    2af8:	09 f0       	breq	.+2      	; 0x2afc <_Z16int_number_inputi+0xd6>
    2afa:	a3 cf       	rjmp	.-186    	; 0x2a42 <_Z16int_number_inputi+0x1c>
    2afc:	a0 cf       	rjmp	.-192    	; 0x2a3e <_Z16int_number_inputi+0x18>
				}
			}
			_delay_ms(10);
		}
	}
}
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	1f 91       	pop	r17
    2b08:	0f 91       	pop	r16
    2b0a:	ff 90       	pop	r15
    2b0c:	ef 90       	pop	r14
    2b0e:	df 90       	pop	r13
    2b10:	08 95       	ret

00002b12 <_Z16string_to_doublePci>:


double string_to_double(char s[], int id)
{
    2b12:	6f 92       	push	r6
    2b14:	7f 92       	push	r7
    2b16:	8f 92       	push	r8
    2b18:	9f 92       	push	r9
    2b1a:	af 92       	push	r10
    2b1c:	bf 92       	push	r11
    2b1e:	cf 92       	push	r12
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
	double d = 0;
	bool flag = 0;
	int koto = 1;
	bool minus = 0;
	for(int i=0;i<id;i++)
    2b2e:	16 16       	cp	r1, r22
    2b30:	17 06       	cpc	r1, r23
    2b32:	0c f0       	brlt	.+2      	; 0x2b36 <_Z16string_to_doublePci+0x24>
    2b34:	52 c0       	rjmp	.+164    	; 0x2bda <_Z16string_to_doublePci+0xc8>
    2b36:	7c 01       	movw	r14, r24
    2b38:	ec 01       	movw	r28, r24
    2b3a:	e6 0e       	add	r14, r22
    2b3c:	f7 1e       	adc	r15, r23
    2b3e:	71 2c       	mov	r7, r1
    2b40:	01 e0       	ldi	r16, 0x01	; 1
    2b42:	10 e0       	ldi	r17, 0x00	; 0
    2b44:	d1 2c       	mov	r13, r1
    2b46:	81 2c       	mov	r8, r1
    2b48:	91 2c       	mov	r9, r1
    2b4a:	54 01       	movw	r10, r8
	{
		if(s[i]=='-')
		{
			minus = 1;
    2b4c:	cc 24       	eor	r12, r12
    2b4e:	c3 94       	inc	r12
	bool flag = 0;
	int koto = 1;
	bool minus = 0;
	for(int i=0;i<id;i++)
	{
		if(s[i]=='-')
    2b50:	69 90       	ld	r6, Y+
    2b52:	8d e2       	ldi	r24, 0x2D	; 45
    2b54:	68 16       	cp	r6, r24
    2b56:	59 f1       	breq	.+86     	; 0x2bae <_Z16string_to_doublePci+0x9c>
		{
			minus = 1;
			continue;
		}
		if(s[i]=='.')
    2b58:	8e e2       	ldi	r24, 0x2E	; 46
    2b5a:	68 16       	cp	r6, r24
    2b5c:	51 f1       	breq	.+84     	; 0x2bb2 <_Z16string_to_doublePci+0xa0>
		{
			flag = 1;
			continue;
		}
		int now = (int)(s[i]-'0');
		d = d*10.0 + (double)now;
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e2       	ldi	r20, 0x20	; 32
    2b64:	51 e4       	ldi	r21, 0x41	; 65
    2b66:	c5 01       	movw	r24, r10
    2b68:	b4 01       	movw	r22, r8
    2b6a:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    2b6e:	4b 01       	movw	r8, r22
    2b70:	5c 01       	movw	r10, r24
    2b72:	66 2d       	mov	r22, r6
    2b74:	70 e0       	ldi	r23, 0x00	; 0
    2b76:	60 53       	subi	r22, 0x30	; 48
    2b78:	71 09       	sbc	r23, r1
    2b7a:	07 2e       	mov	r0, r23
    2b7c:	00 0c       	add	r0, r0
    2b7e:	88 0b       	sbc	r24, r24
    2b80:	99 0b       	sbc	r25, r25
    2b82:	0e 94 33 20 	call	0x4066	; 0x4066 <__floatsisf>
    2b86:	a5 01       	movw	r20, r10
    2b88:	94 01       	movw	r18, r8
    2b8a:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    2b8e:	4b 01       	movw	r8, r22
    2b90:	5c 01       	movw	r10, r24
		if(flag)
    2b92:	dd 20       	and	r13, r13
    2b94:	79 f0       	breq	.+30     	; 0x2bb4 <_Z16string_to_doublePci+0xa2>
		{
			koto*=10;
    2b96:	c8 01       	movw	r24, r16
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	00 0f       	add	r16, r16
    2b9e:	11 1f       	adc	r17, r17
    2ba0:	00 0f       	add	r16, r16
    2ba2:	11 1f       	adc	r17, r17
    2ba4:	00 0f       	add	r16, r16
    2ba6:	11 1f       	adc	r17, r17
    2ba8:	08 0f       	add	r16, r24
    2baa:	19 1f       	adc	r17, r25
    2bac:	03 c0       	rjmp	.+6      	; 0x2bb4 <_Z16string_to_doublePci+0xa2>
	bool minus = 0;
	for(int i=0;i<id;i++)
	{
		if(s[i]=='-')
		{
			minus = 1;
    2bae:	7c 2c       	mov	r7, r12
    2bb0:	01 c0       	rjmp	.+2      	; 0x2bb4 <_Z16string_to_doublePci+0xa2>
			continue;
		}
		if(s[i]=='.')
		{
			flag = 1;
    2bb2:	dc 2c       	mov	r13, r12
{
	double d = 0;
	bool flag = 0;
	int koto = 1;
	bool minus = 0;
	for(int i=0;i<id;i++)
    2bb4:	ec 16       	cp	r14, r28
    2bb6:	fd 06       	cpc	r15, r29
    2bb8:	59 f6       	brne	.-106    	; 0x2b50 <_Z16string_to_doublePci+0x3e>
		if(flag)
		{
			koto*=10;
		}
	}
	d/= (double)koto;
    2bba:	b8 01       	movw	r22, r16
    2bbc:	11 0f       	add	r17, r17
    2bbe:	88 0b       	sbc	r24, r24
    2bc0:	99 0b       	sbc	r25, r25
    2bc2:	0e 94 33 20 	call	0x4066	; 0x4066 <__floatsisf>
    2bc6:	9b 01       	movw	r18, r22
    2bc8:	ac 01       	movw	r20, r24
    2bca:	c5 01       	movw	r24, r10
    2bcc:	b4 01       	movw	r22, r8
    2bce:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
	if(minus)
    2bd2:	77 20       	and	r7, r7
    2bd4:	29 f0       	breq	.+10     	; 0x2be0 <_Z16string_to_doublePci+0xce>
	d= -d;
    2bd6:	90 58       	subi	r25, 0x80	; 128
    2bd8:	03 c0       	rjmp	.+6      	; 0x2be0 <_Z16string_to_doublePci+0xce>
		if(flag)
		{
			koto*=10;
		}
	}
	d/= (double)koto;
    2bda:	60 e0       	ldi	r22, 0x00	; 0
    2bdc:	70 e0       	ldi	r23, 0x00	; 0
    2bde:	cb 01       	movw	r24, r22
	if(minus)
	d= -d;
	return d;
}
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
    2be4:	1f 91       	pop	r17
    2be6:	0f 91       	pop	r16
    2be8:	ff 90       	pop	r15
    2bea:	ef 90       	pop	r14
    2bec:	df 90       	pop	r13
    2bee:	cf 90       	pop	r12
    2bf0:	bf 90       	pop	r11
    2bf2:	af 90       	pop	r10
    2bf4:	9f 90       	pop	r9
    2bf6:	8f 90       	pop	r8
    2bf8:	7f 90       	pop	r7
    2bfa:	6f 90       	pop	r6
    2bfc:	08 95       	ret

00002bfe <_Z16double_num_inputi>:

double double_num_input(int pos)
{
    2bfe:	2f 92       	push	r2
    2c00:	3f 92       	push	r3
    2c02:	4f 92       	push	r4
    2c04:	5f 92       	push	r5
    2c06:	6f 92       	push	r6
    2c08:	7f 92       	push	r7
    2c0a:	8f 92       	push	r8
    2c0c:	9f 92       	push	r9
    2c0e:	af 92       	push	r10
    2c10:	bf 92       	push	r11
    2c12:	cf 92       	push	r12
    2c14:	df 92       	push	r13
    2c16:	ef 92       	push	r14
    2c18:	ff 92       	push	r15
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	60 97       	sbiw	r28, 0x10	; 16
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	8b 87       	std	Y+11, r24	; 0x0b
	//pos is position where u want to show the text
	char s[10];
	int id = 0;
	bool dot = 0;
    2c34:	18 8a       	std	Y+16, r1	; 0x10

double double_num_input(int pos)
{
	//pos is position where u want to show the text
	char s[10];
	int id = 0;
    2c36:	a1 2c       	mov	r10, r1
    2c38:	b1 2c       	mov	r11, r1
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    2c3a:	88 24       	eor	r8, r8
    2c3c:	83 94       	inc	r8
    2c3e:	91 2c       	mov	r9, r1
						
					}
					else if(mat2[r][c-4][0]=='.' && dot==0)
					{
						dot = 1;
						s[id] = mat2[r][c-4][0];
    2c40:	ce 01       	movw	r24, r28
    2c42:	01 96       	adiw	r24, 0x01	; 1
    2c44:	2c 01       	movw	r4, r24
    2c46:	8c 87       	std	Y+12, r24	; 0x0c
    2c48:	5d 86       	std	Y+13, r5	; 0x0d
    2c4a:	0f 2e       	mov	r0, r31
    2c4c:	f6 e6       	ldi	r31, 0x66	; 102
    2c4e:	2f 2e       	mov	r2, r31
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	3f 2e       	mov	r3, r31
    2c54:	f0 2d       	mov	r31, r0
	int id = 0;
	bool dot = 0;
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    2c56:	68 94       	set
    2c58:	66 24       	eor	r6, r6
    2c5a:	62 f8       	bld	r6, 2
    2c5c:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    2c5e:	c4 01       	movw	r24, r8
    2c60:	06 2c       	mov	r0, r6
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <_Z16double_num_inputi+0x6a>
    2c64:	88 0f       	add	r24, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	0a 94       	dec	r0
    2c6a:	e2 f7       	brpl	.-8      	; 0x2c64 <_Z16double_num_inputi+0x66>
    2c6c:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    2c6e:	8b bb       	out	0x1b, r24	; 27
    2c70:	f3 01       	movw	r30, r6
    2c72:	ee 53       	subi	r30, 0x3E	; 62
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	7f 01       	movw	r14, r30
    2c78:	61 01       	movw	r12, r2
			for(int r=0;r<4;r++)
    2c7a:	00 e0       	ldi	r16, 0x00	; 0
    2c7c:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    2c7e:	86 b3       	in	r24, 0x16	; 22
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	00 2e       	mov	r0, r16
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <_Z16double_num_inputi+0x8c>
    2c86:	95 95       	asr	r25
    2c88:	87 95       	ror	r24
    2c8a:	0a 94       	dec	r0
    2c8c:	e2 f7       	brpl	.-8      	; 0x2c86 <_Z16double_num_inputi+0x88>
    2c8e:	80 ff       	sbrs	r24, 0
    2c90:	36 c0       	rjmp	.+108    	; 0x2cfe <_Z16double_num_inputi+0x100>
				{
					if(mat[r][c-4]>='0' && mat[r][c-4]<='9')
    2c92:	f7 01       	movw	r30, r14
    2c94:	80 81       	ld	r24, Z
    2c96:	90 ed       	ldi	r25, 0xD0	; 208
    2c98:	98 0f       	add	r25, r24
    2c9a:	9a 30       	cpi	r25, 0x0A	; 10
    2c9c:	90 f4       	brcc	.+36     	; 0x2cc2 <_Z16double_num_inputi+0xc4>
					{
						s[id] = mat[r][c-4];
    2c9e:	f2 01       	movw	r30, r4
    2ca0:	ea 0d       	add	r30, r10
    2ca2:	fb 1d       	adc	r31, r11
    2ca4:	80 83       	st	Z, r24
						id++;
    2ca6:	ff ef       	ldi	r31, 0xFF	; 255
    2ca8:	af 1a       	sub	r10, r31
    2caa:	bf 0a       	sbc	r11, r31
						s[id] = 0;
    2cac:	f2 01       	movw	r30, r4
    2cae:	ea 0d       	add	r30, r10
    2cb0:	fb 1d       	adc	r31, r11
    2cb2:	10 82       	st	Z, r1
						DisplayText(1,pos , s);
    2cb4:	4c 85       	ldd	r20, Y+12	; 0x0c
    2cb6:	5d 85       	ldd	r21, Y+13	; 0x0d
    2cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
    2cc0:	14 c0       	rjmp	.+40     	; 0x2cea <_Z16double_num_inputi+0xec>
					}
					else if(mat[r][c-4]=='=')
    2cc2:	8d 33       	cpi	r24, 0x3D	; 61
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <_Z16double_num_inputi+0xca>
    2cc6:	8e c0       	rjmp	.+284    	; 0x2de4 <_Z16double_num_inputi+0x1e6>
					{
						done = 1;
						break;
					}
					else if(id==0 && mat[r][c-4]=='-')
    2cc8:	a1 14       	cp	r10, r1
    2cca:	b1 04       	cpc	r11, r1
    2ccc:	71 f4       	brne	.+28     	; 0x2cea <_Z16double_num_inputi+0xec>
    2cce:	8d 32       	cpi	r24, 0x2D	; 45
    2cd0:	61 f4       	brne	.+24     	; 0x2cea <_Z16double_num_inputi+0xec>
					{
						s[id] = mat[r][c-4];
    2cd2:	2d e2       	ldi	r18, 0x2D	; 45
    2cd4:	29 83       	std	Y+1, r18	; 0x01
						id++;
						s[id] = 0;
    2cd6:	1a 82       	std	Y+2, r1	; 0x02
						DisplayText(1,pos , s);
    2cd8:	4c 85       	ldd	r20, Y+12	; 0x0c
    2cda:	5d 85       	ldd	r21, Y+13	; 0x0d
    2cdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						break;
					}
					else if(id==0 && mat[r][c-4]=='-')
					{
						s[id] = mat[r][c-4];
						id++;
    2ce4:	aa 24       	eor	r10, r10
    2ce6:	a3 94       	inc	r10
    2ce8:	b1 2c       	mov	r11, r1
    2cea:	8f ef       	ldi	r24, 0xFF	; 255
    2cec:	94 e3       	ldi	r25, 0x34	; 52
    2cee:	ec e0       	ldi	r30, 0x0C	; 12
    2cf0:	81 50       	subi	r24, 0x01	; 1
    2cf2:	90 40       	sbci	r25, 0x00	; 0
    2cf4:	e0 40       	sbci	r30, 0x00	; 0
    2cf6:	e1 f7       	brne	.-8      	; 0x2cf0 <_Z16double_num_inputi+0xf2>
    2cf8:	00 c0       	rjmp	.+0      	; 0x2cfa <_Z16double_num_inputi+0xfc>
    2cfa:	00 00       	nop
    2cfc:	51 c0       	rjmp	.+162    	; 0x2da0 <_Z16double_num_inputi+0x1a2>
						s[id] = 0;
						DisplayText(1,pos , s);
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    2cfe:	89 b3       	in	r24, 0x19	; 25
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	00 2e       	mov	r0, r16
    2d04:	02 c0       	rjmp	.+4      	; 0x2d0a <_Z16double_num_inputi+0x10c>
    2d06:	95 95       	asr	r25
    2d08:	87 95       	ror	r24
    2d0a:	0a 94       	dec	r0
    2d0c:	e2 f7       	brpl	.-8      	; 0x2d06 <_Z16double_num_inputi+0x108>
    2d0e:	80 ff       	sbrs	r24, 0
    2d10:	47 c0       	rjmp	.+142    	; 0x2da0 <_Z16double_num_inputi+0x1a2>
				{
					if(mat2[r][c-4][0]=='<')
    2d12:	f6 01       	movw	r30, r12
    2d14:	80 81       	ld	r24, Z
    2d16:	8c 33       	cpi	r24, 0x3C	; 60
    2d18:	09 f5       	brne	.+66     	; 0x2d5c <_Z16double_num_inputi+0x15e>
					{
						if(id==0){
    2d1a:	a1 14       	cp	r10, r1
    2d1c:	b1 04       	cpc	r11, r1
    2d1e:	51 f4       	brne	.+20     	; 0x2d34 <_Z16double_num_inputi+0x136>
    2d20:	ff ef       	ldi	r31, 0xFF	; 255
    2d22:	24 e3       	ldi	r18, 0x34	; 52
    2d24:	8c e0       	ldi	r24, 0x0C	; 12
    2d26:	f1 50       	subi	r31, 0x01	; 1
    2d28:	20 40       	sbci	r18, 0x00	; 0
    2d2a:	80 40       	sbci	r24, 0x00	; 0
    2d2c:	e1 f7       	brne	.-8      	; 0x2d26 <_Z16double_num_inputi+0x128>
    2d2e:	00 c0       	rjmp	.+0      	; 0x2d30 <_Z16double_num_inputi+0x132>
    2d30:	00 00       	nop
    2d32:	3a c0       	rjmp	.+116    	; 0x2da8 <_Z16double_num_inputi+0x1aa>
							_delay_ms(500);
							continue;
						}
						s[id-1]=' ';
    2d34:	91 e0       	ldi	r25, 0x01	; 1
    2d36:	a9 1a       	sub	r10, r25
    2d38:	b1 08       	sbc	r11, r1
    2d3a:	f2 01       	movw	r30, r4
    2d3c:	ea 0d       	add	r30, r10
    2d3e:	fb 1d       	adc	r31, r11
    2d40:	ff 87       	std	Y+15, r31	; 0x0f
    2d42:	ee 87       	std	Y+14, r30	; 0x0e
    2d44:	20 e2       	ldi	r18, 0x20	; 32
    2d46:	20 83       	st	Z, r18
						DisplayText(1,pos,s);
    2d48:	4c 85       	ldd	r20, Y+12	; 0x0c
    2d4a:	5d 85       	ldd	r21, Y+13	; 0x0d
    2d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						id--;
						s[id]=0;
    2d54:	ee 85       	ldd	r30, Y+14	; 0x0e
    2d56:	ff 85       	ldd	r31, Y+15	; 0x0f
    2d58:	10 82       	st	Z, r1
    2d5a:	19 c0       	rjmp	.+50     	; 0x2d8e <_Z16double_num_inputi+0x190>
						
					}
					else if(mat2[r][c-4][0]=='.' && dot==0)
    2d5c:	8e 32       	cpi	r24, 0x2E	; 46
    2d5e:	b9 f4       	brne	.+46     	; 0x2d8e <_Z16double_num_inputi+0x190>
    2d60:	f8 89       	ldd	r31, Y+16	; 0x10
    2d62:	f1 11       	cpse	r31, r1
    2d64:	14 c0       	rjmp	.+40     	; 0x2d8e <_Z16double_num_inputi+0x190>
					{
						dot = 1;
						s[id] = mat2[r][c-4][0];
    2d66:	f2 01       	movw	r30, r4
    2d68:	ea 0d       	add	r30, r10
    2d6a:	fb 1d       	adc	r31, r11
    2d6c:	2e e2       	ldi	r18, 0x2E	; 46
    2d6e:	20 83       	st	Z, r18
						id++;
    2d70:	8f ef       	ldi	r24, 0xFF	; 255
    2d72:	a8 1a       	sub	r10, r24
    2d74:	b8 0a       	sbc	r11, r24
						s[id] = 0;
    2d76:	f2 01       	movw	r30, r4
    2d78:	ea 0d       	add	r30, r10
    2d7a:	fb 1d       	adc	r31, r11
    2d7c:	10 82       	st	Z, r1
						DisplayText(1,pos , s);
    2d7e:	4c 85       	ldd	r20, Y+12	; 0x0c
    2d80:	5d 85       	ldd	r21, Y+13	; 0x0d
    2d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						s[id]=0;
						
					}
					else if(mat2[r][c-4][0]=='.' && dot==0)
					{
						dot = 1;
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	98 8b       	std	Y+16, r25	; 0x10
    2d8e:	ef ef       	ldi	r30, 0xFF	; 255
    2d90:	f4 e3       	ldi	r31, 0x34	; 52
    2d92:	2c e0       	ldi	r18, 0x0C	; 12
    2d94:	e1 50       	subi	r30, 0x01	; 1
    2d96:	f0 40       	sbci	r31, 0x00	; 0
    2d98:	20 40       	sbci	r18, 0x00	; 0
    2d9a:	e1 f7       	brne	.-8      	; 0x2d94 <_Z16double_num_inputi+0x196>
    2d9c:	00 c0       	rjmp	.+0      	; 0x2d9e <_Z16double_num_inputi+0x1a0>
    2d9e:	00 00       	nop
						s[id] = 0;
						DisplayText(1,pos , s);
					}
					_delay_ms(500);
				}
				if (id==9)
    2da0:	89 e0       	ldi	r24, 0x09	; 9
    2da2:	a8 16       	cp	r10, r24
    2da4:	b1 04       	cpc	r11, r1
    2da6:	f1 f0       	breq	.+60     	; 0x2de4 <_Z16double_num_inputi+0x1e6>
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    2da8:	0f 5f       	subi	r16, 0xFF	; 255
    2daa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dac:	98 e1       	ldi	r25, 0x18	; 24
    2dae:	c9 0e       	add	r12, r25
    2db0:	d1 1c       	adc	r13, r1
    2db2:	e4 e0       	ldi	r30, 0x04	; 4
    2db4:	ee 0e       	add	r14, r30
    2db6:	f1 1c       	adc	r15, r1
    2db8:	04 30       	cpi	r16, 0x04	; 4
    2dba:	11 05       	cpc	r17, r1
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <_Z16double_num_inputi+0x1c2>
    2dbe:	5f cf       	rjmp	.-322    	; 0x2c7e <_Z16double_num_inputi+0x80>
    2dc0:	8f e1       	ldi	r24, 0x1F	; 31
    2dc2:	9e e4       	ldi	r25, 0x4E	; 78
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	f1 f7       	brne	.-4      	; 0x2dc4 <_Z16double_num_inputi+0x1c6>
    2dc8:	00 c0       	rjmp	.+0      	; 0x2dca <_Z16double_num_inputi+0x1cc>
    2dca:	00 00       	nop
	int id = 0;
	bool dot = 0;
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    2dcc:	9f ef       	ldi	r25, 0xFF	; 255
    2dce:	69 1a       	sub	r6, r25
    2dd0:	79 0a       	sbc	r7, r25
    2dd2:	e6 e0       	ldi	r30, 0x06	; 6
    2dd4:	2e 0e       	add	r2, r30
    2dd6:	31 1c       	adc	r3, r1
    2dd8:	f8 e0       	ldi	r31, 0x08	; 8
    2dda:	6f 16       	cp	r6, r31
    2ddc:	71 04       	cpc	r7, r1
    2dde:	09 f0       	breq	.+2      	; 0x2de2 <_Z16double_num_inputi+0x1e4>
    2de0:	3e cf       	rjmp	.-388    	; 0x2c5e <_Z16double_num_inputi+0x60>
    2de2:	33 cf       	rjmp	.-410    	; 0x2c4a <_Z16double_num_inputi+0x4c>
    2de4:	8f e1       	ldi	r24, 0x1F	; 31
    2de6:	9e e4       	ldi	r25, 0x4E	; 78
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <_Z16double_num_inputi+0x1ea>
    2dec:	00 c0       	rjmp	.+0      	; 0x2dee <_Z16double_num_inputi+0x1f0>
    2dee:	00 00       	nop
		{
			break;
		}
	}
	
	return string_to_double(s,id);
    2df0:	b5 01       	movw	r22, r10
    2df2:	ce 01       	movw	r24, r28
    2df4:	01 96       	adiw	r24, 0x01	; 1
    2df6:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_Z16string_to_doublePci>
}
    2dfa:	60 96       	adiw	r28, 0x10	; 16
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	1f 91       	pop	r17
    2e0c:	0f 91       	pop	r16
    2e0e:	ff 90       	pop	r15
    2e10:	ef 90       	pop	r14
    2e12:	df 90       	pop	r13
    2e14:	cf 90       	pop	r12
    2e16:	bf 90       	pop	r11
    2e18:	af 90       	pop	r10
    2e1a:	9f 90       	pop	r9
    2e1c:	8f 90       	pop	r8
    2e1e:	7f 90       	pop	r7
    2e20:	6f 90       	pop	r6
    2e22:	5f 90       	pop	r5
    2e24:	4f 90       	pop	r4
    2e26:	3f 90       	pop	r3
    2e28:	2f 90       	pop	r2
    2e2a:	08 95       	ret

00002e2c <_Z9show_textPci>:
void show_text(char txt[], int pos1)
{
    2e2c:	cf 92       	push	r12
    2e2e:	df 92       	push	r13
    2e30:	ef 92       	push	r14
    2e32:	ff 92       	push	r15
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
    2e40:	65 97       	sbiw	r28, 0x15	; 21
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	6c 01       	movw	r12, r24
    2e4e:	7b 01       	movw	r14, r22
	if(pos1==1){
    2e50:	61 30       	cpi	r22, 0x01	; 1
    2e52:	71 05       	cpc	r23, r1
    2e54:	11 f4       	brne	.+4      	; 0x2e5a <_Z9show_textPci+0x2e>
		LCD_Clear();
    2e56:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	}
	int len = strlen(txt);
    2e5a:	f6 01       	movw	r30, r12
    2e5c:	01 90       	ld	r0, Z+
    2e5e:	00 20       	and	r0, r0
    2e60:	e9 f7       	brne	.-6      	; 0x2e5c <_Z9show_textPci+0x30>
    2e62:	31 97       	sbiw	r30, 0x01	; 1
    2e64:	ec 19       	sub	r30, r12
    2e66:	fd 09       	sbc	r31, r13
	char s[21];
	int cnt = pos1;
	int id  = 0;
	for(int i=0;i<len;i++)
    2e68:	1e 16       	cp	r1, r30
    2e6a:	1f 06       	cpc	r1, r31
    2e6c:	94 f1       	brlt	.+100    	; 0x2ed2 <_Z9show_textPci+0xa6>
    2e6e:	3a c0       	rjmp	.+116    	; 0x2ee4 <_Z9show_textPci+0xb8>
	{
		s[id] = txt[i];
    2e70:	d8 01       	movw	r26, r16
    2e72:	9d 91       	ld	r25, X+
    2e74:	8d 01       	movw	r16, r26
    2e76:	e1 e0       	ldi	r30, 0x01	; 1
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	ec 0f       	add	r30, r28
    2e7c:	fd 1f       	adc	r31, r29
    2e7e:	e2 0f       	add	r30, r18
    2e80:	f3 1f       	adc	r31, r19
    2e82:	90 83       	st	Z, r25
		id++;
    2e84:	2f 5f       	subi	r18, 0xFF	; 255
    2e86:	3f 4f       	sbci	r19, 0xFF	; 255
		if(id==20)
    2e88:	24 31       	cpi	r18, 0x14	; 20
    2e8a:	31 05       	cpc	r19, r1
    2e8c:	69 f4       	brne	.+26     	; 0x2ea8 <_Z9show_textPci+0x7c>
		{
			s[id] = 0;
    2e8e:	1d 8a       	std	Y+21, r1	; 0x15
			DisplayText(1,cnt,s);
    2e90:	ae 01       	movw	r20, r28
    2e92:	4f 5f       	subi	r20, 0xFF	; 255
    2e94:	5f 4f       	sbci	r21, 0xFF	; 255
    2e96:	6e 2d       	mov	r22, r14
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
			id = 0;
			cnt += 12;
    2e9e:	bc e0       	ldi	r27, 0x0C	; 12
    2ea0:	eb 0e       	add	r14, r27
    2ea2:	f1 1c       	adc	r15, r1
		id++;
		if(id==20)
		{
			s[id] = 0;
			DisplayText(1,cnt,s);
			id = 0;
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
	}
	int len = strlen(txt);
	char s[21];
	int cnt = pos1;
	int id  = 0;
	for(int i=0;i<len;i++)
    2ea8:	c0 16       	cp	r12, r16
    2eaa:	d1 06       	cpc	r13, r17
    2eac:	09 f7       	brne	.-62     	; 0x2e70 <_Z9show_textPci+0x44>
			id = 0;
			cnt += 12;
		}
		
	}
	if(id)
    2eae:	21 15       	cp	r18, r1
    2eb0:	31 05       	cpc	r19, r1
    2eb2:	c1 f0       	breq	.+48     	; 0x2ee4 <_Z9show_textPci+0xb8>
	{
		s[id] = 0;
    2eb4:	e1 e0       	ldi	r30, 0x01	; 1
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	ec 0f       	add	r30, r28
    2eba:	fd 1f       	adc	r31, r29
    2ebc:	e2 0f       	add	r30, r18
    2ebe:	f3 1f       	adc	r31, r19
    2ec0:	10 82       	st	Z, r1
		DisplayText(1,cnt,s);
    2ec2:	ae 01       	movw	r20, r28
    2ec4:	4f 5f       	subi	r20, 0xFF	; 255
    2ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec8:	6e 2d       	mov	r22, r14
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	}

}
    2ed0:	09 c0       	rjmp	.+18     	; 0x2ee4 <_Z9show_textPci+0xb8>
	char s[21];
	int cnt = pos1;
	int id  = 0;
	for(int i=0;i<len;i++)
	{
		s[id] = txt[i];
    2ed2:	d6 01       	movw	r26, r12
    2ed4:	8d 91       	ld	r24, X+
    2ed6:	8d 01       	movw	r16, r26
    2ed8:	89 83       	std	Y+1, r24	; 0x01
    2eda:	ce 0e       	add	r12, r30
    2edc:	df 1e       	adc	r13, r31
		id++;
    2ede:	21 e0       	ldi	r18, 0x01	; 1
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	e2 cf       	rjmp	.-60     	; 0x2ea8 <_Z9show_textPci+0x7c>
	{
		s[id] = 0;
		DisplayText(1,cnt,s);
	}

}
    2ee4:	65 96       	adiw	r28, 0x15	; 21
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	1f 91       	pop	r17
    2ef6:	0f 91       	pop	r16
    2ef8:	ff 90       	pop	r15
    2efa:	ef 90       	pop	r14
    2efc:	df 90       	pop	r13
    2efe:	cf 90       	pop	r12
    2f00:	08 95       	ret

00002f02 <_Z5gaussv>:


void gauss()
{
    2f02:	2f 92       	push	r2
    2f04:	3f 92       	push	r3
    2f06:	4f 92       	push	r4
    2f08:	5f 92       	push	r5
    2f0a:	6f 92       	push	r6
    2f0c:	7f 92       	push	r7
    2f0e:	8f 92       	push	r8
    2f10:	9f 92       	push	r9
    2f12:	af 92       	push	r10
    2f14:	bf 92       	push	r11
    2f16:	cf 92       	push	r12
    2f18:	df 92       	push	r13
    2f1a:	ef 92       	push	r14
    2f1c:	ff 92       	push	r15
    2f1e:	0f 93       	push	r16
    2f20:	1f 93       	push	r17
    2f22:	cf 93       	push	r28
    2f24:	df 93       	push	r29
    2f26:	cd b7       	in	r28, 0x3d	; 61
    2f28:	de b7       	in	r29, 0x3e	; 62
    2f2a:	cd 5a       	subi	r28, 0xAD	; 173
    2f2c:	d1 09       	sbc	r29, r1
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	f8 94       	cli
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	cd bf       	out	0x3d, r28	; 61
	char text1[] = "Number of Variables (1-7)?";
    2f38:	8b e1       	ldi	r24, 0x1B	; 27
    2f3a:	e7 e3       	ldi	r30, 0x37	; 55
    2f3c:	f2 e0       	ldi	r31, 0x02	; 2
    2f3e:	de 01       	movw	r26, r28
    2f40:	11 96       	adiw	r26, 0x01	; 1
    2f42:	01 90       	ld	r0, Z+
    2f44:	0d 92       	st	X+, r0
    2f46:	8a 95       	dec	r24
    2f48:	e1 f7       	brne	.-8      	; 0x2f42 <_Z5gaussv+0x40>
	char text2[] = "Number of equations (1-7)?";
    2f4a:	8b e1       	ldi	r24, 0x1B	; 27
    2f4c:	e2 e5       	ldi	r30, 0x52	; 82
    2f4e:	f2 e0       	ldi	r31, 0x02	; 2
    2f50:	de 01       	movw	r26, r28
    2f52:	5c 96       	adiw	r26, 0x1c	; 28
    2f54:	01 90       	ld	r0, Z+
    2f56:	0d 92       	st	X+, r0
    2f58:	8a 95       	dec	r24
    2f5a:	e1 f7       	brne	.-8      	; 0x2f54 <_Z5gaussv+0x52>
	char text3[] = "No Solution!";
    2f5c:	8d e0       	ldi	r24, 0x0D	; 13
    2f5e:	ed e6       	ldi	r30, 0x6D	; 109
    2f60:	f2 e0       	ldi	r31, 0x02	; 2
    2f62:	de 01       	movw	r26, r28
    2f64:	d7 96       	adiw	r26, 0x37	; 55
    2f66:	01 90       	ld	r0, Z+
    2f68:	0d 92       	st	X+, r0
    2f6a:	8a 95       	dec	r24
    2f6c:	e1 f7       	brne	.-8      	; 0x2f66 <_Z5gaussv+0x64>
	char text4[] = "Infinite Solution!";
    2f6e:	83 e1       	ldi	r24, 0x13	; 19
    2f70:	ea e7       	ldi	r30, 0x7A	; 122
    2f72:	f2 e0       	ldi	r31, 0x02	; 2
    2f74:	de 01       	movw	r26, r28
    2f76:	ac 5b       	subi	r26, 0xBC	; 188
    2f78:	bf 4f       	sbci	r27, 0xFF	; 255
    2f7a:	01 90       	ld	r0, Z+
    2f7c:	0d 92       	st	X+, r0
    2f7e:	8a 95       	dec	r24
    2f80:	e1 f7       	brne	.-8      	; 0x2f7a <_Z5gaussv+0x78>
	show_text(text1,1);
    2f82:	61 e0       	ldi	r22, 0x01	; 1
    2f84:	70 e0       	ldi	r23, 0x00	; 0
    2f86:	ce 01       	movw	r24, r28
    2f88:	01 96       	adiw	r24, 0x01	; 1
    2f8a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
	int m = int_number_input(24);
    2f8e:	88 e1       	ldi	r24, 0x18	; 24
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	0e 94 13 15 	call	0x2a26	; 0x2a26 <_Z16int_number_inputi>
    2f96:	c3 56       	subi	r28, 0x63	; 99
    2f98:	df 4f       	sbci	r29, 0xFF	; 255
    2f9a:	99 83       	std	Y+1, r25	; 0x01
    2f9c:	88 83       	st	Y, r24
    2f9e:	cd 59       	subi	r28, 0x9D	; 157
    2fa0:	d0 40       	sbci	r29, 0x00	; 0
	show_text(text2,1);
    2fa2:	61 e0       	ldi	r22, 0x01	; 1
    2fa4:	70 e0       	ldi	r23, 0x00	; 0
    2fa6:	ce 01       	movw	r24, r28
    2fa8:	4c 96       	adiw	r24, 0x1c	; 28
    2faa:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
	int n = int_number_input(24);
    2fae:	88 e1       	ldi	r24, 0x18	; 24
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <_Z16int_number_inputi>
    2fb6:	c8 55       	subi	r28, 0x58	; 88
    2fb8:	df 4f       	sbci	r29, 0xFF	; 255
    2fba:	99 83       	std	Y+1, r25	; 0x01
    2fbc:	88 83       	st	Y, r24
    2fbe:	c8 5a       	subi	r28, 0xA8	; 168
    2fc0:	d0 40       	sbci	r29, 0x00	; 0
	
	double *ans = (double*)malloc(m * sizeof(double));
    2fc2:	c3 56       	subi	r28, 0x63	; 99
    2fc4:	df 4f       	sbci	r29, 0xFF	; 255
    2fc6:	28 81       	ld	r18, Y
    2fc8:	39 81       	ldd	r19, Y+1	; 0x01
    2fca:	cd 59       	subi	r28, 0x9D	; 157
    2fcc:	d0 40       	sbci	r29, 0x00	; 0
    2fce:	22 0f       	add	r18, r18
    2fd0:	33 1f       	adc	r19, r19
    2fd2:	22 0f       	add	r18, r18
    2fd4:	33 1f       	adc	r19, r19
    2fd6:	ce 55       	subi	r28, 0x5E	; 94
    2fd8:	df 4f       	sbci	r29, 0xFF	; 255
    2fda:	39 83       	std	Y+1, r19	; 0x01
    2fdc:	28 83       	st	Y, r18
    2fde:	c2 5a       	subi	r28, 0xA2	; 162
    2fe0:	d0 40       	sbci	r29, 0x00	; 0
    2fe2:	c9 01       	movw	r24, r18
    2fe4:	0e 94 87 24 	call	0x490e	; 0x490e <malloc>
    2fe8:	c4 55       	subi	r28, 0x54	; 84
    2fea:	df 4f       	sbci	r29, 0xFF	; 255
    2fec:	88 83       	st	Y, r24
    2fee:	cc 5a       	subi	r28, 0xAC	; 172
    2ff0:	d0 40       	sbci	r29, 0x00	; 0
    2ff2:	c3 55       	subi	r28, 0x53	; 83
    2ff4:	df 4f       	sbci	r29, 0xFF	; 255
    2ff6:	98 83       	st	Y, r25
    2ff8:	cd 5a       	subi	r28, 0xAD	; 173
    2ffa:	d0 40       	sbci	r29, 0x00	; 0
	double ** a = (double**)malloc(n*sizeof(double *));
    2ffc:	c8 55       	subi	r28, 0x58	; 88
    2ffe:	df 4f       	sbci	r29, 0xFF	; 255
    3000:	88 81       	ld	r24, Y
    3002:	99 81       	ldd	r25, Y+1	; 0x01
    3004:	c8 5a       	subi	r28, 0xA8	; 168
    3006:	d0 40       	sbci	r29, 0x00	; 0
    3008:	88 0f       	add	r24, r24
    300a:	99 1f       	adc	r25, r25
    300c:	c6 55       	subi	r28, 0x56	; 86
    300e:	df 4f       	sbci	r29, 0xFF	; 255
    3010:	99 83       	std	Y+1, r25	; 0x01
    3012:	88 83       	st	Y, r24
    3014:	ca 5a       	subi	r28, 0xAA	; 170
    3016:	d0 40       	sbci	r29, 0x00	; 0
    3018:	0e 94 87 24 	call	0x490e	; 0x490e <malloc>
    301c:	ca 55       	subi	r28, 0x5A	; 90
    301e:	df 4f       	sbci	r29, 0xFF	; 255
    3020:	99 83       	std	Y+1, r25	; 0x01
    3022:	88 83       	st	Y, r24
    3024:	c6 5a       	subi	r28, 0xA6	; 166
    3026:	d0 40       	sbci	r29, 0x00	; 0
	for(int i=0; i< n; i++) 
    3028:	c8 55       	subi	r28, 0x58	; 88
    302a:	df 4f       	sbci	r29, 0xFF	; 255
    302c:	e8 81       	ld	r30, Y
    302e:	f9 81       	ldd	r31, Y+1	; 0x01
    3030:	c8 5a       	subi	r28, 0xA8	; 168
    3032:	d0 40       	sbci	r29, 0x00	; 0
    3034:	1e 16       	cp	r1, r30
    3036:	1f 06       	cpc	r1, r31
    3038:	0c f0       	brlt	.+2      	; 0x303c <_Z5gaussv+0x13a>
    303a:	3d c1       	rjmp	.+634    	; 0x32b6 <_Z5gaussv+0x3b4>
		a[i] = (double*) malloc((m+1)*sizeof(double));
    303c:	ce 55       	subi	r28, 0x5E	; 94
    303e:	df 4f       	sbci	r29, 0xFF	; 255
    3040:	e8 80       	ld	r14, Y
    3042:	f9 80       	ldd	r15, Y+1	; 0x01
    3044:	c2 5a       	subi	r28, 0xA2	; 162
    3046:	d0 40       	sbci	r29, 0x00	; 0
    3048:	f4 e0       	ldi	r31, 0x04	; 4
    304a:	ef 0e       	add	r14, r31
    304c:	f1 1c       	adc	r15, r1
    304e:	c5 56       	subi	r28, 0x65	; 101
    3050:	df 4f       	sbci	r29, 0xFF	; 255
    3052:	99 83       	std	Y+1, r25	; 0x01
    3054:	88 83       	st	Y, r24
    3056:	cb 59       	subi	r28, 0x9B	; 155
    3058:	d0 40       	sbci	r29, 0x00	; 0
    305a:	9c 01       	movw	r18, r24
    305c:	c6 55       	subi	r28, 0x56	; 86
    305e:	df 4f       	sbci	r29, 0xFF	; 255
    3060:	88 81       	ld	r24, Y
    3062:	99 81       	ldd	r25, Y+1	; 0x01
    3064:	ca 5a       	subi	r28, 0xAA	; 170
    3066:	d0 40       	sbci	r29, 0x00	; 0
    3068:	28 0f       	add	r18, r24
    306a:	39 1f       	adc	r19, r25
    306c:	cc 55       	subi	r28, 0x5C	; 92
    306e:	df 4f       	sbci	r29, 0xFF	; 255
    3070:	39 83       	std	Y+1, r19	; 0x01
    3072:	28 83       	st	Y, r18
    3074:	c4 5a       	subi	r28, 0xA4	; 164
    3076:	d0 40       	sbci	r29, 0x00	; 0
    3078:	ca 55       	subi	r28, 0x5A	; 90
    307a:	df 4f       	sbci	r29, 0xFF	; 255
    307c:	08 81       	ld	r16, Y
    307e:	19 81       	ldd	r17, Y+1	; 0x01
    3080:	c6 5a       	subi	r28, 0xA6	; 166
    3082:	d0 40       	sbci	r29, 0x00	; 0
    3084:	69 01       	movw	r12, r18
    3086:	c7 01       	movw	r24, r14
    3088:	0e 94 87 24 	call	0x490e	; 0x490e <malloc>
    308c:	f8 01       	movw	r30, r16
    308e:	81 93       	st	Z+, r24
    3090:	91 93       	st	Z+, r25
    3092:	8f 01       	movw	r16, r30
	show_text(text2,1);
	int n = int_number_input(24);
	
	double *ans = (double*)malloc(m * sizeof(double));
	double ** a = (double**)malloc(n*sizeof(double *));
	for(int i=0; i< n; i++) 
    3094:	ce 16       	cp	r12, r30
    3096:	df 06       	cpc	r13, r31
    3098:	b1 f7       	brne	.-20     	; 0x3086 <_Z5gaussv+0x184>
    309a:	0f 2e       	mov	r0, r31
    309c:	f0 e3       	ldi	r31, 0x30	; 48
    309e:	4f 2e       	mov	r4, r31
    30a0:	f0 2d       	mov	r31, r0
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			char text[14] = "Input a[";
    30a2:	9e 01       	movw	r18, r28
    30a4:	29 5a       	subi	r18, 0xA9	; 169
    30a6:	3f 4f       	sbci	r19, 0xFF	; 255
    30a8:	c7 56       	subi	r28, 0x67	; 103
    30aa:	df 4f       	sbci	r29, 0xFF	; 255
    30ac:	39 83       	std	Y+1, r19	; 0x01
    30ae:	28 83       	st	Y, r18
    30b0:	c9 59       	subi	r28, 0x99	; 153
    30b2:	d0 40       	sbci	r29, 0x00	; 0
    30b4:	0f 2e       	mov	r0, r31
    30b6:	f5 e0       	ldi	r31, 0x05	; 5
    30b8:	2f 2e       	mov	r2, r31
    30ba:	f0 2d       	mov	r31, r0
    30bc:	c9 01       	movw	r24, r18
    30be:	09 96       	adiw	r24, 0x09	; 9
    30c0:	c0 56       	subi	r28, 0x60	; 96
    30c2:	df 4f       	sbci	r29, 0xFF	; 255
    30c4:	99 83       	std	Y+1, r25	; 0x01
    30c6:	88 83       	st	Y, r24
    30c8:	c0 5a       	subi	r28, 0xA0	; 160
    30ca:	d0 40       	sbci	r29, 0x00	; 0
			char ek[2];
			ek[0] = (char)(i+'0');
    30cc:	7e 01       	movw	r14, r28
    30ce:	99 e8       	ldi	r25, 0x89	; 137
    30d0:	e9 0e       	add	r14, r25
    30d2:	f1 1c       	adc	r15, r1
			ek[1] = 0;
			strcat(text , ek);
			ek[0] = ']';
    30d4:	0f 2e       	mov	r0, r31
    30d6:	fd e5       	ldi	r31, 0x5D	; 93
    30d8:	5f 2e       	mov	r5, r31
    30da:	f0 2d       	mov	r31, r0
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			char text[14] = "Input a[";
    30dc:	c7 56       	subi	r28, 0x67	; 103
    30de:	df 4f       	sbci	r29, 0xFF	; 255
    30e0:	08 81       	ld	r16, Y
    30e2:	c9 59       	subi	r28, 0x99	; 153
    30e4:	d0 40       	sbci	r29, 0x00	; 0
    30e6:	c6 56       	subi	r28, 0x66	; 102
    30e8:	df 4f       	sbci	r29, 0xFF	; 255
    30ea:	18 81       	ld	r17, Y
    30ec:	ca 59       	subi	r28, 0x9A	; 154
    30ee:	d0 40       	sbci	r29, 0x00	; 0
			char ek[2];
			ek[0] = (char)(i+'0');
    30f0:	6e 2c       	mov	r6, r14
    30f2:	7f 2c       	mov	r7, r15

	
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
    30f4:	c3 56       	subi	r28, 0x63	; 99
    30f6:	df 4f       	sbci	r29, 0xFF	; 255
    30f8:	e8 81       	ld	r30, Y
    30fa:	f9 81       	ldd	r31, Y+1	; 0x01
    30fc:	cd 59       	subi	r28, 0x9D	; 157
    30fe:	d0 40       	sbci	r29, 0x00	; 0
    3100:	1e 16       	cp	r1, r30
    3102:	1f 06       	cpc	r1, r31
    3104:	0c f0       	brlt	.+2      	; 0x3108 <_Z5gaussv+0x206>
    3106:	83 c0       	rjmp	.+262    	; 0x320e <_Z5gaussv+0x30c>
    3108:	a1 2c       	mov	r10, r1
    310a:	b1 2c       	mov	r11, r1
    310c:	0f 2e       	mov	r0, r31
    310e:	f0 e3       	ldi	r31, 0x30	; 48
    3110:	3f 2e       	mov	r3, r31
    3112:	f0 2d       	mov	r31, r0
    3114:	81 2c       	mov	r8, r1
    3116:	91 2c       	mov	r9, r1
    3118:	c1 56       	subi	r28, 0x61	; 97
    311a:	df 4f       	sbci	r29, 0xFF	; 255
    311c:	48 82       	st	Y, r4
    311e:	cf 59       	subi	r28, 0x9F	; 159
    3120:	d0 40       	sbci	r29, 0x00	; 0
    3122:	47 2c       	mov	r4, r7
    3124:	73 2c       	mov	r7, r3
    3126:	36 2c       	mov	r3, r6
		{
			char text[14] = "Input a[";
    3128:	89 e0       	ldi	r24, 0x09	; 9
    312a:	e6 ed       	ldi	r30, 0xD6	; 214
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	a0 2f       	mov	r26, r16
    3130:	b1 2f       	mov	r27, r17
    3132:	01 90       	ld	r0, Z+
    3134:	0d 92       	st	X+, r0
    3136:	8a 95       	dec	r24
    3138:	e1 f7       	brne	.-8      	; 0x3132 <_Z5gaussv+0x230>
    313a:	c0 56       	subi	r28, 0x60	; 96
    313c:	df 4f       	sbci	r29, 0xFF	; 255
    313e:	e8 81       	ld	r30, Y
    3140:	f9 81       	ldd	r31, Y+1	; 0x01
    3142:	c0 5a       	subi	r28, 0xA0	; 160
    3144:	d0 40       	sbci	r29, 0x00	; 0
    3146:	22 2d       	mov	r18, r2
    3148:	11 92       	st	Z+, r1
    314a:	2a 95       	dec	r18
    314c:	e9 f7       	brne	.-6      	; 0x3148 <_Z5gaussv+0x246>
			char ek[2];
			ek[0] = (char)(i+'0');
    314e:	c1 56       	subi	r28, 0x61	; 97
    3150:	df 4f       	sbci	r29, 0xFF	; 255
    3152:	28 81       	ld	r18, Y
    3154:	cf 59       	subi	r28, 0x9F	; 159
    3156:	d0 40       	sbci	r29, 0x00	; 0
    3158:	f7 01       	movw	r30, r14
    315a:	20 83       	st	Z, r18
			ek[1] = 0;
    315c:	11 82       	std	Z+1, r1	; 0x01
			strcat(text , ek);
    315e:	63 2d       	mov	r22, r3
    3160:	74 2d       	mov	r23, r4
    3162:	80 2f       	mov	r24, r16
    3164:	91 2f       	mov	r25, r17
    3166:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <strcat>
			ek[0] = ']';
    316a:	f7 01       	movw	r30, r14
    316c:	50 82       	st	Z, r5
			strcat(text , ek);
    316e:	63 2d       	mov	r22, r3
    3170:	74 2d       	mov	r23, r4
    3172:	80 2f       	mov	r24, r16
    3174:	91 2f       	mov	r25, r17
    3176:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <strcat>
			ek[0] = '[';
    317a:	2b e5       	ldi	r18, 0x5B	; 91
    317c:	f7 01       	movw	r30, r14
    317e:	20 83       	st	Z, r18
			strcat(text , ek);
    3180:	63 2d       	mov	r22, r3
    3182:	74 2d       	mov	r23, r4
    3184:	80 2f       	mov	r24, r16
    3186:	91 2f       	mov	r25, r17
    3188:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <strcat>
			ek[0] = (char)(j+'0');
    318c:	f7 01       	movw	r30, r14
    318e:	70 82       	st	Z, r7
			strcat(text , ek);
    3190:	63 2d       	mov	r22, r3
    3192:	74 2d       	mov	r23, r4
    3194:	80 2f       	mov	r24, r16
    3196:	91 2f       	mov	r25, r17
    3198:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <strcat>
			ek[0] = ']';
    319c:	f7 01       	movw	r30, r14
    319e:	50 82       	st	Z, r5
			strcat(text , ek);
    31a0:	63 2d       	mov	r22, r3
    31a2:	74 2d       	mov	r23, r4
    31a4:	80 2f       	mov	r24, r16
    31a6:	91 2f       	mov	r25, r17
    31a8:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <strcat>
			show_text(text,1);
    31ac:	61 e0       	ldi	r22, 0x01	; 1
    31ae:	70 e0       	ldi	r23, 0x00	; 0
    31b0:	80 2f       	mov	r24, r16
    31b2:	91 2f       	mov	r25, r17
    31b4:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
			a[i][j] = double_num_input(12);
    31b8:	c5 56       	subi	r28, 0x65	; 101
    31ba:	df 4f       	sbci	r29, 0xFF	; 255
    31bc:	e8 81       	ld	r30, Y
    31be:	f9 81       	ldd	r31, Y+1	; 0x01
    31c0:	cb 59       	subi	r28, 0x9B	; 155
    31c2:	d0 40       	sbci	r29, 0x00	; 0
    31c4:	c0 80       	ld	r12, Z
    31c6:	d1 80       	ldd	r13, Z+1	; 0x01
    31c8:	ca 0c       	add	r12, r10
    31ca:	db 1c       	adc	r13, r11
    31cc:	8c e0       	ldi	r24, 0x0C	; 12
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <_Z16double_num_inputi>
    31d4:	f6 01       	movw	r30, r12
    31d6:	60 83       	st	Z, r22
    31d8:	71 83       	std	Z+1, r23	; 0x01
    31da:	82 83       	std	Z+2, r24	; 0x02
    31dc:	93 83       	std	Z+3, r25	; 0x03

	
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
    31de:	ff ef       	ldi	r31, 0xFF	; 255
    31e0:	8f 1a       	sub	r8, r31
    31e2:	9f 0a       	sbc	r9, r31
    31e4:	73 94       	inc	r7
    31e6:	24 e0       	ldi	r18, 0x04	; 4
    31e8:	a2 0e       	add	r10, r18
    31ea:	b1 1c       	adc	r11, r1
    31ec:	c3 56       	subi	r28, 0x63	; 99
    31ee:	df 4f       	sbci	r29, 0xFF	; 255
    31f0:	88 81       	ld	r24, Y
    31f2:	99 81       	ldd	r25, Y+1	; 0x01
    31f4:	cd 59       	subi	r28, 0x9D	; 157
    31f6:	d0 40       	sbci	r29, 0x00	; 0
    31f8:	88 15       	cp	r24, r8
    31fa:	99 05       	cpc	r25, r9
    31fc:	09 f0       	breq	.+2      	; 0x3200 <_Z5gaussv+0x2fe>
    31fe:	94 cf       	rjmp	.-216    	; 0x3128 <_Z5gaussv+0x226>
    3200:	63 2c       	mov	r6, r3
    3202:	74 2c       	mov	r7, r4
    3204:	c1 56       	subi	r28, 0x61	; 97
    3206:	df 4f       	sbci	r29, 0xFF	; 255
    3208:	48 80       	ld	r4, Y
    320a:	cf 59       	subi	r28, 0x9F	; 159
    320c:	d0 40       	sbci	r29, 0x00	; 0
			strcat(text , ek);
			show_text(text,1);
			a[i][j] = double_num_input(12);
		}
		{
			char text[18] = "Input column d[";
    320e:	80 e1       	ldi	r24, 0x10	; 16
    3210:	e4 ee       	ldi	r30, 0xE4	; 228
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	a0 2f       	mov	r26, r16
    3216:	b1 2f       	mov	r27, r17
    3218:	01 90       	ld	r0, Z+
    321a:	0d 92       	st	X+, r0
    321c:	8a 95       	dec	r24
    321e:	e1 f7       	brne	.-8      	; 0x3218 <_Z5gaussv+0x316>
    3220:	a9 96       	adiw	r28, 0x29	; 41
    3222:	1f ae       	std	Y+63, r1	; 0x3f
    3224:	1e ae       	std	Y+62, r1	; 0x3e
    3226:	a9 97       	sbiw	r28, 0x29	; 41
			char ek[2];
			ek[0] = (char)(i+'0');
    3228:	f7 01       	movw	r30, r14
    322a:	40 82       	st	Z, r4
			ek[1] = 0;
    322c:	11 82       	std	Z+1, r1	; 0x01
			strcat(text , ek);
    322e:	66 2d       	mov	r22, r6
    3230:	77 2d       	mov	r23, r7
    3232:	80 2f       	mov	r24, r16
    3234:	91 2f       	mov	r25, r17
    3236:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <strcat>
			ek[0] = ']';
    323a:	f7 01       	movw	r30, r14
    323c:	50 82       	st	Z, r5
			strcat(text , ek);
    323e:	66 2d       	mov	r22, r6
    3240:	77 2d       	mov	r23, r7
    3242:	80 2f       	mov	r24, r16
    3244:	91 2f       	mov	r25, r17
    3246:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <strcat>
			show_text(text,1);
    324a:	61 e0       	ldi	r22, 0x01	; 1
    324c:	70 e0       	ldi	r23, 0x00	; 0
    324e:	80 2f       	mov	r24, r16
    3250:	91 2f       	mov	r25, r17
    3252:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
			a[i][m] = double_num_input(12);
    3256:	c5 56       	subi	r28, 0x65	; 101
    3258:	df 4f       	sbci	r29, 0xFF	; 255
    325a:	e8 81       	ld	r30, Y
    325c:	f9 81       	ldd	r31, Y+1	; 0x01
    325e:	cb 59       	subi	r28, 0x9B	; 155
    3260:	d0 40       	sbci	r29, 0x00	; 0
    3262:	c1 90       	ld	r12, Z+
    3264:	d1 90       	ld	r13, Z+
    3266:	c5 56       	subi	r28, 0x65	; 101
    3268:	df 4f       	sbci	r29, 0xFF	; 255
    326a:	f9 83       	std	Y+1, r31	; 0x01
    326c:	e8 83       	st	Y, r30
    326e:	cb 59       	subi	r28, 0x9B	; 155
    3270:	d0 40       	sbci	r29, 0x00	; 0
    3272:	ce 55       	subi	r28, 0x5E	; 94
    3274:	df 4f       	sbci	r29, 0xFF	; 255
    3276:	28 81       	ld	r18, Y
    3278:	39 81       	ldd	r19, Y+1	; 0x01
    327a:	c2 5a       	subi	r28, 0xA2	; 162
    327c:	d0 40       	sbci	r29, 0x00	; 0
    327e:	c2 0e       	add	r12, r18
    3280:	d3 1e       	adc	r13, r19
    3282:	8c e0       	ldi	r24, 0x0C	; 12
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <_Z16double_num_inputi>
    328a:	f6 01       	movw	r30, r12
    328c:	60 83       	st	Z, r22
    328e:	71 83       	std	Z+1, r23	; 0x01
    3290:	82 83       	std	Z+2, r24	; 0x02
    3292:	93 83       	std	Z+3, r25	; 0x03
    3294:	43 94       	inc	r4
	for(int i=0; i< n; i++) 
		a[i] = (double*) malloc((m+1)*sizeof(double));

	
	
	for(int i=0;i<n;i++)
    3296:	c5 56       	subi	r28, 0x65	; 101
    3298:	df 4f       	sbci	r29, 0xFF	; 255
    329a:	28 81       	ld	r18, Y
    329c:	39 81       	ldd	r19, Y+1	; 0x01
    329e:	cb 59       	subi	r28, 0x9B	; 155
    32a0:	d0 40       	sbci	r29, 0x00	; 0
    32a2:	cc 55       	subi	r28, 0x5C	; 92
    32a4:	df 4f       	sbci	r29, 0xFF	; 255
    32a6:	88 81       	ld	r24, Y
    32a8:	99 81       	ldd	r25, Y+1	; 0x01
    32aa:	c4 5a       	subi	r28, 0xA4	; 164
    32ac:	d0 40       	sbci	r29, 0x00	; 0
    32ae:	28 17       	cp	r18, r24
    32b0:	39 07       	cpc	r19, r25
    32b2:	09 f0       	breq	.+2      	; 0x32b6 <_Z5gaussv+0x3b4>
    32b4:	1f cf       	rjmp	.-450    	; 0x30f4 <_Z5gaussv+0x1f2>
			strcat(text , ek);
			show_text(text,1);
			a[i][m] = double_num_input(12);
		}
	}
	int koto = gauss_algo(n,m,ans,a);
    32b6:	ca 55       	subi	r28, 0x5A	; 90
    32b8:	df 4f       	sbci	r29, 0xFF	; 255
    32ba:	28 81       	ld	r18, Y
    32bc:	39 81       	ldd	r19, Y+1	; 0x01
    32be:	c6 5a       	subi	r28, 0xA6	; 166
    32c0:	d0 40       	sbci	r29, 0x00	; 0
    32c2:	c4 55       	subi	r28, 0x54	; 84
    32c4:	df 4f       	sbci	r29, 0xFF	; 255
    32c6:	48 81       	ld	r20, Y
    32c8:	cc 5a       	subi	r28, 0xAC	; 172
    32ca:	d0 40       	sbci	r29, 0x00	; 0
    32cc:	c3 55       	subi	r28, 0x53	; 83
    32ce:	df 4f       	sbci	r29, 0xFF	; 255
    32d0:	58 81       	ld	r21, Y
    32d2:	cd 5a       	subi	r28, 0xAD	; 173
    32d4:	d0 40       	sbci	r29, 0x00	; 0
    32d6:	c3 56       	subi	r28, 0x63	; 99
    32d8:	df 4f       	sbci	r29, 0xFF	; 255
    32da:	68 81       	ld	r22, Y
    32dc:	79 81       	ldd	r23, Y+1	; 0x01
    32de:	cd 59       	subi	r28, 0x9D	; 157
    32e0:	d0 40       	sbci	r29, 0x00	; 0
    32e2:	c8 55       	subi	r28, 0x58	; 88
    32e4:	df 4f       	sbci	r29, 0xFF	; 255
    32e6:	88 81       	ld	r24, Y
    32e8:	99 81       	ldd	r25, Y+1	; 0x01
    32ea:	c8 5a       	subi	r28, 0xA8	; 168
    32ec:	d0 40       	sbci	r29, 0x00	; 0
    32ee:	0e 94 15 09 	call	0x122a	; 0x122a <_Z10gauss_algoiiPdPS_>
	if(koto==0)
    32f2:	00 97       	sbiw	r24, 0x00	; 0
    32f4:	39 f4       	brne	.+14     	; 0x3304 <_Z5gaussv+0x402>
	{
		show_text(text3,1);
    32f6:	61 e0       	ldi	r22, 0x01	; 1
    32f8:	70 e0       	ldi	r23, 0x00	; 0
    32fa:	ce 01       	movw	r24, r28
    32fc:	c7 96       	adiw	r24, 0x37	; 55
    32fe:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
    3302:	0b c1       	rjmp	.+534    	; 0x351a <_Z5gaussv+0x618>
		return;
	}
	else if(koto==1)
    3304:	81 30       	cpi	r24, 0x01	; 1
    3306:	91 05       	cpc	r25, r1
    3308:	99 f4       	brne	.+38     	; 0x3330 <_Z5gaussv+0x42e>
    330a:	9f ef       	ldi	r25, 0xFF	; 255
    330c:	ee e9       	ldi	r30, 0x9E	; 158
    330e:	f4 e2       	ldi	r31, 0x24	; 36
    3310:	91 50       	subi	r25, 0x01	; 1
    3312:	e0 40       	sbci	r30, 0x00	; 0
    3314:	f0 40       	sbci	r31, 0x00	; 0
    3316:	e1 f7       	brne	.-8      	; 0x3310 <_Z5gaussv+0x40e>
    3318:	00 c0       	rjmp	.+0      	; 0x331a <_Z5gaussv+0x418>
    331a:	00 00       	nop
	{
		show_text(text4,1);
		_delay_ms(1500);
	}
	
	for(int i=0;i<m;i++)
    331c:	c3 56       	subi	r28, 0x63	; 99
    331e:	df 4f       	sbci	r29, 0xFF	; 255
    3320:	28 81       	ld	r18, Y
    3322:	39 81       	ldd	r19, Y+1	; 0x01
    3324:	cd 59       	subi	r28, 0x9D	; 157
    3326:	d0 40       	sbci	r29, 0x00	; 0
    3328:	12 16       	cp	r1, r18
    332a:	13 06       	cpc	r1, r19
    332c:	fc f0       	brlt	.+62     	; 0x336c <_Z5gaussv+0x46a>
    332e:	13 c0       	rjmp	.+38     	; 0x3356 <_Z5gaussv+0x454>
	}
	else if(koto==1)
	{
		_delay_ms(1500);
	}
	else if(koto==2)
    3330:	02 97       	sbiw	r24, 0x02	; 2
    3332:	a1 f7       	brne	.-24     	; 0x331c <_Z5gaussv+0x41a>
	{
		show_text(text4,1);
    3334:	61 e0       	ldi	r22, 0x01	; 1
    3336:	70 e0       	ldi	r23, 0x00	; 0
    3338:	ce 01       	movw	r24, r28
    333a:	8c 5b       	subi	r24, 0xBC	; 188
    333c:	9f 4f       	sbci	r25, 0xFF	; 255
    333e:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
    3342:	3f ef       	ldi	r19, 0xFF	; 255
    3344:	8e e9       	ldi	r24, 0x9E	; 158
    3346:	94 e2       	ldi	r25, 0x24	; 36
    3348:	31 50       	subi	r19, 0x01	; 1
    334a:	80 40       	sbci	r24, 0x00	; 0
    334c:	90 40       	sbci	r25, 0x00	; 0
    334e:	e1 f7       	brne	.-8      	; 0x3348 <_Z5gaussv+0x446>
    3350:	00 c0       	rjmp	.+0      	; 0x3352 <_Z5gaussv+0x450>
    3352:	00 00       	nop
    3354:	e3 cf       	rjmp	.-58     	; 0x331c <_Z5gaussv+0x41a>
				break;
			}
		}
		_delay_ms(500);
	}
	for(int i = 0; i < n; i++)
    3356:	c8 55       	subi	r28, 0x58	; 88
    3358:	df 4f       	sbci	r29, 0xFF	; 255
    335a:	e8 81       	ld	r30, Y
    335c:	f9 81       	ldd	r31, Y+1	; 0x01
    335e:	c8 5a       	subi	r28, 0xA8	; 168
    3360:	d0 40       	sbci	r29, 0x00	; 0
    3362:	1e 16       	cp	r1, r30
    3364:	1f 06       	cpc	r1, r31
    3366:	0c f4       	brge	.+2      	; 0x336a <_Z5gaussv+0x468>
    3368:	ac c0       	rjmp	.+344    	; 0x34c2 <_Z5gaussv+0x5c0>
    336a:	c3 c0       	rjmp	.+390    	; 0x34f2 <_Z5gaussv+0x5f0>
    336c:	c4 55       	subi	r28, 0x54	; 84
    336e:	df 4f       	sbci	r29, 0xFF	; 255
    3370:	a8 80       	ld	r10, Y
    3372:	cc 5a       	subi	r28, 0xAC	; 172
    3374:	d0 40       	sbci	r29, 0x00	; 0
    3376:	c3 55       	subi	r28, 0x53	; 83
    3378:	df 4f       	sbci	r29, 0xFF	; 255
    337a:	b8 80       	ld	r11, Y
    337c:	cd 5a       	subi	r28, 0xAD	; 173
    337e:	d0 40       	sbci	r29, 0x00	; 0
	{
		show_text(text4,1);
		_delay_ms(1500);
	}
	
	for(int i=0;i<m;i++)
    3380:	0f 2e       	mov	r0, r31
    3382:	f0 e3       	ldi	r31, 0x30	; 48
    3384:	7f 2e       	mov	r7, r31
    3386:	f0 2d       	mov	r31, r0
    3388:	c1 2c       	mov	r12, r1
    338a:	d1 2c       	mov	r13, r1
	{
		char text[14] = "Ans x[";
    338c:	0f 2e       	mov	r0, r31
    338e:	f7 e0       	ldi	r31, 0x07	; 7
    3390:	5f 2e       	mov	r5, r31
    3392:	f0 2d       	mov	r31, r0
    3394:	0f 2e       	mov	r0, r31
    3396:	f9 e8       	ldi	r31, 0x89	; 137
    3398:	8f 2e       	mov	r8, r31
    339a:	91 2c       	mov	r9, r1
    339c:	f0 2d       	mov	r31, r0
    339e:	8c 0e       	add	r8, r28
    33a0:	9d 1e       	adc	r9, r29
    33a2:	f7 e0       	ldi	r31, 0x07	; 7
    33a4:	8f 0e       	add	r8, r31
    33a6:	91 1c       	adc	r9, r1
		char ek[2];
		ek[0] = (char)(i+'0');
		ek[1] = 0;
		strcat(text , ek);
		ek[0] = ']';
    33a8:	0f 2e       	mov	r0, r31
    33aa:	fd e5       	ldi	r31, 0x5D	; 93
    33ac:	6f 2e       	mov	r6, r31
    33ae:	f0 2d       	mov	r31, r0
		strcat(text , ek);
		show_text(text,1);
    33b0:	ee 24       	eor	r14, r14
    33b2:	e3 94       	inc	r14
    33b4:	f1 2c       	mov	r15, r1
		char s[50];
		dtostrf(ans[i],1,2,s);
    33b6:	c3 56       	subi	r28, 0x63	; 99
    33b8:	df 4f       	sbci	r29, 0xFF	; 255
    33ba:	28 80       	ld	r2, Y
    33bc:	39 80       	ldd	r3, Y+1	; 0x01
    33be:	cd 59       	subi	r28, 0x9D	; 157
    33c0:	d0 40       	sbci	r29, 0x00	; 0
		_delay_ms(1500);
	}
	
	for(int i=0;i<m;i++)
	{
		char text[14] = "Ans x[";
    33c2:	87 e0       	ldi	r24, 0x07	; 7
    33c4:	e6 ef       	ldi	r30, 0xF6	; 246
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	de 01       	movw	r26, r28
    33ca:	a7 57       	subi	r26, 0x77	; 119
    33cc:	bf 4f       	sbci	r27, 0xFF	; 255
    33ce:	01 90       	ld	r0, Z+
    33d0:	0d 92       	st	X+, r0
    33d2:	8a 95       	dec	r24
    33d4:	e1 f7       	brne	.-8      	; 0x33ce <_Z5gaussv+0x4cc>
    33d6:	f4 01       	movw	r30, r8
    33d8:	25 2d       	mov	r18, r5
    33da:	11 92       	st	Z+, r1
    33dc:	2a 95       	dec	r18
    33de:	e9 f7       	brne	.-6      	; 0x33da <_Z5gaussv+0x4d8>
		char ek[2];
		ek[0] = (char)(i+'0');
    33e0:	c9 56       	subi	r28, 0x69	; 105
    33e2:	df 4f       	sbci	r29, 0xFF	; 255
    33e4:	78 82       	st	Y, r7
    33e6:	c7 59       	subi	r28, 0x97	; 151
    33e8:	d0 40       	sbci	r29, 0x00	; 0
		ek[1] = 0;
    33ea:	c8 56       	subi	r28, 0x68	; 104
    33ec:	df 4f       	sbci	r29, 0xFF	; 255
    33ee:	18 82       	st	Y, r1
    33f0:	c8 59       	subi	r28, 0x98	; 152
    33f2:	d0 40       	sbci	r29, 0x00	; 0
		strcat(text , ek);
    33f4:	be 01       	movw	r22, r28
    33f6:	69 56       	subi	r22, 0x69	; 105
    33f8:	7f 4f       	sbci	r23, 0xFF	; 255
    33fa:	ce 01       	movw	r24, r28
    33fc:	87 57       	subi	r24, 0x77	; 119
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <strcat>
		ek[0] = ']';
    3404:	c9 56       	subi	r28, 0x69	; 105
    3406:	df 4f       	sbci	r29, 0xFF	; 255
    3408:	68 82       	st	Y, r6
    340a:	c7 59       	subi	r28, 0x97	; 151
    340c:	d0 40       	sbci	r29, 0x00	; 0
		strcat(text , ek);
    340e:	be 01       	movw	r22, r28
    3410:	69 56       	subi	r22, 0x69	; 105
    3412:	7f 4f       	sbci	r23, 0xFF	; 255
    3414:	ce 01       	movw	r24, r28
    3416:	87 57       	subi	r24, 0x77	; 119
    3418:	9f 4f       	sbci	r25, 0xFF	; 255
    341a:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <strcat>
		show_text(text,1);
    341e:	b7 01       	movw	r22, r14
    3420:	ce 01       	movw	r24, r28
    3422:	87 57       	subi	r24, 0x77	; 119
    3424:	9f 4f       	sbci	r25, 0xFF	; 255
    3426:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
		char s[50];
		dtostrf(ans[i],1,2,s);
    342a:	f5 01       	movw	r30, r10
    342c:	61 91       	ld	r22, Z+
    342e:	71 91       	ld	r23, Z+
    3430:	81 91       	ld	r24, Z+
    3432:	91 91       	ld	r25, Z+
    3434:	5f 01       	movw	r10, r30
    3436:	8e 01       	movw	r16, r28
    3438:	09 5a       	subi	r16, 0xA9	; 169
    343a:	1f 4f       	sbci	r17, 0xFF	; 255
    343c:	22 e0       	ldi	r18, 0x02	; 2
    343e:	41 e0       	ldi	r20, 0x01	; 1
    3440:	0e 94 67 24 	call	0x48ce	; 0x48ce <dtostrf>
		show_text(s,12);
    3444:	6c e0       	ldi	r22, 0x0C	; 12
    3446:	70 e0       	ldi	r23, 0x00	; 0
    3448:	c8 01       	movw	r24, r16
    344a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
		//wait for equal
		bool done = 0;
		while (1)
		{
			for(int c=4;c<8;c++)
    344e:	44 e0       	ldi	r20, 0x04	; 4
    3450:	50 e0       	ldi	r21, 0x00	; 0
			{
				PORTB=1<<c;
    3452:	c7 01       	movw	r24, r14
    3454:	04 2e       	mov	r0, r20
    3456:	02 c0       	rjmp	.+4      	; 0x345c <_Z5gaussv+0x55a>
    3458:	88 0f       	add	r24, r24
    345a:	99 1f       	adc	r25, r25
    345c:	0a 94       	dec	r0
    345e:	e2 f7       	brpl	.-8      	; 0x3458 <_Z5gaussv+0x556>
    3460:	88 bb       	out	0x18, r24	; 24
    3462:	fa 01       	movw	r30, r20
    3464:	ee 53       	subi	r30, 0x3E	; 62
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
				for(int r=0;r<4;r++)
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
				{
					if(PINB&(1<<r))
    346c:	86 b3       	in	r24, 0x16	; 22
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	02 2e       	mov	r0, r18
    3472:	02 c0       	rjmp	.+4      	; 0x3478 <_Z5gaussv+0x576>
    3474:	95 95       	asr	r25
    3476:	87 95       	ror	r24
    3478:	0a 94       	dec	r0
    347a:	e2 f7       	brpl	.-8      	; 0x3474 <_Z5gaussv+0x572>
    347c:	80 ff       	sbrs	r24, 0
    347e:	03 c0       	rjmp	.+6      	; 0x3486 <_Z5gaussv+0x584>
					{
						if(mat[r][c-4]=='=')
    3480:	80 81       	ld	r24, Z
    3482:	8d 33       	cpi	r24, 0x3D	; 61
    3484:	61 f0       	breq	.+24     	; 0x349e <_Z5gaussv+0x59c>
		while (1)
		{
			for(int c=4;c<8;c++)
			{
				PORTB=1<<c;
				for(int r=0;r<4;r++)
    3486:	2f 5f       	subi	r18, 0xFF	; 255
    3488:	3f 4f       	sbci	r19, 0xFF	; 255
    348a:	34 96       	adiw	r30, 0x04	; 4
    348c:	24 30       	cpi	r18, 0x04	; 4
    348e:	31 05       	cpc	r19, r1
    3490:	69 f7       	brne	.-38     	; 0x346c <_Z5gaussv+0x56a>
		show_text(s,12);
		//wait for equal
		bool done = 0;
		while (1)
		{
			for(int c=4;c<8;c++)
    3492:	4f 5f       	subi	r20, 0xFF	; 255
    3494:	5f 4f       	sbci	r21, 0xFF	; 255
    3496:	48 30       	cpi	r20, 0x08	; 8
    3498:	51 05       	cpc	r21, r1
    349a:	d9 f6       	brne	.-74     	; 0x3452 <_Z5gaussv+0x550>
    349c:	d8 cf       	rjmp	.-80     	; 0x344e <_Z5gaussv+0x54c>
    349e:	ff ef       	ldi	r31, 0xFF	; 255
    34a0:	24 e3       	ldi	r18, 0x34	; 52
    34a2:	3c e0       	ldi	r19, 0x0C	; 12
    34a4:	f1 50       	subi	r31, 0x01	; 1
    34a6:	20 40       	sbci	r18, 0x00	; 0
    34a8:	30 40       	sbci	r19, 0x00	; 0
    34aa:	e1 f7       	brne	.-8      	; 0x34a4 <_Z5gaussv+0x5a2>
    34ac:	00 c0       	rjmp	.+0      	; 0x34ae <_Z5gaussv+0x5ac>
    34ae:	00 00       	nop
	{
		show_text(text4,1);
		_delay_ms(1500);
	}
	
	for(int i=0;i<m;i++)
    34b0:	8f ef       	ldi	r24, 0xFF	; 255
    34b2:	c8 1a       	sub	r12, r24
    34b4:	d8 0a       	sbc	r13, r24
    34b6:	73 94       	inc	r7
    34b8:	2c 14       	cp	r2, r12
    34ba:	3d 04       	cpc	r3, r13
    34bc:	09 f0       	breq	.+2      	; 0x34c0 <_Z5gaussv+0x5be>
    34be:	81 cf       	rjmp	.-254    	; 0x33c2 <_Z5gaussv+0x4c0>
    34c0:	4a cf       	rjmp	.-364    	; 0x3356 <_Z5gaussv+0x454>
    34c2:	ca 55       	subi	r28, 0x5A	; 90
    34c4:	df 4f       	sbci	r29, 0xFF	; 255
    34c6:	08 81       	ld	r16, Y
    34c8:	19 81       	ldd	r17, Y+1	; 0x01
    34ca:	c6 5a       	subi	r28, 0xA6	; 166
    34cc:	d0 40       	sbci	r29, 0x00	; 0
    34ce:	78 01       	movw	r14, r16
    34d0:	c6 55       	subi	r28, 0x56	; 86
    34d2:	df 4f       	sbci	r29, 0xFF	; 255
    34d4:	e8 81       	ld	r30, Y
    34d6:	f9 81       	ldd	r31, Y+1	; 0x01
    34d8:	ca 5a       	subi	r28, 0xAA	; 170
    34da:	d0 40       	sbci	r29, 0x00	; 0
    34dc:	ee 0e       	add	r14, r30
    34de:	ff 1e       	adc	r15, r31
			}
		}
		_delay_ms(500);
	}
	for(int i = 0; i < n; i++)
		free(a[i]);
    34e0:	f8 01       	movw	r30, r16
    34e2:	81 91       	ld	r24, Z+
    34e4:	91 91       	ld	r25, Z+
    34e6:	8f 01       	movw	r16, r30
    34e8:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <free>
				break;
			}
		}
		_delay_ms(500);
	}
	for(int i = 0; i < n; i++)
    34ec:	e0 16       	cp	r14, r16
    34ee:	f1 06       	cpc	r15, r17
    34f0:	b9 f7       	brne	.-18     	; 0x34e0 <_Z5gaussv+0x5de>
		free(a[i]);
	free(a);
    34f2:	ca 55       	subi	r28, 0x5A	; 90
    34f4:	df 4f       	sbci	r29, 0xFF	; 255
    34f6:	88 81       	ld	r24, Y
    34f8:	99 81       	ldd	r25, Y+1	; 0x01
    34fa:	c6 5a       	subi	r28, 0xA6	; 166
    34fc:	d0 40       	sbci	r29, 0x00	; 0
    34fe:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <free>

	free(ans);
    3502:	c4 55       	subi	r28, 0x54	; 84
    3504:	df 4f       	sbci	r29, 0xFF	; 255
    3506:	88 81       	ld	r24, Y
    3508:	cc 5a       	subi	r28, 0xAC	; 172
    350a:	d0 40       	sbci	r29, 0x00	; 0
    350c:	c3 55       	subi	r28, 0x53	; 83
    350e:	df 4f       	sbci	r29, 0xFF	; 255
    3510:	98 81       	ld	r25, Y
    3512:	cd 5a       	subi	r28, 0xAD	; 173
    3514:	d0 40       	sbci	r29, 0x00	; 0
    3516:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <free>
}
    351a:	c3 55       	subi	r28, 0x53	; 83
    351c:	df 4f       	sbci	r29, 0xFF	; 255
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	f8 94       	cli
    3522:	de bf       	out	0x3e, r29	; 62
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	cd bf       	out	0x3d, r28	; 61
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	1f 91       	pop	r17
    352e:	0f 91       	pop	r16
    3530:	ff 90       	pop	r15
    3532:	ef 90       	pop	r14
    3534:	df 90       	pop	r13
    3536:	cf 90       	pop	r12
    3538:	bf 90       	pop	r11
    353a:	af 90       	pop	r10
    353c:	9f 90       	pop	r9
    353e:	8f 90       	pop	r8
    3540:	7f 90       	pop	r7
    3542:	6f 90       	pop	r6
    3544:	5f 90       	pop	r5
    3546:	4f 90       	pop	r4
    3548:	3f 90       	pop	r3
    354a:	2f 90       	pop	r2
    354c:	08 95       	ret

0000354e <_Z14newton_raphsonv>:

//done with gauss


void newton_raphson()
{
    354e:	2f 92       	push	r2
    3550:	3f 92       	push	r3
    3552:	4f 92       	push	r4
    3554:	5f 92       	push	r5
    3556:	6f 92       	push	r6
    3558:	7f 92       	push	r7
    355a:	8f 92       	push	r8
    355c:	9f 92       	push	r9
    355e:	af 92       	push	r10
    3560:	bf 92       	push	r11
    3562:	cf 92       	push	r12
    3564:	df 92       	push	r13
    3566:	ef 92       	push	r14
    3568:	ff 92       	push	r15
    356a:	0f 93       	push	r16
    356c:	1f 93       	push	r17
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	cd b7       	in	r28, 0x3d	; 61
    3574:	de b7       	in	r29, 0x3e	; 62
    3576:	ce 56       	subi	r28, 0x6E	; 110
    3578:	d1 09       	sbc	r29, r1
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	f8 94       	cli
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	0f be       	out	0x3f, r0	; 63
    3582:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    3584:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	char text1[] = "Input Equation of x:";
    3588:	85 e1       	ldi	r24, 0x15	; 21
    358a:	ed e8       	ldi	r30, 0x8D	; 141
    358c:	f2 e0       	ldi	r31, 0x02	; 2
    358e:	de 01       	movw	r26, r28
    3590:	11 96       	adiw	r26, 0x01	; 1
    3592:	01 90       	ld	r0, Z+
    3594:	0d 92       	st	X+, r0
    3596:	8a 95       	dec	r24
    3598:	e1 f7       	brne	.-8      	; 0x3592 <_Z14newton_raphsonv+0x44>
	char text2[] = "Input initial approximation:";
    359a:	8d e1       	ldi	r24, 0x1D	; 29
    359c:	e2 ea       	ldi	r30, 0xA2	; 162
    359e:	f2 e0       	ldi	r31, 0x02	; 2
    35a0:	de 01       	movw	r26, r28
    35a2:	56 96       	adiw	r26, 0x16	; 22
    35a4:	01 90       	ld	r0, Z+
    35a6:	0d 92       	st	X+, r0
    35a8:	8a 95       	dec	r24
    35aa:	e1 f7       	brne	.-8      	; 0x35a4 <_Z14newton_raphsonv+0x56>
	DisplayText(1,1,text1);
    35ac:	ae 01       	movw	r20, r28
    35ae:	4f 5f       	subi	r20, 0xFF	; 255
    35b0:	5f 4f       	sbci	r21, 0xFF	; 255
    35b2:	61 e0       	ldi	r22, 0x01	; 1
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	//input function
	char s[50];
	int len=0;
	int where=12;
    35ba:	0f 2e       	mov	r0, r31
    35bc:	fc e0       	ldi	r31, 0x0C	; 12
    35be:	8f 2e       	mov	r8, r31
    35c0:	91 2c       	mov	r9, r1
    35c2:	f0 2d       	mov	r31, r0
	char text1[] = "Input Equation of x:";
	char text2[] = "Input initial approximation:";
	DisplayText(1,1,text1);
	//input function
	char s[50];
	int len=0;
    35c4:	e1 2c       	mov	r14, r1
    35c6:	f1 2c       	mov	r15, r1
					else
					{
						append(s , len , mat2[r][c-4]);
						len = strlen(s);
					}
					DisplayText(1,where,s);
    35c8:	2e 01       	movw	r4, r28
    35ca:	23 e3       	ldi	r18, 0x33	; 51
    35cc:	42 0e       	add	r4, r18
    35ce:	51 1c       	adc	r5, r1
    35d0:	ac 96       	adiw	r28, 0x2c	; 44
    35d2:	4f ae       	std	Y+63, r4	; 0x3f
    35d4:	ac 97       	sbiw	r28, 0x2c	; 44
    35d6:	ad 96       	adiw	r28, 0x2d	; 45
    35d8:	5f ae       	std	Y+63, r5	; 0x3f
    35da:	ad 97       	sbiw	r28, 0x2d	; 45
    35dc:	0f 2e       	mov	r0, r31
    35de:	f6 e6       	ldi	r31, 0x66	; 102
    35e0:	2f 2e       	mov	r2, r31
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	3f 2e       	mov	r3, r31
    35e6:	f0 2d       	mov	r31, r0
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    35e8:	68 94       	set
    35ea:	66 24       	eor	r6, r6
    35ec:	62 f8       	bld	r6, 2
    35ee:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	06 2c       	mov	r0, r6
    35f6:	02 c0       	rjmp	.+4      	; 0x35fc <_Z14newton_raphsonv+0xae>
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	0a 94       	dec	r0
    35fe:	e2 f7       	brpl	.-8      	; 0x35f8 <_Z14newton_raphsonv+0xaa>
    3600:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    3602:	8b bb       	out	0x1b, r24	; 27
    3604:	c3 01       	movw	r24, r6
    3606:	8e 53       	subi	r24, 0x3E	; 62
    3608:	9f 4f       	sbci	r25, 0xFF	; 255
    360a:	6c 01       	movw	r12, r24
    360c:	51 01       	movw	r10, r2
			for(int r=0;r<4;r++)
    360e:	00 e0       	ldi	r16, 0x00	; 0
    3610:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    3612:	86 b3       	in	r24, 0x16	; 22
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	00 2e       	mov	r0, r16
    3618:	02 c0       	rjmp	.+4      	; 0x361e <_Z14newton_raphsonv+0xd0>
    361a:	95 95       	asr	r25
    361c:	87 95       	ror	r24
    361e:	0a 94       	dec	r0
    3620:	e2 f7       	brpl	.-8      	; 0x361a <_Z14newton_raphsonv+0xcc>
    3622:	80 ff       	sbrs	r24, 0
    3624:	43 c0       	rjmp	.+134    	; 0x36ac <_Z14newton_raphsonv+0x15e>
				{
					if(mat[r][c-4]=='C')
    3626:	f6 01       	movw	r30, r12
    3628:	80 81       	ld	r24, Z
    362a:	83 34       	cpi	r24, 0x43	; 67
    362c:	99 f4       	brne	.+38     	; 0x3654 <_Z14newton_raphsonv+0x106>
					{
						len=0;
						s[0]=0;
    362e:	1b aa       	std	Y+51, r1	; 0x33
						where=1;
						LCD_Clear();
    3630:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    3634:	ac 96       	adiw	r28, 0x2c	; 44
    3636:	4f ad       	ldd	r20, Y+63	; 0x3f
    3638:	ac 97       	sbiw	r28, 0x2c	; 44
    363a:	ad 96       	adiw	r28, 0x2d	; 45
    363c:	5f ad       	ldd	r21, Y+63	; 0x3f
    363e:	ad 97       	sbiw	r28, 0x2d	; 45
    3640:	61 e0       	ldi	r22, 0x01	; 1
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    3648:	88 24       	eor	r8, r8
    364a:	83 94       	inc	r8
    364c:	91 2c       	mov	r9, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    364e:	e1 2c       	mov	r14, r1
    3650:	f1 2c       	mov	r15, r1
    3652:	22 c0       	rjmp	.+68     	; 0x3698 <_Z14newton_raphsonv+0x14a>
						where=1;
						LCD_Clear();
					}
					else
					{
						if(mat[r][c-4]=='=')
    3654:	8d 33       	cpi	r24, 0x3D	; 61
    3656:	09 f4       	brne	.+2      	; 0x365a <_Z14newton_raphsonv+0x10c>
    3658:	df c0       	rjmp	.+446    	; 0x3818 <_Z14newton_raphsonv+0x2ca>
						{
							done = 1;
							break;
						}
						s[len]=mat[r][c-4];
    365a:	f2 01       	movw	r30, r4
    365c:	ee 0d       	add	r30, r14
    365e:	ff 1d       	adc	r31, r15
    3660:	80 83       	st	Z, r24
						len+=1;
    3662:	ff ef       	ldi	r31, 0xFF	; 255
    3664:	ef 1a       	sub	r14, r31
    3666:	ff 0a       	sbc	r15, r31
						s[len]=0;
    3668:	f2 01       	movw	r30, r4
    366a:	ee 0d       	add	r30, r14
    366c:	ff 1d       	adc	r31, r15
    366e:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    3670:	ac 96       	adiw	r28, 0x2c	; 44
    3672:	4f ad       	ldd	r20, Y+63	; 0x3f
    3674:	ac 97       	sbiw	r28, 0x2c	; 44
    3676:	ad 96       	adiw	r28, 0x2d	; 45
    3678:	5f ad       	ldd	r21, Y+63	; 0x3f
    367a:	ad 97       	sbiw	r28, 0x2d	; 45
    367c:	68 2d       	mov	r22, r8
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    3684:	24 e1       	ldi	r18, 0x14	; 20
    3686:	e2 16       	cp	r14, r18
    3688:	f1 04       	cpc	r15, r1
    368a:	31 f4       	brne	.+12     	; 0x3698 <_Z14newton_raphsonv+0x14a>
					{
						where+=12;
    368c:	8c e0       	ldi	r24, 0x0C	; 12
    368e:	88 0e       	add	r8, r24
    3690:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    3692:	1b aa       	std	Y+51, r1	; 0x33
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    3694:	e1 2c       	mov	r14, r1
    3696:	f1 2c       	mov	r15, r1
    3698:	9f ef       	ldi	r25, 0xFF	; 255
    369a:	e4 e3       	ldi	r30, 0x34	; 52
    369c:	fc e0       	ldi	r31, 0x0C	; 12
    369e:	91 50       	subi	r25, 0x01	; 1
    36a0:	e0 40       	sbci	r30, 0x00	; 0
    36a2:	f0 40       	sbci	r31, 0x00	; 0
    36a4:	e1 f7       	brne	.-8      	; 0x369e <_Z14newton_raphsonv+0x150>
    36a6:	00 c0       	rjmp	.+0      	; 0x36a8 <_Z14newton_raphsonv+0x15a>
    36a8:	00 00       	nop
    36aa:	66 c0       	rjmp	.+204    	; 0x3778 <_Z14newton_raphsonv+0x22a>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    36ac:	89 b3       	in	r24, 0x19	; 25
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	00 2e       	mov	r0, r16
    36b2:	02 c0       	rjmp	.+4      	; 0x36b8 <_Z14newton_raphsonv+0x16a>
    36b4:	95 95       	asr	r25
    36b6:	87 95       	ror	r24
    36b8:	0a 94       	dec	r0
    36ba:	e2 f7       	brpl	.-8      	; 0x36b4 <_Z14newton_raphsonv+0x166>
    36bc:	80 ff       	sbrs	r24, 0
    36be:	5c c0       	rjmp	.+184    	; 0x3778 <_Z14newton_raphsonv+0x22a>
				{
					if(mat2[r][c-4][0]=='<')
    36c0:	f5 01       	movw	r30, r10
    36c2:	80 81       	ld	r24, Z
    36c4:	8c 33       	cpi	r24, 0x3C	; 60
    36c6:	49 f5       	brne	.+82     	; 0x371a <_Z14newton_raphsonv+0x1cc>
					{
						if(len==0){
    36c8:	e1 14       	cp	r14, r1
    36ca:	f1 04       	cpc	r15, r1
    36cc:	51 f4       	brne	.+20     	; 0x36e2 <_Z14newton_raphsonv+0x194>
    36ce:	ff ef       	ldi	r31, 0xFF	; 255
    36d0:	24 e3       	ldi	r18, 0x34	; 52
    36d2:	8c e0       	ldi	r24, 0x0C	; 12
    36d4:	f1 50       	subi	r31, 0x01	; 1
    36d6:	20 40       	sbci	r18, 0x00	; 0
    36d8:	80 40       	sbci	r24, 0x00	; 0
    36da:	e1 f7       	brne	.-8      	; 0x36d4 <_Z14newton_raphsonv+0x186>
    36dc:	00 c0       	rjmp	.+0      	; 0x36de <_Z14newton_raphsonv+0x190>
    36de:	00 00       	nop
    36e0:	4b c0       	rjmp	.+150    	; 0x3778 <_Z14newton_raphsonv+0x22a>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    36e2:	91 e0       	ldi	r25, 0x01	; 1
    36e4:	e9 1a       	sub	r14, r25
    36e6:	f1 08       	sbc	r15, r1
    36e8:	f2 01       	movw	r30, r4
    36ea:	ee 0d       	add	r30, r14
    36ec:	ff 1d       	adc	r31, r15
    36ee:	af 96       	adiw	r28, 0x2f	; 47
    36f0:	ff af       	std	Y+63, r31	; 0x3f
    36f2:	ee af       	std	Y+62, r30	; 0x3e
    36f4:	af 97       	sbiw	r28, 0x2f	; 47
    36f6:	20 e2       	ldi	r18, 0x20	; 32
    36f8:	20 83       	st	Z, r18
						DisplayText(1,where,s);
    36fa:	ac 96       	adiw	r28, 0x2c	; 44
    36fc:	4f ad       	ldd	r20, Y+63	; 0x3f
    36fe:	ac 97       	sbiw	r28, 0x2c	; 44
    3700:	ad 96       	adiw	r28, 0x2d	; 45
    3702:	5f ad       	ldd	r21, Y+63	; 0x3f
    3704:	ad 97       	sbiw	r28, 0x2d	; 45
    3706:	68 2d       	mov	r22, r8
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						len--;
						s[len]=0;
    370e:	af 96       	adiw	r28, 0x2f	; 47
    3710:	ee ad       	ldd	r30, Y+62	; 0x3e
    3712:	ff ad       	ldd	r31, Y+63	; 0x3f
    3714:	af 97       	sbiw	r28, 0x2f	; 47
    3716:	10 82       	st	Z, r1
    3718:	12 c0       	rjmp	.+36     	; 0x373e <_Z14newton_raphsonv+0x1f0>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    371a:	a5 01       	movw	r20, r10
    371c:	b7 01       	movw	r22, r14
    371e:	ac 96       	adiw	r28, 0x2c	; 44
    3720:	8f ad       	ldd	r24, Y+63	; 0x3f
    3722:	ac 97       	sbiw	r28, 0x2c	; 44
    3724:	ad 96       	adiw	r28, 0x2d	; 45
    3726:	9f ad       	ldd	r25, Y+63	; 0x3f
    3728:	ad 97       	sbiw	r28, 0x2d	; 45
    372a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <_Z6appendPciS_>
						len = strlen(s);
    372e:	f2 01       	movw	r30, r4
    3730:	01 90       	ld	r0, Z+
    3732:	00 20       	and	r0, r0
    3734:	e9 f7       	brne	.-6      	; 0x3730 <_Z14newton_raphsonv+0x1e2>
    3736:	31 97       	sbiw	r30, 0x01	; 1
    3738:	7f 01       	movw	r14, r30
    373a:	e4 18       	sub	r14, r4
    373c:	f5 08       	sbc	r15, r5
					}
					DisplayText(1,where,s);
    373e:	ac 96       	adiw	r28, 0x2c	; 44
    3740:	4f ad       	ldd	r20, Y+63	; 0x3f
    3742:	ac 97       	sbiw	r28, 0x2c	; 44
    3744:	ad 96       	adiw	r28, 0x2d	; 45
    3746:	5f ad       	ldd	r21, Y+63	; 0x3f
    3748:	ad 97       	sbiw	r28, 0x2d	; 45
    374a:	68 2d       	mov	r22, r8
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    3752:	f4 e1       	ldi	r31, 0x14	; 20
    3754:	ef 16       	cp	r14, r31
    3756:	f1 04       	cpc	r15, r1
    3758:	31 f4       	brne	.+12     	; 0x3766 <_Z14newton_raphsonv+0x218>
					{
						where+=12;
    375a:	2c e0       	ldi	r18, 0x0C	; 12
    375c:	82 0e       	add	r8, r18
    375e:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    3760:	1b aa       	std	Y+51, r1	; 0x33
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    3762:	e1 2c       	mov	r14, r1
    3764:	f1 2c       	mov	r15, r1
    3766:	8f ef       	ldi	r24, 0xFF	; 255
    3768:	94 e3       	ldi	r25, 0x34	; 52
    376a:	ec e0       	ldi	r30, 0x0C	; 12
    376c:	81 50       	subi	r24, 0x01	; 1
    376e:	90 40       	sbci	r25, 0x00	; 0
    3770:	e0 40       	sbci	r30, 0x00	; 0
    3772:	e1 f7       	brne	.-8      	; 0x376c <_Z14newton_raphsonv+0x21e>
    3774:	00 c0       	rjmp	.+0      	; 0x3776 <_Z14newton_raphsonv+0x228>
    3776:	00 00       	nop
		bool done = 0;
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    3778:	0f 5f       	subi	r16, 0xFF	; 255
    377a:	1f 4f       	sbci	r17, 0xFF	; 255
    377c:	f8 e1       	ldi	r31, 0x18	; 24
    377e:	af 0e       	add	r10, r31
    3780:	b1 1c       	adc	r11, r1
    3782:	24 e0       	ldi	r18, 0x04	; 4
    3784:	c2 0e       	add	r12, r18
    3786:	d1 1c       	adc	r13, r1
    3788:	04 30       	cpi	r16, 0x04	; 4
    378a:	11 05       	cpc	r17, r1
    378c:	09 f0       	breq	.+2      	; 0x3790 <_Z14newton_raphsonv+0x242>
    378e:	41 cf       	rjmp	.-382    	; 0x3612 <_Z14newton_raphsonv+0xc4>
    3790:	8f e1       	ldi	r24, 0x1F	; 31
    3792:	9e e4       	ldi	r25, 0x4E	; 78
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	f1 f7       	brne	.-4      	; 0x3794 <_Z14newton_raphsonv+0x246>
    3798:	00 c0       	rjmp	.+0      	; 0x379a <_Z14newton_raphsonv+0x24c>
    379a:	00 00       	nop
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    379c:	9f ef       	ldi	r25, 0xFF	; 255
    379e:	69 1a       	sub	r6, r25
    37a0:	79 0a       	sbc	r7, r25
    37a2:	e6 e0       	ldi	r30, 0x06	; 6
    37a4:	2e 0e       	add	r2, r30
    37a6:	31 1c       	adc	r3, r1
    37a8:	f8 e0       	ldi	r31, 0x08	; 8
    37aa:	6f 16       	cp	r6, r31
    37ac:	71 04       	cpc	r7, r1
    37ae:	09 f0       	breq	.+2      	; 0x37b2 <_Z14newton_raphsonv+0x264>
    37b0:	1f cf       	rjmp	.-450    	; 0x35f0 <_Z14newton_raphsonv+0xa2>
    37b2:	14 cf       	rjmp	.-472    	; 0x35dc <_Z14newton_raphsonv+0x8e>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    37b4:	44 e0       	ldi	r20, 0x04	; 4
    37b6:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB=1<<c;
    37b8:	cb 01       	movw	r24, r22
    37ba:	04 2e       	mov	r0, r20
    37bc:	02 c0       	rjmp	.+4      	; 0x37c2 <_Z14newton_raphsonv+0x274>
    37be:	88 0f       	add	r24, r24
    37c0:	99 1f       	adc	r25, r25
    37c2:	0a 94       	dec	r0
    37c4:	e2 f7       	brpl	.-8      	; 0x37be <_Z14newton_raphsonv+0x270>
    37c6:	88 bb       	out	0x18, r24	; 24
    37c8:	fa 01       	movw	r30, r20
    37ca:	ee 53       	subi	r30, 0x3E	; 62
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
			{
				if(PINB&(1<<r))
    37d2:	86 b3       	in	r24, 0x16	; 22
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	02 2e       	mov	r0, r18
    37d8:	02 c0       	rjmp	.+4      	; 0x37de <_Z14newton_raphsonv+0x290>
    37da:	95 95       	asr	r25
    37dc:	87 95       	ror	r24
    37de:	0a 94       	dec	r0
    37e0:	e2 f7       	brpl	.-8      	; 0x37da <_Z14newton_raphsonv+0x28c>
    37e2:	80 ff       	sbrs	r24, 0
    37e4:	03 c0       	rjmp	.+6      	; 0x37ec <_Z14newton_raphsonv+0x29e>
				{
					if(mat[r][c-4]=='=')
    37e6:	80 81       	ld	r24, Z
    37e8:	8d 33       	cpi	r24, 0x3D	; 61
    37ea:	61 f0       	breq	.+24     	; 0x3804 <_Z14newton_raphsonv+0x2b6>
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    37ec:	2f 5f       	subi	r18, 0xFF	; 255
    37ee:	3f 4f       	sbci	r19, 0xFF	; 255
    37f0:	34 96       	adiw	r30, 0x04	; 4
    37f2:	24 30       	cpi	r18, 0x04	; 4
    37f4:	31 05       	cpc	r19, r1
    37f6:	69 f7       	brne	.-38     	; 0x37d2 <_Z14newton_raphsonv+0x284>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    37f8:	4f 5f       	subi	r20, 0xFF	; 255
    37fa:	5f 4f       	sbci	r21, 0xFF	; 255
    37fc:	48 30       	cpi	r20, 0x08	; 8
    37fe:	51 05       	cpc	r21, r1
    3800:	d9 f6       	brne	.-74     	; 0x37b8 <_Z14newton_raphsonv+0x26a>
    3802:	d8 cf       	rjmp	.-80     	; 0x37b4 <_Z14newton_raphsonv+0x266>
    3804:	2f ef       	ldi	r18, 0xFF	; 255
    3806:	84 e3       	ldi	r24, 0x34	; 52
    3808:	9c e0       	ldi	r25, 0x0C	; 12
    380a:	21 50       	subi	r18, 0x01	; 1
    380c:	80 40       	sbci	r24, 0x00	; 0
    380e:	90 40       	sbci	r25, 0x00	; 0
    3810:	e1 f7       	brne	.-8      	; 0x380a <_Z14newton_raphsonv+0x2bc>
    3812:	00 c0       	rjmp	.+0      	; 0x3814 <_Z14newton_raphsonv+0x2c6>
    3814:	00 00       	nop
		{
			break;
		}
	}
	_delay_ms(500);
}
    3816:	40 c0       	rjmp	.+128    	; 0x3898 <_Z14newton_raphsonv+0x34a>
    3818:	ef e1       	ldi	r30, 0x1F	; 31
    381a:	fe e4       	ldi	r31, 0x4E	; 78
    381c:	31 97       	sbiw	r30, 0x01	; 1
    381e:	f1 f7       	brne	.-4      	; 0x381c <_Z14newton_raphsonv+0x2ce>
    3820:	00 c0       	rjmp	.+0      	; 0x3822 <_Z14newton_raphsonv+0x2d4>
    3822:	00 00       	nop
			break;
		}
		if(done)
		break;
	}
	LCD_Clear();
    3824:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	double l;
	show_text(text2,1);
    3828:	61 e0       	ldi	r22, 0x01	; 1
    382a:	70 e0       	ldi	r23, 0x00	; 0
    382c:	ce 01       	movw	r24, r28
    382e:	46 96       	adiw	r24, 0x16	; 22
    3830:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
	l = double_num_input(24);
    3834:	88 e1       	ldi	r24, 0x18	; 24
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <_Z16double_num_inputi>
    383c:	6b 01       	movw	r12, r22
    383e:	7c 01       	movw	r14, r24
	LCD_Clear();
    3840:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	double ans = newton(s,l);
    3844:	b7 01       	movw	r22, r14
    3846:	a6 01       	movw	r20, r12
    3848:	ce 01       	movw	r24, r28
    384a:	c3 96       	adiw	r24, 0x33	; 51
    384c:	0e 94 ba 12 	call	0x2574	; 0x2574 <_Z6newtonPcd>
    3850:	6b 01       	movw	r12, r22
    3852:	7c 01       	movw	r14, r24
	
	//printing ans
	char text[] = "Ans =";
    3854:	86 e0       	ldi	r24, 0x06	; 6
    3856:	ef eb       	ldi	r30, 0xBF	; 191
    3858:	f2 e0       	ldi	r31, 0x02	; 2
    385a:	de 01       	movw	r26, r28
    385c:	ab 59       	subi	r26, 0x9B	; 155
    385e:	bf 4f       	sbci	r27, 0xFF	; 255
    3860:	01 90       	ld	r0, Z+
    3862:	0d 92       	st	X+, r0
    3864:	8a 95       	dec	r24
    3866:	e1 f7       	brne	.-8      	; 0x3860 <_Z14newton_raphsonv+0x312>
	show_text(text,1);
    3868:	61 e0       	ldi	r22, 0x01	; 1
    386a:	70 e0       	ldi	r23, 0x00	; 0
    386c:	ce 01       	movw	r24, r28
    386e:	8b 59       	subi	r24, 0x9B	; 155
    3870:	9f 4f       	sbci	r25, 0xFF	; 255
    3872:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
	dtostrf(ans,1,2,s);
    3876:	8e 01       	movw	r16, r28
    3878:	0d 5c       	subi	r16, 0xCD	; 205
    387a:	1f 4f       	sbci	r17, 0xFF	; 255
    387c:	22 e0       	ldi	r18, 0x02	; 2
    387e:	41 e0       	ldi	r20, 0x01	; 1
    3880:	c7 01       	movw	r24, r14
    3882:	b6 01       	movw	r22, r12
    3884:	0e 94 67 24 	call	0x48ce	; 0x48ce <dtostrf>
	show_text(s,12);
    3888:	6c e0       	ldi	r22, 0x0C	; 12
    388a:	70 e0       	ldi	r23, 0x00	; 0
    388c:	c8 01       	movw	r24, r16
    388e:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    3892:	61 e0       	ldi	r22, 0x01	; 1
    3894:	70 e0       	ldi	r23, 0x00	; 0
    3896:	8e cf       	rjmp	.-228    	; 0x37b4 <_Z14newton_raphsonv+0x266>
		{
			break;
		}
	}
	_delay_ms(500);
}
    3898:	c2 59       	subi	r28, 0x92	; 146
    389a:	df 4f       	sbci	r29, 0xFF	; 255
    389c:	0f b6       	in	r0, 0x3f	; 63
    389e:	f8 94       	cli
    38a0:	de bf       	out	0x3e, r29	; 62
    38a2:	0f be       	out	0x3f, r0	; 63
    38a4:	cd bf       	out	0x3d, r28	; 61
    38a6:	df 91       	pop	r29
    38a8:	cf 91       	pop	r28
    38aa:	1f 91       	pop	r17
    38ac:	0f 91       	pop	r16
    38ae:	ff 90       	pop	r15
    38b0:	ef 90       	pop	r14
    38b2:	df 90       	pop	r13
    38b4:	cf 90       	pop	r12
    38b6:	bf 90       	pop	r11
    38b8:	af 90       	pop	r10
    38ba:	9f 90       	pop	r9
    38bc:	8f 90       	pop	r8
    38be:	7f 90       	pop	r7
    38c0:	6f 90       	pop	r6
    38c2:	5f 90       	pop	r5
    38c4:	4f 90       	pop	r4
    38c6:	3f 90       	pop	r3
    38c8:	2f 90       	pop	r2
    38ca:	08 95       	ret

000038cc <_Z7simpsonv>:



void simpson()
{
    38cc:	2f 92       	push	r2
    38ce:	3f 92       	push	r3
    38d0:	4f 92       	push	r4
    38d2:	5f 92       	push	r5
    38d4:	6f 92       	push	r6
    38d6:	7f 92       	push	r7
    38d8:	8f 92       	push	r8
    38da:	9f 92       	push	r9
    38dc:	af 92       	push	r10
    38de:	bf 92       	push	r11
    38e0:	cf 92       	push	r12
    38e2:	df 92       	push	r13
    38e4:	ef 92       	push	r14
    38e6:	ff 92       	push	r15
    38e8:	0f 93       	push	r16
    38ea:	1f 93       	push	r17
    38ec:	cf 93       	push	r28
    38ee:	df 93       	push	r29
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
    38f4:	c7 57       	subi	r28, 0x77	; 119
    38f6:	d1 09       	sbc	r29, r1
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	f8 94       	cli
    38fc:	de bf       	out	0x3e, r29	; 62
    38fe:	0f be       	out	0x3f, r0	; 63
    3900:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    3902:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	char text1[] = "Input Equation of x:";
    3906:	85 e1       	ldi	r24, 0x15	; 21
    3908:	ed e8       	ldi	r30, 0x8D	; 141
    390a:	f2 e0       	ldi	r31, 0x02	; 2
    390c:	de 01       	movw	r26, r28
    390e:	11 96       	adiw	r26, 0x01	; 1
    3910:	01 90       	ld	r0, Z+
    3912:	0d 92       	st	X+, r0
    3914:	8a 95       	dec	r24
    3916:	e1 f7       	brne	.-8      	; 0x3910 <_Z7simpsonv+0x44>
	char text2[] = "Input lower limit:";
    3918:	83 e1       	ldi	r24, 0x13	; 19
    391a:	e5 ec       	ldi	r30, 0xC5	; 197
    391c:	f2 e0       	ldi	r31, 0x02	; 2
    391e:	de 01       	movw	r26, r28
    3920:	56 96       	adiw	r26, 0x16	; 22
    3922:	01 90       	ld	r0, Z+
    3924:	0d 92       	st	X+, r0
    3926:	8a 95       	dec	r24
    3928:	e1 f7       	brne	.-8      	; 0x3922 <_Z7simpsonv+0x56>
	char text3[] = "Input upper limit:";
    392a:	83 e1       	ldi	r24, 0x13	; 19
    392c:	e8 ed       	ldi	r30, 0xD8	; 216
    392e:	f2 e0       	ldi	r31, 0x02	; 2
    3930:	de 01       	movw	r26, r28
    3932:	99 96       	adiw	r26, 0x29	; 41
    3934:	01 90       	ld	r0, Z+
    3936:	0d 92       	st	X+, r0
    3938:	8a 95       	dec	r24
    393a:	e1 f7       	brne	.-8      	; 0x3934 <_Z7simpsonv+0x68>
	DisplayText(1,1,text1);
    393c:	ae 01       	movw	r20, r28
    393e:	4f 5f       	subi	r20, 0xFF	; 255
    3940:	5f 4f       	sbci	r21, 0xFF	; 255
    3942:	61 e0       	ldi	r22, 0x01	; 1
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	//input function
	char s[50];
	int len=0;
	int where=12;
    394a:	0f 2e       	mov	r0, r31
    394c:	fc e0       	ldi	r31, 0x0C	; 12
    394e:	8f 2e       	mov	r8, r31
    3950:	91 2c       	mov	r9, r1
    3952:	f0 2d       	mov	r31, r0
	char text2[] = "Input lower limit:";
	char text3[] = "Input upper limit:";
	DisplayText(1,1,text1);
	//input function
	char s[50];
	int len=0;
    3954:	e1 2c       	mov	r14, r1
    3956:	f1 2c       	mov	r15, r1
					else
					{
						append(s , len , mat2[r][c-4]);
						len = strlen(s);
					}
					DisplayText(1,where,s);
    3958:	2e 01       	movw	r4, r28
    395a:	2c e3       	ldi	r18, 0x3C	; 60
    395c:	42 0e       	add	r4, r18
    395e:	51 1c       	adc	r5, r1
    3960:	e5 96       	adiw	r28, 0x35	; 53
    3962:	4f ae       	std	Y+63, r4	; 0x3f
    3964:	e5 97       	sbiw	r28, 0x35	; 53
    3966:	e6 96       	adiw	r28, 0x36	; 54
    3968:	5f ae       	std	Y+63, r5	; 0x3f
    396a:	e6 97       	sbiw	r28, 0x36	; 54
    396c:	0f 2e       	mov	r0, r31
    396e:	f6 e6       	ldi	r31, 0x66	; 102
    3970:	2f 2e       	mov	r2, r31
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	3f 2e       	mov	r3, r31
    3976:	f0 2d       	mov	r31, r0
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    3978:	68 94       	set
    397a:	66 24       	eor	r6, r6
    397c:	62 f8       	bld	r6, 2
    397e:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	06 2c       	mov	r0, r6
    3986:	02 c0       	rjmp	.+4      	; 0x398c <_Z7simpsonv+0xc0>
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	0a 94       	dec	r0
    398e:	e2 f7       	brpl	.-8      	; 0x3988 <_Z7simpsonv+0xbc>
    3990:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    3992:	8b bb       	out	0x1b, r24	; 27
    3994:	c3 01       	movw	r24, r6
    3996:	8e 53       	subi	r24, 0x3E	; 62
    3998:	9f 4f       	sbci	r25, 0xFF	; 255
    399a:	6c 01       	movw	r12, r24
    399c:	51 01       	movw	r10, r2
			for(int r=0;r<4;r++)
    399e:	00 e0       	ldi	r16, 0x00	; 0
    39a0:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    39a2:	86 b3       	in	r24, 0x16	; 22
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	00 2e       	mov	r0, r16
    39a8:	02 c0       	rjmp	.+4      	; 0x39ae <_Z7simpsonv+0xe2>
    39aa:	95 95       	asr	r25
    39ac:	87 95       	ror	r24
    39ae:	0a 94       	dec	r0
    39b0:	e2 f7       	brpl	.-8      	; 0x39aa <_Z7simpsonv+0xde>
    39b2:	80 ff       	sbrs	r24, 0
    39b4:	43 c0       	rjmp	.+134    	; 0x3a3c <_Z7simpsonv+0x170>
				{
					if(mat[r][c-4]=='C')
    39b6:	f6 01       	movw	r30, r12
    39b8:	80 81       	ld	r24, Z
    39ba:	83 34       	cpi	r24, 0x43	; 67
    39bc:	99 f4       	brne	.+38     	; 0x39e4 <_Z7simpsonv+0x118>
					{
						len=0;
						s[0]=0;
    39be:	1c ae       	std	Y+60, r1	; 0x3c
						where=1;
						LCD_Clear();
    39c0:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    39c4:	e5 96       	adiw	r28, 0x35	; 53
    39c6:	4f ad       	ldd	r20, Y+63	; 0x3f
    39c8:	e5 97       	sbiw	r28, 0x35	; 53
    39ca:	e6 96       	adiw	r28, 0x36	; 54
    39cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    39ce:	e6 97       	sbiw	r28, 0x36	; 54
    39d0:	61 e0       	ldi	r22, 0x01	; 1
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    39d8:	88 24       	eor	r8, r8
    39da:	83 94       	inc	r8
    39dc:	91 2c       	mov	r9, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    39de:	e1 2c       	mov	r14, r1
    39e0:	f1 2c       	mov	r15, r1
    39e2:	22 c0       	rjmp	.+68     	; 0x3a28 <_Z7simpsonv+0x15c>
						where=1;
						LCD_Clear();
					}
					else
					{
						if(mat[r][c-4]=='=')
    39e4:	8d 33       	cpi	r24, 0x3D	; 61
    39e6:	09 f4       	brne	.+2      	; 0x39ea <_Z7simpsonv+0x11e>
    39e8:	df c0       	rjmp	.+446    	; 0x3ba8 <_Z7simpsonv+0x2dc>
						{
							done = 1;
							break;
						}
						s[len]=mat[r][c-4];
    39ea:	f2 01       	movw	r30, r4
    39ec:	ee 0d       	add	r30, r14
    39ee:	ff 1d       	adc	r31, r15
    39f0:	80 83       	st	Z, r24
						len+=1;
    39f2:	ff ef       	ldi	r31, 0xFF	; 255
    39f4:	ef 1a       	sub	r14, r31
    39f6:	ff 0a       	sbc	r15, r31
						s[len]=0;
    39f8:	f2 01       	movw	r30, r4
    39fa:	ee 0d       	add	r30, r14
    39fc:	ff 1d       	adc	r31, r15
    39fe:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    3a00:	e5 96       	adiw	r28, 0x35	; 53
    3a02:	4f ad       	ldd	r20, Y+63	; 0x3f
    3a04:	e5 97       	sbiw	r28, 0x35	; 53
    3a06:	e6 96       	adiw	r28, 0x36	; 54
    3a08:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a0a:	e6 97       	sbiw	r28, 0x36	; 54
    3a0c:	68 2d       	mov	r22, r8
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    3a14:	24 e1       	ldi	r18, 0x14	; 20
    3a16:	e2 16       	cp	r14, r18
    3a18:	f1 04       	cpc	r15, r1
    3a1a:	31 f4       	brne	.+12     	; 0x3a28 <_Z7simpsonv+0x15c>
					{
						where+=12;
    3a1c:	8c e0       	ldi	r24, 0x0C	; 12
    3a1e:	88 0e       	add	r8, r24
    3a20:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    3a22:	1c ae       	std	Y+60, r1	; 0x3c
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    3a24:	e1 2c       	mov	r14, r1
    3a26:	f1 2c       	mov	r15, r1
    3a28:	9f ef       	ldi	r25, 0xFF	; 255
    3a2a:	e4 e3       	ldi	r30, 0x34	; 52
    3a2c:	fc e0       	ldi	r31, 0x0C	; 12
    3a2e:	91 50       	subi	r25, 0x01	; 1
    3a30:	e0 40       	sbci	r30, 0x00	; 0
    3a32:	f0 40       	sbci	r31, 0x00	; 0
    3a34:	e1 f7       	brne	.-8      	; 0x3a2e <_Z7simpsonv+0x162>
    3a36:	00 c0       	rjmp	.+0      	; 0x3a38 <_Z7simpsonv+0x16c>
    3a38:	00 00       	nop
    3a3a:	66 c0       	rjmp	.+204    	; 0x3b08 <_Z7simpsonv+0x23c>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    3a3c:	89 b3       	in	r24, 0x19	; 25
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	00 2e       	mov	r0, r16
    3a42:	02 c0       	rjmp	.+4      	; 0x3a48 <_Z7simpsonv+0x17c>
    3a44:	95 95       	asr	r25
    3a46:	87 95       	ror	r24
    3a48:	0a 94       	dec	r0
    3a4a:	e2 f7       	brpl	.-8      	; 0x3a44 <_Z7simpsonv+0x178>
    3a4c:	80 ff       	sbrs	r24, 0
    3a4e:	5c c0       	rjmp	.+184    	; 0x3b08 <_Z7simpsonv+0x23c>
				{
					if(mat2[r][c-4][0]=='<')
    3a50:	f5 01       	movw	r30, r10
    3a52:	80 81       	ld	r24, Z
    3a54:	8c 33       	cpi	r24, 0x3C	; 60
    3a56:	49 f5       	brne	.+82     	; 0x3aaa <_Z7simpsonv+0x1de>
					{
						if(len==0){
    3a58:	e1 14       	cp	r14, r1
    3a5a:	f1 04       	cpc	r15, r1
    3a5c:	51 f4       	brne	.+20     	; 0x3a72 <_Z7simpsonv+0x1a6>
    3a5e:	ff ef       	ldi	r31, 0xFF	; 255
    3a60:	24 e3       	ldi	r18, 0x34	; 52
    3a62:	8c e0       	ldi	r24, 0x0C	; 12
    3a64:	f1 50       	subi	r31, 0x01	; 1
    3a66:	20 40       	sbci	r18, 0x00	; 0
    3a68:	80 40       	sbci	r24, 0x00	; 0
    3a6a:	e1 f7       	brne	.-8      	; 0x3a64 <_Z7simpsonv+0x198>
    3a6c:	00 c0       	rjmp	.+0      	; 0x3a6e <_Z7simpsonv+0x1a2>
    3a6e:	00 00       	nop
    3a70:	4b c0       	rjmp	.+150    	; 0x3b08 <_Z7simpsonv+0x23c>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    3a72:	91 e0       	ldi	r25, 0x01	; 1
    3a74:	e9 1a       	sub	r14, r25
    3a76:	f1 08       	sbc	r15, r1
    3a78:	f2 01       	movw	r30, r4
    3a7a:	ee 0d       	add	r30, r14
    3a7c:	ff 1d       	adc	r31, r15
    3a7e:	e8 96       	adiw	r28, 0x38	; 56
    3a80:	ff af       	std	Y+63, r31	; 0x3f
    3a82:	ee af       	std	Y+62, r30	; 0x3e
    3a84:	e8 97       	sbiw	r28, 0x38	; 56
    3a86:	20 e2       	ldi	r18, 0x20	; 32
    3a88:	20 83       	st	Z, r18
						DisplayText(1,where,s);
    3a8a:	e5 96       	adiw	r28, 0x35	; 53
    3a8c:	4f ad       	ldd	r20, Y+63	; 0x3f
    3a8e:	e5 97       	sbiw	r28, 0x35	; 53
    3a90:	e6 96       	adiw	r28, 0x36	; 54
    3a92:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a94:	e6 97       	sbiw	r28, 0x36	; 54
    3a96:	68 2d       	mov	r22, r8
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						len--;
						s[len]=0;
    3a9e:	e8 96       	adiw	r28, 0x38	; 56
    3aa0:	ee ad       	ldd	r30, Y+62	; 0x3e
    3aa2:	ff ad       	ldd	r31, Y+63	; 0x3f
    3aa4:	e8 97       	sbiw	r28, 0x38	; 56
    3aa6:	10 82       	st	Z, r1
    3aa8:	12 c0       	rjmp	.+36     	; 0x3ace <_Z7simpsonv+0x202>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    3aaa:	a5 01       	movw	r20, r10
    3aac:	b7 01       	movw	r22, r14
    3aae:	e5 96       	adiw	r28, 0x35	; 53
    3ab0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ab2:	e5 97       	sbiw	r28, 0x35	; 53
    3ab4:	e6 96       	adiw	r28, 0x36	; 54
    3ab6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ab8:	e6 97       	sbiw	r28, 0x36	; 54
    3aba:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <_Z6appendPciS_>
						len = strlen(s);
    3abe:	f2 01       	movw	r30, r4
    3ac0:	01 90       	ld	r0, Z+
    3ac2:	00 20       	and	r0, r0
    3ac4:	e9 f7       	brne	.-6      	; 0x3ac0 <_Z7simpsonv+0x1f4>
    3ac6:	31 97       	sbiw	r30, 0x01	; 1
    3ac8:	7f 01       	movw	r14, r30
    3aca:	e4 18       	sub	r14, r4
    3acc:	f5 08       	sbc	r15, r5
					}
					DisplayText(1,where,s);
    3ace:	e5 96       	adiw	r28, 0x35	; 53
    3ad0:	4f ad       	ldd	r20, Y+63	; 0x3f
    3ad2:	e5 97       	sbiw	r28, 0x35	; 53
    3ad4:	e6 96       	adiw	r28, 0x36	; 54
    3ad6:	5f ad       	ldd	r21, Y+63	; 0x3f
    3ad8:	e6 97       	sbiw	r28, 0x36	; 54
    3ada:	68 2d       	mov	r22, r8
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    3ae2:	f4 e1       	ldi	r31, 0x14	; 20
    3ae4:	ef 16       	cp	r14, r31
    3ae6:	f1 04       	cpc	r15, r1
    3ae8:	31 f4       	brne	.+12     	; 0x3af6 <_Z7simpsonv+0x22a>
					{
						where+=12;
    3aea:	2c e0       	ldi	r18, 0x0C	; 12
    3aec:	82 0e       	add	r8, r18
    3aee:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    3af0:	1c ae       	std	Y+60, r1	; 0x3c
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    3af2:	e1 2c       	mov	r14, r1
    3af4:	f1 2c       	mov	r15, r1
    3af6:	8f ef       	ldi	r24, 0xFF	; 255
    3af8:	94 e3       	ldi	r25, 0x34	; 52
    3afa:	ec e0       	ldi	r30, 0x0C	; 12
    3afc:	81 50       	subi	r24, 0x01	; 1
    3afe:	90 40       	sbci	r25, 0x00	; 0
    3b00:	e0 40       	sbci	r30, 0x00	; 0
    3b02:	e1 f7       	brne	.-8      	; 0x3afc <_Z7simpsonv+0x230>
    3b04:	00 c0       	rjmp	.+0      	; 0x3b06 <_Z7simpsonv+0x23a>
    3b06:	00 00       	nop
		bool done = 0;
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    3b08:	0f 5f       	subi	r16, 0xFF	; 255
    3b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b0c:	f8 e1       	ldi	r31, 0x18	; 24
    3b0e:	af 0e       	add	r10, r31
    3b10:	b1 1c       	adc	r11, r1
    3b12:	24 e0       	ldi	r18, 0x04	; 4
    3b14:	c2 0e       	add	r12, r18
    3b16:	d1 1c       	adc	r13, r1
    3b18:	04 30       	cpi	r16, 0x04	; 4
    3b1a:	11 05       	cpc	r17, r1
    3b1c:	09 f0       	breq	.+2      	; 0x3b20 <_Z7simpsonv+0x254>
    3b1e:	41 cf       	rjmp	.-382    	; 0x39a2 <_Z7simpsonv+0xd6>
    3b20:	8f e1       	ldi	r24, 0x1F	; 31
    3b22:	9e e4       	ldi	r25, 0x4E	; 78
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	f1 f7       	brne	.-4      	; 0x3b24 <_Z7simpsonv+0x258>
    3b28:	00 c0       	rjmp	.+0      	; 0x3b2a <_Z7simpsonv+0x25e>
    3b2a:	00 00       	nop
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    3b2c:	9f ef       	ldi	r25, 0xFF	; 255
    3b2e:	69 1a       	sub	r6, r25
    3b30:	79 0a       	sbc	r7, r25
    3b32:	e6 e0       	ldi	r30, 0x06	; 6
    3b34:	2e 0e       	add	r2, r30
    3b36:	31 1c       	adc	r3, r1
    3b38:	f8 e0       	ldi	r31, 0x08	; 8
    3b3a:	6f 16       	cp	r6, r31
    3b3c:	71 04       	cpc	r7, r1
    3b3e:	09 f0       	breq	.+2      	; 0x3b42 <_Z7simpsonv+0x276>
    3b40:	1f cf       	rjmp	.-450    	; 0x3980 <_Z7simpsonv+0xb4>
    3b42:	14 cf       	rjmp	.-472    	; 0x396c <_Z7simpsonv+0xa0>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    3b44:	44 e0       	ldi	r20, 0x04	; 4
    3b46:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB=1<<c;
    3b48:	cb 01       	movw	r24, r22
    3b4a:	04 2e       	mov	r0, r20
    3b4c:	02 c0       	rjmp	.+4      	; 0x3b52 <_Z7simpsonv+0x286>
    3b4e:	88 0f       	add	r24, r24
    3b50:	99 1f       	adc	r25, r25
    3b52:	0a 94       	dec	r0
    3b54:	e2 f7       	brpl	.-8      	; 0x3b4e <_Z7simpsonv+0x282>
    3b56:	88 bb       	out	0x18, r24	; 24
    3b58:	fa 01       	movw	r30, r20
    3b5a:	ee 53       	subi	r30, 0x3E	; 62
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
			{
				if(PINB&(1<<r))
    3b62:	86 b3       	in	r24, 0x16	; 22
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	02 2e       	mov	r0, r18
    3b68:	02 c0       	rjmp	.+4      	; 0x3b6e <_Z7simpsonv+0x2a2>
    3b6a:	95 95       	asr	r25
    3b6c:	87 95       	ror	r24
    3b6e:	0a 94       	dec	r0
    3b70:	e2 f7       	brpl	.-8      	; 0x3b6a <_Z7simpsonv+0x29e>
    3b72:	80 ff       	sbrs	r24, 0
    3b74:	03 c0       	rjmp	.+6      	; 0x3b7c <_Z7simpsonv+0x2b0>
				{
					if(mat[r][c-4]=='=')
    3b76:	80 81       	ld	r24, Z
    3b78:	8d 33       	cpi	r24, 0x3D	; 61
    3b7a:	61 f0       	breq	.+24     	; 0x3b94 <_Z7simpsonv+0x2c8>
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    3b7c:	2f 5f       	subi	r18, 0xFF	; 255
    3b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b80:	34 96       	adiw	r30, 0x04	; 4
    3b82:	24 30       	cpi	r18, 0x04	; 4
    3b84:	31 05       	cpc	r19, r1
    3b86:	69 f7       	brne	.-38     	; 0x3b62 <_Z7simpsonv+0x296>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    3b88:	4f 5f       	subi	r20, 0xFF	; 255
    3b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b8c:	48 30       	cpi	r20, 0x08	; 8
    3b8e:	51 05       	cpc	r21, r1
    3b90:	d9 f6       	brne	.-74     	; 0x3b48 <_Z7simpsonv+0x27c>
    3b92:	d8 cf       	rjmp	.-80     	; 0x3b44 <_Z7simpsonv+0x278>
    3b94:	2f ef       	ldi	r18, 0xFF	; 255
    3b96:	84 e3       	ldi	r24, 0x34	; 52
    3b98:	9c e0       	ldi	r25, 0x0C	; 12
    3b9a:	21 50       	subi	r18, 0x01	; 1
    3b9c:	80 40       	sbci	r24, 0x00	; 0
    3b9e:	90 40       	sbci	r25, 0x00	; 0
    3ba0:	e1 f7       	brne	.-8      	; 0x3b9a <_Z7simpsonv+0x2ce>
    3ba2:	00 c0       	rjmp	.+0      	; 0x3ba4 <_Z7simpsonv+0x2d8>
    3ba4:	00 00       	nop
		{
			break;
		}
	}
	_delay_ms(500);
}
    3ba6:	4e c0       	rjmp	.+156    	; 0x3c44 <_Z7simpsonv+0x378>
    3ba8:	ef e1       	ldi	r30, 0x1F	; 31
    3baa:	fe e4       	ldi	r31, 0x4E	; 78
    3bac:	31 97       	sbiw	r30, 0x01	; 1
    3bae:	f1 f7       	brne	.-4      	; 0x3bac <_Z7simpsonv+0x2e0>
    3bb0:	00 c0       	rjmp	.+0      	; 0x3bb2 <_Z7simpsonv+0x2e6>
    3bb2:	00 00       	nop
				break;
		}
		if(done)
			break;
	}
	LCD_Clear();
    3bb4:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	double l , r;
	DisplayText(1,1,text2);
    3bb8:	ae 01       	movw	r20, r28
    3bba:	4a 5e       	subi	r20, 0xEA	; 234
    3bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    3bbe:	61 e0       	ldi	r22, 0x01	; 1
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	l = double_num_input(12);
    3bc6:	8c e0       	ldi	r24, 0x0C	; 12
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <_Z16double_num_inputi>
    3bce:	6b 01       	movw	r12, r22
    3bd0:	7c 01       	movw	r14, r24
	LCD_Clear();
    3bd2:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	DisplayText(1,1,text3);
    3bd6:	ae 01       	movw	r20, r28
    3bd8:	47 5d       	subi	r20, 0xD7	; 215
    3bda:	5f 4f       	sbci	r21, 0xFF	; 255
    3bdc:	61 e0       	ldi	r22, 0x01	; 1
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	r = double_num_input(12);
    3be4:	8c e0       	ldi	r24, 0x0C	; 12
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <_Z16double_num_inputi>
    3bec:	8b 01       	movw	r16, r22
    3bee:	9c 01       	movw	r18, r24
	double ans = simpson_integration(s,l,r);
    3bf0:	b7 01       	movw	r22, r14
    3bf2:	a6 01       	movw	r20, r12
    3bf4:	ce 01       	movw	r24, r28
    3bf6:	cc 96       	adiw	r24, 0x3c	; 60
    3bf8:	0e 94 32 0c 	call	0x1864	; 0x1864 <_Z19simpson_integrationPcdd>
    3bfc:	6b 01       	movw	r12, r22
    3bfe:	7c 01       	movw	r14, r24
	
	//printing ans
	char text[] = "Ans =";
    3c00:	86 e0       	ldi	r24, 0x06	; 6
    3c02:	ef eb       	ldi	r30, 0xBF	; 191
    3c04:	f2 e0       	ldi	r31, 0x02	; 2
    3c06:	de 01       	movw	r26, r28
    3c08:	a2 59       	subi	r26, 0x92	; 146
    3c0a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c0c:	01 90       	ld	r0, Z+
    3c0e:	0d 92       	st	X+, r0
    3c10:	8a 95       	dec	r24
    3c12:	e1 f7       	brne	.-8      	; 0x3c0c <_Z7simpsonv+0x340>
	show_text(text,1);
    3c14:	61 e0       	ldi	r22, 0x01	; 1
    3c16:	70 e0       	ldi	r23, 0x00	; 0
    3c18:	ce 01       	movw	r24, r28
    3c1a:	82 59       	subi	r24, 0x92	; 146
    3c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1e:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
	dtostrf(ans,1,2,s);
    3c22:	8e 01       	movw	r16, r28
    3c24:	04 5c       	subi	r16, 0xC4	; 196
    3c26:	1f 4f       	sbci	r17, 0xFF	; 255
    3c28:	22 e0       	ldi	r18, 0x02	; 2
    3c2a:	41 e0       	ldi	r20, 0x01	; 1
    3c2c:	c7 01       	movw	r24, r14
    3c2e:	b6 01       	movw	r22, r12
    3c30:	0e 94 67 24 	call	0x48ce	; 0x48ce <dtostrf>
	show_text(s,12);
    3c34:	6c e0       	ldi	r22, 0x0C	; 12
    3c36:	70 e0       	ldi	r23, 0x00	; 0
    3c38:	c8 01       	movw	r24, r16
    3c3a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Z9show_textPci>
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    3c3e:	61 e0       	ldi	r22, 0x01	; 1
    3c40:	70 e0       	ldi	r23, 0x00	; 0
    3c42:	80 cf       	rjmp	.-256    	; 0x3b44 <_Z7simpsonv+0x278>
		{
			break;
		}
	}
	_delay_ms(500);
}
    3c44:	c9 58       	subi	r28, 0x89	; 137
    3c46:	df 4f       	sbci	r29, 0xFF	; 255
    3c48:	0f b6       	in	r0, 0x3f	; 63
    3c4a:	f8 94       	cli
    3c4c:	de bf       	out	0x3e, r29	; 62
    3c4e:	0f be       	out	0x3f, r0	; 63
    3c50:	cd bf       	out	0x3d, r28	; 61
    3c52:	df 91       	pop	r29
    3c54:	cf 91       	pop	r28
    3c56:	1f 91       	pop	r17
    3c58:	0f 91       	pop	r16
    3c5a:	ff 90       	pop	r15
    3c5c:	ef 90       	pop	r14
    3c5e:	df 90       	pop	r13
    3c60:	cf 90       	pop	r12
    3c62:	bf 90       	pop	r11
    3c64:	af 90       	pop	r10
    3c66:	9f 90       	pop	r9
    3c68:	8f 90       	pop	r8
    3c6a:	7f 90       	pop	r7
    3c6c:	6f 90       	pop	r6
    3c6e:	5f 90       	pop	r5
    3c70:	4f 90       	pop	r4
    3c72:	3f 90       	pop	r3
    3c74:	2f 90       	pop	r2
    3c76:	08 95       	ret

00003c78 <main>:
int main(void)
{
	InitLCD();
    3c78:	0e 94 88 02 	call	0x510	; 0x510 <_Z7InitLCDv>
	LCD_Clear();
    3c7c:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	initial_page();
    3c80:	0e 94 08 13 	call	0x2610	; 0x2610 <_Z12initial_pagev>
	DDRB=0xFF;
    3c84:	8f ef       	ldi	r24, 0xFF	; 255
    3c86:	87 bb       	out	0x17, r24	; 23
	DDRA=0xFF;
    3c88:	8a bb       	out	0x1a, r24	; 26
	
	//take input
	char input = mode_selector();
    3c8a:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_Z13mode_selectorv>
	if(input=='1')
    3c8e:	81 33       	cpi	r24, 0x31	; 49
    3c90:	11 f4       	brne	.+4      	; 0x3c96 <main+0x1e>
	{
		calculator();	
    3c92:	0e 94 c6 13 	call	0x278c	; 0x278c <_Z10calculatorv>
	}
	else if(input=='2')
    3c96:	82 33       	cpi	r24, 0x32	; 50
    3c98:	19 f4       	brne	.+6      	; 0x3ca0 <main+0x28>
	{
		gauss();
    3c9a:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_Z5gaussv>
    3c9e:	0e c0       	rjmp	.+28     	; 0x3cbc <main+0x44>
	}
	else if(input=='3')
    3ca0:	83 33       	cpi	r24, 0x33	; 51
    3ca2:	19 f4       	brne	.+6      	; 0x3caa <main+0x32>
	{
		newton_raphson();
    3ca4:	0e 94 a7 1a 	call	0x354e	; 0x354e <_Z14newton_raphsonv>
    3ca8:	09 c0       	rjmp	.+18     	; 0x3cbc <main+0x44>
	}
	else if(input=='4')
    3caa:	84 33       	cpi	r24, 0x34	; 52
    3cac:	19 f4       	brne	.+6      	; 0x3cb4 <main+0x3c>
	{
		simpson();
    3cae:	0e 94 66 1c 	call	0x38cc	; 0x38cc <_Z7simpsonv>
    3cb2:	04 c0       	rjmp	.+8      	; 0x3cbc <main+0x44>
	}
	else if(input=='5')
    3cb4:	85 33       	cpi	r24, 0x35	; 53
    3cb6:	11 f4       	brne	.+4      	; 0x3cbc <main+0x44>
	{
		graph_plot();
    3cb8:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z10graph_plotv>
	}
	
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	08 95       	ret

00003cc2 <_GLOBAL__sub_I_Pix>:
parser ob;
    3cc2:	8c ee       	ldi	r24, 0xEC	; 236
    3cc4:	92 e0       	ldi	r25, 0x02	; 2
    3cc6:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN6parserC1Ev>
    3cca:	08 95       	ret

00003ccc <acos>:
    3ccc:	9f 93       	push	r25
    3cce:	9f 77       	andi	r25, 0x7F	; 127
    3cd0:	0e 94 85 20 	call	0x410a	; 0x410a <__fp_arccos>
    3cd4:	0f 90       	pop	r0
    3cd6:	00 20       	and	r0, r0
    3cd8:	42 f4       	brpl	.+16     	; 0x3cea <acos+0x1e>
    3cda:	90 58       	subi	r25, 0x80	; 128
    3cdc:	a2 ea       	ldi	r26, 0xA2	; 162
    3cde:	2a ed       	ldi	r18, 0xDA	; 218
    3ce0:	3f e0       	ldi	r19, 0x0F	; 15
    3ce2:	49 e4       	ldi	r20, 0x49	; 73
    3ce4:	50 e4       	ldi	r21, 0x40	; 64
    3ce6:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__addsf3x>
    3cea:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__fp_round>

00003cee <__subsf3>:
    3cee:	50 58       	subi	r21, 0x80	; 128

00003cf0 <__addsf3>:
    3cf0:	bb 27       	eor	r27, r27
    3cf2:	aa 27       	eor	r26, r26
    3cf4:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__addsf3x>
    3cf8:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__fp_round>
    3cfc:	0e 94 36 21 	call	0x426c	; 0x426c <__fp_pscA>
    3d00:	38 f0       	brcs	.+14     	; 0x3d10 <__addsf3+0x20>
    3d02:	0e 94 3d 21 	call	0x427a	; 0x427a <__fp_pscB>
    3d06:	20 f0       	brcs	.+8      	; 0x3d10 <__addsf3+0x20>
    3d08:	39 f4       	brne	.+14     	; 0x3d18 <__addsf3+0x28>
    3d0a:	9f 3f       	cpi	r25, 0xFF	; 255
    3d0c:	19 f4       	brne	.+6      	; 0x3d14 <__addsf3+0x24>
    3d0e:	26 f4       	brtc	.+8      	; 0x3d18 <__addsf3+0x28>
    3d10:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__fp_nan>
    3d14:	0e f4       	brtc	.+2      	; 0x3d18 <__addsf3+0x28>
    3d16:	e0 95       	com	r30
    3d18:	e7 fb       	bst	r30, 7
    3d1a:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <__fp_inf>

00003d1e <__addsf3x>:
    3d1e:	e9 2f       	mov	r30, r25
    3d20:	0e 94 94 21 	call	0x4328	; 0x4328 <__fp_split3>
    3d24:	58 f3       	brcs	.-42     	; 0x3cfc <__addsf3+0xc>
    3d26:	ba 17       	cp	r27, r26
    3d28:	62 07       	cpc	r22, r18
    3d2a:	73 07       	cpc	r23, r19
    3d2c:	84 07       	cpc	r24, r20
    3d2e:	95 07       	cpc	r25, r21
    3d30:	20 f0       	brcs	.+8      	; 0x3d3a <__addsf3x+0x1c>
    3d32:	79 f4       	brne	.+30     	; 0x3d52 <__addsf3x+0x34>
    3d34:	a6 f5       	brtc	.+104    	; 0x3d9e <__addsf3x+0x80>
    3d36:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__fp_zero>
    3d3a:	0e f4       	brtc	.+2      	; 0x3d3e <__addsf3x+0x20>
    3d3c:	e0 95       	com	r30
    3d3e:	0b 2e       	mov	r0, r27
    3d40:	ba 2f       	mov	r27, r26
    3d42:	a0 2d       	mov	r26, r0
    3d44:	0b 01       	movw	r0, r22
    3d46:	b9 01       	movw	r22, r18
    3d48:	90 01       	movw	r18, r0
    3d4a:	0c 01       	movw	r0, r24
    3d4c:	ca 01       	movw	r24, r20
    3d4e:	a0 01       	movw	r20, r0
    3d50:	11 24       	eor	r1, r1
    3d52:	ff 27       	eor	r31, r31
    3d54:	59 1b       	sub	r21, r25
    3d56:	99 f0       	breq	.+38     	; 0x3d7e <__addsf3x+0x60>
    3d58:	59 3f       	cpi	r21, 0xF9	; 249
    3d5a:	50 f4       	brcc	.+20     	; 0x3d70 <__addsf3x+0x52>
    3d5c:	50 3e       	cpi	r21, 0xE0	; 224
    3d5e:	68 f1       	brcs	.+90     	; 0x3dba <__addsf3x+0x9c>
    3d60:	1a 16       	cp	r1, r26
    3d62:	f0 40       	sbci	r31, 0x00	; 0
    3d64:	a2 2f       	mov	r26, r18
    3d66:	23 2f       	mov	r18, r19
    3d68:	34 2f       	mov	r19, r20
    3d6a:	44 27       	eor	r20, r20
    3d6c:	58 5f       	subi	r21, 0xF8	; 248
    3d6e:	f3 cf       	rjmp	.-26     	; 0x3d56 <__addsf3x+0x38>
    3d70:	46 95       	lsr	r20
    3d72:	37 95       	ror	r19
    3d74:	27 95       	ror	r18
    3d76:	a7 95       	ror	r26
    3d78:	f0 40       	sbci	r31, 0x00	; 0
    3d7a:	53 95       	inc	r21
    3d7c:	c9 f7       	brne	.-14     	; 0x3d70 <__addsf3x+0x52>
    3d7e:	7e f4       	brtc	.+30     	; 0x3d9e <__addsf3x+0x80>
    3d80:	1f 16       	cp	r1, r31
    3d82:	ba 0b       	sbc	r27, r26
    3d84:	62 0b       	sbc	r22, r18
    3d86:	73 0b       	sbc	r23, r19
    3d88:	84 0b       	sbc	r24, r20
    3d8a:	ba f0       	brmi	.+46     	; 0x3dba <__addsf3x+0x9c>
    3d8c:	91 50       	subi	r25, 0x01	; 1
    3d8e:	a1 f0       	breq	.+40     	; 0x3db8 <__addsf3x+0x9a>
    3d90:	ff 0f       	add	r31, r31
    3d92:	bb 1f       	adc	r27, r27
    3d94:	66 1f       	adc	r22, r22
    3d96:	77 1f       	adc	r23, r23
    3d98:	88 1f       	adc	r24, r24
    3d9a:	c2 f7       	brpl	.-16     	; 0x3d8c <__addsf3x+0x6e>
    3d9c:	0e c0       	rjmp	.+28     	; 0x3dba <__addsf3x+0x9c>
    3d9e:	ba 0f       	add	r27, r26
    3da0:	62 1f       	adc	r22, r18
    3da2:	73 1f       	adc	r23, r19
    3da4:	84 1f       	adc	r24, r20
    3da6:	48 f4       	brcc	.+18     	; 0x3dba <__addsf3x+0x9c>
    3da8:	87 95       	ror	r24
    3daa:	77 95       	ror	r23
    3dac:	67 95       	ror	r22
    3dae:	b7 95       	ror	r27
    3db0:	f7 95       	ror	r31
    3db2:	9e 3f       	cpi	r25, 0xFE	; 254
    3db4:	08 f0       	brcs	.+2      	; 0x3db8 <__addsf3x+0x9a>
    3db6:	b0 cf       	rjmp	.-160    	; 0x3d18 <__addsf3+0x28>
    3db8:	93 95       	inc	r25
    3dba:	88 0f       	add	r24, r24
    3dbc:	08 f0       	brcs	.+2      	; 0x3dc0 <__addsf3x+0xa2>
    3dbe:	99 27       	eor	r25, r25
    3dc0:	ee 0f       	add	r30, r30
    3dc2:	97 95       	ror	r25
    3dc4:	87 95       	ror	r24
    3dc6:	08 95       	ret

00003dc8 <asin>:
    3dc8:	9f 93       	push	r25
    3dca:	9f 77       	andi	r25, 0x7F	; 127
    3dcc:	ee e3       	ldi	r30, 0x3E	; 62
    3dce:	89 37       	cpi	r24, 0x79	; 121
    3dd0:	9e 07       	cpc	r25, r30
    3dd2:	28 f4       	brcc	.+10     	; 0x3dde <asin+0x16>
    3dd4:	e4 e5       	ldi	r30, 0x54	; 84
    3dd6:	f0 e0       	ldi	r31, 0x00	; 0
    3dd8:	0e 94 22 21 	call	0x4244	; 0x4244 <__fp_powsodd>
    3ddc:	0c c0       	rjmp	.+24     	; 0x3df6 <asin+0x2e>
    3dde:	0e 94 85 20 	call	0x410a	; 0x410a <__fp_arccos>
    3de2:	90 58       	subi	r25, 0x80	; 128
    3de4:	a2 ea       	ldi	r26, 0xA2	; 162
    3de6:	2a ed       	ldi	r18, 0xDA	; 218
    3de8:	3f e0       	ldi	r19, 0x0F	; 15
    3dea:	49 ec       	ldi	r20, 0xC9	; 201
    3dec:	5f e3       	ldi	r21, 0x3F	; 63
    3dee:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__addsf3x>
    3df2:	0e 94 6f 21 	call	0x42de	; 0x42de <__fp_round>
    3df6:	0f 90       	pop	r0
    3df8:	07 fc       	sbrc	r0, 7
    3dfa:	90 58       	subi	r25, 0x80	; 128
    3dfc:	08 95       	ret

00003dfe <atan>:
    3dfe:	df 93       	push	r29
    3e00:	dd 27       	eor	r29, r29
    3e02:	b9 2f       	mov	r27, r25
    3e04:	bf 77       	andi	r27, 0x7F	; 127
    3e06:	40 e8       	ldi	r20, 0x80	; 128
    3e08:	5f e3       	ldi	r21, 0x3F	; 63
    3e0a:	16 16       	cp	r1, r22
    3e0c:	17 06       	cpc	r1, r23
    3e0e:	48 07       	cpc	r20, r24
    3e10:	5b 07       	cpc	r21, r27
    3e12:	18 f4       	brcc	.+6      	; 0x3e1a <atan+0x1c>
    3e14:	d9 2f       	mov	r29, r25
    3e16:	0e 94 da 21 	call	0x43b4	; 0x43b4 <inverse>
    3e1a:	9f 93       	push	r25
    3e1c:	8f 93       	push	r24
    3e1e:	7f 93       	push	r23
    3e20:	6f 93       	push	r22
    3e22:	0e 94 fd 23 	call	0x47fa	; 0x47fa <square>
    3e26:	e8 e6       	ldi	r30, 0x68	; 104
    3e28:	f0 e0       	ldi	r31, 0x00	; 0
    3e2a:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <__fp_powser>
    3e2e:	0e 94 6f 21 	call	0x42de	; 0x42de <__fp_round>
    3e32:	2f 91       	pop	r18
    3e34:	3f 91       	pop	r19
    3e36:	4f 91       	pop	r20
    3e38:	5f 91       	pop	r21
    3e3a:	0e 94 bb 22 	call	0x4576	; 0x4576 <__mulsf3x>
    3e3e:	dd 23       	and	r29, r29
    3e40:	51 f0       	breq	.+20     	; 0x3e56 <atan+0x58>
    3e42:	90 58       	subi	r25, 0x80	; 128
    3e44:	a2 ea       	ldi	r26, 0xA2	; 162
    3e46:	2a ed       	ldi	r18, 0xDA	; 218
    3e48:	3f e0       	ldi	r19, 0x0F	; 15
    3e4a:	49 ec       	ldi	r20, 0xC9	; 201
    3e4c:	5f e3       	ldi	r21, 0x3F	; 63
    3e4e:	d0 78       	andi	r29, 0x80	; 128
    3e50:	5d 27       	eor	r21, r29
    3e52:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__addsf3x>
    3e56:	df 91       	pop	r29
    3e58:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__fp_round>

00003e5c <__cmpsf2>:
    3e5c:	0e 94 a5 20 	call	0x414a	; 0x414a <__fp_cmp>
    3e60:	08 f4       	brcc	.+2      	; 0x3e64 <__cmpsf2+0x8>
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	08 95       	ret

00003e66 <cosh>:
    3e66:	90 68       	ori	r25, 0x80	; 128
    3e68:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <exp>
    3e6c:	4f ef       	ldi	r20, 0xFF	; 255
    3e6e:	5f ef       	ldi	r21, 0xFF	; 255
    3e70:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ldexp>
    3e74:	9f 93       	push	r25
    3e76:	8f 93       	push	r24
    3e78:	7f 93       	push	r23
    3e7a:	6f 93       	push	r22
    3e7c:	42 e0       	ldi	r20, 0x02	; 2
    3e7e:	50 e0       	ldi	r21, 0x00	; 0
    3e80:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ldexp>
    3e84:	0e 94 da 21 	call	0x43b4	; 0x43b4 <inverse>
    3e88:	2f 91       	pop	r18
    3e8a:	3f 91       	pop	r19
    3e8c:	4f 91       	pop	r20
    3e8e:	5f 91       	pop	r21
    3e90:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__addsf3>

00003e94 <cos>:
    3e94:	0e 94 46 21 	call	0x428c	; 0x428c <__fp_rempio2>
    3e98:	e3 95       	inc	r30
    3e9a:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__fp_sinus>

00003e9e <__divsf3>:
    3e9e:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__divsf3x>
    3ea2:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__fp_round>
    3ea6:	0e 94 3d 21 	call	0x427a	; 0x427a <__fp_pscB>
    3eaa:	58 f0       	brcs	.+22     	; 0x3ec2 <__divsf3+0x24>
    3eac:	0e 94 36 21 	call	0x426c	; 0x426c <__fp_pscA>
    3eb0:	40 f0       	brcs	.+16     	; 0x3ec2 <__divsf3+0x24>
    3eb2:	29 f4       	brne	.+10     	; 0x3ebe <__divsf3+0x20>
    3eb4:	5f 3f       	cpi	r21, 0xFF	; 255
    3eb6:	29 f0       	breq	.+10     	; 0x3ec2 <__divsf3+0x24>
    3eb8:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <__fp_inf>
    3ebc:	51 11       	cpse	r21, r1
    3ebe:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__fp_szero>
    3ec2:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__fp_nan>

00003ec6 <__divsf3x>:
    3ec6:	0e 94 94 21 	call	0x4328	; 0x4328 <__fp_split3>
    3eca:	68 f3       	brcs	.-38     	; 0x3ea6 <__divsf3+0x8>

00003ecc <__divsf3_pse>:
    3ecc:	99 23       	and	r25, r25
    3ece:	b1 f3       	breq	.-20     	; 0x3ebc <__divsf3+0x1e>
    3ed0:	55 23       	and	r21, r21
    3ed2:	91 f3       	breq	.-28     	; 0x3eb8 <__divsf3+0x1a>
    3ed4:	95 1b       	sub	r25, r21
    3ed6:	55 0b       	sbc	r21, r21
    3ed8:	bb 27       	eor	r27, r27
    3eda:	aa 27       	eor	r26, r26
    3edc:	62 17       	cp	r22, r18
    3ede:	73 07       	cpc	r23, r19
    3ee0:	84 07       	cpc	r24, r20
    3ee2:	38 f0       	brcs	.+14     	; 0x3ef2 <__divsf3_pse+0x26>
    3ee4:	9f 5f       	subi	r25, 0xFF	; 255
    3ee6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ee8:	22 0f       	add	r18, r18
    3eea:	33 1f       	adc	r19, r19
    3eec:	44 1f       	adc	r20, r20
    3eee:	aa 1f       	adc	r26, r26
    3ef0:	a9 f3       	breq	.-22     	; 0x3edc <__divsf3_pse+0x10>
    3ef2:	35 d0       	rcall	.+106    	; 0x3f5e <__divsf3_pse+0x92>
    3ef4:	0e 2e       	mov	r0, r30
    3ef6:	3a f0       	brmi	.+14     	; 0x3f06 <__divsf3_pse+0x3a>
    3ef8:	e0 e8       	ldi	r30, 0x80	; 128
    3efa:	32 d0       	rcall	.+100    	; 0x3f60 <__divsf3_pse+0x94>
    3efc:	91 50       	subi	r25, 0x01	; 1
    3efe:	50 40       	sbci	r21, 0x00	; 0
    3f00:	e6 95       	lsr	r30
    3f02:	00 1c       	adc	r0, r0
    3f04:	ca f7       	brpl	.-14     	; 0x3ef8 <__divsf3_pse+0x2c>
    3f06:	2b d0       	rcall	.+86     	; 0x3f5e <__divsf3_pse+0x92>
    3f08:	fe 2f       	mov	r31, r30
    3f0a:	29 d0       	rcall	.+82     	; 0x3f5e <__divsf3_pse+0x92>
    3f0c:	66 0f       	add	r22, r22
    3f0e:	77 1f       	adc	r23, r23
    3f10:	88 1f       	adc	r24, r24
    3f12:	bb 1f       	adc	r27, r27
    3f14:	26 17       	cp	r18, r22
    3f16:	37 07       	cpc	r19, r23
    3f18:	48 07       	cpc	r20, r24
    3f1a:	ab 07       	cpc	r26, r27
    3f1c:	b0 e8       	ldi	r27, 0x80	; 128
    3f1e:	09 f0       	breq	.+2      	; 0x3f22 <__divsf3_pse+0x56>
    3f20:	bb 0b       	sbc	r27, r27
    3f22:	80 2d       	mov	r24, r0
    3f24:	bf 01       	movw	r22, r30
    3f26:	ff 27       	eor	r31, r31
    3f28:	93 58       	subi	r25, 0x83	; 131
    3f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f2c:	3a f0       	brmi	.+14     	; 0x3f3c <__divsf3_pse+0x70>
    3f2e:	9e 3f       	cpi	r25, 0xFE	; 254
    3f30:	51 05       	cpc	r21, r1
    3f32:	78 f0       	brcs	.+30     	; 0x3f52 <__divsf3_pse+0x86>
    3f34:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <__fp_inf>
    3f38:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__fp_szero>
    3f3c:	5f 3f       	cpi	r21, 0xFF	; 255
    3f3e:	e4 f3       	brlt	.-8      	; 0x3f38 <__divsf3_pse+0x6c>
    3f40:	98 3e       	cpi	r25, 0xE8	; 232
    3f42:	d4 f3       	brlt	.-12     	; 0x3f38 <__divsf3_pse+0x6c>
    3f44:	86 95       	lsr	r24
    3f46:	77 95       	ror	r23
    3f48:	67 95       	ror	r22
    3f4a:	b7 95       	ror	r27
    3f4c:	f7 95       	ror	r31
    3f4e:	9f 5f       	subi	r25, 0xFF	; 255
    3f50:	c9 f7       	brne	.-14     	; 0x3f44 <__divsf3_pse+0x78>
    3f52:	88 0f       	add	r24, r24
    3f54:	91 1d       	adc	r25, r1
    3f56:	96 95       	lsr	r25
    3f58:	87 95       	ror	r24
    3f5a:	97 f9       	bld	r25, 7
    3f5c:	08 95       	ret
    3f5e:	e1 e0       	ldi	r30, 0x01	; 1
    3f60:	66 0f       	add	r22, r22
    3f62:	77 1f       	adc	r23, r23
    3f64:	88 1f       	adc	r24, r24
    3f66:	bb 1f       	adc	r27, r27
    3f68:	62 17       	cp	r22, r18
    3f6a:	73 07       	cpc	r23, r19
    3f6c:	84 07       	cpc	r24, r20
    3f6e:	ba 07       	cpc	r27, r26
    3f70:	20 f0       	brcs	.+8      	; 0x3f7a <__divsf3_pse+0xae>
    3f72:	62 1b       	sub	r22, r18
    3f74:	73 0b       	sbc	r23, r19
    3f76:	84 0b       	sbc	r24, r20
    3f78:	ba 0b       	sbc	r27, r26
    3f7a:	ee 1f       	adc	r30, r30
    3f7c:	88 f7       	brcc	.-30     	; 0x3f60 <__divsf3_pse+0x94>
    3f7e:	e0 95       	com	r30
    3f80:	08 95       	ret
    3f82:	29 f4       	brne	.+10     	; 0x3f8e <__divsf3_pse+0xc2>
    3f84:	16 f0       	brts	.+4      	; 0x3f8a <__divsf3_pse+0xbe>
    3f86:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <__fp_inf>
    3f8a:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__fp_zero>
    3f8e:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__fp_nan>

00003f92 <exp>:
    3f92:	0e 94 9c 21 	call	0x4338	; 0x4338 <__fp_splitA>
    3f96:	a8 f3       	brcs	.-22     	; 0x3f82 <__divsf3_pse+0xb6>
    3f98:	96 38       	cpi	r25, 0x86	; 134
    3f9a:	a0 f7       	brcc	.-24     	; 0x3f84 <__divsf3_pse+0xb8>
    3f9c:	07 f8       	bld	r0, 7
    3f9e:	0f 92       	push	r0
    3fa0:	e8 94       	clt
    3fa2:	2b e3       	ldi	r18, 0x3B	; 59
    3fa4:	3a ea       	ldi	r19, 0xAA	; 170
    3fa6:	48 eb       	ldi	r20, 0xB8	; 184
    3fa8:	5f e7       	ldi	r21, 0x7F	; 127
    3faa:	0e 94 be 22 	call	0x457c	; 0x457c <__mulsf3_pse>
    3fae:	0f 92       	push	r0
    3fb0:	0f 92       	push	r0
    3fb2:	0f 92       	push	r0
    3fb4:	4d b7       	in	r20, 0x3d	; 61
    3fb6:	5e b7       	in	r21, 0x3e	; 62
    3fb8:	0f 92       	push	r0
    3fba:	0e 94 74 22 	call	0x44e8	; 0x44e8 <modf>
    3fbe:	e5 e9       	ldi	r30, 0x95	; 149
    3fc0:	f0 e0       	ldi	r31, 0x00	; 0
    3fc2:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <__fp_powser>
    3fc6:	4f 91       	pop	r20
    3fc8:	5f 91       	pop	r21
    3fca:	ef 91       	pop	r30
    3fcc:	ff 91       	pop	r31
    3fce:	e5 95       	asr	r30
    3fd0:	ee 1f       	adc	r30, r30
    3fd2:	ff 1f       	adc	r31, r31
    3fd4:	49 f0       	breq	.+18     	; 0x3fe8 <exp+0x56>
    3fd6:	fe 57       	subi	r31, 0x7E	; 126
    3fd8:	e0 68       	ori	r30, 0x80	; 128
    3fda:	44 27       	eor	r20, r20
    3fdc:	ee 0f       	add	r30, r30
    3fde:	44 1f       	adc	r20, r20
    3fe0:	fa 95       	dec	r31
    3fe2:	e1 f7       	brne	.-8      	; 0x3fdc <exp+0x4a>
    3fe4:	41 95       	neg	r20
    3fe6:	55 0b       	sbc	r21, r21
    3fe8:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ldexp>
    3fec:	0f 90       	pop	r0
    3fee:	07 fe       	sbrs	r0, 7
    3ff0:	0c 94 da 21 	jmp	0x43b4	; 0x43b4 <inverse>
    3ff4:	08 95       	ret

00003ff6 <__fixsfsi>:
    3ff6:	0e 94 02 20 	call	0x4004	; 0x4004 <__fixunssfsi>
    3ffa:	68 94       	set
    3ffc:	b1 11       	cpse	r27, r1
    3ffe:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__fp_szero>
    4002:	08 95       	ret

00004004 <__fixunssfsi>:
    4004:	0e 94 9c 21 	call	0x4338	; 0x4338 <__fp_splitA>
    4008:	88 f0       	brcs	.+34     	; 0x402c <__fixunssfsi+0x28>
    400a:	9f 57       	subi	r25, 0x7F	; 127
    400c:	98 f0       	brcs	.+38     	; 0x4034 <__fixunssfsi+0x30>
    400e:	b9 2f       	mov	r27, r25
    4010:	99 27       	eor	r25, r25
    4012:	b7 51       	subi	r27, 0x17	; 23
    4014:	b0 f0       	brcs	.+44     	; 0x4042 <__fixunssfsi+0x3e>
    4016:	e1 f0       	breq	.+56     	; 0x4050 <__fixunssfsi+0x4c>
    4018:	66 0f       	add	r22, r22
    401a:	77 1f       	adc	r23, r23
    401c:	88 1f       	adc	r24, r24
    401e:	99 1f       	adc	r25, r25
    4020:	1a f0       	brmi	.+6      	; 0x4028 <__fixunssfsi+0x24>
    4022:	ba 95       	dec	r27
    4024:	c9 f7       	brne	.-14     	; 0x4018 <__fixunssfsi+0x14>
    4026:	14 c0       	rjmp	.+40     	; 0x4050 <__fixunssfsi+0x4c>
    4028:	b1 30       	cpi	r27, 0x01	; 1
    402a:	91 f0       	breq	.+36     	; 0x4050 <__fixunssfsi+0x4c>
    402c:	0e 94 ce 21 	call	0x439c	; 0x439c <__fp_zero>
    4030:	b1 e0       	ldi	r27, 0x01	; 1
    4032:	08 95       	ret
    4034:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__fp_zero>
    4038:	67 2f       	mov	r22, r23
    403a:	78 2f       	mov	r23, r24
    403c:	88 27       	eor	r24, r24
    403e:	b8 5f       	subi	r27, 0xF8	; 248
    4040:	39 f0       	breq	.+14     	; 0x4050 <__fixunssfsi+0x4c>
    4042:	b9 3f       	cpi	r27, 0xF9	; 249
    4044:	cc f3       	brlt	.-14     	; 0x4038 <__fixunssfsi+0x34>
    4046:	86 95       	lsr	r24
    4048:	77 95       	ror	r23
    404a:	67 95       	ror	r22
    404c:	b3 95       	inc	r27
    404e:	d9 f7       	brne	.-10     	; 0x4046 <__fixunssfsi+0x42>
    4050:	3e f4       	brtc	.+14     	; 0x4060 <__fixunssfsi+0x5c>
    4052:	90 95       	com	r25
    4054:	80 95       	com	r24
    4056:	70 95       	com	r23
    4058:	61 95       	neg	r22
    405a:	7f 4f       	sbci	r23, 0xFF	; 255
    405c:	8f 4f       	sbci	r24, 0xFF	; 255
    405e:	9f 4f       	sbci	r25, 0xFF	; 255
    4060:	08 95       	ret

00004062 <__floatunsisf>:
    4062:	e8 94       	clt
    4064:	09 c0       	rjmp	.+18     	; 0x4078 <__floatsisf+0x12>

00004066 <__floatsisf>:
    4066:	97 fb       	bst	r25, 7
    4068:	3e f4       	brtc	.+14     	; 0x4078 <__floatsisf+0x12>
    406a:	90 95       	com	r25
    406c:	80 95       	com	r24
    406e:	70 95       	com	r23
    4070:	61 95       	neg	r22
    4072:	7f 4f       	sbci	r23, 0xFF	; 255
    4074:	8f 4f       	sbci	r24, 0xFF	; 255
    4076:	9f 4f       	sbci	r25, 0xFF	; 255
    4078:	99 23       	and	r25, r25
    407a:	a9 f0       	breq	.+42     	; 0x40a6 <__floatsisf+0x40>
    407c:	f9 2f       	mov	r31, r25
    407e:	96 e9       	ldi	r25, 0x96	; 150
    4080:	bb 27       	eor	r27, r27
    4082:	93 95       	inc	r25
    4084:	f6 95       	lsr	r31
    4086:	87 95       	ror	r24
    4088:	77 95       	ror	r23
    408a:	67 95       	ror	r22
    408c:	b7 95       	ror	r27
    408e:	f1 11       	cpse	r31, r1
    4090:	f8 cf       	rjmp	.-16     	; 0x4082 <__floatsisf+0x1c>
    4092:	fa f4       	brpl	.+62     	; 0x40d2 <__floatsisf+0x6c>
    4094:	bb 0f       	add	r27, r27
    4096:	11 f4       	brne	.+4      	; 0x409c <__floatsisf+0x36>
    4098:	60 ff       	sbrs	r22, 0
    409a:	1b c0       	rjmp	.+54     	; 0x40d2 <__floatsisf+0x6c>
    409c:	6f 5f       	subi	r22, 0xFF	; 255
    409e:	7f 4f       	sbci	r23, 0xFF	; 255
    40a0:	8f 4f       	sbci	r24, 0xFF	; 255
    40a2:	9f 4f       	sbci	r25, 0xFF	; 255
    40a4:	16 c0       	rjmp	.+44     	; 0x40d2 <__floatsisf+0x6c>
    40a6:	88 23       	and	r24, r24
    40a8:	11 f0       	breq	.+4      	; 0x40ae <__floatsisf+0x48>
    40aa:	96 e9       	ldi	r25, 0x96	; 150
    40ac:	11 c0       	rjmp	.+34     	; 0x40d0 <__floatsisf+0x6a>
    40ae:	77 23       	and	r23, r23
    40b0:	21 f0       	breq	.+8      	; 0x40ba <__floatsisf+0x54>
    40b2:	9e e8       	ldi	r25, 0x8E	; 142
    40b4:	87 2f       	mov	r24, r23
    40b6:	76 2f       	mov	r23, r22
    40b8:	05 c0       	rjmp	.+10     	; 0x40c4 <__floatsisf+0x5e>
    40ba:	66 23       	and	r22, r22
    40bc:	71 f0       	breq	.+28     	; 0x40da <__floatsisf+0x74>
    40be:	96 e8       	ldi	r25, 0x86	; 134
    40c0:	86 2f       	mov	r24, r22
    40c2:	70 e0       	ldi	r23, 0x00	; 0
    40c4:	60 e0       	ldi	r22, 0x00	; 0
    40c6:	2a f0       	brmi	.+10     	; 0x40d2 <__floatsisf+0x6c>
    40c8:	9a 95       	dec	r25
    40ca:	66 0f       	add	r22, r22
    40cc:	77 1f       	adc	r23, r23
    40ce:	88 1f       	adc	r24, r24
    40d0:	da f7       	brpl	.-10     	; 0x40c8 <__floatsisf+0x62>
    40d2:	88 0f       	add	r24, r24
    40d4:	96 95       	lsr	r25
    40d6:	87 95       	ror	r24
    40d8:	97 f9       	bld	r25, 7
    40da:	08 95       	ret

000040dc <floor>:
    40dc:	0e 94 b6 21 	call	0x436c	; 0x436c <__fp_trunc>
    40e0:	90 f0       	brcs	.+36     	; 0x4106 <floor+0x2a>
    40e2:	9f 37       	cpi	r25, 0x7F	; 127
    40e4:	48 f4       	brcc	.+18     	; 0x40f8 <floor+0x1c>
    40e6:	91 11       	cpse	r25, r1
    40e8:	16 f0       	brts	.+4      	; 0x40ee <floor+0x12>
    40ea:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__fp_szero>
    40ee:	60 e0       	ldi	r22, 0x00	; 0
    40f0:	70 e0       	ldi	r23, 0x00	; 0
    40f2:	80 e8       	ldi	r24, 0x80	; 128
    40f4:	9f eb       	ldi	r25, 0xBF	; 191
    40f6:	08 95       	ret
    40f8:	26 f4       	brtc	.+8      	; 0x4102 <floor+0x26>
    40fa:	1b 16       	cp	r1, r27
    40fc:	61 1d       	adc	r22, r1
    40fe:	71 1d       	adc	r23, r1
    4100:	81 1d       	adc	r24, r1
    4102:	0c 94 cf 20 	jmp	0x419e	; 0x419e <__fp_mintl>
    4106:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__fp_mpack>

0000410a <__fp_arccos>:
    410a:	df 93       	push	r29
    410c:	cf 93       	push	r28
    410e:	1f 93       	push	r17
    4110:	0f 93       	push	r16
    4112:	8b 01       	movw	r16, r22
    4114:	ec 01       	movw	r28, r24
    4116:	ed eb       	ldi	r30, 0xBD	; 189
    4118:	f0 e0       	ldi	r31, 0x00	; 0
    411a:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <__fp_powser>
    411e:	0e 94 6f 21 	call	0x42de	; 0x42de <__fp_round>
    4122:	98 01       	movw	r18, r16
    4124:	ae 01       	movw	r20, r28
    4126:	8b 01       	movw	r16, r22
    4128:	ec 01       	movw	r28, r24
    412a:	60 e0       	ldi	r22, 0x00	; 0
    412c:	70 e0       	ldi	r23, 0x00	; 0
    412e:	80 e8       	ldi	r24, 0x80	; 128
    4130:	9f e3       	ldi	r25, 0x3F	; 63
    4132:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    4136:	0e 94 bd 23 	call	0x477a	; 0x477a <sqrt>
    413a:	98 01       	movw	r18, r16
    413c:	ae 01       	movw	r20, r28
    413e:	0f 91       	pop	r16
    4140:	1f 91       	pop	r17
    4142:	cf 91       	pop	r28
    4144:	df 91       	pop	r29
    4146:	0c 94 bb 22 	jmp	0x4576	; 0x4576 <__mulsf3x>

0000414a <__fp_cmp>:
    414a:	99 0f       	add	r25, r25
    414c:	00 08       	sbc	r0, r0
    414e:	55 0f       	add	r21, r21
    4150:	aa 0b       	sbc	r26, r26
    4152:	e0 e8       	ldi	r30, 0x80	; 128
    4154:	fe ef       	ldi	r31, 0xFE	; 254
    4156:	16 16       	cp	r1, r22
    4158:	17 06       	cpc	r1, r23
    415a:	e8 07       	cpc	r30, r24
    415c:	f9 07       	cpc	r31, r25
    415e:	c0 f0       	brcs	.+48     	; 0x4190 <__fp_cmp+0x46>
    4160:	12 16       	cp	r1, r18
    4162:	13 06       	cpc	r1, r19
    4164:	e4 07       	cpc	r30, r20
    4166:	f5 07       	cpc	r31, r21
    4168:	98 f0       	brcs	.+38     	; 0x4190 <__fp_cmp+0x46>
    416a:	62 1b       	sub	r22, r18
    416c:	73 0b       	sbc	r23, r19
    416e:	84 0b       	sbc	r24, r20
    4170:	95 0b       	sbc	r25, r21
    4172:	39 f4       	brne	.+14     	; 0x4182 <__fp_cmp+0x38>
    4174:	0a 26       	eor	r0, r26
    4176:	61 f0       	breq	.+24     	; 0x4190 <__fp_cmp+0x46>
    4178:	23 2b       	or	r18, r19
    417a:	24 2b       	or	r18, r20
    417c:	25 2b       	or	r18, r21
    417e:	21 f4       	brne	.+8      	; 0x4188 <__fp_cmp+0x3e>
    4180:	08 95       	ret
    4182:	0a 26       	eor	r0, r26
    4184:	09 f4       	brne	.+2      	; 0x4188 <__fp_cmp+0x3e>
    4186:	a1 40       	sbci	r26, 0x01	; 1
    4188:	a6 95       	lsr	r26
    418a:	8f ef       	ldi	r24, 0xFF	; 255
    418c:	81 1d       	adc	r24, r1
    418e:	81 1d       	adc	r24, r1
    4190:	08 95       	ret

00004192 <__fp_inf>:
    4192:	97 f9       	bld	r25, 7
    4194:	9f 67       	ori	r25, 0x7F	; 127
    4196:	80 e8       	ldi	r24, 0x80	; 128
    4198:	70 e0       	ldi	r23, 0x00	; 0
    419a:	60 e0       	ldi	r22, 0x00	; 0
    419c:	08 95       	ret

0000419e <__fp_mintl>:
    419e:	88 23       	and	r24, r24
    41a0:	71 f4       	brne	.+28     	; 0x41be <__fp_mintl+0x20>
    41a2:	77 23       	and	r23, r23
    41a4:	21 f0       	breq	.+8      	; 0x41ae <__fp_mintl+0x10>
    41a6:	98 50       	subi	r25, 0x08	; 8
    41a8:	87 2b       	or	r24, r23
    41aa:	76 2f       	mov	r23, r22
    41ac:	07 c0       	rjmp	.+14     	; 0x41bc <__fp_mintl+0x1e>
    41ae:	66 23       	and	r22, r22
    41b0:	11 f4       	brne	.+4      	; 0x41b6 <__fp_mintl+0x18>
    41b2:	99 27       	eor	r25, r25
    41b4:	0d c0       	rjmp	.+26     	; 0x41d0 <__fp_mintl+0x32>
    41b6:	90 51       	subi	r25, 0x10	; 16
    41b8:	86 2b       	or	r24, r22
    41ba:	70 e0       	ldi	r23, 0x00	; 0
    41bc:	60 e0       	ldi	r22, 0x00	; 0
    41be:	2a f0       	brmi	.+10     	; 0x41ca <__fp_mintl+0x2c>
    41c0:	9a 95       	dec	r25
    41c2:	66 0f       	add	r22, r22
    41c4:	77 1f       	adc	r23, r23
    41c6:	88 1f       	adc	r24, r24
    41c8:	da f7       	brpl	.-10     	; 0x41c0 <__fp_mintl+0x22>
    41ca:	88 0f       	add	r24, r24
    41cc:	96 95       	lsr	r25
    41ce:	87 95       	ror	r24
    41d0:	97 f9       	bld	r25, 7
    41d2:	08 95       	ret

000041d4 <__fp_mpack>:
    41d4:	9f 3f       	cpi	r25, 0xFF	; 255
    41d6:	31 f0       	breq	.+12     	; 0x41e4 <__fp_mpack_finite+0xc>

000041d8 <__fp_mpack_finite>:
    41d8:	91 50       	subi	r25, 0x01	; 1
    41da:	20 f4       	brcc	.+8      	; 0x41e4 <__fp_mpack_finite+0xc>
    41dc:	87 95       	ror	r24
    41de:	77 95       	ror	r23
    41e0:	67 95       	ror	r22
    41e2:	b7 95       	ror	r27
    41e4:	88 0f       	add	r24, r24
    41e6:	91 1d       	adc	r25, r1
    41e8:	96 95       	lsr	r25
    41ea:	87 95       	ror	r24
    41ec:	97 f9       	bld	r25, 7
    41ee:	08 95       	ret

000041f0 <__fp_nan>:
    41f0:	9f ef       	ldi	r25, 0xFF	; 255
    41f2:	80 ec       	ldi	r24, 0xC0	; 192
    41f4:	08 95       	ret

000041f6 <__fp_powser>:
    41f6:	df 93       	push	r29
    41f8:	cf 93       	push	r28
    41fa:	1f 93       	push	r17
    41fc:	0f 93       	push	r16
    41fe:	ff 92       	push	r15
    4200:	ef 92       	push	r14
    4202:	df 92       	push	r13
    4204:	7b 01       	movw	r14, r22
    4206:	8c 01       	movw	r16, r24
    4208:	68 94       	set
    420a:	06 c0       	rjmp	.+12     	; 0x4218 <__fp_powser+0x22>
    420c:	da 2e       	mov	r13, r26
    420e:	ef 01       	movw	r28, r30
    4210:	0e 94 bb 22 	call	0x4576	; 0x4576 <__mulsf3x>
    4214:	fe 01       	movw	r30, r28
    4216:	e8 94       	clt
    4218:	a5 91       	lpm	r26, Z+
    421a:	25 91       	lpm	r18, Z+
    421c:	35 91       	lpm	r19, Z+
    421e:	45 91       	lpm	r20, Z+
    4220:	55 91       	lpm	r21, Z+
    4222:	a6 f3       	brts	.-24     	; 0x420c <__fp_powser+0x16>
    4224:	ef 01       	movw	r28, r30
    4226:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__addsf3x>
    422a:	fe 01       	movw	r30, r28
    422c:	97 01       	movw	r18, r14
    422e:	a8 01       	movw	r20, r16
    4230:	da 94       	dec	r13
    4232:	69 f7       	brne	.-38     	; 0x420e <__fp_powser+0x18>
    4234:	df 90       	pop	r13
    4236:	ef 90       	pop	r14
    4238:	ff 90       	pop	r15
    423a:	0f 91       	pop	r16
    423c:	1f 91       	pop	r17
    423e:	cf 91       	pop	r28
    4240:	df 91       	pop	r29
    4242:	08 95       	ret

00004244 <__fp_powsodd>:
    4244:	9f 93       	push	r25
    4246:	8f 93       	push	r24
    4248:	7f 93       	push	r23
    424a:	6f 93       	push	r22
    424c:	ff 93       	push	r31
    424e:	ef 93       	push	r30
    4250:	9b 01       	movw	r18, r22
    4252:	ac 01       	movw	r20, r24
    4254:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    4258:	ef 91       	pop	r30
    425a:	ff 91       	pop	r31
    425c:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <__fp_powser>
    4260:	2f 91       	pop	r18
    4262:	3f 91       	pop	r19
    4264:	4f 91       	pop	r20
    4266:	5f 91       	pop	r21
    4268:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__mulsf3>

0000426c <__fp_pscA>:
    426c:	00 24       	eor	r0, r0
    426e:	0a 94       	dec	r0
    4270:	16 16       	cp	r1, r22
    4272:	17 06       	cpc	r1, r23
    4274:	18 06       	cpc	r1, r24
    4276:	09 06       	cpc	r0, r25
    4278:	08 95       	ret

0000427a <__fp_pscB>:
    427a:	00 24       	eor	r0, r0
    427c:	0a 94       	dec	r0
    427e:	12 16       	cp	r1, r18
    4280:	13 06       	cpc	r1, r19
    4282:	14 06       	cpc	r1, r20
    4284:	05 06       	cpc	r0, r21
    4286:	08 95       	ret
    4288:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__fp_nan>

0000428c <__fp_rempio2>:
    428c:	0e 94 9c 21 	call	0x4338	; 0x4338 <__fp_splitA>
    4290:	d8 f3       	brcs	.-10     	; 0x4288 <__fp_pscB+0xe>
    4292:	e8 94       	clt
    4294:	e0 e0       	ldi	r30, 0x00	; 0
    4296:	bb 27       	eor	r27, r27
    4298:	9f 57       	subi	r25, 0x7F	; 127
    429a:	f0 f0       	brcs	.+60     	; 0x42d8 <__fp_rempio2+0x4c>
    429c:	2a ed       	ldi	r18, 0xDA	; 218
    429e:	3f e0       	ldi	r19, 0x0F	; 15
    42a0:	49 ec       	ldi	r20, 0xC9	; 201
    42a2:	06 c0       	rjmp	.+12     	; 0x42b0 <__fp_rempio2+0x24>
    42a4:	ee 0f       	add	r30, r30
    42a6:	bb 0f       	add	r27, r27
    42a8:	66 1f       	adc	r22, r22
    42aa:	77 1f       	adc	r23, r23
    42ac:	88 1f       	adc	r24, r24
    42ae:	28 f0       	brcs	.+10     	; 0x42ba <__fp_rempio2+0x2e>
    42b0:	b2 3a       	cpi	r27, 0xA2	; 162
    42b2:	62 07       	cpc	r22, r18
    42b4:	73 07       	cpc	r23, r19
    42b6:	84 07       	cpc	r24, r20
    42b8:	28 f0       	brcs	.+10     	; 0x42c4 <__fp_rempio2+0x38>
    42ba:	b2 5a       	subi	r27, 0xA2	; 162
    42bc:	62 0b       	sbc	r22, r18
    42be:	73 0b       	sbc	r23, r19
    42c0:	84 0b       	sbc	r24, r20
    42c2:	e3 95       	inc	r30
    42c4:	9a 95       	dec	r25
    42c6:	72 f7       	brpl	.-36     	; 0x42a4 <__fp_rempio2+0x18>
    42c8:	80 38       	cpi	r24, 0x80	; 128
    42ca:	30 f4       	brcc	.+12     	; 0x42d8 <__fp_rempio2+0x4c>
    42cc:	9a 95       	dec	r25
    42ce:	bb 0f       	add	r27, r27
    42d0:	66 1f       	adc	r22, r22
    42d2:	77 1f       	adc	r23, r23
    42d4:	88 1f       	adc	r24, r24
    42d6:	d2 f7       	brpl	.-12     	; 0x42cc <__fp_rempio2+0x40>
    42d8:	90 48       	sbci	r25, 0x80	; 128
    42da:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__fp_mpack_finite>

000042de <__fp_round>:
    42de:	09 2e       	mov	r0, r25
    42e0:	03 94       	inc	r0
    42e2:	00 0c       	add	r0, r0
    42e4:	11 f4       	brne	.+4      	; 0x42ea <__fp_round+0xc>
    42e6:	88 23       	and	r24, r24
    42e8:	52 f0       	brmi	.+20     	; 0x42fe <__fp_round+0x20>
    42ea:	bb 0f       	add	r27, r27
    42ec:	40 f4       	brcc	.+16     	; 0x42fe <__fp_round+0x20>
    42ee:	bf 2b       	or	r27, r31
    42f0:	11 f4       	brne	.+4      	; 0x42f6 <__fp_round+0x18>
    42f2:	60 ff       	sbrs	r22, 0
    42f4:	04 c0       	rjmp	.+8      	; 0x42fe <__fp_round+0x20>
    42f6:	6f 5f       	subi	r22, 0xFF	; 255
    42f8:	7f 4f       	sbci	r23, 0xFF	; 255
    42fa:	8f 4f       	sbci	r24, 0xFF	; 255
    42fc:	9f 4f       	sbci	r25, 0xFF	; 255
    42fe:	08 95       	ret

00004300 <__fp_sinus>:
    4300:	ef 93       	push	r30
    4302:	e0 ff       	sbrs	r30, 0
    4304:	07 c0       	rjmp	.+14     	; 0x4314 <__fp_sinus+0x14>
    4306:	a2 ea       	ldi	r26, 0xA2	; 162
    4308:	2a ed       	ldi	r18, 0xDA	; 218
    430a:	3f e0       	ldi	r19, 0x0F	; 15
    430c:	49 ec       	ldi	r20, 0xC9	; 201
    430e:	5f eb       	ldi	r21, 0xBF	; 191
    4310:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__addsf3x>
    4314:	0e 94 6f 21 	call	0x42de	; 0x42de <__fp_round>
    4318:	0f 90       	pop	r0
    431a:	03 94       	inc	r0
    431c:	01 fc       	sbrc	r0, 1
    431e:	90 58       	subi	r25, 0x80	; 128
    4320:	e5 ee       	ldi	r30, 0xE5	; 229
    4322:	f0 e0       	ldi	r31, 0x00	; 0
    4324:	0c 94 22 21 	jmp	0x4244	; 0x4244 <__fp_powsodd>

00004328 <__fp_split3>:
    4328:	57 fd       	sbrc	r21, 7
    432a:	90 58       	subi	r25, 0x80	; 128
    432c:	44 0f       	add	r20, r20
    432e:	55 1f       	adc	r21, r21
    4330:	59 f0       	breq	.+22     	; 0x4348 <__fp_splitA+0x10>
    4332:	5f 3f       	cpi	r21, 0xFF	; 255
    4334:	71 f0       	breq	.+28     	; 0x4352 <__fp_splitA+0x1a>
    4336:	47 95       	ror	r20

00004338 <__fp_splitA>:
    4338:	88 0f       	add	r24, r24
    433a:	97 fb       	bst	r25, 7
    433c:	99 1f       	adc	r25, r25
    433e:	61 f0       	breq	.+24     	; 0x4358 <__fp_splitA+0x20>
    4340:	9f 3f       	cpi	r25, 0xFF	; 255
    4342:	79 f0       	breq	.+30     	; 0x4362 <__fp_splitA+0x2a>
    4344:	87 95       	ror	r24
    4346:	08 95       	ret
    4348:	12 16       	cp	r1, r18
    434a:	13 06       	cpc	r1, r19
    434c:	14 06       	cpc	r1, r20
    434e:	55 1f       	adc	r21, r21
    4350:	f2 cf       	rjmp	.-28     	; 0x4336 <__fp_split3+0xe>
    4352:	46 95       	lsr	r20
    4354:	f1 df       	rcall	.-30     	; 0x4338 <__fp_splitA>
    4356:	08 c0       	rjmp	.+16     	; 0x4368 <__fp_splitA+0x30>
    4358:	16 16       	cp	r1, r22
    435a:	17 06       	cpc	r1, r23
    435c:	18 06       	cpc	r1, r24
    435e:	99 1f       	adc	r25, r25
    4360:	f1 cf       	rjmp	.-30     	; 0x4344 <__fp_splitA+0xc>
    4362:	86 95       	lsr	r24
    4364:	71 05       	cpc	r23, r1
    4366:	61 05       	cpc	r22, r1
    4368:	08 94       	sec
    436a:	08 95       	ret

0000436c <__fp_trunc>:
    436c:	0e 94 9c 21 	call	0x4338	; 0x4338 <__fp_splitA>
    4370:	a0 f0       	brcs	.+40     	; 0x439a <__fp_trunc+0x2e>
    4372:	be e7       	ldi	r27, 0x7E	; 126
    4374:	b9 17       	cp	r27, r25
    4376:	88 f4       	brcc	.+34     	; 0x439a <__fp_trunc+0x2e>
    4378:	bb 27       	eor	r27, r27
    437a:	9f 38       	cpi	r25, 0x8F	; 143
    437c:	60 f4       	brcc	.+24     	; 0x4396 <__fp_trunc+0x2a>
    437e:	16 16       	cp	r1, r22
    4380:	b1 1d       	adc	r27, r1
    4382:	67 2f       	mov	r22, r23
    4384:	78 2f       	mov	r23, r24
    4386:	88 27       	eor	r24, r24
    4388:	98 5f       	subi	r25, 0xF8	; 248
    438a:	f7 cf       	rjmp	.-18     	; 0x437a <__fp_trunc+0xe>
    438c:	86 95       	lsr	r24
    438e:	77 95       	ror	r23
    4390:	67 95       	ror	r22
    4392:	b1 1d       	adc	r27, r1
    4394:	93 95       	inc	r25
    4396:	96 39       	cpi	r25, 0x96	; 150
    4398:	c8 f3       	brcs	.-14     	; 0x438c <__fp_trunc+0x20>
    439a:	08 95       	ret

0000439c <__fp_zero>:
    439c:	e8 94       	clt

0000439e <__fp_szero>:
    439e:	bb 27       	eor	r27, r27
    43a0:	66 27       	eor	r22, r22
    43a2:	77 27       	eor	r23, r23
    43a4:	cb 01       	movw	r24, r22
    43a6:	97 f9       	bld	r25, 7
    43a8:	08 95       	ret

000043aa <__gesf2>:
    43aa:	0e 94 a5 20 	call	0x414a	; 0x414a <__fp_cmp>
    43ae:	08 f4       	brcc	.+2      	; 0x43b2 <__gesf2+0x8>
    43b0:	8f ef       	ldi	r24, 0xFF	; 255
    43b2:	08 95       	ret

000043b4 <inverse>:
    43b4:	9b 01       	movw	r18, r22
    43b6:	ac 01       	movw	r20, r24
    43b8:	60 e0       	ldi	r22, 0x00	; 0
    43ba:	70 e0       	ldi	r23, 0x00	; 0
    43bc:	80 e8       	ldi	r24, 0x80	; 128
    43be:	9f e3       	ldi	r25, 0x3F	; 63
    43c0:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <__divsf3>
    43c4:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <__fp_inf>
    43c8:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__fp_mpack>

000043cc <ldexp>:
    43cc:	0e 94 9c 21 	call	0x4338	; 0x4338 <__fp_splitA>
    43d0:	d8 f3       	brcs	.-10     	; 0x43c8 <inverse+0x14>
    43d2:	99 23       	and	r25, r25
    43d4:	c9 f3       	breq	.-14     	; 0x43c8 <inverse+0x14>
    43d6:	94 0f       	add	r25, r20
    43d8:	51 1d       	adc	r21, r1
    43da:	a3 f3       	brvs	.-24     	; 0x43c4 <inverse+0x10>
    43dc:	91 50       	subi	r25, 0x01	; 1
    43de:	50 40       	sbci	r21, 0x00	; 0
    43e0:	94 f0       	brlt	.+36     	; 0x4406 <ldexp+0x3a>
    43e2:	59 f0       	breq	.+22     	; 0x43fa <ldexp+0x2e>
    43e4:	88 23       	and	r24, r24
    43e6:	32 f0       	brmi	.+12     	; 0x43f4 <ldexp+0x28>
    43e8:	66 0f       	add	r22, r22
    43ea:	77 1f       	adc	r23, r23
    43ec:	88 1f       	adc	r24, r24
    43ee:	91 50       	subi	r25, 0x01	; 1
    43f0:	50 40       	sbci	r21, 0x00	; 0
    43f2:	c1 f7       	brne	.-16     	; 0x43e4 <ldexp+0x18>
    43f4:	9e 3f       	cpi	r25, 0xFE	; 254
    43f6:	51 05       	cpc	r21, r1
    43f8:	2c f7       	brge	.-54     	; 0x43c4 <inverse+0x10>
    43fa:	88 0f       	add	r24, r24
    43fc:	91 1d       	adc	r25, r1
    43fe:	96 95       	lsr	r25
    4400:	87 95       	ror	r24
    4402:	97 f9       	bld	r25, 7
    4404:	08 95       	ret
    4406:	5f 3f       	cpi	r21, 0xFF	; 255
    4408:	ac f0       	brlt	.+42     	; 0x4434 <ldexp+0x68>
    440a:	98 3e       	cpi	r25, 0xE8	; 232
    440c:	9c f0       	brlt	.+38     	; 0x4434 <ldexp+0x68>
    440e:	bb 27       	eor	r27, r27
    4410:	86 95       	lsr	r24
    4412:	77 95       	ror	r23
    4414:	67 95       	ror	r22
    4416:	b7 95       	ror	r27
    4418:	08 f4       	brcc	.+2      	; 0x441c <ldexp+0x50>
    441a:	b1 60       	ori	r27, 0x01	; 1
    441c:	93 95       	inc	r25
    441e:	c1 f7       	brne	.-16     	; 0x4410 <ldexp+0x44>
    4420:	bb 0f       	add	r27, r27
    4422:	58 f7       	brcc	.-42     	; 0x43fa <ldexp+0x2e>
    4424:	11 f4       	brne	.+4      	; 0x442a <ldexp+0x5e>
    4426:	60 ff       	sbrs	r22, 0
    4428:	e8 cf       	rjmp	.-48     	; 0x43fa <ldexp+0x2e>
    442a:	6f 5f       	subi	r22, 0xFF	; 255
    442c:	7f 4f       	sbci	r23, 0xFF	; 255
    442e:	8f 4f       	sbci	r24, 0xFF	; 255
    4430:	9f 4f       	sbci	r25, 0xFF	; 255
    4432:	e3 cf       	rjmp	.-58     	; 0x43fa <ldexp+0x2e>
    4434:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__fp_szero>

00004438 <log10>:
    4438:	0e 94 2c 22 	call	0x4458	; 0x4458 <log>
    443c:	29 ed       	ldi	r18, 0xD9	; 217
    443e:	3b e5       	ldi	r19, 0x5B	; 91
    4440:	4e ed       	ldi	r20, 0xDE	; 222
    4442:	5e e3       	ldi	r21, 0x3E	; 62
    4444:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__mulsf3>
    4448:	16 f0       	brts	.+4      	; 0x444e <log10+0x16>
    444a:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__fp_mpack>
    444e:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__fp_nan>
    4452:	68 94       	set
    4454:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <__fp_inf>

00004458 <log>:
    4458:	0e 94 9c 21 	call	0x4338	; 0x4338 <__fp_splitA>
    445c:	a8 f3       	brcs	.-22     	; 0x4448 <log10+0x10>
    445e:	99 23       	and	r25, r25
    4460:	c1 f3       	breq	.-16     	; 0x4452 <log10+0x1a>
    4462:	ae f3       	brts	.-22     	; 0x444e <log10+0x16>
    4464:	df 93       	push	r29
    4466:	cf 93       	push	r28
    4468:	1f 93       	push	r17
    446a:	0f 93       	push	r16
    446c:	ff 92       	push	r15
    446e:	c9 2f       	mov	r28, r25
    4470:	dd 27       	eor	r29, r29
    4472:	88 23       	and	r24, r24
    4474:	2a f0       	brmi	.+10     	; 0x4480 <log+0x28>
    4476:	21 97       	sbiw	r28, 0x01	; 1
    4478:	66 0f       	add	r22, r22
    447a:	77 1f       	adc	r23, r23
    447c:	88 1f       	adc	r24, r24
    447e:	da f7       	brpl	.-10     	; 0x4476 <log+0x1e>
    4480:	20 e0       	ldi	r18, 0x00	; 0
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	40 e8       	ldi	r20, 0x80	; 128
    4486:	5f eb       	ldi	r21, 0xBF	; 191
    4488:	9f e3       	ldi	r25, 0x3F	; 63
    448a:	88 39       	cpi	r24, 0x98	; 152
    448c:	20 f0       	brcs	.+8      	; 0x4496 <log+0x3e>
    448e:	80 3e       	cpi	r24, 0xE0	; 224
    4490:	38 f0       	brcs	.+14     	; 0x44a0 <log+0x48>
    4492:	21 96       	adiw	r28, 0x01	; 1
    4494:	8f 77       	andi	r24, 0x7F	; 127
    4496:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    449a:	e3 e0       	ldi	r30, 0x03	; 3
    449c:	f1 e0       	ldi	r31, 0x01	; 1
    449e:	04 c0       	rjmp	.+8      	; 0x44a8 <log+0x50>
    44a0:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    44a4:	e0 e3       	ldi	r30, 0x30	; 48
    44a6:	f1 e0       	ldi	r31, 0x01	; 1
    44a8:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <__fp_powser>
    44ac:	8b 01       	movw	r16, r22
    44ae:	be 01       	movw	r22, r28
    44b0:	ec 01       	movw	r28, r24
    44b2:	fb 2e       	mov	r15, r27
    44b4:	6f 57       	subi	r22, 0x7F	; 127
    44b6:	71 09       	sbc	r23, r1
    44b8:	75 95       	asr	r23
    44ba:	77 1f       	adc	r23, r23
    44bc:	88 0b       	sbc	r24, r24
    44be:	99 0b       	sbc	r25, r25
    44c0:	0e 94 33 20 	call	0x4066	; 0x4066 <__floatsisf>
    44c4:	28 e1       	ldi	r18, 0x18	; 24
    44c6:	32 e7       	ldi	r19, 0x72	; 114
    44c8:	41 e3       	ldi	r20, 0x31	; 49
    44ca:	5f e3       	ldi	r21, 0x3F	; 63
    44cc:	0e 94 bb 22 	call	0x4576	; 0x4576 <__mulsf3x>
    44d0:	af 2d       	mov	r26, r15
    44d2:	98 01       	movw	r18, r16
    44d4:	ae 01       	movw	r20, r28
    44d6:	ff 90       	pop	r15
    44d8:	0f 91       	pop	r16
    44da:	1f 91       	pop	r17
    44dc:	cf 91       	pop	r28
    44de:	df 91       	pop	r29
    44e0:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__addsf3x>
    44e4:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__fp_round>

000044e8 <modf>:
    44e8:	fa 01       	movw	r30, r20
    44ea:	dc 01       	movw	r26, r24
    44ec:	aa 0f       	add	r26, r26
    44ee:	bb 1f       	adc	r27, r27
    44f0:	9b 01       	movw	r18, r22
    44f2:	ac 01       	movw	r20, r24
    44f4:	bf 57       	subi	r27, 0x7F	; 127
    44f6:	28 f4       	brcc	.+10     	; 0x4502 <modf+0x1a>
    44f8:	22 27       	eor	r18, r18
    44fa:	33 27       	eor	r19, r19
    44fc:	44 27       	eor	r20, r20
    44fe:	50 78       	andi	r21, 0x80	; 128
    4500:	20 c0       	rjmp	.+64     	; 0x4542 <modf+0x5a>
    4502:	b7 51       	subi	r27, 0x17	; 23
    4504:	90 f4       	brcc	.+36     	; 0x452a <modf+0x42>
    4506:	ab 2f       	mov	r26, r27
    4508:	00 24       	eor	r0, r0
    450a:	46 95       	lsr	r20
    450c:	37 95       	ror	r19
    450e:	27 95       	ror	r18
    4510:	01 1c       	adc	r0, r1
    4512:	a3 95       	inc	r26
    4514:	d2 f3       	brmi	.-12     	; 0x450a <modf+0x22>
    4516:	00 20       	and	r0, r0
    4518:	71 f0       	breq	.+28     	; 0x4536 <modf+0x4e>
    451a:	22 0f       	add	r18, r18
    451c:	33 1f       	adc	r19, r19
    451e:	44 1f       	adc	r20, r20
    4520:	b3 95       	inc	r27
    4522:	da f3       	brmi	.-10     	; 0x451a <modf+0x32>
    4524:	0e d0       	rcall	.+28     	; 0x4542 <modf+0x5a>
    4526:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__subsf3>
    452a:	61 30       	cpi	r22, 0x01	; 1
    452c:	71 05       	cpc	r23, r1
    452e:	a0 e8       	ldi	r26, 0x80	; 128
    4530:	8a 07       	cpc	r24, r26
    4532:	b9 46       	sbci	r27, 0x69	; 105
    4534:	30 f4       	brcc	.+12     	; 0x4542 <modf+0x5a>
    4536:	9b 01       	movw	r18, r22
    4538:	ac 01       	movw	r20, r24
    453a:	66 27       	eor	r22, r22
    453c:	77 27       	eor	r23, r23
    453e:	88 27       	eor	r24, r24
    4540:	90 78       	andi	r25, 0x80	; 128
    4542:	30 96       	adiw	r30, 0x00	; 0
    4544:	21 f0       	breq	.+8      	; 0x454e <modf+0x66>
    4546:	20 83       	st	Z, r18
    4548:	31 83       	std	Z+1, r19	; 0x01
    454a:	42 83       	std	Z+2, r20	; 0x02
    454c:	53 83       	std	Z+3, r21	; 0x03
    454e:	08 95       	ret

00004550 <__mulsf3>:
    4550:	0e 94 bb 22 	call	0x4576	; 0x4576 <__mulsf3x>
    4554:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__fp_round>
    4558:	0e 94 36 21 	call	0x426c	; 0x426c <__fp_pscA>
    455c:	38 f0       	brcs	.+14     	; 0x456c <__mulsf3+0x1c>
    455e:	0e 94 3d 21 	call	0x427a	; 0x427a <__fp_pscB>
    4562:	20 f0       	brcs	.+8      	; 0x456c <__mulsf3+0x1c>
    4564:	95 23       	and	r25, r21
    4566:	11 f0       	breq	.+4      	; 0x456c <__mulsf3+0x1c>
    4568:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <__fp_inf>
    456c:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__fp_nan>
    4570:	11 24       	eor	r1, r1
    4572:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__fp_szero>

00004576 <__mulsf3x>:
    4576:	0e 94 94 21 	call	0x4328	; 0x4328 <__fp_split3>
    457a:	70 f3       	brcs	.-36     	; 0x4558 <__mulsf3+0x8>

0000457c <__mulsf3_pse>:
    457c:	95 9f       	mul	r25, r21
    457e:	c1 f3       	breq	.-16     	; 0x4570 <__mulsf3+0x20>
    4580:	95 0f       	add	r25, r21
    4582:	50 e0       	ldi	r21, 0x00	; 0
    4584:	55 1f       	adc	r21, r21
    4586:	62 9f       	mul	r22, r18
    4588:	f0 01       	movw	r30, r0
    458a:	72 9f       	mul	r23, r18
    458c:	bb 27       	eor	r27, r27
    458e:	f0 0d       	add	r31, r0
    4590:	b1 1d       	adc	r27, r1
    4592:	63 9f       	mul	r22, r19
    4594:	aa 27       	eor	r26, r26
    4596:	f0 0d       	add	r31, r0
    4598:	b1 1d       	adc	r27, r1
    459a:	aa 1f       	adc	r26, r26
    459c:	64 9f       	mul	r22, r20
    459e:	66 27       	eor	r22, r22
    45a0:	b0 0d       	add	r27, r0
    45a2:	a1 1d       	adc	r26, r1
    45a4:	66 1f       	adc	r22, r22
    45a6:	82 9f       	mul	r24, r18
    45a8:	22 27       	eor	r18, r18
    45aa:	b0 0d       	add	r27, r0
    45ac:	a1 1d       	adc	r26, r1
    45ae:	62 1f       	adc	r22, r18
    45b0:	73 9f       	mul	r23, r19
    45b2:	b0 0d       	add	r27, r0
    45b4:	a1 1d       	adc	r26, r1
    45b6:	62 1f       	adc	r22, r18
    45b8:	83 9f       	mul	r24, r19
    45ba:	a0 0d       	add	r26, r0
    45bc:	61 1d       	adc	r22, r1
    45be:	22 1f       	adc	r18, r18
    45c0:	74 9f       	mul	r23, r20
    45c2:	33 27       	eor	r19, r19
    45c4:	a0 0d       	add	r26, r0
    45c6:	61 1d       	adc	r22, r1
    45c8:	23 1f       	adc	r18, r19
    45ca:	84 9f       	mul	r24, r20
    45cc:	60 0d       	add	r22, r0
    45ce:	21 1d       	adc	r18, r1
    45d0:	82 2f       	mov	r24, r18
    45d2:	76 2f       	mov	r23, r22
    45d4:	6a 2f       	mov	r22, r26
    45d6:	11 24       	eor	r1, r1
    45d8:	9f 57       	subi	r25, 0x7F	; 127
    45da:	50 40       	sbci	r21, 0x00	; 0
    45dc:	9a f0       	brmi	.+38     	; 0x4604 <__mulsf3_pse+0x88>
    45de:	f1 f0       	breq	.+60     	; 0x461c <__mulsf3_pse+0xa0>
    45e0:	88 23       	and	r24, r24
    45e2:	4a f0       	brmi	.+18     	; 0x45f6 <__mulsf3_pse+0x7a>
    45e4:	ee 0f       	add	r30, r30
    45e6:	ff 1f       	adc	r31, r31
    45e8:	bb 1f       	adc	r27, r27
    45ea:	66 1f       	adc	r22, r22
    45ec:	77 1f       	adc	r23, r23
    45ee:	88 1f       	adc	r24, r24
    45f0:	91 50       	subi	r25, 0x01	; 1
    45f2:	50 40       	sbci	r21, 0x00	; 0
    45f4:	a9 f7       	brne	.-22     	; 0x45e0 <__mulsf3_pse+0x64>
    45f6:	9e 3f       	cpi	r25, 0xFE	; 254
    45f8:	51 05       	cpc	r21, r1
    45fa:	80 f0       	brcs	.+32     	; 0x461c <__mulsf3_pse+0xa0>
    45fc:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <__fp_inf>
    4600:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__fp_szero>
    4604:	5f 3f       	cpi	r21, 0xFF	; 255
    4606:	e4 f3       	brlt	.-8      	; 0x4600 <__mulsf3_pse+0x84>
    4608:	98 3e       	cpi	r25, 0xE8	; 232
    460a:	d4 f3       	brlt	.-12     	; 0x4600 <__mulsf3_pse+0x84>
    460c:	86 95       	lsr	r24
    460e:	77 95       	ror	r23
    4610:	67 95       	ror	r22
    4612:	b7 95       	ror	r27
    4614:	f7 95       	ror	r31
    4616:	e7 95       	ror	r30
    4618:	9f 5f       	subi	r25, 0xFF	; 255
    461a:	c1 f7       	brne	.-16     	; 0x460c <__mulsf3_pse+0x90>
    461c:	fe 2b       	or	r31, r30
    461e:	88 0f       	add	r24, r24
    4620:	91 1d       	adc	r25, r1
    4622:	96 95       	lsr	r25
    4624:	87 95       	ror	r24
    4626:	97 f9       	bld	r25, 7
    4628:	08 95       	ret

0000462a <pow>:
    462a:	fa 01       	movw	r30, r20
    462c:	ee 0f       	add	r30, r30
    462e:	ff 1f       	adc	r31, r31
    4630:	30 96       	adiw	r30, 0x00	; 0
    4632:	21 05       	cpc	r18, r1
    4634:	31 05       	cpc	r19, r1
    4636:	a1 f1       	breq	.+104    	; 0x46a0 <pow+0x76>
    4638:	61 15       	cp	r22, r1
    463a:	71 05       	cpc	r23, r1
    463c:	61 f4       	brne	.+24     	; 0x4656 <pow+0x2c>
    463e:	80 38       	cpi	r24, 0x80	; 128
    4640:	bf e3       	ldi	r27, 0x3F	; 63
    4642:	9b 07       	cpc	r25, r27
    4644:	49 f1       	breq	.+82     	; 0x4698 <pow+0x6e>
    4646:	68 94       	set
    4648:	90 38       	cpi	r25, 0x80	; 128
    464a:	81 05       	cpc	r24, r1
    464c:	61 f0       	breq	.+24     	; 0x4666 <pow+0x3c>
    464e:	80 38       	cpi	r24, 0x80	; 128
    4650:	bf ef       	ldi	r27, 0xFF	; 255
    4652:	9b 07       	cpc	r25, r27
    4654:	41 f0       	breq	.+16     	; 0x4666 <pow+0x3c>
    4656:	99 23       	and	r25, r25
    4658:	4a f5       	brpl	.+82     	; 0x46ac <pow+0x82>
    465a:	ff 3f       	cpi	r31, 0xFF	; 255
    465c:	e1 05       	cpc	r30, r1
    465e:	31 05       	cpc	r19, r1
    4660:	21 05       	cpc	r18, r1
    4662:	19 f1       	breq	.+70     	; 0x46aa <pow+0x80>
    4664:	e8 94       	clt
    4666:	08 94       	sec
    4668:	e7 95       	ror	r30
    466a:	d9 01       	movw	r26, r18
    466c:	aa 23       	and	r26, r26
    466e:	29 f4       	brne	.+10     	; 0x467a <pow+0x50>
    4670:	ab 2f       	mov	r26, r27
    4672:	be 2f       	mov	r27, r30
    4674:	f8 5f       	subi	r31, 0xF8	; 248
    4676:	d0 f3       	brcs	.-12     	; 0x466c <pow+0x42>
    4678:	10 c0       	rjmp	.+32     	; 0x469a <pow+0x70>
    467a:	ff 5f       	subi	r31, 0xFF	; 255
    467c:	70 f4       	brcc	.+28     	; 0x469a <pow+0x70>
    467e:	a6 95       	lsr	r26
    4680:	e0 f7       	brcc	.-8      	; 0x467a <pow+0x50>
    4682:	f7 39       	cpi	r31, 0x97	; 151
    4684:	50 f0       	brcs	.+20     	; 0x469a <pow+0x70>
    4686:	19 f0       	breq	.+6      	; 0x468e <pow+0x64>
    4688:	ff 3a       	cpi	r31, 0xAF	; 175
    468a:	38 f4       	brcc	.+14     	; 0x469a <pow+0x70>
    468c:	9f 77       	andi	r25, 0x7F	; 127
    468e:	9f 93       	push	r25
    4690:	0d d0       	rcall	.+26     	; 0x46ac <pow+0x82>
    4692:	0f 90       	pop	r0
    4694:	07 fc       	sbrc	r0, 7
    4696:	90 58       	subi	r25, 0x80	; 128
    4698:	08 95       	ret
    469a:	46 f0       	brts	.+16     	; 0x46ac <pow+0x82>
    469c:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__fp_nan>
    46a0:	60 e0       	ldi	r22, 0x00	; 0
    46a2:	70 e0       	ldi	r23, 0x00	; 0
    46a4:	80 e8       	ldi	r24, 0x80	; 128
    46a6:	9f e3       	ldi	r25, 0x3F	; 63
    46a8:	08 95       	ret
    46aa:	4f e7       	ldi	r20, 0x7F	; 127
    46ac:	9f 77       	andi	r25, 0x7F	; 127
    46ae:	5f 93       	push	r21
    46b0:	4f 93       	push	r20
    46b2:	3f 93       	push	r19
    46b4:	2f 93       	push	r18
    46b6:	0e 94 2c 22 	call	0x4458	; 0x4458 <log>
    46ba:	2f 91       	pop	r18
    46bc:	3f 91       	pop	r19
    46be:	4f 91       	pop	r20
    46c0:	5f 91       	pop	r21
    46c2:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    46c6:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <exp>

000046ca <round>:
    46ca:	0e 94 9c 21 	call	0x4338	; 0x4338 <__fp_splitA>
    46ce:	e8 f0       	brcs	.+58     	; 0x470a <round+0x40>
    46d0:	9e 37       	cpi	r25, 0x7E	; 126
    46d2:	e8 f0       	brcs	.+58     	; 0x470e <round+0x44>
    46d4:	96 39       	cpi	r25, 0x96	; 150
    46d6:	b8 f4       	brcc	.+46     	; 0x4706 <round+0x3c>
    46d8:	9e 38       	cpi	r25, 0x8E	; 142
    46da:	48 f4       	brcc	.+18     	; 0x46ee <round+0x24>
    46dc:	67 2f       	mov	r22, r23
    46de:	78 2f       	mov	r23, r24
    46e0:	88 27       	eor	r24, r24
    46e2:	98 5f       	subi	r25, 0xF8	; 248
    46e4:	f9 cf       	rjmp	.-14     	; 0x46d8 <round+0xe>
    46e6:	86 95       	lsr	r24
    46e8:	77 95       	ror	r23
    46ea:	67 95       	ror	r22
    46ec:	93 95       	inc	r25
    46ee:	95 39       	cpi	r25, 0x95	; 149
    46f0:	d0 f3       	brcs	.-12     	; 0x46e6 <round+0x1c>
    46f2:	b6 2f       	mov	r27, r22
    46f4:	b1 70       	andi	r27, 0x01	; 1
    46f6:	6b 0f       	add	r22, r27
    46f8:	71 1d       	adc	r23, r1
    46fa:	81 1d       	adc	r24, r1
    46fc:	20 f4       	brcc	.+8      	; 0x4706 <round+0x3c>
    46fe:	87 95       	ror	r24
    4700:	77 95       	ror	r23
    4702:	67 95       	ror	r22
    4704:	93 95       	inc	r25
    4706:	0c 94 cf 20 	jmp	0x419e	; 0x419e <__fp_mintl>
    470a:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__fp_mpack>
    470e:	0c 94 cf 21 	jmp	0x439e	; 0x439e <__fp_szero>

00004712 <sinh>:
    4712:	9f 93       	push	r25
    4714:	9f 77       	andi	r25, 0x7F	; 127
    4716:	fe e3       	ldi	r31, 0x3E	; 62
    4718:	80 3a       	cpi	r24, 0xA0	; 160
    471a:	9f 07       	cpc	r25, r31
    471c:	28 f4       	brcc	.+10     	; 0x4728 <sinh+0x16>
    471e:	ed e5       	ldi	r30, 0x5D	; 93
    4720:	f1 e0       	ldi	r31, 0x01	; 1
    4722:	0e 94 22 21 	call	0x4244	; 0x4244 <__fp_powsodd>
    4726:	17 c0       	rjmp	.+46     	; 0x4756 <sinh+0x44>
    4728:	90 68       	ori	r25, 0x80	; 128
    472a:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <exp>
    472e:	4f ef       	ldi	r20, 0xFF	; 255
    4730:	5f ef       	ldi	r21, 0xFF	; 255
    4732:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ldexp>
    4736:	9f 93       	push	r25
    4738:	8f 93       	push	r24
    473a:	7f 93       	push	r23
    473c:	6f 93       	push	r22
    473e:	42 e0       	ldi	r20, 0x02	; 2
    4740:	50 e0       	ldi	r21, 0x00	; 0
    4742:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ldexp>
    4746:	0e 94 da 21 	call	0x43b4	; 0x43b4 <inverse>
    474a:	2f 91       	pop	r18
    474c:	3f 91       	pop	r19
    474e:	4f 91       	pop	r20
    4750:	5f 91       	pop	r21
    4752:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    4756:	0f 90       	pop	r0
    4758:	07 fc       	sbrc	r0, 7
    475a:	90 68       	ori	r25, 0x80	; 128
    475c:	08 95       	ret

0000475e <sin>:
    475e:	9f 93       	push	r25
    4760:	0e 94 46 21 	call	0x428c	; 0x428c <__fp_rempio2>
    4764:	0f 90       	pop	r0
    4766:	07 fc       	sbrc	r0, 7
    4768:	ee 5f       	subi	r30, 0xFE	; 254
    476a:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__fp_sinus>
    476e:	19 f4       	brne	.+6      	; 0x4776 <sin+0x18>
    4770:	16 f4       	brtc	.+4      	; 0x4776 <sin+0x18>
    4772:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__fp_nan>
    4776:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__fp_mpack>

0000477a <sqrt>:
    477a:	0e 94 9c 21 	call	0x4338	; 0x4338 <__fp_splitA>
    477e:	b8 f3       	brcs	.-18     	; 0x476e <sin+0x10>
    4780:	99 23       	and	r25, r25
    4782:	c9 f3       	breq	.-14     	; 0x4776 <sin+0x18>
    4784:	b6 f3       	brts	.-20     	; 0x4772 <sin+0x14>
    4786:	9f 57       	subi	r25, 0x7F	; 127
    4788:	55 0b       	sbc	r21, r21
    478a:	87 ff       	sbrs	r24, 7
    478c:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <__fp_norm2>
    4790:	00 24       	eor	r0, r0
    4792:	a0 e6       	ldi	r26, 0x60	; 96
    4794:	40 ea       	ldi	r20, 0xA0	; 160
    4796:	90 01       	movw	r18, r0
    4798:	80 58       	subi	r24, 0x80	; 128
    479a:	56 95       	lsr	r21
    479c:	97 95       	ror	r25
    479e:	28 f4       	brcc	.+10     	; 0x47aa <sqrt+0x30>
    47a0:	80 5c       	subi	r24, 0xC0	; 192
    47a2:	66 0f       	add	r22, r22
    47a4:	77 1f       	adc	r23, r23
    47a6:	88 1f       	adc	r24, r24
    47a8:	20 f0       	brcs	.+8      	; 0x47b2 <sqrt+0x38>
    47aa:	26 17       	cp	r18, r22
    47ac:	37 07       	cpc	r19, r23
    47ae:	48 07       	cpc	r20, r24
    47b0:	30 f4       	brcc	.+12     	; 0x47be <sqrt+0x44>
    47b2:	62 1b       	sub	r22, r18
    47b4:	73 0b       	sbc	r23, r19
    47b6:	84 0b       	sbc	r24, r20
    47b8:	20 29       	or	r18, r0
    47ba:	31 29       	or	r19, r1
    47bc:	4a 2b       	or	r20, r26
    47be:	a6 95       	lsr	r26
    47c0:	17 94       	ror	r1
    47c2:	07 94       	ror	r0
    47c4:	20 25       	eor	r18, r0
    47c6:	31 25       	eor	r19, r1
    47c8:	4a 27       	eor	r20, r26
    47ca:	58 f7       	brcc	.-42     	; 0x47a2 <sqrt+0x28>
    47cc:	66 0f       	add	r22, r22
    47ce:	77 1f       	adc	r23, r23
    47d0:	88 1f       	adc	r24, r24
    47d2:	20 f0       	brcs	.+8      	; 0x47dc <sqrt+0x62>
    47d4:	26 17       	cp	r18, r22
    47d6:	37 07       	cpc	r19, r23
    47d8:	48 07       	cpc	r20, r24
    47da:	30 f4       	brcc	.+12     	; 0x47e8 <sqrt+0x6e>
    47dc:	62 0b       	sbc	r22, r18
    47de:	73 0b       	sbc	r23, r19
    47e0:	84 0b       	sbc	r24, r20
    47e2:	20 0d       	add	r18, r0
    47e4:	31 1d       	adc	r19, r1
    47e6:	41 1d       	adc	r20, r1
    47e8:	a0 95       	com	r26
    47ea:	81 f7       	brne	.-32     	; 0x47cc <sqrt+0x52>
    47ec:	b9 01       	movw	r22, r18
    47ee:	84 2f       	mov	r24, r20
    47f0:	91 58       	subi	r25, 0x81	; 129
    47f2:	88 0f       	add	r24, r24
    47f4:	96 95       	lsr	r25
    47f6:	87 95       	ror	r24
    47f8:	08 95       	ret

000047fa <square>:
    47fa:	9b 01       	movw	r18, r22
    47fc:	ac 01       	movw	r20, r24
    47fe:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__mulsf3>

00004802 <tanh>:
    4802:	9f 93       	push	r25
    4804:	9f 77       	andi	r25, 0x7F	; 127
    4806:	fe e3       	ldi	r31, 0x3E	; 62
    4808:	80 31       	cpi	r24, 0x10	; 16
    480a:	9f 07       	cpc	r25, r31
    480c:	28 f4       	brcc	.+10     	; 0x4818 <tanh+0x16>
    480e:	ec e6       	ldi	r30, 0x6C	; 108
    4810:	f1 e0       	ldi	r31, 0x01	; 1
    4812:	0e 94 22 21 	call	0x4244	; 0x4244 <__fp_powsodd>
    4816:	25 c0       	rjmp	.+74     	; 0x4862 <tanh+0x60>
    4818:	90 68       	ori	r25, 0x80	; 128
    481a:	41 e0       	ldi	r20, 0x01	; 1
    481c:	50 e0       	ldi	r21, 0x00	; 0
    481e:	0e 94 e6 21 	call	0x43cc	; 0x43cc <ldexp>
    4822:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <exp>
    4826:	9f 93       	push	r25
    4828:	8f 93       	push	r24
    482a:	7f 93       	push	r23
    482c:	6f 93       	push	r22
    482e:	20 e0       	ldi	r18, 0x00	; 0
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	40 e8       	ldi	r20, 0x80	; 128
    4834:	5f e3       	ldi	r21, 0x3F	; 63
    4836:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__addsf3>
    483a:	2f 91       	pop	r18
    483c:	3f 91       	pop	r19
    483e:	4f 91       	pop	r20
    4840:	5f 91       	pop	r21
    4842:	9f 93       	push	r25
    4844:	8f 93       	push	r24
    4846:	7f 93       	push	r23
    4848:	6f 93       	push	r22
    484a:	60 e0       	ldi	r22, 0x00	; 0
    484c:	70 e0       	ldi	r23, 0x00	; 0
    484e:	80 e8       	ldi	r24, 0x80	; 128
    4850:	9f e3       	ldi	r25, 0x3F	; 63
    4852:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__subsf3>
    4856:	2f 91       	pop	r18
    4858:	3f 91       	pop	r19
    485a:	4f 91       	pop	r20
    485c:	5f 91       	pop	r21
    485e:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3>
    4862:	0f 90       	pop	r0
    4864:	07 fc       	sbrc	r0, 7
    4866:	90 58       	subi	r25, 0x80	; 128
    4868:	08 95       	ret

0000486a <tan>:
    486a:	df 93       	push	r29
    486c:	d9 2f       	mov	r29, r25
    486e:	0e 94 46 21 	call	0x428c	; 0x428c <__fp_rempio2>
    4872:	e6 95       	lsr	r30
    4874:	d7 95       	ror	r29
    4876:	2a ed       	ldi	r18, 0xDA	; 218
    4878:	3f e0       	ldi	r19, 0x0F	; 15
    487a:	49 e4       	ldi	r20, 0x49	; 73
    487c:	5f e3       	ldi	r21, 0x3F	; 63
    487e:	b3 3a       	cpi	r27, 0xA3	; 163
    4880:	62 07       	cpc	r22, r18
    4882:	73 07       	cpc	r23, r19
    4884:	84 07       	cpc	r24, r20
    4886:	95 07       	cpc	r25, r21
    4888:	d7 95       	ror	r29
    488a:	3a f0       	brmi	.+14     	; 0x489a <tan+0x30>
    488c:	a2 ea       	ldi	r26, 0xA2	; 162
    488e:	49 ec       	ldi	r20, 0xC9	; 201
    4890:	90 68       	ori	r25, 0x80	; 128
    4892:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__addsf3x>
    4896:	0e 94 6f 21 	call	0x42de	; 0x42de <__fp_round>
    489a:	eb e7       	ldi	r30, 0x7B	; 123
    489c:	f1 e0       	ldi	r31, 0x01	; 1
    489e:	0e 94 22 21 	call	0x4244	; 0x4244 <__fp_powsodd>
    48a2:	dd 0f       	add	r29, r29
    48a4:	13 f0       	brvs	.+4      	; 0x48aa <tan+0x40>
    48a6:	0e 94 da 21 	call	0x43b4	; 0x43b4 <inverse>
    48aa:	dd 0f       	add	r29, r29
    48ac:	0b f4       	brvc	.+2      	; 0x48b0 <tan+0x46>
    48ae:	90 58       	subi	r25, 0x80	; 128
    48b0:	df 91       	pop	r29
    48b2:	08 95       	ret

000048b4 <__fp_norm2>:
    48b4:	91 50       	subi	r25, 0x01	; 1
    48b6:	50 40       	sbci	r21, 0x00	; 0
    48b8:	66 0f       	add	r22, r22
    48ba:	77 1f       	adc	r23, r23
    48bc:	88 1f       	adc	r24, r24
    48be:	d2 f7       	brpl	.-12     	; 0x48b4 <__fp_norm2>
    48c0:	08 95       	ret

000048c2 <__tablejump2__>:
    48c2:	ee 0f       	add	r30, r30
    48c4:	ff 1f       	adc	r31, r31
    48c6:	05 90       	lpm	r0, Z+
    48c8:	f4 91       	lpm	r31, Z
    48ca:	e0 2d       	mov	r30, r0
    48cc:	09 94       	ijmp

000048ce <dtostrf>:
    48ce:	ef 92       	push	r14
    48d0:	0f 93       	push	r16
    48d2:	1f 93       	push	r17
    48d4:	cf 93       	push	r28
    48d6:	df 93       	push	r29
    48d8:	e8 01       	movw	r28, r16
    48da:	47 fd       	sbrc	r20, 7
    48dc:	02 c0       	rjmp	.+4      	; 0x48e2 <dtostrf+0x14>
    48de:	34 e0       	ldi	r19, 0x04	; 4
    48e0:	01 c0       	rjmp	.+2      	; 0x48e4 <dtostrf+0x16>
    48e2:	34 e1       	ldi	r19, 0x14	; 20
    48e4:	04 2e       	mov	r0, r20
    48e6:	00 0c       	add	r0, r0
    48e8:	55 0b       	sbc	r21, r21
    48ea:	57 ff       	sbrs	r21, 7
    48ec:	03 c0       	rjmp	.+6      	; 0x48f4 <dtostrf+0x26>
    48ee:	51 95       	neg	r21
    48f0:	41 95       	neg	r20
    48f2:	51 09       	sbc	r21, r1
    48f4:	e3 2e       	mov	r14, r19
    48f6:	02 2f       	mov	r16, r18
    48f8:	24 2f       	mov	r18, r20
    48fa:	ae 01       	movw	r20, r28
    48fc:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <dtoa_prf>
    4900:	ce 01       	movw	r24, r28
    4902:	df 91       	pop	r29
    4904:	cf 91       	pop	r28
    4906:	1f 91       	pop	r17
    4908:	0f 91       	pop	r16
    490a:	ef 90       	pop	r14
    490c:	08 95       	ret

0000490e <malloc>:
    490e:	0f 93       	push	r16
    4910:	1f 93       	push	r17
    4912:	cf 93       	push	r28
    4914:	df 93       	push	r29
    4916:	82 30       	cpi	r24, 0x02	; 2
    4918:	91 05       	cpc	r25, r1
    491a:	10 f4       	brcc	.+4      	; 0x4920 <malloc+0x12>
    491c:	82 e0       	ldi	r24, 0x02	; 2
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	e0 91 37 07 	lds	r30, 0x0737	; 0x800737 <__flp>
    4924:	f0 91 38 07 	lds	r31, 0x0738	; 0x800738 <__flp+0x1>
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	a0 e0       	ldi	r26, 0x00	; 0
    492e:	b0 e0       	ldi	r27, 0x00	; 0
    4930:	30 97       	sbiw	r30, 0x00	; 0
    4932:	19 f1       	breq	.+70     	; 0x497a <malloc+0x6c>
    4934:	40 81       	ld	r20, Z
    4936:	51 81       	ldd	r21, Z+1	; 0x01
    4938:	02 81       	ldd	r16, Z+2	; 0x02
    493a:	13 81       	ldd	r17, Z+3	; 0x03
    493c:	48 17       	cp	r20, r24
    493e:	59 07       	cpc	r21, r25
    4940:	c8 f0       	brcs	.+50     	; 0x4974 <malloc+0x66>
    4942:	84 17       	cp	r24, r20
    4944:	95 07       	cpc	r25, r21
    4946:	69 f4       	brne	.+26     	; 0x4962 <malloc+0x54>
    4948:	10 97       	sbiw	r26, 0x00	; 0
    494a:	31 f0       	breq	.+12     	; 0x4958 <malloc+0x4a>
    494c:	12 96       	adiw	r26, 0x02	; 2
    494e:	0c 93       	st	X, r16
    4950:	12 97       	sbiw	r26, 0x02	; 2
    4952:	13 96       	adiw	r26, 0x03	; 3
    4954:	1c 93       	st	X, r17
    4956:	27 c0       	rjmp	.+78     	; 0x49a6 <malloc+0x98>
    4958:	00 93 37 07 	sts	0x0737, r16	; 0x800737 <__flp>
    495c:	10 93 38 07 	sts	0x0738, r17	; 0x800738 <__flp+0x1>
    4960:	22 c0       	rjmp	.+68     	; 0x49a6 <malloc+0x98>
    4962:	21 15       	cp	r18, r1
    4964:	31 05       	cpc	r19, r1
    4966:	19 f0       	breq	.+6      	; 0x496e <malloc+0x60>
    4968:	42 17       	cp	r20, r18
    496a:	53 07       	cpc	r21, r19
    496c:	18 f4       	brcc	.+6      	; 0x4974 <malloc+0x66>
    496e:	9a 01       	movw	r18, r20
    4970:	bd 01       	movw	r22, r26
    4972:	ef 01       	movw	r28, r30
    4974:	df 01       	movw	r26, r30
    4976:	f8 01       	movw	r30, r16
    4978:	db cf       	rjmp	.-74     	; 0x4930 <malloc+0x22>
    497a:	21 15       	cp	r18, r1
    497c:	31 05       	cpc	r19, r1
    497e:	f9 f0       	breq	.+62     	; 0x49be <malloc+0xb0>
    4980:	28 1b       	sub	r18, r24
    4982:	39 0b       	sbc	r19, r25
    4984:	24 30       	cpi	r18, 0x04	; 4
    4986:	31 05       	cpc	r19, r1
    4988:	80 f4       	brcc	.+32     	; 0x49aa <malloc+0x9c>
    498a:	8a 81       	ldd	r24, Y+2	; 0x02
    498c:	9b 81       	ldd	r25, Y+3	; 0x03
    498e:	61 15       	cp	r22, r1
    4990:	71 05       	cpc	r23, r1
    4992:	21 f0       	breq	.+8      	; 0x499c <malloc+0x8e>
    4994:	fb 01       	movw	r30, r22
    4996:	93 83       	std	Z+3, r25	; 0x03
    4998:	82 83       	std	Z+2, r24	; 0x02
    499a:	04 c0       	rjmp	.+8      	; 0x49a4 <malloc+0x96>
    499c:	90 93 38 07 	sts	0x0738, r25	; 0x800738 <__flp+0x1>
    49a0:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <__flp>
    49a4:	fe 01       	movw	r30, r28
    49a6:	32 96       	adiw	r30, 0x02	; 2
    49a8:	44 c0       	rjmp	.+136    	; 0x4a32 <malloc+0x124>
    49aa:	fe 01       	movw	r30, r28
    49ac:	e2 0f       	add	r30, r18
    49ae:	f3 1f       	adc	r31, r19
    49b0:	81 93       	st	Z+, r24
    49b2:	91 93       	st	Z+, r25
    49b4:	22 50       	subi	r18, 0x02	; 2
    49b6:	31 09       	sbc	r19, r1
    49b8:	39 83       	std	Y+1, r19	; 0x01
    49ba:	28 83       	st	Y, r18
    49bc:	3a c0       	rjmp	.+116    	; 0x4a32 <malloc+0x124>
    49be:	20 91 35 07 	lds	r18, 0x0735	; 0x800735 <__brkval>
    49c2:	30 91 36 07 	lds	r19, 0x0736	; 0x800736 <__brkval+0x1>
    49c6:	23 2b       	or	r18, r19
    49c8:	41 f4       	brne	.+16     	; 0x49da <malloc+0xcc>
    49ca:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    49ce:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    49d2:	30 93 36 07 	sts	0x0736, r19	; 0x800736 <__brkval+0x1>
    49d6:	20 93 35 07 	sts	0x0735, r18	; 0x800735 <__brkval>
    49da:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    49de:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    49e2:	21 15       	cp	r18, r1
    49e4:	31 05       	cpc	r19, r1
    49e6:	41 f4       	brne	.+16     	; 0x49f8 <malloc+0xea>
    49e8:	2d b7       	in	r18, 0x3d	; 61
    49ea:	3e b7       	in	r19, 0x3e	; 62
    49ec:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    49f0:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    49f4:	24 1b       	sub	r18, r20
    49f6:	35 0b       	sbc	r19, r21
    49f8:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <__brkval>
    49fc:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <__brkval+0x1>
    4a00:	e2 17       	cp	r30, r18
    4a02:	f3 07       	cpc	r31, r19
    4a04:	a0 f4       	brcc	.+40     	; 0x4a2e <malloc+0x120>
    4a06:	2e 1b       	sub	r18, r30
    4a08:	3f 0b       	sbc	r19, r31
    4a0a:	28 17       	cp	r18, r24
    4a0c:	39 07       	cpc	r19, r25
    4a0e:	78 f0       	brcs	.+30     	; 0x4a2e <malloc+0x120>
    4a10:	ac 01       	movw	r20, r24
    4a12:	4e 5f       	subi	r20, 0xFE	; 254
    4a14:	5f 4f       	sbci	r21, 0xFF	; 255
    4a16:	24 17       	cp	r18, r20
    4a18:	35 07       	cpc	r19, r21
    4a1a:	48 f0       	brcs	.+18     	; 0x4a2e <malloc+0x120>
    4a1c:	4e 0f       	add	r20, r30
    4a1e:	5f 1f       	adc	r21, r31
    4a20:	50 93 36 07 	sts	0x0736, r21	; 0x800736 <__brkval+0x1>
    4a24:	40 93 35 07 	sts	0x0735, r20	; 0x800735 <__brkval>
    4a28:	81 93       	st	Z+, r24
    4a2a:	91 93       	st	Z+, r25
    4a2c:	02 c0       	rjmp	.+4      	; 0x4a32 <malloc+0x124>
    4a2e:	e0 e0       	ldi	r30, 0x00	; 0
    4a30:	f0 e0       	ldi	r31, 0x00	; 0
    4a32:	cf 01       	movw	r24, r30
    4a34:	df 91       	pop	r29
    4a36:	cf 91       	pop	r28
    4a38:	1f 91       	pop	r17
    4a3a:	0f 91       	pop	r16
    4a3c:	08 95       	ret

00004a3e <free>:
    4a3e:	cf 93       	push	r28
    4a40:	df 93       	push	r29
    4a42:	00 97       	sbiw	r24, 0x00	; 0
    4a44:	09 f4       	brne	.+2      	; 0x4a48 <free+0xa>
    4a46:	81 c0       	rjmp	.+258    	; 0x4b4a <free+0x10c>
    4a48:	fc 01       	movw	r30, r24
    4a4a:	32 97       	sbiw	r30, 0x02	; 2
    4a4c:	13 82       	std	Z+3, r1	; 0x03
    4a4e:	12 82       	std	Z+2, r1	; 0x02
    4a50:	a0 91 37 07 	lds	r26, 0x0737	; 0x800737 <__flp>
    4a54:	b0 91 38 07 	lds	r27, 0x0738	; 0x800738 <__flp+0x1>
    4a58:	10 97       	sbiw	r26, 0x00	; 0
    4a5a:	81 f4       	brne	.+32     	; 0x4a7c <free+0x3e>
    4a5c:	20 81       	ld	r18, Z
    4a5e:	31 81       	ldd	r19, Z+1	; 0x01
    4a60:	82 0f       	add	r24, r18
    4a62:	93 1f       	adc	r25, r19
    4a64:	20 91 35 07 	lds	r18, 0x0735	; 0x800735 <__brkval>
    4a68:	30 91 36 07 	lds	r19, 0x0736	; 0x800736 <__brkval+0x1>
    4a6c:	28 17       	cp	r18, r24
    4a6e:	39 07       	cpc	r19, r25
    4a70:	51 f5       	brne	.+84     	; 0x4ac6 <free+0x88>
    4a72:	f0 93 36 07 	sts	0x0736, r31	; 0x800736 <__brkval+0x1>
    4a76:	e0 93 35 07 	sts	0x0735, r30	; 0x800735 <__brkval>
    4a7a:	67 c0       	rjmp	.+206    	; 0x4b4a <free+0x10c>
    4a7c:	ed 01       	movw	r28, r26
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	ce 17       	cp	r28, r30
    4a84:	df 07       	cpc	r29, r31
    4a86:	40 f4       	brcc	.+16     	; 0x4a98 <free+0x5a>
    4a88:	4a 81       	ldd	r20, Y+2	; 0x02
    4a8a:	5b 81       	ldd	r21, Y+3	; 0x03
    4a8c:	9e 01       	movw	r18, r28
    4a8e:	41 15       	cp	r20, r1
    4a90:	51 05       	cpc	r21, r1
    4a92:	f1 f0       	breq	.+60     	; 0x4ad0 <free+0x92>
    4a94:	ea 01       	movw	r28, r20
    4a96:	f5 cf       	rjmp	.-22     	; 0x4a82 <free+0x44>
    4a98:	d3 83       	std	Z+3, r29	; 0x03
    4a9a:	c2 83       	std	Z+2, r28	; 0x02
    4a9c:	40 81       	ld	r20, Z
    4a9e:	51 81       	ldd	r21, Z+1	; 0x01
    4aa0:	84 0f       	add	r24, r20
    4aa2:	95 1f       	adc	r25, r21
    4aa4:	c8 17       	cp	r28, r24
    4aa6:	d9 07       	cpc	r29, r25
    4aa8:	59 f4       	brne	.+22     	; 0x4ac0 <free+0x82>
    4aaa:	88 81       	ld	r24, Y
    4aac:	99 81       	ldd	r25, Y+1	; 0x01
    4aae:	84 0f       	add	r24, r20
    4ab0:	95 1f       	adc	r25, r21
    4ab2:	02 96       	adiw	r24, 0x02	; 2
    4ab4:	91 83       	std	Z+1, r25	; 0x01
    4ab6:	80 83       	st	Z, r24
    4ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aba:	9b 81       	ldd	r25, Y+3	; 0x03
    4abc:	93 83       	std	Z+3, r25	; 0x03
    4abe:	82 83       	std	Z+2, r24	; 0x02
    4ac0:	21 15       	cp	r18, r1
    4ac2:	31 05       	cpc	r19, r1
    4ac4:	29 f4       	brne	.+10     	; 0x4ad0 <free+0x92>
    4ac6:	f0 93 38 07 	sts	0x0738, r31	; 0x800738 <__flp+0x1>
    4aca:	e0 93 37 07 	sts	0x0737, r30	; 0x800737 <__flp>
    4ace:	3d c0       	rjmp	.+122    	; 0x4b4a <free+0x10c>
    4ad0:	e9 01       	movw	r28, r18
    4ad2:	fb 83       	std	Y+3, r31	; 0x03
    4ad4:	ea 83       	std	Y+2, r30	; 0x02
    4ad6:	49 91       	ld	r20, Y+
    4ad8:	59 91       	ld	r21, Y+
    4ada:	c4 0f       	add	r28, r20
    4adc:	d5 1f       	adc	r29, r21
    4ade:	ec 17       	cp	r30, r28
    4ae0:	fd 07       	cpc	r31, r29
    4ae2:	61 f4       	brne	.+24     	; 0x4afc <free+0xbe>
    4ae4:	80 81       	ld	r24, Z
    4ae6:	91 81       	ldd	r25, Z+1	; 0x01
    4ae8:	84 0f       	add	r24, r20
    4aea:	95 1f       	adc	r25, r21
    4aec:	02 96       	adiw	r24, 0x02	; 2
    4aee:	e9 01       	movw	r28, r18
    4af0:	99 83       	std	Y+1, r25	; 0x01
    4af2:	88 83       	st	Y, r24
    4af4:	82 81       	ldd	r24, Z+2	; 0x02
    4af6:	93 81       	ldd	r25, Z+3	; 0x03
    4af8:	9b 83       	std	Y+3, r25	; 0x03
    4afa:	8a 83       	std	Y+2, r24	; 0x02
    4afc:	e0 e0       	ldi	r30, 0x00	; 0
    4afe:	f0 e0       	ldi	r31, 0x00	; 0
    4b00:	12 96       	adiw	r26, 0x02	; 2
    4b02:	8d 91       	ld	r24, X+
    4b04:	9c 91       	ld	r25, X
    4b06:	13 97       	sbiw	r26, 0x03	; 3
    4b08:	00 97       	sbiw	r24, 0x00	; 0
    4b0a:	19 f0       	breq	.+6      	; 0x4b12 <free+0xd4>
    4b0c:	fd 01       	movw	r30, r26
    4b0e:	dc 01       	movw	r26, r24
    4b10:	f7 cf       	rjmp	.-18     	; 0x4b00 <free+0xc2>
    4b12:	8d 91       	ld	r24, X+
    4b14:	9c 91       	ld	r25, X
    4b16:	11 97       	sbiw	r26, 0x01	; 1
    4b18:	9d 01       	movw	r18, r26
    4b1a:	2e 5f       	subi	r18, 0xFE	; 254
    4b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b1e:	82 0f       	add	r24, r18
    4b20:	93 1f       	adc	r25, r19
    4b22:	20 91 35 07 	lds	r18, 0x0735	; 0x800735 <__brkval>
    4b26:	30 91 36 07 	lds	r19, 0x0736	; 0x800736 <__brkval+0x1>
    4b2a:	28 17       	cp	r18, r24
    4b2c:	39 07       	cpc	r19, r25
    4b2e:	69 f4       	brne	.+26     	; 0x4b4a <free+0x10c>
    4b30:	30 97       	sbiw	r30, 0x00	; 0
    4b32:	29 f4       	brne	.+10     	; 0x4b3e <free+0x100>
    4b34:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <__flp+0x1>
    4b38:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <__flp>
    4b3c:	02 c0       	rjmp	.+4      	; 0x4b42 <free+0x104>
    4b3e:	13 82       	std	Z+3, r1	; 0x03
    4b40:	12 82       	std	Z+2, r1	; 0x02
    4b42:	b0 93 36 07 	sts	0x0736, r27	; 0x800736 <__brkval+0x1>
    4b46:	a0 93 35 07 	sts	0x0735, r26	; 0x800735 <__brkval>
    4b4a:	df 91       	pop	r29
    4b4c:	cf 91       	pop	r28
    4b4e:	08 95       	ret

00004b50 <atof>:
    4b50:	66 27       	eor	r22, r22
    4b52:	77 27       	eor	r23, r23
    4b54:	0c 94 48 27 	jmp	0x4e90	; 0x4e90 <strtod>

00004b58 <isupper>:
    4b58:	85 fd       	sbrc	r24, 5
    4b5a:	0c 94 6e 29 	jmp	0x52dc	; 0x52dc <__ctype_isfalse>

00004b5e <isalpha>:
    4b5e:	80 62       	ori	r24, 0x20	; 32

00004b60 <islower>:
    4b60:	91 11       	cpse	r25, r1
    4b62:	0c 94 6e 29 	jmp	0x52dc	; 0x52dc <__ctype_isfalse>
    4b66:	81 56       	subi	r24, 0x61	; 97
    4b68:	8a 51       	subi	r24, 0x1A	; 26
    4b6a:	d8 f7       	brcc	.-10     	; 0x4b62 <islower+0x2>
    4b6c:	08 95       	ret

00004b6e <isspace>:
    4b6e:	91 11       	cpse	r25, r1
    4b70:	0c 94 6e 29 	jmp	0x52dc	; 0x52dc <__ctype_isfalse>
    4b74:	80 32       	cpi	r24, 0x20	; 32
    4b76:	19 f0       	breq	.+6      	; 0x4b7e <isspace+0x10>
    4b78:	89 50       	subi	r24, 0x09	; 9
    4b7a:	85 50       	subi	r24, 0x05	; 5
    4b7c:	c8 f7       	brcc	.-14     	; 0x4b70 <isspace+0x2>
    4b7e:	08 95       	ret

00004b80 <toupper>:
    4b80:	91 11       	cpse	r25, r1
    4b82:	08 95       	ret
    4b84:	81 56       	subi	r24, 0x61	; 97
    4b86:	8a 51       	subi	r24, 0x1A	; 26
    4b88:	08 f4       	brcc	.+2      	; 0x4b8c <toupper+0xc>
    4b8a:	80 52       	subi	r24, 0x20	; 32
    4b8c:	85 58       	subi	r24, 0x85	; 133
    4b8e:	08 95       	ret

00004b90 <strcat>:
    4b90:	fb 01       	movw	r30, r22
    4b92:	dc 01       	movw	r26, r24
    4b94:	0d 90       	ld	r0, X+
    4b96:	00 20       	and	r0, r0
    4b98:	e9 f7       	brne	.-6      	; 0x4b94 <strcat+0x4>
    4b9a:	11 97       	sbiw	r26, 0x01	; 1
    4b9c:	01 90       	ld	r0, Z+
    4b9e:	0d 92       	st	X+, r0
    4ba0:	00 20       	and	r0, r0
    4ba2:	e1 f7       	brne	.-8      	; 0x4b9c <strcat+0xc>
    4ba4:	08 95       	ret

00004ba6 <strchr>:
    4ba6:	fc 01       	movw	r30, r24
    4ba8:	81 91       	ld	r24, Z+
    4baa:	86 17       	cp	r24, r22
    4bac:	21 f0       	breq	.+8      	; 0x4bb6 <strchr+0x10>
    4bae:	88 23       	and	r24, r24
    4bb0:	d9 f7       	brne	.-10     	; 0x4ba8 <strchr+0x2>
    4bb2:	99 27       	eor	r25, r25
    4bb4:	08 95       	ret
    4bb6:	31 97       	sbiw	r30, 0x01	; 1
    4bb8:	cf 01       	movw	r24, r30
    4bba:	08 95       	ret

00004bbc <strcmp>:
    4bbc:	fb 01       	movw	r30, r22
    4bbe:	dc 01       	movw	r26, r24
    4bc0:	8d 91       	ld	r24, X+
    4bc2:	01 90       	ld	r0, Z+
    4bc4:	80 19       	sub	r24, r0
    4bc6:	01 10       	cpse	r0, r1
    4bc8:	d9 f3       	breq	.-10     	; 0x4bc0 <strcmp+0x4>
    4bca:	99 0b       	sbc	r25, r25
    4bcc:	08 95       	ret

00004bce <strcpy>:
    4bce:	fb 01       	movw	r30, r22
    4bd0:	dc 01       	movw	r26, r24
    4bd2:	01 90       	ld	r0, Z+
    4bd4:	0d 92       	st	X+, r0
    4bd6:	00 20       	and	r0, r0
    4bd8:	e1 f7       	brne	.-8      	; 0x4bd2 <strcpy+0x4>
    4bda:	08 95       	ret

00004bdc <dtoa_prf>:
    4bdc:	a9 e0       	ldi	r26, 0x09	; 9
    4bde:	b0 e0       	ldi	r27, 0x00	; 0
    4be0:	e4 ef       	ldi	r30, 0xF4	; 244
    4be2:	f5 e2       	ldi	r31, 0x25	; 37
    4be4:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__prologue_saves__+0xc>
    4be8:	6a 01       	movw	r12, r20
    4bea:	12 2f       	mov	r17, r18
    4bec:	b0 2e       	mov	r11, r16
    4bee:	2b e3       	ldi	r18, 0x3B	; 59
    4bf0:	20 17       	cp	r18, r16
    4bf2:	20 f0       	brcs	.+8      	; 0x4bfc <dtoa_prf+0x20>
    4bf4:	ff 24       	eor	r15, r15
    4bf6:	f3 94       	inc	r15
    4bf8:	f0 0e       	add	r15, r16
    4bfa:	02 c0       	rjmp	.+4      	; 0x4c00 <dtoa_prf+0x24>
    4bfc:	2c e3       	ldi	r18, 0x3C	; 60
    4bfe:	f2 2e       	mov	r15, r18
    4c00:	0f 2d       	mov	r16, r15
    4c02:	27 e0       	ldi	r18, 0x07	; 7
    4c04:	ae 01       	movw	r20, r28
    4c06:	4f 5f       	subi	r20, 0xFF	; 255
    4c08:	5f 4f       	sbci	r21, 0xFF	; 255
    4c0a:	0e 94 96 28 	call	0x512c	; 0x512c <__ftoa_engine>
    4c0e:	bc 01       	movw	r22, r24
    4c10:	49 81       	ldd	r20, Y+1	; 0x01
    4c12:	84 2f       	mov	r24, r20
    4c14:	89 70       	andi	r24, 0x09	; 9
    4c16:	81 30       	cpi	r24, 0x01	; 1
    4c18:	31 f0       	breq	.+12     	; 0x4c26 <dtoa_prf+0x4a>
    4c1a:	e1 fc       	sbrc	r14, 1
    4c1c:	06 c0       	rjmp	.+12     	; 0x4c2a <dtoa_prf+0x4e>
    4c1e:	e0 fe       	sbrs	r14, 0
    4c20:	06 c0       	rjmp	.+12     	; 0x4c2e <dtoa_prf+0x52>
    4c22:	90 e2       	ldi	r25, 0x20	; 32
    4c24:	05 c0       	rjmp	.+10     	; 0x4c30 <dtoa_prf+0x54>
    4c26:	9d e2       	ldi	r25, 0x2D	; 45
    4c28:	03 c0       	rjmp	.+6      	; 0x4c30 <dtoa_prf+0x54>
    4c2a:	9b e2       	ldi	r25, 0x2B	; 43
    4c2c:	01 c0       	rjmp	.+2      	; 0x4c30 <dtoa_prf+0x54>
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	5e 2d       	mov	r21, r14
    4c32:	50 71       	andi	r21, 0x10	; 16
    4c34:	43 ff       	sbrs	r20, 3
    4c36:	3c c0       	rjmp	.+120    	; 0x4cb0 <dtoa_prf+0xd4>
    4c38:	91 11       	cpse	r25, r1
    4c3a:	02 c0       	rjmp	.+4      	; 0x4c40 <dtoa_prf+0x64>
    4c3c:	83 e0       	ldi	r24, 0x03	; 3
    4c3e:	01 c0       	rjmp	.+2      	; 0x4c42 <dtoa_prf+0x66>
    4c40:	84 e0       	ldi	r24, 0x04	; 4
    4c42:	81 17       	cp	r24, r17
    4c44:	18 f4       	brcc	.+6      	; 0x4c4c <dtoa_prf+0x70>
    4c46:	21 2f       	mov	r18, r17
    4c48:	28 1b       	sub	r18, r24
    4c4a:	01 c0       	rjmp	.+2      	; 0x4c4e <dtoa_prf+0x72>
    4c4c:	20 e0       	ldi	r18, 0x00	; 0
    4c4e:	51 11       	cpse	r21, r1
    4c50:	0b c0       	rjmp	.+22     	; 0x4c68 <dtoa_prf+0x8c>
    4c52:	f6 01       	movw	r30, r12
    4c54:	82 2f       	mov	r24, r18
    4c56:	30 e2       	ldi	r19, 0x20	; 32
    4c58:	88 23       	and	r24, r24
    4c5a:	19 f0       	breq	.+6      	; 0x4c62 <dtoa_prf+0x86>
    4c5c:	31 93       	st	Z+, r19
    4c5e:	81 50       	subi	r24, 0x01	; 1
    4c60:	fb cf       	rjmp	.-10     	; 0x4c58 <dtoa_prf+0x7c>
    4c62:	c2 0e       	add	r12, r18
    4c64:	d1 1c       	adc	r13, r1
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	99 23       	and	r25, r25
    4c6a:	29 f0       	breq	.+10     	; 0x4c76 <dtoa_prf+0x9a>
    4c6c:	d6 01       	movw	r26, r12
    4c6e:	9c 93       	st	X, r25
    4c70:	f6 01       	movw	r30, r12
    4c72:	31 96       	adiw	r30, 0x01	; 1
    4c74:	6f 01       	movw	r12, r30
    4c76:	c6 01       	movw	r24, r12
    4c78:	03 96       	adiw	r24, 0x03	; 3
    4c7a:	e2 fe       	sbrs	r14, 2
    4c7c:	0a c0       	rjmp	.+20     	; 0x4c92 <dtoa_prf+0xb6>
    4c7e:	3e e4       	ldi	r19, 0x4E	; 78
    4c80:	d6 01       	movw	r26, r12
    4c82:	3c 93       	st	X, r19
    4c84:	41 e4       	ldi	r20, 0x41	; 65
    4c86:	11 96       	adiw	r26, 0x01	; 1
    4c88:	4c 93       	st	X, r20
    4c8a:	11 97       	sbiw	r26, 0x01	; 1
    4c8c:	12 96       	adiw	r26, 0x02	; 2
    4c8e:	3c 93       	st	X, r19
    4c90:	06 c0       	rjmp	.+12     	; 0x4c9e <dtoa_prf+0xc2>
    4c92:	3e e6       	ldi	r19, 0x6E	; 110
    4c94:	f6 01       	movw	r30, r12
    4c96:	30 83       	st	Z, r19
    4c98:	41 e6       	ldi	r20, 0x61	; 97
    4c9a:	41 83       	std	Z+1, r20	; 0x01
    4c9c:	32 83       	std	Z+2, r19	; 0x02
    4c9e:	fc 01       	movw	r30, r24
    4ca0:	32 2f       	mov	r19, r18
    4ca2:	40 e2       	ldi	r20, 0x20	; 32
    4ca4:	33 23       	and	r19, r19
    4ca6:	09 f4       	brne	.+2      	; 0x4caa <dtoa_prf+0xce>
    4ca8:	42 c0       	rjmp	.+132    	; 0x4d2e <dtoa_prf+0x152>
    4caa:	41 93       	st	Z+, r20
    4cac:	31 50       	subi	r19, 0x01	; 1
    4cae:	fa cf       	rjmp	.-12     	; 0x4ca4 <dtoa_prf+0xc8>
    4cb0:	42 ff       	sbrs	r20, 2
    4cb2:	44 c0       	rjmp	.+136    	; 0x4d3c <dtoa_prf+0x160>
    4cb4:	91 11       	cpse	r25, r1
    4cb6:	02 c0       	rjmp	.+4      	; 0x4cbc <dtoa_prf+0xe0>
    4cb8:	83 e0       	ldi	r24, 0x03	; 3
    4cba:	01 c0       	rjmp	.+2      	; 0x4cbe <dtoa_prf+0xe2>
    4cbc:	84 e0       	ldi	r24, 0x04	; 4
    4cbe:	81 17       	cp	r24, r17
    4cc0:	18 f4       	brcc	.+6      	; 0x4cc8 <dtoa_prf+0xec>
    4cc2:	21 2f       	mov	r18, r17
    4cc4:	28 1b       	sub	r18, r24
    4cc6:	01 c0       	rjmp	.+2      	; 0x4cca <dtoa_prf+0xee>
    4cc8:	20 e0       	ldi	r18, 0x00	; 0
    4cca:	51 11       	cpse	r21, r1
    4ccc:	0b c0       	rjmp	.+22     	; 0x4ce4 <dtoa_prf+0x108>
    4cce:	f6 01       	movw	r30, r12
    4cd0:	82 2f       	mov	r24, r18
    4cd2:	30 e2       	ldi	r19, 0x20	; 32
    4cd4:	88 23       	and	r24, r24
    4cd6:	19 f0       	breq	.+6      	; 0x4cde <dtoa_prf+0x102>
    4cd8:	31 93       	st	Z+, r19
    4cda:	81 50       	subi	r24, 0x01	; 1
    4cdc:	fb cf       	rjmp	.-10     	; 0x4cd4 <dtoa_prf+0xf8>
    4cde:	c2 0e       	add	r12, r18
    4ce0:	d1 1c       	adc	r13, r1
    4ce2:	20 e0       	ldi	r18, 0x00	; 0
    4ce4:	99 23       	and	r25, r25
    4ce6:	29 f0       	breq	.+10     	; 0x4cf2 <dtoa_prf+0x116>
    4ce8:	d6 01       	movw	r26, r12
    4cea:	9c 93       	st	X, r25
    4cec:	f6 01       	movw	r30, r12
    4cee:	31 96       	adiw	r30, 0x01	; 1
    4cf0:	6f 01       	movw	r12, r30
    4cf2:	c6 01       	movw	r24, r12
    4cf4:	03 96       	adiw	r24, 0x03	; 3
    4cf6:	e2 fe       	sbrs	r14, 2
    4cf8:	0b c0       	rjmp	.+22     	; 0x4d10 <dtoa_prf+0x134>
    4cfa:	39 e4       	ldi	r19, 0x49	; 73
    4cfc:	d6 01       	movw	r26, r12
    4cfe:	3c 93       	st	X, r19
    4d00:	3e e4       	ldi	r19, 0x4E	; 78
    4d02:	11 96       	adiw	r26, 0x01	; 1
    4d04:	3c 93       	st	X, r19
    4d06:	11 97       	sbiw	r26, 0x01	; 1
    4d08:	36 e4       	ldi	r19, 0x46	; 70
    4d0a:	12 96       	adiw	r26, 0x02	; 2
    4d0c:	3c 93       	st	X, r19
    4d0e:	07 c0       	rjmp	.+14     	; 0x4d1e <dtoa_prf+0x142>
    4d10:	39 e6       	ldi	r19, 0x69	; 105
    4d12:	f6 01       	movw	r30, r12
    4d14:	30 83       	st	Z, r19
    4d16:	3e e6       	ldi	r19, 0x6E	; 110
    4d18:	31 83       	std	Z+1, r19	; 0x01
    4d1a:	36 e6       	ldi	r19, 0x66	; 102
    4d1c:	32 83       	std	Z+2, r19	; 0x02
    4d1e:	fc 01       	movw	r30, r24
    4d20:	32 2f       	mov	r19, r18
    4d22:	40 e2       	ldi	r20, 0x20	; 32
    4d24:	33 23       	and	r19, r19
    4d26:	19 f0       	breq	.+6      	; 0x4d2e <dtoa_prf+0x152>
    4d28:	41 93       	st	Z+, r20
    4d2a:	31 50       	subi	r19, 0x01	; 1
    4d2c:	fb cf       	rjmp	.-10     	; 0x4d24 <dtoa_prf+0x148>
    4d2e:	fc 01       	movw	r30, r24
    4d30:	e2 0f       	add	r30, r18
    4d32:	f1 1d       	adc	r31, r1
    4d34:	10 82       	st	Z, r1
    4d36:	8e ef       	ldi	r24, 0xFE	; 254
    4d38:	9f ef       	ldi	r25, 0xFF	; 255
    4d3a:	a6 c0       	rjmp	.+332    	; 0x4e88 <dtoa_prf+0x2ac>
    4d3c:	21 e0       	ldi	r18, 0x01	; 1
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	91 11       	cpse	r25, r1
    4d42:	02 c0       	rjmp	.+4      	; 0x4d48 <dtoa_prf+0x16c>
    4d44:	20 e0       	ldi	r18, 0x00	; 0
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	16 16       	cp	r1, r22
    4d4a:	17 06       	cpc	r1, r23
    4d4c:	1c f4       	brge	.+6      	; 0x4d54 <dtoa_prf+0x178>
    4d4e:	fb 01       	movw	r30, r22
    4d50:	31 96       	adiw	r30, 0x01	; 1
    4d52:	02 c0       	rjmp	.+4      	; 0x4d58 <dtoa_prf+0x17c>
    4d54:	e1 e0       	ldi	r30, 0x01	; 1
    4d56:	f0 e0       	ldi	r31, 0x00	; 0
    4d58:	2e 0f       	add	r18, r30
    4d5a:	3f 1f       	adc	r19, r31
    4d5c:	bb 20       	and	r11, r11
    4d5e:	21 f0       	breq	.+8      	; 0x4d68 <dtoa_prf+0x18c>
    4d60:	eb 2d       	mov	r30, r11
    4d62:	f0 e0       	ldi	r31, 0x00	; 0
    4d64:	31 96       	adiw	r30, 0x01	; 1
    4d66:	02 c0       	rjmp	.+4      	; 0x4d6c <dtoa_prf+0x190>
    4d68:	e0 e0       	ldi	r30, 0x00	; 0
    4d6a:	f0 e0       	ldi	r31, 0x00	; 0
    4d6c:	2e 0f       	add	r18, r30
    4d6e:	3f 1f       	adc	r19, r31
    4d70:	e1 2f       	mov	r30, r17
    4d72:	f0 e0       	ldi	r31, 0x00	; 0
    4d74:	2e 17       	cp	r18, r30
    4d76:	3f 07       	cpc	r19, r31
    4d78:	1c f4       	brge	.+6      	; 0x4d80 <dtoa_prf+0x1a4>
    4d7a:	12 1b       	sub	r17, r18
    4d7c:	21 2f       	mov	r18, r17
    4d7e:	01 c0       	rjmp	.+2      	; 0x4d82 <dtoa_prf+0x1a6>
    4d80:	20 e0       	ldi	r18, 0x00	; 0
    4d82:	8e 2d       	mov	r24, r14
    4d84:	88 71       	andi	r24, 0x18	; 24
    4d86:	59 f4       	brne	.+22     	; 0x4d9e <dtoa_prf+0x1c2>
    4d88:	f6 01       	movw	r30, r12
    4d8a:	82 2f       	mov	r24, r18
    4d8c:	30 e2       	ldi	r19, 0x20	; 32
    4d8e:	88 23       	and	r24, r24
    4d90:	19 f0       	breq	.+6      	; 0x4d98 <dtoa_prf+0x1bc>
    4d92:	31 93       	st	Z+, r19
    4d94:	81 50       	subi	r24, 0x01	; 1
    4d96:	fb cf       	rjmp	.-10     	; 0x4d8e <dtoa_prf+0x1b2>
    4d98:	c2 0e       	add	r12, r18
    4d9a:	d1 1c       	adc	r13, r1
    4d9c:	20 e0       	ldi	r18, 0x00	; 0
    4d9e:	99 23       	and	r25, r25
    4da0:	29 f0       	breq	.+10     	; 0x4dac <dtoa_prf+0x1d0>
    4da2:	d6 01       	movw	r26, r12
    4da4:	9c 93       	st	X, r25
    4da6:	f6 01       	movw	r30, r12
    4da8:	31 96       	adiw	r30, 0x01	; 1
    4daa:	6f 01       	movw	r12, r30
    4dac:	51 11       	cpse	r21, r1
    4dae:	0b c0       	rjmp	.+22     	; 0x4dc6 <dtoa_prf+0x1ea>
    4db0:	f6 01       	movw	r30, r12
    4db2:	82 2f       	mov	r24, r18
    4db4:	90 e3       	ldi	r25, 0x30	; 48
    4db6:	88 23       	and	r24, r24
    4db8:	19 f0       	breq	.+6      	; 0x4dc0 <dtoa_prf+0x1e4>
    4dba:	91 93       	st	Z+, r25
    4dbc:	81 50       	subi	r24, 0x01	; 1
    4dbe:	fb cf       	rjmp	.-10     	; 0x4db6 <dtoa_prf+0x1da>
    4dc0:	c2 0e       	add	r12, r18
    4dc2:	d1 1c       	adc	r13, r1
    4dc4:	20 e0       	ldi	r18, 0x00	; 0
    4dc6:	0f 2d       	mov	r16, r15
    4dc8:	06 0f       	add	r16, r22
    4dca:	9a 81       	ldd	r25, Y+2	; 0x02
    4dcc:	34 2f       	mov	r19, r20
    4dce:	30 71       	andi	r19, 0x10	; 16
    4dd0:	44 ff       	sbrs	r20, 4
    4dd2:	03 c0       	rjmp	.+6      	; 0x4dda <dtoa_prf+0x1fe>
    4dd4:	91 33       	cpi	r25, 0x31	; 49
    4dd6:	09 f4       	brne	.+2      	; 0x4dda <dtoa_prf+0x1fe>
    4dd8:	01 50       	subi	r16, 0x01	; 1
    4dda:	10 16       	cp	r1, r16
    4ddc:	24 f4       	brge	.+8      	; 0x4de6 <dtoa_prf+0x20a>
    4dde:	09 30       	cpi	r16, 0x09	; 9
    4de0:	18 f0       	brcs	.+6      	; 0x4de8 <dtoa_prf+0x20c>
    4de2:	08 e0       	ldi	r16, 0x08	; 8
    4de4:	01 c0       	rjmp	.+2      	; 0x4de8 <dtoa_prf+0x20c>
    4de6:	01 e0       	ldi	r16, 0x01	; 1
    4de8:	ab 01       	movw	r20, r22
    4dea:	77 ff       	sbrs	r23, 7
    4dec:	02 c0       	rjmp	.+4      	; 0x4df2 <dtoa_prf+0x216>
    4dee:	40 e0       	ldi	r20, 0x00	; 0
    4df0:	50 e0       	ldi	r21, 0x00	; 0
    4df2:	fb 01       	movw	r30, r22
    4df4:	e4 1b       	sub	r30, r20
    4df6:	f5 0b       	sbc	r31, r21
    4df8:	a1 e0       	ldi	r26, 0x01	; 1
    4dfa:	b0 e0       	ldi	r27, 0x00	; 0
    4dfc:	ac 0f       	add	r26, r28
    4dfe:	bd 1f       	adc	r27, r29
    4e00:	ea 0f       	add	r30, r26
    4e02:	fb 1f       	adc	r31, r27
    4e04:	8e e2       	ldi	r24, 0x2E	; 46
    4e06:	a8 2e       	mov	r10, r24
    4e08:	4b 01       	movw	r8, r22
    4e0a:	80 1a       	sub	r8, r16
    4e0c:	91 08       	sbc	r9, r1
    4e0e:	0b 2d       	mov	r16, r11
    4e10:	10 e0       	ldi	r17, 0x00	; 0
    4e12:	11 95       	neg	r17
    4e14:	01 95       	neg	r16
    4e16:	11 09       	sbc	r17, r1
    4e18:	4f 3f       	cpi	r20, 0xFF	; 255
    4e1a:	bf ef       	ldi	r27, 0xFF	; 255
    4e1c:	5b 07       	cpc	r21, r27
    4e1e:	21 f4       	brne	.+8      	; 0x4e28 <dtoa_prf+0x24c>
    4e20:	d6 01       	movw	r26, r12
    4e22:	ac 92       	st	X, r10
    4e24:	11 96       	adiw	r26, 0x01	; 1
    4e26:	6d 01       	movw	r12, r26
    4e28:	64 17       	cp	r22, r20
    4e2a:	75 07       	cpc	r23, r21
    4e2c:	2c f0       	brlt	.+10     	; 0x4e38 <dtoa_prf+0x25c>
    4e2e:	84 16       	cp	r8, r20
    4e30:	95 06       	cpc	r9, r21
    4e32:	14 f4       	brge	.+4      	; 0x4e38 <dtoa_prf+0x25c>
    4e34:	81 81       	ldd	r24, Z+1	; 0x01
    4e36:	01 c0       	rjmp	.+2      	; 0x4e3a <dtoa_prf+0x25e>
    4e38:	80 e3       	ldi	r24, 0x30	; 48
    4e3a:	41 50       	subi	r20, 0x01	; 1
    4e3c:	51 09       	sbc	r21, r1
    4e3e:	31 96       	adiw	r30, 0x01	; 1
    4e40:	d6 01       	movw	r26, r12
    4e42:	11 96       	adiw	r26, 0x01	; 1
    4e44:	7d 01       	movw	r14, r26
    4e46:	40 17       	cp	r20, r16
    4e48:	51 07       	cpc	r21, r17
    4e4a:	24 f0       	brlt	.+8      	; 0x4e54 <dtoa_prf+0x278>
    4e4c:	d6 01       	movw	r26, r12
    4e4e:	8c 93       	st	X, r24
    4e50:	67 01       	movw	r12, r14
    4e52:	e2 cf       	rjmp	.-60     	; 0x4e18 <dtoa_prf+0x23c>
    4e54:	64 17       	cp	r22, r20
    4e56:	75 07       	cpc	r23, r21
    4e58:	39 f4       	brne	.+14     	; 0x4e68 <dtoa_prf+0x28c>
    4e5a:	96 33       	cpi	r25, 0x36	; 54
    4e5c:	20 f4       	brcc	.+8      	; 0x4e66 <dtoa_prf+0x28a>
    4e5e:	95 33       	cpi	r25, 0x35	; 53
    4e60:	19 f4       	brne	.+6      	; 0x4e68 <dtoa_prf+0x28c>
    4e62:	31 11       	cpse	r19, r1
    4e64:	01 c0       	rjmp	.+2      	; 0x4e68 <dtoa_prf+0x28c>
    4e66:	81 e3       	ldi	r24, 0x31	; 49
    4e68:	f6 01       	movw	r30, r12
    4e6a:	80 83       	st	Z, r24
    4e6c:	f7 01       	movw	r30, r14
    4e6e:	82 2f       	mov	r24, r18
    4e70:	90 e2       	ldi	r25, 0x20	; 32
    4e72:	88 23       	and	r24, r24
    4e74:	19 f0       	breq	.+6      	; 0x4e7c <dtoa_prf+0x2a0>
    4e76:	91 93       	st	Z+, r25
    4e78:	81 50       	subi	r24, 0x01	; 1
    4e7a:	fb cf       	rjmp	.-10     	; 0x4e72 <dtoa_prf+0x296>
    4e7c:	f7 01       	movw	r30, r14
    4e7e:	e2 0f       	add	r30, r18
    4e80:	f1 1d       	adc	r31, r1
    4e82:	10 82       	st	Z, r1
    4e84:	80 e0       	ldi	r24, 0x00	; 0
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	29 96       	adiw	r28, 0x09	; 9
    4e8a:	ec e0       	ldi	r30, 0x0C	; 12
    4e8c:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__epilogue_restores__+0xc>

00004e90 <strtod>:
    4e90:	a0 e0       	ldi	r26, 0x00	; 0
    4e92:	b0 e0       	ldi	r27, 0x00	; 0
    4e94:	ee e4       	ldi	r30, 0x4E	; 78
    4e96:	f7 e2       	ldi	r31, 0x27	; 39
    4e98:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__prologue_saves__+0xc>
    4e9c:	ec 01       	movw	r28, r24
    4e9e:	6b 01       	movw	r12, r22
    4ea0:	61 15       	cp	r22, r1
    4ea2:	71 05       	cpc	r23, r1
    4ea4:	19 f0       	breq	.+6      	; 0x4eac <strtod+0x1c>
    4ea6:	fb 01       	movw	r30, r22
    4ea8:	91 83       	std	Z+1, r25	; 0x01
    4eaa:	80 83       	st	Z, r24
    4eac:	7e 01       	movw	r14, r28
    4eae:	ff ef       	ldi	r31, 0xFF	; 255
    4eb0:	ef 1a       	sub	r14, r31
    4eb2:	ff 0a       	sbc	r15, r31
    4eb4:	08 81       	ld	r16, Y
    4eb6:	80 2f       	mov	r24, r16
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <isspace>
    4ebe:	89 2b       	or	r24, r25
    4ec0:	11 f0       	breq	.+4      	; 0x4ec6 <strtod+0x36>
    4ec2:	e7 01       	movw	r28, r14
    4ec4:	f3 cf       	rjmp	.-26     	; 0x4eac <strtod+0x1c>
    4ec6:	0d 32       	cpi	r16, 0x2D	; 45
    4ec8:	39 f4       	brne	.+14     	; 0x4ed8 <strtod+0x48>
    4eca:	7e 01       	movw	r14, r28
    4ecc:	82 e0       	ldi	r24, 0x02	; 2
    4ece:	e8 0e       	add	r14, r24
    4ed0:	f1 1c       	adc	r15, r1
    4ed2:	09 81       	ldd	r16, Y+1	; 0x01
    4ed4:	11 e0       	ldi	r17, 0x01	; 1
    4ed6:	08 c0       	rjmp	.+16     	; 0x4ee8 <strtod+0x58>
    4ed8:	0b 32       	cpi	r16, 0x2B	; 43
    4eda:	29 f4       	brne	.+10     	; 0x4ee6 <strtod+0x56>
    4edc:	7e 01       	movw	r14, r28
    4ede:	92 e0       	ldi	r25, 0x02	; 2
    4ee0:	e9 0e       	add	r14, r25
    4ee2:	f1 1c       	adc	r15, r1
    4ee4:	09 81       	ldd	r16, Y+1	; 0x01
    4ee6:	10 e0       	ldi	r17, 0x00	; 0
    4ee8:	e7 01       	movw	r28, r14
    4eea:	21 97       	sbiw	r28, 0x01	; 1
    4eec:	43 e0       	ldi	r20, 0x03	; 3
    4eee:	50 e0       	ldi	r21, 0x00	; 0
    4ef0:	66 ea       	ldi	r22, 0xA6	; 166
    4ef2:	71 e0       	ldi	r23, 0x01	; 1
    4ef4:	ce 01       	movw	r24, r28
    4ef6:	0e 94 71 29 	call	0x52e2	; 0x52e2 <strncasecmp_P>
    4efa:	89 2b       	or	r24, r25
    4efc:	c1 f4       	brne	.+48     	; 0x4f2e <strtod+0x9e>
    4efe:	23 96       	adiw	r28, 0x03	; 3
    4f00:	45 e0       	ldi	r20, 0x05	; 5
    4f02:	50 e0       	ldi	r21, 0x00	; 0
    4f04:	61 ea       	ldi	r22, 0xA1	; 161
    4f06:	71 e0       	ldi	r23, 0x01	; 1
    4f08:	ce 01       	movw	r24, r28
    4f0a:	0e 94 71 29 	call	0x52e2	; 0x52e2 <strncasecmp_P>
    4f0e:	89 2b       	or	r24, r25
    4f10:	09 f4       	brne	.+2      	; 0x4f14 <strtod+0x84>
    4f12:	25 96       	adiw	r28, 0x05	; 5
    4f14:	c1 14       	cp	r12, r1
    4f16:	d1 04       	cpc	r13, r1
    4f18:	19 f0       	breq	.+6      	; 0x4f20 <strtod+0x90>
    4f1a:	f6 01       	movw	r30, r12
    4f1c:	d1 83       	std	Z+1, r29	; 0x01
    4f1e:	c0 83       	st	Z, r28
    4f20:	11 11       	cpse	r17, r1
    4f22:	f6 c0       	rjmp	.+492    	; 0x5110 <strtod+0x280>
    4f24:	60 e0       	ldi	r22, 0x00	; 0
    4f26:	70 e0       	ldi	r23, 0x00	; 0
    4f28:	80 e8       	ldi	r24, 0x80	; 128
    4f2a:	9f e7       	ldi	r25, 0x7F	; 127
    4f2c:	fa c0       	rjmp	.+500    	; 0x5122 <strtod+0x292>
    4f2e:	43 e0       	ldi	r20, 0x03	; 3
    4f30:	50 e0       	ldi	r21, 0x00	; 0
    4f32:	6e e9       	ldi	r22, 0x9E	; 158
    4f34:	71 e0       	ldi	r23, 0x01	; 1
    4f36:	ce 01       	movw	r24, r28
    4f38:	0e 94 71 29 	call	0x52e2	; 0x52e2 <strncasecmp_P>
    4f3c:	89 2b       	or	r24, r25
    4f3e:	59 f4       	brne	.+22     	; 0x4f56 <strtod+0xc6>
    4f40:	c1 14       	cp	r12, r1
    4f42:	d1 04       	cpc	r13, r1
    4f44:	09 f4       	brne	.+2      	; 0x4f48 <strtod+0xb8>
    4f46:	e9 c0       	rjmp	.+466    	; 0x511a <strtod+0x28a>
    4f48:	f2 e0       	ldi	r31, 0x02	; 2
    4f4a:	ef 0e       	add	r14, r31
    4f4c:	f1 1c       	adc	r15, r1
    4f4e:	f6 01       	movw	r30, r12
    4f50:	f1 82       	std	Z+1, r15	; 0x01
    4f52:	e0 82       	st	Z, r14
    4f54:	e2 c0       	rjmp	.+452    	; 0x511a <strtod+0x28a>
    4f56:	20 e0       	ldi	r18, 0x00	; 0
    4f58:	30 e0       	ldi	r19, 0x00	; 0
    4f5a:	a9 01       	movw	r20, r18
    4f5c:	c0 e0       	ldi	r28, 0x00	; 0
    4f5e:	d0 e0       	ldi	r29, 0x00	; 0
    4f60:	f7 01       	movw	r30, r14
    4f62:	80 ed       	ldi	r24, 0xD0	; 208
    4f64:	a8 2e       	mov	r10, r24
    4f66:	a0 0e       	add	r10, r16
    4f68:	89 e0       	ldi	r24, 0x09	; 9
    4f6a:	8a 15       	cp	r24, r10
    4f6c:	30 f1       	brcs	.+76     	; 0x4fba <strtod+0x12a>
    4f6e:	91 2f       	mov	r25, r17
    4f70:	92 60       	ori	r25, 0x02	; 2
    4f72:	b9 2e       	mov	r11, r25
    4f74:	81 2f       	mov	r24, r17
    4f76:	88 70       	andi	r24, 0x08	; 8
    4f78:	12 ff       	sbrs	r17, 2
    4f7a:	04 c0       	rjmp	.+8      	; 0x4f84 <strtod+0xf4>
    4f7c:	81 11       	cpse	r24, r1
    4f7e:	24 c0       	rjmp	.+72     	; 0x4fc8 <strtod+0x138>
    4f80:	21 96       	adiw	r28, 0x01	; 1
    4f82:	22 c0       	rjmp	.+68     	; 0x4fc8 <strtod+0x138>
    4f84:	81 11       	cpse	r24, r1
    4f86:	21 97       	sbiw	r28, 0x01	; 1
    4f88:	a5 e0       	ldi	r26, 0x05	; 5
    4f8a:	b0 e0       	ldi	r27, 0x00	; 0
    4f8c:	0e 94 89 29 	call	0x5312	; 0x5312 <__muluhisi3>
    4f90:	dc 01       	movw	r26, r24
    4f92:	cb 01       	movw	r24, r22
    4f94:	88 0f       	add	r24, r24
    4f96:	99 1f       	adc	r25, r25
    4f98:	aa 1f       	adc	r26, r26
    4f9a:	bb 1f       	adc	r27, r27
    4f9c:	9c 01       	movw	r18, r24
    4f9e:	ad 01       	movw	r20, r26
    4fa0:	2a 0d       	add	r18, r10
    4fa2:	31 1d       	adc	r19, r1
    4fa4:	41 1d       	adc	r20, r1
    4fa6:	51 1d       	adc	r21, r1
    4fa8:	28 39       	cpi	r18, 0x98	; 152
    4faa:	89 e9       	ldi	r24, 0x99	; 153
    4fac:	38 07       	cpc	r19, r24
    4fae:	48 07       	cpc	r20, r24
    4fb0:	89 e1       	ldi	r24, 0x19	; 25
    4fb2:	58 07       	cpc	r21, r24
    4fb4:	48 f0       	brcs	.+18     	; 0x4fc8 <strtod+0x138>
    4fb6:	16 60       	ori	r17, 0x06	; 6
    4fb8:	06 c0       	rjmp	.+12     	; 0x4fc6 <strtod+0x136>
    4fba:	9e ef       	ldi	r25, 0xFE	; 254
    4fbc:	a9 12       	cpse	r10, r25
    4fbe:	0a c0       	rjmp	.+20     	; 0x4fd4 <strtod+0x144>
    4fc0:	13 fd       	sbrc	r17, 3
    4fc2:	40 c0       	rjmp	.+128    	; 0x5044 <strtod+0x1b4>
    4fc4:	18 60       	ori	r17, 0x08	; 8
    4fc6:	b1 2e       	mov	r11, r17
    4fc8:	8f ef       	ldi	r24, 0xFF	; 255
    4fca:	e8 1a       	sub	r14, r24
    4fcc:	f8 0a       	sbc	r15, r24
    4fce:	00 81       	ld	r16, Z
    4fd0:	1b 2d       	mov	r17, r11
    4fd2:	c6 cf       	rjmp	.-116    	; 0x4f60 <strtod+0xd0>
    4fd4:	80 2f       	mov	r24, r16
    4fd6:	8f 7d       	andi	r24, 0xDF	; 223
    4fd8:	85 34       	cpi	r24, 0x45	; 69
    4fda:	a1 f5       	brne	.+104    	; 0x5044 <strtod+0x1b4>
    4fdc:	80 81       	ld	r24, Z
    4fde:	8d 32       	cpi	r24, 0x2D	; 45
    4fe0:	11 f4       	brne	.+4      	; 0x4fe6 <strtod+0x156>
    4fe2:	10 61       	ori	r17, 0x10	; 16
    4fe4:	06 c0       	rjmp	.+12     	; 0x4ff2 <strtod+0x162>
    4fe6:	8b 32       	cpi	r24, 0x2B	; 43
    4fe8:	21 f0       	breq	.+8      	; 0x4ff2 <strtod+0x162>
    4fea:	31 96       	adiw	r30, 0x01	; 1
    4fec:	61 e0       	ldi	r22, 0x01	; 1
    4fee:	70 e0       	ldi	r23, 0x00	; 0
    4ff0:	04 c0       	rjmp	.+8      	; 0x4ffa <strtod+0x16a>
    4ff2:	81 81       	ldd	r24, Z+1	; 0x01
    4ff4:	32 96       	adiw	r30, 0x02	; 2
    4ff6:	62 e0       	ldi	r22, 0x02	; 2
    4ff8:	70 e0       	ldi	r23, 0x00	; 0
    4ffa:	80 53       	subi	r24, 0x30	; 48
    4ffc:	8a 30       	cpi	r24, 0x0A	; 10
    4ffe:	18 f0       	brcs	.+6      	; 0x5006 <strtod+0x176>
    5000:	e6 1b       	sub	r30, r22
    5002:	f7 0b       	sbc	r31, r23
    5004:	1f c0       	rjmp	.+62     	; 0x5044 <strtod+0x1b4>
    5006:	60 e0       	ldi	r22, 0x00	; 0
    5008:	70 e0       	ldi	r23, 0x00	; 0
    500a:	60 38       	cpi	r22, 0x80	; 128
    500c:	9c e0       	ldi	r25, 0x0C	; 12
    500e:	79 07       	cpc	r23, r25
    5010:	5c f4       	brge	.+22     	; 0x5028 <strtod+0x198>
    5012:	db 01       	movw	r26, r22
    5014:	aa 0f       	add	r26, r26
    5016:	bb 1f       	adc	r27, r27
    5018:	aa 0f       	add	r26, r26
    501a:	bb 1f       	adc	r27, r27
    501c:	6a 0f       	add	r22, r26
    501e:	7b 1f       	adc	r23, r27
    5020:	66 0f       	add	r22, r22
    5022:	77 1f       	adc	r23, r23
    5024:	68 0f       	add	r22, r24
    5026:	71 1d       	adc	r23, r1
    5028:	31 96       	adiw	r30, 0x01	; 1
    502a:	df 01       	movw	r26, r30
    502c:	11 97       	sbiw	r26, 0x01	; 1
    502e:	8c 91       	ld	r24, X
    5030:	80 53       	subi	r24, 0x30	; 48
    5032:	8a 30       	cpi	r24, 0x0A	; 10
    5034:	50 f3       	brcs	.-44     	; 0x500a <strtod+0x17a>
    5036:	14 ff       	sbrs	r17, 4
    5038:	03 c0       	rjmp	.+6      	; 0x5040 <strtod+0x1b0>
    503a:	71 95       	neg	r23
    503c:	61 95       	neg	r22
    503e:	71 09       	sbc	r23, r1
    5040:	c6 0f       	add	r28, r22
    5042:	d7 1f       	adc	r29, r23
    5044:	11 ff       	sbrs	r17, 1
    5046:	08 c0       	rjmp	.+16     	; 0x5058 <strtod+0x1c8>
    5048:	c1 14       	cp	r12, r1
    504a:	d1 04       	cpc	r13, r1
    504c:	29 f0       	breq	.+10     	; 0x5058 <strtod+0x1c8>
    504e:	cf 01       	movw	r24, r30
    5050:	01 97       	sbiw	r24, 0x01	; 1
    5052:	f6 01       	movw	r30, r12
    5054:	91 83       	std	Z+1, r25	; 0x01
    5056:	80 83       	st	Z, r24
    5058:	ca 01       	movw	r24, r20
    505a:	b9 01       	movw	r22, r18
    505c:	0e 94 31 20 	call	0x4062	; 0x4062 <__floatunsisf>
    5060:	21 2f       	mov	r18, r17
    5062:	23 70       	andi	r18, 0x03	; 3
    5064:	23 30       	cpi	r18, 0x03	; 3
    5066:	19 f0       	breq	.+6      	; 0x506e <strtod+0x1de>
    5068:	4b 01       	movw	r8, r22
    506a:	5c 01       	movw	r10, r24
    506c:	06 c0       	rjmp	.+12     	; 0x507a <strtod+0x1ea>
    506e:	4b 01       	movw	r8, r22
    5070:	5c 01       	movw	r10, r24
    5072:	b7 fa       	bst	r11, 7
    5074:	b0 94       	com	r11
    5076:	b7 f8       	bld	r11, 7
    5078:	b0 94       	com	r11
    507a:	20 e0       	ldi	r18, 0x00	; 0
    507c:	30 e0       	ldi	r19, 0x00	; 0
    507e:	a9 01       	movw	r20, r18
    5080:	c5 01       	movw	r24, r10
    5082:	b4 01       	movw	r22, r8
    5084:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    5088:	88 23       	and	r24, r24
    508a:	09 f4       	brne	.+2      	; 0x508e <strtod+0x1fe>
    508c:	3e c0       	rjmp	.+124    	; 0x510a <strtod+0x27a>
    508e:	d7 ff       	sbrs	r29, 7
    5090:	06 c0       	rjmp	.+12     	; 0x509e <strtod+0x20e>
    5092:	d1 95       	neg	r29
    5094:	c1 95       	neg	r28
    5096:	d1 09       	sbc	r29, r1
    5098:	0d eb       	ldi	r16, 0xBD	; 189
    509a:	11 e0       	ldi	r17, 0x01	; 1
    509c:	02 c0       	rjmp	.+4      	; 0x50a2 <strtod+0x212>
    509e:	05 ed       	ldi	r16, 0xD5	; 213
    50a0:	11 e0       	ldi	r17, 0x01	; 1
    50a2:	68 01       	movw	r12, r16
    50a4:	f8 e1       	ldi	r31, 0x18	; 24
    50a6:	cf 1a       	sub	r12, r31
    50a8:	d1 08       	sbc	r13, r1
    50aa:	90 e2       	ldi	r25, 0x20	; 32
    50ac:	e9 2e       	mov	r14, r25
    50ae:	f1 2c       	mov	r15, r1
    50b0:	ce 15       	cp	r28, r14
    50b2:	df 05       	cpc	r29, r15
    50b4:	74 f0       	brlt	.+28     	; 0x50d2 <strtod+0x242>
    50b6:	f8 01       	movw	r30, r16
    50b8:	25 91       	lpm	r18, Z+
    50ba:	35 91       	lpm	r19, Z+
    50bc:	45 91       	lpm	r20, Z+
    50be:	54 91       	lpm	r21, Z
    50c0:	c5 01       	movw	r24, r10
    50c2:	b4 01       	movw	r22, r8
    50c4:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulsf3>
    50c8:	4b 01       	movw	r8, r22
    50ca:	5c 01       	movw	r10, r24
    50cc:	ce 19       	sub	r28, r14
    50ce:	df 09       	sbc	r29, r15
    50d0:	ef cf       	rjmp	.-34     	; 0x50b0 <strtod+0x220>
    50d2:	04 50       	subi	r16, 0x04	; 4
    50d4:	11 09       	sbc	r17, r1
    50d6:	f5 94       	asr	r15
    50d8:	e7 94       	ror	r14
    50da:	0c 15       	cp	r16, r12
    50dc:	1d 05       	cpc	r17, r13
    50de:	41 f7       	brne	.-48     	; 0x50b0 <strtod+0x220>
    50e0:	8a 2d       	mov	r24, r10
    50e2:	88 0f       	add	r24, r24
    50e4:	8b 2d       	mov	r24, r11
    50e6:	88 1f       	adc	r24, r24
    50e8:	8f 3f       	cpi	r24, 0xFF	; 255
    50ea:	49 f0       	breq	.+18     	; 0x50fe <strtod+0x26e>
    50ec:	20 e0       	ldi	r18, 0x00	; 0
    50ee:	30 e0       	ldi	r19, 0x00	; 0
    50f0:	a9 01       	movw	r20, r18
    50f2:	c5 01       	movw	r24, r10
    50f4:	b4 01       	movw	r22, r8
    50f6:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    50fa:	81 11       	cpse	r24, r1
    50fc:	06 c0       	rjmp	.+12     	; 0x510a <strtod+0x27a>
    50fe:	82 e2       	ldi	r24, 0x22	; 34
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <errno+0x1>
    5106:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <errno>
    510a:	c5 01       	movw	r24, r10
    510c:	b4 01       	movw	r22, r8
    510e:	09 c0       	rjmp	.+18     	; 0x5122 <strtod+0x292>
    5110:	60 e0       	ldi	r22, 0x00	; 0
    5112:	70 e0       	ldi	r23, 0x00	; 0
    5114:	80 e8       	ldi	r24, 0x80	; 128
    5116:	9f ef       	ldi	r25, 0xFF	; 255
    5118:	04 c0       	rjmp	.+8      	; 0x5122 <strtod+0x292>
    511a:	60 e0       	ldi	r22, 0x00	; 0
    511c:	70 e0       	ldi	r23, 0x00	; 0
    511e:	80 ec       	ldi	r24, 0xC0	; 192
    5120:	9f e7       	ldi	r25, 0x7F	; 127
    5122:	cd b7       	in	r28, 0x3d	; 61
    5124:	de b7       	in	r29, 0x3e	; 62
    5126:	ec e0       	ldi	r30, 0x0C	; 12
    5128:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__epilogue_restores__+0xc>

0000512c <__ftoa_engine>:
    512c:	28 30       	cpi	r18, 0x08	; 8
    512e:	08 f0       	brcs	.+2      	; 0x5132 <__ftoa_engine+0x6>
    5130:	27 e0       	ldi	r18, 0x07	; 7
    5132:	33 27       	eor	r19, r19
    5134:	da 01       	movw	r26, r20
    5136:	99 0f       	add	r25, r25
    5138:	31 1d       	adc	r19, r1
    513a:	87 fd       	sbrc	r24, 7
    513c:	91 60       	ori	r25, 0x01	; 1
    513e:	00 96       	adiw	r24, 0x00	; 0
    5140:	61 05       	cpc	r22, r1
    5142:	71 05       	cpc	r23, r1
    5144:	39 f4       	brne	.+14     	; 0x5154 <__ftoa_engine+0x28>
    5146:	32 60       	ori	r19, 0x02	; 2
    5148:	2e 5f       	subi	r18, 0xFE	; 254
    514a:	3d 93       	st	X+, r19
    514c:	30 e3       	ldi	r19, 0x30	; 48
    514e:	2a 95       	dec	r18
    5150:	e1 f7       	brne	.-8      	; 0x514a <__ftoa_engine+0x1e>
    5152:	08 95       	ret
    5154:	9f 3f       	cpi	r25, 0xFF	; 255
    5156:	30 f0       	brcs	.+12     	; 0x5164 <__ftoa_engine+0x38>
    5158:	80 38       	cpi	r24, 0x80	; 128
    515a:	71 05       	cpc	r23, r1
    515c:	61 05       	cpc	r22, r1
    515e:	09 f0       	breq	.+2      	; 0x5162 <__ftoa_engine+0x36>
    5160:	3c 5f       	subi	r19, 0xFC	; 252
    5162:	3c 5f       	subi	r19, 0xFC	; 252
    5164:	3d 93       	st	X+, r19
    5166:	91 30       	cpi	r25, 0x01	; 1
    5168:	08 f0       	brcs	.+2      	; 0x516c <__ftoa_engine+0x40>
    516a:	80 68       	ori	r24, 0x80	; 128
    516c:	91 1d       	adc	r25, r1
    516e:	df 93       	push	r29
    5170:	cf 93       	push	r28
    5172:	1f 93       	push	r17
    5174:	0f 93       	push	r16
    5176:	ff 92       	push	r15
    5178:	ef 92       	push	r14
    517a:	19 2f       	mov	r17, r25
    517c:	98 7f       	andi	r25, 0xF8	; 248
    517e:	96 95       	lsr	r25
    5180:	e9 2f       	mov	r30, r25
    5182:	96 95       	lsr	r25
    5184:	96 95       	lsr	r25
    5186:	e9 0f       	add	r30, r25
    5188:	ff 27       	eor	r31, r31
    518a:	ed 5c       	subi	r30, 0xCD	; 205
    518c:	fd 4f       	sbci	r31, 0xFD	; 253
    518e:	99 27       	eor	r25, r25
    5190:	33 27       	eor	r19, r19
    5192:	ee 24       	eor	r14, r14
    5194:	ff 24       	eor	r15, r15
    5196:	a7 01       	movw	r20, r14
    5198:	e7 01       	movw	r28, r14
    519a:	05 90       	lpm	r0, Z+
    519c:	08 94       	sec
    519e:	07 94       	ror	r0
    51a0:	28 f4       	brcc	.+10     	; 0x51ac <__ftoa_engine+0x80>
    51a2:	36 0f       	add	r19, r22
    51a4:	e7 1e       	adc	r14, r23
    51a6:	f8 1e       	adc	r15, r24
    51a8:	49 1f       	adc	r20, r25
    51aa:	51 1d       	adc	r21, r1
    51ac:	66 0f       	add	r22, r22
    51ae:	77 1f       	adc	r23, r23
    51b0:	88 1f       	adc	r24, r24
    51b2:	99 1f       	adc	r25, r25
    51b4:	06 94       	lsr	r0
    51b6:	a1 f7       	brne	.-24     	; 0x51a0 <__ftoa_engine+0x74>
    51b8:	05 90       	lpm	r0, Z+
    51ba:	07 94       	ror	r0
    51bc:	28 f4       	brcc	.+10     	; 0x51c8 <__ftoa_engine+0x9c>
    51be:	e7 0e       	add	r14, r23
    51c0:	f8 1e       	adc	r15, r24
    51c2:	49 1f       	adc	r20, r25
    51c4:	56 1f       	adc	r21, r22
    51c6:	c1 1d       	adc	r28, r1
    51c8:	77 0f       	add	r23, r23
    51ca:	88 1f       	adc	r24, r24
    51cc:	99 1f       	adc	r25, r25
    51ce:	66 1f       	adc	r22, r22
    51d0:	06 94       	lsr	r0
    51d2:	a1 f7       	brne	.-24     	; 0x51bc <__ftoa_engine+0x90>
    51d4:	05 90       	lpm	r0, Z+
    51d6:	07 94       	ror	r0
    51d8:	28 f4       	brcc	.+10     	; 0x51e4 <__ftoa_engine+0xb8>
    51da:	f8 0e       	add	r15, r24
    51dc:	49 1f       	adc	r20, r25
    51de:	56 1f       	adc	r21, r22
    51e0:	c7 1f       	adc	r28, r23
    51e2:	d1 1d       	adc	r29, r1
    51e4:	88 0f       	add	r24, r24
    51e6:	99 1f       	adc	r25, r25
    51e8:	66 1f       	adc	r22, r22
    51ea:	77 1f       	adc	r23, r23
    51ec:	06 94       	lsr	r0
    51ee:	a1 f7       	brne	.-24     	; 0x51d8 <__ftoa_engine+0xac>
    51f0:	05 90       	lpm	r0, Z+
    51f2:	07 94       	ror	r0
    51f4:	20 f4       	brcc	.+8      	; 0x51fe <__ftoa_engine+0xd2>
    51f6:	49 0f       	add	r20, r25
    51f8:	56 1f       	adc	r21, r22
    51fa:	c7 1f       	adc	r28, r23
    51fc:	d8 1f       	adc	r29, r24
    51fe:	99 0f       	add	r25, r25
    5200:	66 1f       	adc	r22, r22
    5202:	77 1f       	adc	r23, r23
    5204:	88 1f       	adc	r24, r24
    5206:	06 94       	lsr	r0
    5208:	a9 f7       	brne	.-22     	; 0x51f4 <__ftoa_engine+0xc8>
    520a:	84 91       	lpm	r24, Z
    520c:	10 95       	com	r17
    520e:	17 70       	andi	r17, 0x07	; 7
    5210:	41 f0       	breq	.+16     	; 0x5222 <__ftoa_engine+0xf6>
    5212:	d6 95       	lsr	r29
    5214:	c7 95       	ror	r28
    5216:	57 95       	ror	r21
    5218:	47 95       	ror	r20
    521a:	f7 94       	ror	r15
    521c:	e7 94       	ror	r14
    521e:	1a 95       	dec	r17
    5220:	c1 f7       	brne	.-16     	; 0x5212 <__ftoa_engine+0xe6>
    5222:	e9 ed       	ldi	r30, 0xD9	; 217
    5224:	f1 e0       	ldi	r31, 0x01	; 1
    5226:	68 94       	set
    5228:	15 90       	lpm	r1, Z+
    522a:	15 91       	lpm	r17, Z+
    522c:	35 91       	lpm	r19, Z+
    522e:	65 91       	lpm	r22, Z+
    5230:	95 91       	lpm	r25, Z+
    5232:	05 90       	lpm	r0, Z+
    5234:	7f e2       	ldi	r23, 0x2F	; 47
    5236:	73 95       	inc	r23
    5238:	e1 18       	sub	r14, r1
    523a:	f1 0a       	sbc	r15, r17
    523c:	43 0b       	sbc	r20, r19
    523e:	56 0b       	sbc	r21, r22
    5240:	c9 0b       	sbc	r28, r25
    5242:	d0 09       	sbc	r29, r0
    5244:	c0 f7       	brcc	.-16     	; 0x5236 <__ftoa_engine+0x10a>
    5246:	e1 0c       	add	r14, r1
    5248:	f1 1e       	adc	r15, r17
    524a:	43 1f       	adc	r20, r19
    524c:	56 1f       	adc	r21, r22
    524e:	c9 1f       	adc	r28, r25
    5250:	d0 1d       	adc	r29, r0
    5252:	7e f4       	brtc	.+30     	; 0x5272 <__ftoa_engine+0x146>
    5254:	70 33       	cpi	r23, 0x30	; 48
    5256:	11 f4       	brne	.+4      	; 0x525c <__ftoa_engine+0x130>
    5258:	8a 95       	dec	r24
    525a:	e6 cf       	rjmp	.-52     	; 0x5228 <__ftoa_engine+0xfc>
    525c:	e8 94       	clt
    525e:	01 50       	subi	r16, 0x01	; 1
    5260:	30 f0       	brcs	.+12     	; 0x526e <__ftoa_engine+0x142>
    5262:	08 0f       	add	r16, r24
    5264:	0a f4       	brpl	.+2      	; 0x5268 <__ftoa_engine+0x13c>
    5266:	00 27       	eor	r16, r16
    5268:	02 17       	cp	r16, r18
    526a:	08 f4       	brcc	.+2      	; 0x526e <__ftoa_engine+0x142>
    526c:	20 2f       	mov	r18, r16
    526e:	23 95       	inc	r18
    5270:	02 2f       	mov	r16, r18
    5272:	7a 33       	cpi	r23, 0x3A	; 58
    5274:	28 f0       	brcs	.+10     	; 0x5280 <__ftoa_engine+0x154>
    5276:	79 e3       	ldi	r23, 0x39	; 57
    5278:	7d 93       	st	X+, r23
    527a:	2a 95       	dec	r18
    527c:	e9 f7       	brne	.-6      	; 0x5278 <__ftoa_engine+0x14c>
    527e:	10 c0       	rjmp	.+32     	; 0x52a0 <__ftoa_engine+0x174>
    5280:	7d 93       	st	X+, r23
    5282:	2a 95       	dec	r18
    5284:	89 f6       	brne	.-94     	; 0x5228 <__ftoa_engine+0xfc>
    5286:	06 94       	lsr	r0
    5288:	97 95       	ror	r25
    528a:	67 95       	ror	r22
    528c:	37 95       	ror	r19
    528e:	17 95       	ror	r17
    5290:	17 94       	ror	r1
    5292:	e1 18       	sub	r14, r1
    5294:	f1 0a       	sbc	r15, r17
    5296:	43 0b       	sbc	r20, r19
    5298:	56 0b       	sbc	r21, r22
    529a:	c9 0b       	sbc	r28, r25
    529c:	d0 09       	sbc	r29, r0
    529e:	98 f0       	brcs	.+38     	; 0x52c6 <__ftoa_engine+0x19a>
    52a0:	23 95       	inc	r18
    52a2:	7e 91       	ld	r23, -X
    52a4:	73 95       	inc	r23
    52a6:	7a 33       	cpi	r23, 0x3A	; 58
    52a8:	08 f0       	brcs	.+2      	; 0x52ac <__ftoa_engine+0x180>
    52aa:	70 e3       	ldi	r23, 0x30	; 48
    52ac:	7c 93       	st	X, r23
    52ae:	20 13       	cpse	r18, r16
    52b0:	b8 f7       	brcc	.-18     	; 0x52a0 <__ftoa_engine+0x174>
    52b2:	7e 91       	ld	r23, -X
    52b4:	70 61       	ori	r23, 0x10	; 16
    52b6:	7d 93       	st	X+, r23
    52b8:	30 f0       	brcs	.+12     	; 0x52c6 <__ftoa_engine+0x19a>
    52ba:	83 95       	inc	r24
    52bc:	71 e3       	ldi	r23, 0x31	; 49
    52be:	7d 93       	st	X+, r23
    52c0:	70 e3       	ldi	r23, 0x30	; 48
    52c2:	2a 95       	dec	r18
    52c4:	e1 f7       	brne	.-8      	; 0x52be <__ftoa_engine+0x192>
    52c6:	11 24       	eor	r1, r1
    52c8:	ef 90       	pop	r14
    52ca:	ff 90       	pop	r15
    52cc:	0f 91       	pop	r16
    52ce:	1f 91       	pop	r17
    52d0:	cf 91       	pop	r28
    52d2:	df 91       	pop	r29
    52d4:	99 27       	eor	r25, r25
    52d6:	87 fd       	sbrc	r24, 7
    52d8:	90 95       	com	r25
    52da:	08 95       	ret

000052dc <__ctype_isfalse>:
    52dc:	99 27       	eor	r25, r25
    52de:	88 27       	eor	r24, r24

000052e0 <__ctype_istrue>:
    52e0:	08 95       	ret

000052e2 <strncasecmp_P>:
    52e2:	fb 01       	movw	r30, r22
    52e4:	dc 01       	movw	r26, r24
    52e6:	41 50       	subi	r20, 0x01	; 1
    52e8:	50 40       	sbci	r21, 0x00	; 0
    52ea:	88 f0       	brcs	.+34     	; 0x530e <strncasecmp_P+0x2c>
    52ec:	8d 91       	ld	r24, X+
    52ee:	81 34       	cpi	r24, 0x41	; 65
    52f0:	1c f0       	brlt	.+6      	; 0x52f8 <strncasecmp_P+0x16>
    52f2:	8b 35       	cpi	r24, 0x5B	; 91
    52f4:	0c f4       	brge	.+2      	; 0x52f8 <strncasecmp_P+0x16>
    52f6:	80 5e       	subi	r24, 0xE0	; 224
    52f8:	65 91       	lpm	r22, Z+
    52fa:	61 34       	cpi	r22, 0x41	; 65
    52fc:	1c f0       	brlt	.+6      	; 0x5304 <strncasecmp_P+0x22>
    52fe:	6b 35       	cpi	r22, 0x5B	; 91
    5300:	0c f4       	brge	.+2      	; 0x5304 <strncasecmp_P+0x22>
    5302:	60 5e       	subi	r22, 0xE0	; 224
    5304:	86 1b       	sub	r24, r22
    5306:	61 11       	cpse	r22, r1
    5308:	71 f3       	breq	.-36     	; 0x52e6 <strncasecmp_P+0x4>
    530a:	99 0b       	sbc	r25, r25
    530c:	08 95       	ret
    530e:	88 1b       	sub	r24, r24
    5310:	fc cf       	rjmp	.-8      	; 0x530a <strncasecmp_P+0x28>

00005312 <__muluhisi3>:
    5312:	0e 94 cb 29 	call	0x5396	; 0x5396 <__umulhisi3>
    5316:	a5 9f       	mul	r26, r21
    5318:	90 0d       	add	r25, r0
    531a:	b4 9f       	mul	r27, r20
    531c:	90 0d       	add	r25, r0
    531e:	a4 9f       	mul	r26, r20
    5320:	80 0d       	add	r24, r0
    5322:	91 1d       	adc	r25, r1
    5324:	11 24       	eor	r1, r1
    5326:	08 95       	ret

00005328 <__prologue_saves__>:
    5328:	2f 92       	push	r2
    532a:	3f 92       	push	r3
    532c:	4f 92       	push	r4
    532e:	5f 92       	push	r5
    5330:	6f 92       	push	r6
    5332:	7f 92       	push	r7
    5334:	8f 92       	push	r8
    5336:	9f 92       	push	r9
    5338:	af 92       	push	r10
    533a:	bf 92       	push	r11
    533c:	cf 92       	push	r12
    533e:	df 92       	push	r13
    5340:	ef 92       	push	r14
    5342:	ff 92       	push	r15
    5344:	0f 93       	push	r16
    5346:	1f 93       	push	r17
    5348:	cf 93       	push	r28
    534a:	df 93       	push	r29
    534c:	cd b7       	in	r28, 0x3d	; 61
    534e:	de b7       	in	r29, 0x3e	; 62
    5350:	ca 1b       	sub	r28, r26
    5352:	db 0b       	sbc	r29, r27
    5354:	0f b6       	in	r0, 0x3f	; 63
    5356:	f8 94       	cli
    5358:	de bf       	out	0x3e, r29	; 62
    535a:	0f be       	out	0x3f, r0	; 63
    535c:	cd bf       	out	0x3d, r28	; 61
    535e:	09 94       	ijmp

00005360 <__epilogue_restores__>:
    5360:	2a 88       	ldd	r2, Y+18	; 0x12
    5362:	39 88       	ldd	r3, Y+17	; 0x11
    5364:	48 88       	ldd	r4, Y+16	; 0x10
    5366:	5f 84       	ldd	r5, Y+15	; 0x0f
    5368:	6e 84       	ldd	r6, Y+14	; 0x0e
    536a:	7d 84       	ldd	r7, Y+13	; 0x0d
    536c:	8c 84       	ldd	r8, Y+12	; 0x0c
    536e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5370:	aa 84       	ldd	r10, Y+10	; 0x0a
    5372:	b9 84       	ldd	r11, Y+9	; 0x09
    5374:	c8 84       	ldd	r12, Y+8	; 0x08
    5376:	df 80       	ldd	r13, Y+7	; 0x07
    5378:	ee 80       	ldd	r14, Y+6	; 0x06
    537a:	fd 80       	ldd	r15, Y+5	; 0x05
    537c:	0c 81       	ldd	r16, Y+4	; 0x04
    537e:	1b 81       	ldd	r17, Y+3	; 0x03
    5380:	aa 81       	ldd	r26, Y+2	; 0x02
    5382:	b9 81       	ldd	r27, Y+1	; 0x01
    5384:	ce 0f       	add	r28, r30
    5386:	d1 1d       	adc	r29, r1
    5388:	0f b6       	in	r0, 0x3f	; 63
    538a:	f8 94       	cli
    538c:	de bf       	out	0x3e, r29	; 62
    538e:	0f be       	out	0x3f, r0	; 63
    5390:	cd bf       	out	0x3d, r28	; 61
    5392:	ed 01       	movw	r28, r26
    5394:	08 95       	ret

00005396 <__umulhisi3>:
    5396:	a2 9f       	mul	r26, r18
    5398:	b0 01       	movw	r22, r0
    539a:	b3 9f       	mul	r27, r19
    539c:	c0 01       	movw	r24, r0
    539e:	a3 9f       	mul	r26, r19
    53a0:	70 0d       	add	r23, r0
    53a2:	81 1d       	adc	r24, r1
    53a4:	11 24       	eor	r1, r1
    53a6:	91 1d       	adc	r25, r1
    53a8:	b2 9f       	mul	r27, r18
    53aa:	70 0d       	add	r23, r0
    53ac:	81 1d       	adc	r24, r1
    53ae:	11 24       	eor	r1, r1
    53b0:	91 1d       	adc	r25, r1
    53b2:	08 95       	ret

000053b4 <_exit>:
    53b4:	f8 94       	cli

000053b6 <__stop_program>:
    53b6:	ff cf       	rjmp	.-2      	; 0x53b6 <__stop_program>
