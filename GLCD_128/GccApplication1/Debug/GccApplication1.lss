
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020c  00800060  000049e8  00004a7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004c4  0080026c  0080026c  00004c88  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004c88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00004d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004439  00000000  00000000  00004e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009db  00000000  00000000  000092b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dcb  00000000  00000000  00009c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f4  00000000  00000000  0000ba60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009dd  00000000  00000000  0000c454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005023  00000000  00000000  0000ce31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  00011e54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 02 	jmp	0x46c	; 0x46c <__ctors_end>
       4:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
       8:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
       c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      10:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      14:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      18:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      1c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      20:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      24:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      28:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      2c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      30:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      34:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      38:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      3c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      40:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      44:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      48:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      4c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      50:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__bad_interrupt>
      54:	03 6e       	ori	r16, 0xE3	; 227
      56:	db 36       	cpi	r29, 0x6B	; 107
      58:	3d 9a       	sbi	0x07, 5	; 7
      5a:	99 99       	sbic	0x13, 1	; 19
      5c:	99 3d       	cpi	r25, 0xD9	; 217
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	3e 00       	.word	0x003e	; ????
      64:	00 00       	nop
      66:	80 3f       	cpi	r24, 0xF0	; 240
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	07 2c       	mov	r0, r7
      92:	7a a5       	ldd	r23, Y+42	; 0x2a
      94:	ba 6c       	ori	r27, 0xCA	; 202
      96:	c5 90       	lpm	r12, Z+
      98:	da 3b       	cpi	r29, 0xBA	; 186
      9a:	93 65       	ori	r25, 0x53	; 83
      9c:	fc 8b       	std	Y+20, r31	; 0x14
      9e:	bc 53       	subi	r27, 0x3C	; 60
      a0:	f8 10       	cpse	r15, r8
      a2:	fd 3c       	cpi	r31, 0xCD	; 205
      a4:	56 92       	lac	Z, r5
      a6:	83 4d       	sbci	r24, 0xD3	; 211
      a8:	bd 87       	std	Y+13, r27	; 0x0d
      aa:	9d 3a       	cpi	r25, 0xAD	; 173
      ac:	b6 3d       	cpi	r27, 0xD6	; 214
      ae:	cb c9       	rjmp	.-3178   	; 0xfffff446 <__eeprom_end+0xff7ef446>
      b0:	bf 5b       	subi	r27, 0xBF	; 191
      b2:	be 73       	andi	r27, 0x3E	; 62
      b4:	da 0f       	add	r29, r26
      b6:	c9 3f       	cpi	r28, 0xF9	; 249
      b8:	05 a8       	ldd	r0, Z+53	; 0x35
      ba:	4c cd       	rjmp	.-1384   	; 0xfffffb54 <__eeprom_end+0xff7efb54>
      bc:	b2 d4       	rcall	.+2404   	; 0xa22 <_ZN6parser9get_tokenEv+0x18c>
      be:	4e b9       	out	0x0e, r20	; 14
      c0:	38 36       	cpi	r19, 0x68	; 104
      c2:	a9 02       	muls	r26, r25
      c4:	0c 50       	subi	r16, 0x0C	; 12
      c6:	b9 91       	ld	r27, Y+
      c8:	86 88       	ldd	r8, Z+22	; 0x16
      ca:	08 3c       	cpi	r16, 0xC8	; 200
      cc:	a6 aa       	std	Z+54, r10	; 0x36
      ce:	aa 2a       	or	r10, r26
      d0:	be 00       	.word	0x00be	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240
      d6:	08 00       	.word	0x0008	; ????
      d8:	00 00       	nop
      da:	be 92       	st	-X, r11
      dc:	24 49       	sbci	r18, 0x94	; 148
      de:	12 3e       	cpi	r17, 0xE2	; 226
      e0:	ab aa       	std	Y+51, r10	; 0x33
      e2:	aa 2a       	or	r10, r26
      e4:	be cd       	rjmp	.-1156   	; 0xfffffc62 <__eeprom_end+0xff7efc62>
      e6:	cc cc       	rjmp	.-1640   	; 0xfffffa80 <__eeprom_end+0xff7efa80>
      e8:	4c 3e       	cpi	r20, 0xEC	; 236
      ea:	00 00       	nop
      ec:	00 80       	ld	r0, Z
      ee:	be ab       	std	Y+54, r27	; 0x36
      f0:	aa aa       	std	Y+50, r10	; 0x32
      f2:	aa 3e       	cpi	r26, 0xEA	; 234
      f4:	00 00       	nop
      f6:	00 00       	nop
      f8:	bf 00       	.word	0x00bf	; ????
      fa:	00 00       	nop
      fc:	80 3f       	cpi	r24, 0xF0	; 240
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	00 08       	sbc	r0, r0
     104:	41 78       	andi	r20, 0x81	; 129
     106:	d3 bb       	out	0x13, r29	; 19
     108:	43 87       	std	Z+11, r20	; 0x0b
     10a:	d1 13       	cpse	r29, r17
     10c:	3d 19       	sub	r19, r13
     10e:	0e 3c       	cpi	r16, 0xCE	; 206
     110:	c3 bd       	out	0x23, r28	; 35
     112:	42 82       	std	Z+2, r4	; 0x02
     114:	ad 2b       	or	r26, r29
     116:	3e 68       	ori	r19, 0x8E	; 142
     118:	ec 82       	std	Y+4, r14	; 0x04
     11a:	76 be       	out	0x36, r7	; 54
     11c:	d9 8f       	std	Y+25, r29	; 0x19
     11e:	e1 a9       	ldd	r30, Z+49	; 0x31
     120:	3e 4c       	sbci	r19, 0xCE	; 206
     122:	80 ef       	ldi	r24, 0xF0	; 240
     124:	ff be       	out	0x3f, r15	; 63
     126:	01 c4       	rjmp	.+2050   	; 0x92a <_ZN6parser9get_tokenEv+0x94>
     128:	ff 7f       	andi	r31, 0xFF	; 255
     12a:	3f 00       	.word	0x003f	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	06 64       	ori	r16, 0x46	; 70
     132:	ec 1b       	sub	r30, r28
     134:	3c 04       	cpc	r3, r12
     136:	bc 16       	cp	r11, r28
     138:	3e 3b       	cpi	r19, 0xBE	; 190
     13a:	e5 b9       	out	0x05, r30	; 5
     13c:	3c c9       	rjmp	.-3464   	; 0xfffff3b6 <__eeprom_end+0xff7ef3b6>
     13e:	3c 37       	cpi	r19, 0x7C	; 124
     140:	c2 9e       	mul	r12, r18
     142:	5a 3d       	cpi	r21, 0xDA	; 218
     144:	66 04       	cpc	r6, r6
     146:	98 08       	sbc	r9, r8
     148:	3e ea       	ldi	r19, 0xAE	; 174
     14a:	69 aa       	std	Y+49, r6	; 0x31
     14c:	aa 3e       	cpi	r26, 0xEA	; 234
     14e:	00 00       	nop
     150:	00 80       	ld	r0, Z
     152:	3f 00       	.word	0x003f	; ????

00000154 <__trampolines_end>:
     154:	4e 41       	sbci	r20, 0x1E	; 30
     156:	4e 49       	Address 0x00000156 is out of bounds.
.word	0xffff	; ????

00000157 <pstr_inity>:
     157:	49 4e 49 54 59                                      INITY

0000015c <pstr_inf>:
     15c:	49 4e 46                                            INF

0000015f <pwr_m10>:
     15f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     16f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000177 <pwr_p10>:
     177:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     187:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     197:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     1a7:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     1b7:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     1c7:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     1d7:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     1e7:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     1f7:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     207:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     217:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     227:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     237:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     247:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     257:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     267:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     277:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     287:	3d 27                                               ='

00000289 <_ZL10FontLookup>:
     289:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     299:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     2a9:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     2b9:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     2c9:	00 08 08 08 08 08 00 30 30 00 00 20 10 08 04 02     .......00.. ....
     2d9:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     2e9:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     2f9:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     309:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     319:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     329:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     339:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     349:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     359:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     369:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     379:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     389:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     399:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     3a9:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     3b9:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     3c9:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     3d9:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     3e9:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     3f9:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     409:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     419:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     429:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     439:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     449:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     459:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..
	...

0000046a <__ctors_start>:
     46a:	6d 1b       	sub	r22, r29

0000046c <__ctors_end>:
     46c:	11 24       	eor	r1, r1
     46e:	1f be       	out	0x3f, r1	; 63
     470:	cf e5       	ldi	r28, 0x5F	; 95
     472:	d8 e0       	ldi	r29, 0x08	; 8
     474:	de bf       	out	0x3e, r29	; 62
     476:	cd bf       	out	0x3d, r28	; 61

00000478 <__do_copy_data>:
     478:	12 e0       	ldi	r17, 0x02	; 2
     47a:	a0 e6       	ldi	r26, 0x60	; 96
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e8 ee       	ldi	r30, 0xE8	; 232
     480:	f9 e4       	ldi	r31, 0x49	; 73
     482:	02 c0       	rjmp	.+4      	; 0x488 <__do_copy_data+0x10>
     484:	05 90       	lpm	r0, Z+
     486:	0d 92       	st	X+, r0
     488:	ac 36       	cpi	r26, 0x6C	; 108
     48a:	b1 07       	cpc	r27, r17
     48c:	d9 f7       	brne	.-10     	; 0x484 <__do_copy_data+0xc>

0000048e <__do_clear_bss>:
     48e:	27 e0       	ldi	r18, 0x07	; 7
     490:	ac e6       	ldi	r26, 0x6C	; 108
     492:	b2 e0       	ldi	r27, 0x02	; 2
     494:	01 c0       	rjmp	.+2      	; 0x498 <.do_clear_bss_start>

00000496 <.do_clear_bss_loop>:
     496:	1d 92       	st	X+, r1

00000498 <.do_clear_bss_start>:
     498:	a0 33       	cpi	r26, 0x30	; 48
     49a:	b2 07       	cpc	r27, r18
     49c:	e1 f7       	brne	.-8      	; 0x496 <.do_clear_bss_loop>

0000049e <__do_global_ctors>:
     49e:	12 e0       	ldi	r17, 0x02	; 2
     4a0:	c6 e3       	ldi	r28, 0x36	; 54
     4a2:	d2 e0       	ldi	r29, 0x02	; 2
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__do_global_ctors+0x10>
     4a6:	21 97       	sbiw	r28, 0x01	; 1
     4a8:	fe 01       	movw	r30, r28
     4aa:	0e 94 9a 20 	call	0x4134	; 0x4134 <__tablejump2__>
     4ae:	c5 33       	cpi	r28, 0x35	; 53
     4b0:	d1 07       	cpc	r29, r17
     4b2:	c9 f7       	brne	.-14     	; 0x4a6 <__do_global_ctors+0x8>
     4b4:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <main>
     4b8:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <_exit>

000004bc <__bad_interrupt>:
     4bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004c0 <_Z6Epulsev>:
  {
   PutPixel(x+r,y+c1,((0x01) & (pgm_read_byte(&FontLookup1[d][r]) >> (c+3))));
   c1=c1-1;
  }
 }
}
     4c0:	ac 9a       	sbi	0x15, 4	; 21
     4c2:	ac 98       	cbi	0x15, 4	; 21
     4c4:	08 95       	ret

000004c6 <_Z7InitLCDv>:
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	81 bb       	out	0x11, r24	; 17
     4ca:	a0 9a       	sbi	0x14, 0	; 20
     4cc:	a4 9a       	sbi	0x14, 4	; 20
     4ce:	a3 9a       	sbi	0x14, 3	; 20
     4d0:	a2 9a       	sbi	0x14, 2	; 20
     4d2:	a1 9a       	sbi	0x14, 1	; 20
     4d4:	a9 98       	cbi	0x15, 1	; 21
     4d6:	2f e7       	ldi	r18, 0x7F	; 127
     4d8:	88 e3       	ldi	r24, 0x38	; 56
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	21 50       	subi	r18, 0x01	; 1
     4de:	80 40       	sbci	r24, 0x00	; 0
     4e0:	90 40       	sbci	r25, 0x00	; 0
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <_Z7InitLCDv+0x16>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <_Z7InitLCDv+0x20>
     4e6:	00 00       	nop
     4e8:	a9 9a       	sbi	0x15, 1	; 21
     4ea:	2f e7       	ldi	r18, 0x7F	; 127
     4ec:	88 e3       	ldi	r24, 0x38	; 56
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	21 50       	subi	r18, 0x01	; 1
     4f2:	80 40       	sbci	r24, 0x00	; 0
     4f4:	90 40       	sbci	r25, 0x00	; 0
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <_Z7InitLCDv+0x2a>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <_Z7InitLCDv+0x34>
     4fa:	00 00       	nop
     4fc:	a8 98       	cbi	0x15, 0	; 21
     4fe:	ab 9a       	sbi	0x15, 3	; 21
     500:	aa 9a       	sbi	0x15, 2	; 21
     502:	8f e3       	ldi	r24, 0x3F	; 63
     504:	82 bb       	out	0x12, r24	; 18
     506:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     50a:	80 ec       	ldi	r24, 0xC0	; 192
     50c:	82 bb       	out	0x12, r24	; 18
     50e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     512:	2f e7       	ldi	r18, 0x7F	; 127
     514:	88 e3       	ldi	r24, 0x38	; 56
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	21 50       	subi	r18, 0x01	; 1
     51a:	80 40       	sbci	r24, 0x00	; 0
     51c:	90 40       	sbci	r25, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <_Z7InitLCDv+0x52>
     520:	00 c0       	rjmp	.+0      	; 0x522 <_Z7InitLCDv+0x5c>
     522:	00 00       	nop
     524:	2f e7       	ldi	r18, 0x7F	; 127
     526:	88 e3       	ldi	r24, 0x38	; 56
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	21 50       	subi	r18, 0x01	; 1
     52c:	80 40       	sbci	r24, 0x00	; 0
     52e:	90 40       	sbci	r25, 0x00	; 0
     530:	e1 f7       	brne	.-8      	; 0x52a <_Z7InitLCDv+0x64>
     532:	00 c0       	rjmp	.+0      	; 0x534 <_Z7InitLCDv+0x6e>
     534:	00 00       	nop
     536:	ab 98       	cbi	0x15, 3	; 21
     538:	aa 98       	cbi	0x15, 2	; 21
     53a:	08 95       	ret

0000053c <_Z8PutPixelhhc>:
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	c8 2f       	mov	r28, r24
     546:	04 2f       	mov	r16, r20
     548:	68 30       	cpi	r22, 0x08	; 8
     54a:	68 f0       	brcs	.+26     	; 0x566 <_Z8PutPixelhhc+0x2a>
     54c:	86 2f       	mov	r24, r22
     54e:	88 50       	subi	r24, 0x08	; 8
     550:	88 30       	cpi	r24, 0x08	; 8
     552:	e8 f7       	brcc	.-6      	; 0x54e <_Z8PutPixelhhc+0x12>
     554:	16 2f       	mov	r17, r22
     556:	17 70       	andi	r17, 0x07	; 7
     558:	d8 ef       	ldi	r29, 0xF8	; 248
     55a:	d6 0f       	add	r29, r22
     55c:	d6 95       	lsr	r29
     55e:	d6 95       	lsr	r29
     560:	d6 95       	lsr	r29
     562:	df 5f       	subi	r29, 0xFF	; 255
     564:	02 c0       	rjmp	.+4      	; 0x56a <_Z8PutPixelhhc+0x2e>
     566:	16 2f       	mov	r17, r22
     568:	d0 e0       	ldi	r29, 0x00	; 0
     56a:	c0 34       	cpi	r28, 0x40	; 64
     56c:	80 f4       	brcc	.+32     	; 0x58e <_Z8PutPixelhhc+0x52>
     56e:	a8 98       	cbi	0x15, 0	; 21
     570:	ab 9a       	sbi	0x15, 3	; 21
     572:	aa 98       	cbi	0x15, 2	; 21
     574:	d7 70       	andi	r29, 0x07	; 7
     576:	8d 2f       	mov	r24, r29
     578:	88 6b       	ori	r24, 0xB8	; 184
     57a:	82 bb       	out	0x12, r24	; 18
     57c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     580:	cf 73       	andi	r28, 0x3F	; 63
     582:	8c 2f       	mov	r24, r28
     584:	80 64       	ori	r24, 0x40	; 64
     586:	82 bb       	out	0x12, r24	; 18
     588:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     58c:	11 c0       	rjmp	.+34     	; 0x5b0 <_Z8PutPixelhhc+0x74>
     58e:	c0 54       	subi	r28, 0x40	; 64
     590:	a8 98       	cbi	0x15, 0	; 21
     592:	ab 98       	cbi	0x15, 3	; 21
     594:	aa 9a       	sbi	0x15, 2	; 21
     596:	d7 70       	andi	r29, 0x07	; 7
     598:	8d 2f       	mov	r24, r29
     59a:	88 6b       	ori	r24, 0xB8	; 184
     59c:	82 bb       	out	0x12, r24	; 18
     59e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     5a2:	cf 73       	andi	r28, 0x3F	; 63
     5a4:	8c 2f       	mov	r24, r28
     5a6:	80 64       	ori	r24, 0x40	; 64
     5a8:	82 bb       	out	0x12, r24	; 18
     5aa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     5ae:	c0 5c       	subi	r28, 0xC0	; 192
     5b0:	a8 9a       	sbi	0x15, 0	; 21
     5b2:	01 30       	cpi	r16, 0x01	; 1
     5b4:	d1 f4       	brne	.+52     	; 0x5ea <_Z8PutPixelhhc+0xae>
     5b6:	ec 2f       	mov	r30, r28
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	e2 5d       	subi	r30, 0xD2	; 210
     5c8:	fc 4f       	sbci	r31, 0xFC	; 252
     5ca:	ed 0f       	add	r30, r29
     5cc:	f1 1d       	adc	r31, r1
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <_Z8PutPixelhhc+0x9c>
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	1a 95       	dec	r17
     5da:	e2 f7       	brpl	.-8      	; 0x5d4 <_Z8PutPixelhhc+0x98>
     5dc:	90 81       	ld	r25, Z
     5de:	89 2b       	or	r24, r25
     5e0:	80 83       	st	Z, r24
     5e2:	82 bb       	out	0x12, r24	; 18
     5e4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     5e8:	1a c0       	rjmp	.+52     	; 0x61e <_Z8PutPixelhhc+0xe2>
     5ea:	ec 2f       	mov	r30, r28
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <_Z8PutPixelhhc+0xbc>
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	1a 95       	dec	r17
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <_Z8PutPixelhhc+0xb8>
     5fc:	80 95       	com	r24
     5fe:	ee 0f       	add	r30, r30
     600:	ff 1f       	adc	r31, r31
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	e2 5d       	subi	r30, 0xD2	; 210
     60c:	fc 4f       	sbci	r31, 0xFC	; 252
     60e:	ed 0f       	add	r30, r29
     610:	f1 1d       	adc	r31, r1
     612:	90 81       	ld	r25, Z
     614:	89 23       	and	r24, r25
     616:	80 83       	st	Z, r24
     618:	82 bb       	out	0x12, r24	; 18
     61a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	08 95       	ret

00000628 <_Z9LCD_Clearv>:
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	00 e0       	ldi	r16, 0x00	; 0
     634:	10 e0       	ldi	r17, 0x00	; 0
     636:	f1 2c       	mov	r15, r1
     638:	d0 2f       	mov	r29, r16
     63a:	cf 2d       	mov	r28, r15
     63c:	ec 2f       	mov	r30, r28
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	e2 5d       	subi	r30, 0xD2	; 210
     64e:	fc 4f       	sbci	r31, 0xFC	; 252
     650:	e0 0f       	add	r30, r16
     652:	f1 1f       	adc	r31, r17
     654:	10 82       	st	Z, r1
     656:	c0 34       	cpi	r28, 0x40	; 64
     658:	80 f4       	brcc	.+32     	; 0x67a <_Z9LCD_Clearv+0x52>
     65a:	a8 98       	cbi	0x15, 0	; 21
     65c:	ab 9a       	sbi	0x15, 3	; 21
     65e:	aa 98       	cbi	0x15, 2	; 21
     660:	d7 70       	andi	r29, 0x07	; 7
     662:	8d 2f       	mov	r24, r29
     664:	88 6b       	ori	r24, 0xB8	; 184
     666:	82 bb       	out	0x12, r24	; 18
     668:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     66c:	cf 73       	andi	r28, 0x3F	; 63
     66e:	8c 2f       	mov	r24, r28
     670:	80 64       	ori	r24, 0x40	; 64
     672:	82 bb       	out	0x12, r24	; 18
     674:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     678:	11 c0       	rjmp	.+34     	; 0x69c <_Z9LCD_Clearv+0x74>
     67a:	c0 54       	subi	r28, 0x40	; 64
     67c:	a8 98       	cbi	0x15, 0	; 21
     67e:	ab 98       	cbi	0x15, 3	; 21
     680:	aa 9a       	sbi	0x15, 2	; 21
     682:	d7 70       	andi	r29, 0x07	; 7
     684:	8d 2f       	mov	r24, r29
     686:	88 6b       	ori	r24, 0xB8	; 184
     688:	82 bb       	out	0x12, r24	; 18
     68a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     68e:	cf 73       	andi	r28, 0x3F	; 63
     690:	8c 2f       	mov	r24, r28
     692:	80 64       	ori	r24, 0x40	; 64
     694:	82 bb       	out	0x12, r24	; 18
     696:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     69a:	c0 5c       	subi	r28, 0xC0	; 192
     69c:	a8 9a       	sbi	0x15, 0	; 21
     69e:	12 ba       	out	0x12, r1	; 18
     6a0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_Z6Epulsev>
     6a4:	cf 5f       	subi	r28, 0xFF	; 255
     6a6:	52 f6       	brpl	.-108    	; 0x63c <_Z9LCD_Clearv+0x14>
     6a8:	0f 5f       	subi	r16, 0xFF	; 255
     6aa:	1f 4f       	sbci	r17, 0xFF	; 255
     6ac:	08 30       	cpi	r16, 0x08	; 8
     6ae:	11 05       	cpc	r17, r1
     6b0:	19 f6       	brne	.-122    	; 0x638 <_Z9LCD_Clearv+0x10>
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	08 95       	ret

000006be <_Z4lineccccc>:
     6be:	7f 92       	push	r7
     6c0:	8f 92       	push	r8
     6c2:	9f 92       	push	r9
     6c4:	af 92       	push	r10
     6c6:	bf 92       	push	r11
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	d8 2f       	mov	r29, r24
     6da:	c6 2f       	mov	r28, r22
     6dc:	74 2e       	mov	r7, r20
     6de:	82 2e       	mov	r8, r18
     6e0:	a2 2e       	mov	r10, r18
     6e2:	b1 2c       	mov	r11, r1
     6e4:	a6 1a       	sub	r10, r22
     6e6:	b1 08       	sbc	r11, r1
     6e8:	c4 2e       	mov	r12, r20
     6ea:	d1 2c       	mov	r13, r1
     6ec:	c8 1a       	sub	r12, r24
     6ee:	d1 08       	sbc	r13, r1
     6f0:	bb 20       	and	r11, r11
     6f2:	34 f4       	brge	.+12     	; 0x700 <_Z4lineccccc+0x42>
     6f4:	b1 94       	neg	r11
     6f6:	a1 94       	neg	r10
     6f8:	b1 08       	sbc	r11, r1
     6fa:	99 24       	eor	r9, r9
     6fc:	9a 94       	dec	r9
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <_Z4lineccccc+0x46>
     700:	99 24       	eor	r9, r9
     702:	93 94       	inc	r9
     704:	dd 20       	and	r13, r13
     706:	2c f4       	brge	.+10     	; 0x712 <_Z4lineccccc+0x54>
     708:	d1 94       	neg	r13
     70a:	c1 94       	neg	r12
     70c:	d1 08       	sbc	r13, r1
     70e:	1f ef       	ldi	r17, 0xFF	; 255
     710:	01 c0       	rjmp	.+2      	; 0x714 <_Z4lineccccc+0x56>
     712:	11 e0       	ldi	r17, 0x01	; 1
     714:	aa 0c       	add	r10, r10
     716:	bb 1c       	adc	r11, r11
     718:	cc 0c       	add	r12, r12
     71a:	dd 1c       	adc	r13, r13
     71c:	40 2f       	mov	r20, r16
     71e:	6c 2f       	mov	r22, r28
     720:	8d 2f       	mov	r24, r29
     722:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z8PutPixelhhc>
     726:	ac 14       	cp	r10, r12
     728:	bd 04       	cpc	r11, r13
     72a:	c4 f4       	brge	.+48     	; 0x75c <_Z4lineccccc+0x9e>
     72c:	c6 01       	movw	r24, r12
     72e:	95 95       	asr	r25
     730:	87 95       	ror	r24
     732:	75 01       	movw	r14, r10
     734:	e8 1a       	sub	r14, r24
     736:	f9 0a       	sbc	r15, r25
     738:	7d 16       	cp	r7, r29
     73a:	39 f1       	breq	.+78     	; 0x78a <_Z4lineccccc+0xcc>
     73c:	ff 20       	and	r15, r15
     73e:	1c f0       	brlt	.+6      	; 0x746 <_Z4lineccccc+0x88>
     740:	c9 0d       	add	r28, r9
     742:	ec 18       	sub	r14, r12
     744:	fd 08       	sbc	r15, r13
     746:	d1 0f       	add	r29, r17
     748:	ea 0c       	add	r14, r10
     74a:	fb 1c       	adc	r15, r11
     74c:	40 2f       	mov	r20, r16
     74e:	6c 2f       	mov	r22, r28
     750:	8d 2f       	mov	r24, r29
     752:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z8PutPixelhhc>
     756:	d7 11       	cpse	r29, r7
     758:	f1 cf       	rjmp	.-30     	; 0x73c <_Z4lineccccc+0x7e>
     75a:	17 c0       	rjmp	.+46     	; 0x78a <_Z4lineccccc+0xcc>
     75c:	c5 01       	movw	r24, r10
     75e:	95 95       	asr	r25
     760:	87 95       	ror	r24
     762:	76 01       	movw	r14, r12
     764:	e8 1a       	sub	r14, r24
     766:	f9 0a       	sbc	r15, r25
     768:	8c 16       	cp	r8, r28
     76a:	79 f0       	breq	.+30     	; 0x78a <_Z4lineccccc+0xcc>
     76c:	ff 20       	and	r15, r15
     76e:	1c f0       	brlt	.+6      	; 0x776 <_Z4lineccccc+0xb8>
     770:	d1 0f       	add	r29, r17
     772:	ea 18       	sub	r14, r10
     774:	fb 08       	sbc	r15, r11
     776:	c9 0d       	add	r28, r9
     778:	ec 0c       	add	r14, r12
     77a:	fd 1c       	adc	r15, r13
     77c:	40 2f       	mov	r20, r16
     77e:	6c 2f       	mov	r22, r28
     780:	8d 2f       	mov	r24, r29
     782:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z8PutPixelhhc>
     786:	c8 11       	cpse	r28, r8
     788:	f1 cf       	rjmp	.-30     	; 0x76c <_Z4lineccccc+0xae>
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	bf 90       	pop	r11
     79c:	af 90       	pop	r10
     79e:	9f 90       	pop	r9
     7a0:	8f 90       	pop	r8
     7a2:	7f 90       	pop	r7
     7a4:	08 95       	ret

000007a6 <_Z11DisplayCharhhc>:
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	d6 2e       	mov	r13, r22
     7b8:	40 52       	subi	r20, 0x20	; 32
     7ba:	24 2f       	mov	r18, r20
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	89 01       	movw	r16, r18
     7c0:	00 0f       	add	r16, r16
     7c2:	11 1f       	adc	r17, r17
     7c4:	00 0f       	add	r16, r16
     7c6:	11 1f       	adc	r17, r17
     7c8:	02 0f       	add	r16, r18
     7ca:	13 1f       	adc	r17, r19
     7cc:	07 57       	subi	r16, 0x77	; 119
     7ce:	1d 4f       	sbci	r17, 0xFD	; 253
     7d0:	0f 2e       	mov	r0, r31
     7d2:	f5 e0       	ldi	r31, 0x05	; 5
     7d4:	cf 2e       	mov	r12, r31
     7d6:	f0 2d       	mov	r31, r0
     7d8:	c8 0e       	add	r12, r24
     7da:	e8 2e       	mov	r14, r24
     7dc:	fd 2c       	mov	r15, r13
     7de:	c0 e0       	ldi	r28, 0x00	; 0
     7e0:	d0 e0       	ldi	r29, 0x00	; 0
     7e2:	f8 01       	movw	r30, r16
     7e4:	44 91       	lpm	r20, Z
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	0c 2e       	mov	r0, r28
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <_Z11DisplayCharhhc+0x4a>
     7ec:	55 95       	asr	r21
     7ee:	47 95       	ror	r20
     7f0:	0a 94       	dec	r0
     7f2:	e2 f7       	brpl	.-8      	; 0x7ec <_Z11DisplayCharhhc+0x46>
     7f4:	41 70       	andi	r20, 0x01	; 1
     7f6:	6f 2d       	mov	r22, r15
     7f8:	8e 2d       	mov	r24, r14
     7fa:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z8PutPixelhhc>
     7fe:	21 96       	adiw	r28, 0x01	; 1
     800:	f3 94       	inc	r15
     802:	c8 30       	cpi	r28, 0x08	; 8
     804:	d1 05       	cpc	r29, r1
     806:	69 f7       	brne	.-38     	; 0x7e2 <_Z11DisplayCharhhc+0x3c>
     808:	0f 5f       	subi	r16, 0xFF	; 255
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
     80c:	e3 94       	inc	r14
     80e:	ce 10       	cpse	r12, r14
     810:	e5 cf       	rjmp	.-54     	; 0x7dc <_Z11DisplayCharhhc+0x36>
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	cf 90       	pop	r12
     822:	08 95       	ret

00000824 <_Z11DisplayTexthhPc>:

/*********************************************************************************/
/*         Display Text (5x7)                       */
/*********************************************************************************/
void DisplayText(unsigned char x, unsigned char y, char d[21])
{
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
int i;
int j;
j=strlen(d);
     830:	fa 01       	movw	r30, r20
     832:	01 90       	ld	r0, Z+
     834:	00 20       	and	r0, r0
     836:	e9 f7       	brne	.-6      	; 0x832 <_Z11DisplayTexthhPc+0xe>
     838:	31 97       	sbiw	r30, 0x01	; 1
     83a:	e4 1b       	sub	r30, r20
     83c:	f5 0b       	sbc	r31, r21
 for (i=0;i<j;i++)
     83e:	1e 16       	cp	r1, r30
     840:	1f 06       	cpc	r1, r31
     842:	8c f4       	brge	.+34     	; 0x866 <__stack+0x7>
     844:	d6 2f       	mov	r29, r22
     846:	8a 01       	movw	r16, r20
     848:	7a 01       	movw	r14, r20
     84a:	ee 0e       	add	r14, r30
     84c:	ff 1e       	adc	r15, r31
     84e:	c8 2f       	mov	r28, r24
 {
  DisplayChar((i*6)+x,y,d[i]);
     850:	f8 01       	movw	r30, r16
     852:	41 91       	ld	r20, Z+
     854:	8f 01       	movw	r16, r30
     856:	6d 2f       	mov	r22, r29
     858:	8c 2f       	mov	r24, r28
     85a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z11DisplayCharhhc>
     85e:	ca 5f       	subi	r28, 0xFA	; 250
void DisplayText(unsigned char x, unsigned char y, char d[21])
{
int i;
int j;
j=strlen(d);
 for (i=0;i<j;i++)
     860:	0e 15       	cp	r16, r14
     862:	1f 05       	cpc	r17, r15
     864:	a9 f7       	brne	.-22     	; 0x850 <_Z11DisplayTexthhPc+0x2c>
 {
  DisplayChar((i*6)+x,y,d[i]);
 } 
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	08 95       	ret

00000874 <_ZN6parserC1Ev>:
};
// Parser constructor.
parser::parser()
{
    int i;
    exp_ptr = NULL;
     874:	fc 01       	movw	r30, r24
     876:	11 82       	std	Z+1, r1	; 0x01
     878:	10 82       	st	Z, r1
     87a:	72 96       	adiw	r30, 0x12	; 18
     87c:	9c 01       	movw	r18, r24
     87e:	26 5c       	subi	r18, 0xC6	; 198
     880:	3f 4f       	sbci	r19, 0xFF	; 255
    for (i = 0; i < NUMVARS; i++)
        vars[i] = 0.0;
     882:	11 92       	st	Z+, r1
     884:	11 92       	st	Z+, r1
     886:	11 92       	st	Z+, r1
     888:	11 92       	st	Z+, r1
// Parser constructor.
parser::parser()
{
    int i;
    exp_ptr = NULL;
    for (i = 0; i < NUMVARS; i++)
     88a:	e2 17       	cp	r30, r18
     88c:	f3 07       	cpc	r31, r19
     88e:	c9 f7       	brne	.-14     	; 0x882 <_ZN6parserC1Ev+0xe>
        vars[i] = 0.0;
    errormsg[0] = '\0';
     890:	fc 01       	movw	r30, r24
     892:	12 ae       	std	Z+58, r1	; 0x3a
     894:	08 95       	ret

00000896 <_ZN6parser9get_tokenEv>:
            strcpy(errormsg, "Error");
        }
}
// Obtain the next token.
void parser::get_token()
{
     896:	af 92       	push	r10
     898:	bf 92       	push	r11
     89a:	cf 92       	push	r12
     89c:	df 92       	push	r13
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	6c 01       	movw	r12, r24
    char *temp;
    tok_type = 0;
     8ac:	dc 01       	movw	r26, r24
     8ae:	51 96       	adiw	r26, 0x11	; 17
     8b0:	1c 92       	st	X, r1
     8b2:	51 97       	sbiw	r26, 0x11	; 17
    temp = token;
    *temp = '\0';
     8b4:	12 96       	adiw	r26, 0x02	; 2
     8b6:	1c 92       	st	X, r1
     8b8:	12 97       	sbiw	r26, 0x02	; 2
    if (!*exp_ptr)  // at end of expression
     8ba:	ed 91       	ld	r30, X+
     8bc:	fc 91       	ld	r31, X
     8be:	80 81       	ld	r24, Z
     8c0:	88 23       	and	r24, r24
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <_ZN6parser9get_tokenEv+0x30>
     8c4:	a8 c0       	rjmp	.+336    	; 0xa16 <_ZN6parser9get_tokenEv+0x180>
        return;
    while (isspace(*exp_ptr))  // skip over white space
     8c6:	f6 01       	movw	r30, r12
     8c8:	c0 81       	ld	r28, Z
     8ca:	d1 81       	ldd	r29, Z+1	; 0x01
     8cc:	f8 80       	ld	r15, Y
     8ce:	0f 2d       	mov	r16, r15
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	c8 01       	movw	r24, r16
     8d4:	0e 94 cf 20 	call	0x419e	; 0x419e <isspace>
     8d8:	89 2b       	or	r24, r25
     8da:	29 f0       	breq	.+10     	; 0x8e6 <_ZN6parser9get_tokenEv+0x50>
        ++exp_ptr;
     8dc:	21 96       	adiw	r28, 0x01	; 1
     8de:	d6 01       	movw	r26, r12
     8e0:	cd 93       	st	X+, r28
     8e2:	dc 93       	st	X, r29
    tok_type = 0;
    temp = token;
    *temp = '\0';
    if (!*exp_ptr)  // at end of expression
        return;
    while (isspace(*exp_ptr))  // skip over white space
     8e4:	f0 cf       	rjmp	.-32     	; 0x8c6 <_ZN6parser9get_tokenEv+0x30>
        ++exp_ptr;
    if (strchr("+-*/%^=()", *exp_ptr))
     8e6:	b8 01       	movw	r22, r16
     8e8:	8e ef       	ldi	r24, 0xFE	; 254
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <strchr>
     8f0:	89 2b       	or	r24, r25
     8f2:	89 f0       	breq	.+34     	; 0x916 <_ZN6parser9get_tokenEv+0x80>
    {
        tok_type = DELIMITER;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	f6 01       	movw	r30, r12
     8f8:	81 8b       	std	Z+17, r24	; 0x11
        *temp++ = *exp_ptr++;  // advance to next char
     8fa:	56 01       	movw	r10, r12
     8fc:	f3 e0       	ldi	r31, 0x03	; 3
     8fe:	af 0e       	add	r10, r31
     900:	b1 1c       	adc	r11, r1
     902:	ce 01       	movw	r24, r28
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	d6 01       	movw	r26, r12
     908:	11 96       	adiw	r26, 0x01	; 1
     90a:	9c 93       	st	X, r25
     90c:	8e 93       	st	-X, r24
     90e:	88 81       	ld	r24, Y
     910:	12 96       	adiw	r26, 0x02	; 2
     912:	8c 93       	st	X, r24
     914:	6b c0       	rjmp	.+214    	; 0x9ec <_ZN6parser9get_tokenEv+0x156>
// Obtain the next token.
void parser::get_token()
{
    char *temp;
    tok_type = 0;
    temp = token;
     916:	56 01       	movw	r10, r12
     918:	b2 e0       	ldi	r27, 0x02	; 2
     91a:	ab 0e       	add	r10, r27
     91c:	b1 1c       	adc	r11, r1
    if (strchr("+-*/%^=()", *exp_ptr))
    {
        tok_type = DELIMITER;
        *temp++ = *exp_ptr++;  // advance to next char
    }
    else if (isalpha(*exp_ptr))
     91e:	c8 01       	movw	r24, r16
     920:	0e 94 c7 20 	call	0x418e	; 0x418e <isalpha>
     924:	89 2b       	or	r24, r25
     926:	b9 f1       	breq	.+110    	; 0x996 <_ZN6parser9get_tokenEv+0x100>
     928:	75 01       	movw	r14, r10
     92a:	57 01       	movw	r10, r14
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     92c:	f6 01       	movw	r30, r12
     92e:	c0 81       	ld	r28, Z
     930:	d1 81       	ldd	r29, Z+1	; 0x01
     932:	18 81       	ld	r17, Y
     934:	61 2f       	mov	r22, r17
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <strchr>
     940:	89 2b       	or	r24, r25
     942:	89 f4       	brne	.+34     	; 0x966 <_ZN6parser9get_tokenEv+0xd0>
     944:	11 23       	and	r17, r17
     946:	79 f0       	breq	.+30     	; 0x966 <_ZN6parser9get_tokenEv+0xd0>
            *temp++ = toupper(*exp_ptr++);
     948:	ce 01       	movw	r24, r28
     94a:	01 96       	adiw	r24, 0x01	; 1
     94c:	d6 01       	movw	r26, r12
     94e:	8d 93       	st	X+, r24
     950:	9c 93       	st	X, r25
     952:	88 81       	ld	r24, Y
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <toupper>
     95a:	f7 01       	movw	r30, r14
     95c:	80 83       	st	Z, r24
     95e:	ff ef       	ldi	r31, 0xFF	; 255
     960:	ef 1a       	sub	r14, r31
     962:	ff 0a       	sbc	r15, r31
        tok_type = DELIMITER;
        *temp++ = *exp_ptr++;  // advance to next char
    }
    else if (isalpha(*exp_ptr))
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     964:	e2 cf       	rjmp	.-60     	; 0x92a <_ZN6parser9get_tokenEv+0x94>
            *temp++ = toupper(*exp_ptr++);
        while (isspace(*exp_ptr))  // skip over white space
     966:	d6 01       	movw	r26, r12
     968:	cd 91       	ld	r28, X+
     96a:	dc 91       	ld	r29, X
     96c:	18 81       	ld	r17, Y
     96e:	81 2f       	mov	r24, r17
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 cf 20 	call	0x419e	; 0x419e <isspace>
     976:	89 2b       	or	r24, r25
     978:	29 f0       	breq	.+10     	; 0x984 <_ZN6parser9get_tokenEv+0xee>
            ++exp_ptr;
     97a:	21 96       	adiw	r28, 0x01	; 1
     97c:	f6 01       	movw	r30, r12
     97e:	d1 83       	std	Z+1, r29	; 0x01
     980:	c0 83       	st	Z, r28
    }
    else if (isalpha(*exp_ptr))
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
            *temp++ = toupper(*exp_ptr++);
        while (isspace(*exp_ptr))  // skip over white space
     982:	f1 cf       	rjmp	.-30     	; 0x966 <_ZN6parser9get_tokenEv+0xd0>
            ++exp_ptr;
        tok_type = (*exp_ptr == '(') ? FUNCTION : VARIABLE;
     984:	18 32       	cpi	r17, 0x28	; 40
     986:	11 f0       	breq	.+4      	; 0x98c <_ZN6parser9get_tokenEv+0xf6>
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	01 c0       	rjmp	.+2      	; 0x98e <_ZN6parser9get_tokenEv+0xf8>
     98c:	84 e0       	ldi	r24, 0x04	; 4
     98e:	d6 01       	movw	r26, r12
     990:	51 96       	adiw	r26, 0x11	; 17
     992:	8c 93       	st	X, r24
     994:	2b c0       	rjmp	.+86     	; 0x9ec <_ZN6parser9get_tokenEv+0x156>
    }
    else if (isdigit(*exp_ptr) || *exp_ptr == '.')
     996:	8f 2d       	mov	r24, r15
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	c0 97       	sbiw	r24, 0x30	; 48
     99c:	0a 97       	sbiw	r24, 0x0a	; 10
     99e:	18 f0       	brcs	.+6      	; 0x9a6 <_ZN6parser9get_tokenEv+0x110>
     9a0:	be e2       	ldi	r27, 0x2E	; 46
     9a2:	fb 12       	cpse	r15, r27
     9a4:	23 c0       	rjmp	.+70     	; 0x9ec <_ZN6parser9get_tokenEv+0x156>
     9a6:	75 01       	movw	r14, r10
     9a8:	57 01       	movw	r10, r14
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     9aa:	f6 01       	movw	r30, r12
     9ac:	c0 81       	ld	r28, Z
     9ae:	d1 81       	ldd	r29, Z+1	; 0x01
     9b0:	18 81       	ld	r17, Y
     9b2:	61 2f       	mov	r22, r17
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	88 e0       	ldi	r24, 0x08	; 8
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <strchr>
     9be:	89 2b       	or	r24, r25
     9c0:	89 f4       	brne	.+34     	; 0x9e4 <_ZN6parser9get_tokenEv+0x14e>
     9c2:	11 23       	and	r17, r17
     9c4:	79 f0       	breq	.+30     	; 0x9e4 <_ZN6parser9get_tokenEv+0x14e>
            *temp++ = toupper(*exp_ptr++);
     9c6:	ce 01       	movw	r24, r28
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	d6 01       	movw	r26, r12
     9cc:	8d 93       	st	X+, r24
     9ce:	9c 93       	st	X, r25
     9d0:	88 81       	ld	r24, Y
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <toupper>
     9d8:	f7 01       	movw	r30, r14
     9da:	80 83       	st	Z, r24
     9dc:	ff ef       	ldi	r31, 0xFF	; 255
     9de:	ef 1a       	sub	r14, r31
     9e0:	ff 0a       	sbc	r15, r31
            ++exp_ptr;
        tok_type = (*exp_ptr == '(') ? FUNCTION : VARIABLE;
    }
    else if (isdigit(*exp_ptr) || *exp_ptr == '.')
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     9e2:	e2 cf       	rjmp	.-60     	; 0x9a8 <_ZN6parser9get_tokenEv+0x112>
            *temp++ = toupper(*exp_ptr++);
        tok_type = NUMBER;
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	d6 01       	movw	r26, r12
     9e8:	51 96       	adiw	r26, 0x11	; 17
     9ea:	8c 93       	st	X, r24
    }
    *temp = '\0';
     9ec:	f5 01       	movw	r30, r10
     9ee:	10 82       	st	Z, r1
    if ((tok_type == VARIABLE) && (token[1]))
     9f0:	d6 01       	movw	r26, r12
     9f2:	51 96       	adiw	r26, 0x11	; 17
     9f4:	8c 91       	ld	r24, X
     9f6:	51 97       	sbiw	r26, 0x11	; 17
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	69 f4       	brne	.+26     	; 0xa16 <_ZN6parser9get_tokenEv+0x180>
     9fc:	13 96       	adiw	r26, 0x03	; 3
     9fe:	8c 91       	ld	r24, X
     a00:	13 97       	sbiw	r26, 0x03	; 3
     a02:	88 23       	and	r24, r24
     a04:	41 f0       	breq	.+16     	; 0xa16 <_ZN6parser9get_tokenEv+0x180>
        strcpy(errormsg, "Error");
     a06:	da 96       	adiw	r26, 0x3a	; 58
     a08:	86 e0       	ldi	r24, 0x06	; 6
     a0a:	e5 e1       	ldi	r30, 0x15	; 21
     a0c:	f1 e0       	ldi	r31, 0x01	; 1
     a0e:	01 90       	ld	r0, Z+
     a10:	0d 92       	st	X+, r0
     a12:	8a 95       	dec	r24
     a14:	e1 f7       	brne	.-8      	; 0xa0e <_ZN6parser9get_tokenEv+0x178>
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	cf 90       	pop	r12
     a26:	bf 90       	pop	r11
     a28:	af 90       	pop	r10
     a2a:	08 95       	ret

00000a2c <_ZN6parser9eval_exp2ERd>:
    }
    eval_exp2(result);
}
// Add or subtract two terms.
void parser::eval_exp2(double &result)
{
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	00 d0       	rcall	.+0      	; 0xa3a <_ZN6parser9eval_exp2ERd+0xe>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <_ZN6parser9eval_exp2ERd+0x10>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	8c 01       	movw	r16, r24
     a42:	7b 01       	movw	r14, r22
    char op;
    double temp;
    eval_exp3(result);
     a44:	0e 94 37 07 	call	0xe6e	; 0xe6e <_ZN6parser9eval_exp3ERd>
    while ((op = *token) == '+' || op == '-')
     a48:	f8 01       	movw	r30, r16
     a4a:	82 81       	ldd	r24, Z+2	; 0x02
     a4c:	8b 32       	cpi	r24, 0x2B	; 43
     a4e:	e1 f0       	breq	.+56     	; 0xa88 <_ZN6parser9eval_exp2ERd+0x5c>
     a50:	8d 32       	cpi	r24, 0x2D	; 45
     a52:	a1 f5       	brne	.+104    	; 0xabc <_ZN6parser9eval_exp2ERd+0x90>
    {
        get_token();
     a54:	c8 01       	movw	r24, r16
     a56:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
        eval_exp3(temp);
     a5a:	be 01       	movw	r22, r28
     a5c:	6f 5f       	subi	r22, 0xFF	; 255
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	c8 01       	movw	r24, r16
     a62:	0e 94 37 07 	call	0xe6e	; 0xe6e <_ZN6parser9eval_exp3ERd>
        switch (op)
        {
        case '-':
            result = result - temp;
     a66:	29 81       	ldd	r18, Y+1	; 0x01
     a68:	3a 81       	ldd	r19, Y+2	; 0x02
     a6a:	4b 81       	ldd	r20, Y+3	; 0x03
     a6c:	5c 81       	ldd	r21, Y+4	; 0x04
     a6e:	f7 01       	movw	r30, r14
     a70:	60 81       	ld	r22, Z
     a72:	71 81       	ldd	r23, Z+1	; 0x01
     a74:	82 81       	ldd	r24, Z+2	; 0x02
     a76:	93 81       	ldd	r25, Z+3	; 0x03
     a78:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
     a7c:	f7 01       	movw	r30, r14
     a7e:	60 83       	st	Z, r22
     a80:	71 83       	std	Z+1, r23	; 0x01
     a82:	82 83       	std	Z+2, r24	; 0x02
     a84:	93 83       	std	Z+3, r25	; 0x03
            break;
     a86:	e0 cf       	rjmp	.-64     	; 0xa48 <_ZN6parser9eval_exp2ERd+0x1c>
    char op;
    double temp;
    eval_exp3(result);
    while ((op = *token) == '+' || op == '-')
    {
        get_token();
     a88:	c8 01       	movw	r24, r16
     a8a:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
        eval_exp3(temp);
     a8e:	be 01       	movw	r22, r28
     a90:	6f 5f       	subi	r22, 0xFF	; 255
     a92:	7f 4f       	sbci	r23, 0xFF	; 255
     a94:	c8 01       	movw	r24, r16
     a96:	0e 94 37 07 	call	0xe6e	; 0xe6e <_ZN6parser9eval_exp3ERd>
        {
        case '-':
            result = result - temp;
            break;
        case '+':
            result = result + temp;
     a9a:	29 81       	ldd	r18, Y+1	; 0x01
     a9c:	3a 81       	ldd	r19, Y+2	; 0x02
     a9e:	4b 81       	ldd	r20, Y+3	; 0x03
     aa0:	5c 81       	ldd	r21, Y+4	; 0x04
     aa2:	f7 01       	movw	r30, r14
     aa4:	60 81       	ld	r22, Z
     aa6:	71 81       	ldd	r23, Z+1	; 0x01
     aa8:	82 81       	ldd	r24, Z+2	; 0x02
     aaa:	93 81       	ldd	r25, Z+3	; 0x03
     aac:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
     ab0:	f7 01       	movw	r30, r14
     ab2:	60 83       	st	Z, r22
     ab4:	71 83       	std	Z+1, r23	; 0x01
     ab6:	82 83       	std	Z+2, r24	; 0x02
     ab8:	93 83       	std	Z+3, r25	; 0x03
            break;
     aba:	c6 cf       	rjmp	.-116    	; 0xa48 <_ZN6parser9eval_exp2ERd+0x1c>
        }
    }
}
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <_ZN6parser9eval_exp6ERd>:
    if (op == '-')
        result = -result;
}
// Process a function, a parenthesized expression, a value or a variable
void parser::eval_exp6(double &result)
{
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	2f 97       	sbiw	r28, 0x0f	; 15
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	8c 01       	movw	r16, r24
     af2:	7b 01       	movw	r14, r22
    bool isfunc = (tok_type == FUNCTION);
     af4:	dc 01       	movw	r26, r24
     af6:	51 96       	adiw	r26, 0x11	; 17
     af8:	dc 90       	ld	r13, X
    char temp_token[15];
    if (isfunc)
     afa:	b4 e0       	ldi	r27, 0x04	; 4
     afc:	db 12       	cpse	r13, r27
     afe:	0a c0       	rjmp	.+20     	; 0xb14 <_ZN6parser9eval_exp6ERd+0x42>
    {
        strcpy(temp_token, token);
     b00:	bc 01       	movw	r22, r24
     b02:	6e 5f       	subi	r22, 0xFE	; 254
     b04:	7f 4f       	sbci	r23, 0xFF	; 255
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	0e 94 ff 20 	call	0x41fe	; 0x41fe <strcpy>
        get_token();
     b0e:	c8 01       	movw	r24, r16
     b10:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
    }
    if ((*token == '('))
     b14:	d8 01       	movw	r26, r16
     b16:	12 96       	adiw	r26, 0x02	; 2
     b18:	ec 91       	ld	r30, X
     b1a:	e8 32       	cpi	r30, 0x28	; 40
     b1c:	09 f0       	breq	.+2      	; 0xb20 <_ZN6parser9eval_exp6ERd+0x4e>
     b1e:	f8 c0       	rjmp	.+496    	; 0xd10 <_ZN6parser9eval_exp6ERd+0x23e>
    {
        get_token();
     b20:	c8 01       	movw	r24, r16
     b22:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
        eval_exp2(result);
     b26:	b7 01       	movw	r22, r14
     b28:	c8 01       	movw	r24, r16
     b2a:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN6parser9eval_exp2ERd>
        if (*token != ')')
     b2e:	f8 01       	movw	r30, r16
     b30:	82 81       	ldd	r24, Z+2	; 0x02
     b32:	89 32       	cpi	r24, 0x29	; 41
     b34:	49 f0       	breq	.+18     	; 0xb48 <_ZN6parser9eval_exp6ERd+0x76>
            strcpy(errormsg, "Error");
     b36:	86 e0       	ldi	r24, 0x06	; 6
     b38:	e5 e1       	ldi	r30, 0x15	; 21
     b3a:	f1 e0       	ldi	r31, 0x01	; 1
     b3c:	d8 01       	movw	r26, r16
     b3e:	da 96       	adiw	r26, 0x3a	; 58
     b40:	01 90       	ld	r0, Z+
     b42:	0d 92       	st	X+, r0
     b44:	8a 95       	dec	r24
     b46:	e1 f7       	brne	.-8      	; 0xb40 <_ZN6parser9eval_exp6ERd+0x6e>
        if (isfunc)
     b48:	f4 e0       	ldi	r31, 0x04	; 4
     b4a:	df 12       	cpse	r13, r31
     b4c:	dd c0       	rjmp	.+442    	; 0xd08 <_ZN6parser9eval_exp6ERd+0x236>
        {
            if (!strcmp(temp_token, "SIN"))
     b4e:	60 e2       	ldi	r22, 0x20	; 32
     b50:	71 e0       	ldi	r23, 0x01	; 1
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	0e 94 f6 20 	call	0x41ec	; 0x41ec <strcmp>
     b5a:	89 2b       	or	r24, r25
     b5c:	69 f4       	brne	.+26     	; 0xb78 <_ZN6parser9eval_exp6ERd+0xa6>
                result = sin(result);
     b5e:	d7 01       	movw	r26, r14
     b60:	6d 91       	ld	r22, X+
     b62:	7d 91       	ld	r23, X+
     b64:	8d 91       	ld	r24, X+
     b66:	9c 91       	ld	r25, X
     b68:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <sin>
     b6c:	f7 01       	movw	r30, r14
     b6e:	60 83       	st	Z, r22
     b70:	71 83       	std	Z+1, r23	; 0x01
     b72:	82 83       	std	Z+2, r24	; 0x02
     b74:	93 83       	std	Z+3, r25	; 0x03
     b76:	c8 c0       	rjmp	.+400    	; 0xd08 <_ZN6parser9eval_exp6ERd+0x236>
            else if (!strcmp(temp_token, "COS"))
     b78:	65 e2       	ldi	r22, 0x25	; 37
     b7a:	71 e0       	ldi	r23, 0x01	; 1
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	0e 94 f6 20 	call	0x41ec	; 0x41ec <strcmp>
     b84:	89 2b       	or	r24, r25
     b86:	69 f4       	brne	.+26     	; 0xba2 <_ZN6parser9eval_exp6ERd+0xd0>
                result = cos(result);
     b88:	d7 01       	movw	r26, r14
     b8a:	6d 91       	ld	r22, X+
     b8c:	7d 91       	ld	r23, X+
     b8e:	8d 91       	ld	r24, X+
     b90:	9c 91       	ld	r25, X
     b92:	0e 94 10 1c 	call	0x3820	; 0x3820 <cos>
     b96:	f7 01       	movw	r30, r14
     b98:	60 83       	st	Z, r22
     b9a:	71 83       	std	Z+1, r23	; 0x01
     b9c:	82 83       	std	Z+2, r24	; 0x02
     b9e:	93 83       	std	Z+3, r25	; 0x03
     ba0:	b3 c0       	rjmp	.+358    	; 0xd08 <_ZN6parser9eval_exp6ERd+0x236>
            else if (!strcmp(temp_token, "TAN"))
     ba2:	6b e1       	ldi	r22, 0x1B	; 27
     ba4:	71 e0       	ldi	r23, 0x01	; 1
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	0e 94 f6 20 	call	0x41ec	; 0x41ec <strcmp>
     bae:	89 2b       	or	r24, r25
     bb0:	69 f4       	brne	.+26     	; 0xbcc <_ZN6parser9eval_exp6ERd+0xfa>
                result = tan(result);
     bb2:	d7 01       	movw	r26, r14
     bb4:	6d 91       	ld	r22, X+
     bb6:	7d 91       	ld	r23, X+
     bb8:	8d 91       	ld	r24, X+
     bba:	9c 91       	ld	r25, X
     bbc:	0e 94 45 20 	call	0x408a	; 0x408a <tan>
     bc0:	f7 01       	movw	r30, r14
     bc2:	60 83       	st	Z, r22
     bc4:	71 83       	std	Z+1, r23	; 0x01
     bc6:	82 83       	std	Z+2, r24	; 0x02
     bc8:	93 83       	std	Z+3, r25	; 0x03
     bca:	9e c0       	rjmp	.+316    	; 0xd08 <_ZN6parser9eval_exp6ERd+0x236>
            else if (!strcmp(temp_token, "ASIN"))
     bcc:	6f e1       	ldi	r22, 0x1F	; 31
     bce:	71 e0       	ldi	r23, 0x01	; 1
     bd0:	ce 01       	movw	r24, r28
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	0e 94 f6 20 	call	0x41ec	; 0x41ec <strcmp>
     bd8:	89 2b       	or	r24, r25
     bda:	69 f4       	brne	.+26     	; 0xbf6 <_ZN6parser9eval_exp6ERd+0x124>
                result = asin(result);
     bdc:	d7 01       	movw	r26, r14
     bde:	6d 91       	ld	r22, X+
     be0:	7d 91       	ld	r23, X+
     be2:	8d 91       	ld	r24, X+
     be4:	9c 91       	ld	r25, X
     be6:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <asin>
     bea:	f7 01       	movw	r30, r14
     bec:	60 83       	st	Z, r22
     bee:	71 83       	std	Z+1, r23	; 0x01
     bf0:	82 83       	std	Z+2, r24	; 0x02
     bf2:	93 83       	std	Z+3, r25	; 0x03
     bf4:	89 c0       	rjmp	.+274    	; 0xd08 <_ZN6parser9eval_exp6ERd+0x236>
            else if (!strcmp(temp_token, "ACOS"))
     bf6:	64 e2       	ldi	r22, 0x24	; 36
     bf8:	71 e0       	ldi	r23, 0x01	; 1
     bfa:	ce 01       	movw	r24, r28
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	0e 94 f6 20 	call	0x41ec	; 0x41ec <strcmp>
     c02:	89 2b       	or	r24, r25
     c04:	69 f4       	brne	.+26     	; 0xc20 <_ZN6parser9eval_exp6ERd+0x14e>
                result = acos(result);
     c06:	d7 01       	movw	r26, r14
     c08:	6d 91       	ld	r22, X+
     c0a:	7d 91       	ld	r23, X+
     c0c:	8d 91       	ld	r24, X+
     c0e:	9c 91       	ld	r25, X
     c10:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <acos>
     c14:	f7 01       	movw	r30, r14
     c16:	60 83       	st	Z, r22
     c18:	71 83       	std	Z+1, r23	; 0x01
     c1a:	82 83       	std	Z+2, r24	; 0x02
     c1c:	93 83       	std	Z+3, r25	; 0x03
     c1e:	74 c0       	rjmp	.+232    	; 0xd08 <_ZN6parser9eval_exp6ERd+0x236>
                result = asin(result);
            else if (!strcmp(temp_token, "ACOSH"))
                result = acos(result);
            else if (!strcmp(temp_token, "ATANH"))
                result = atan(result);*/
            else if (!strcmp(temp_token, "LN"))
     c20:	69 e2       	ldi	r22, 0x29	; 41
     c22:	71 e0       	ldi	r23, 0x01	; 1
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	0e 94 f6 20 	call	0x41ec	; 0x41ec <strcmp>
     c2c:	89 2b       	or	r24, r25
     c2e:	69 f4       	brne	.+26     	; 0xc4a <_ZN6parser9eval_exp6ERd+0x178>
                result = log(result);
     c30:	d7 01       	movw	r26, r14
     c32:	6d 91       	ld	r22, X+
     c34:	7d 91       	ld	r23, X+
     c36:	8d 91       	ld	r24, X+
     c38:	9c 91       	ld	r25, X
     c3a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <log>
     c3e:	f7 01       	movw	r30, r14
     c40:	60 83       	st	Z, r22
     c42:	71 83       	std	Z+1, r23	; 0x01
     c44:	82 83       	std	Z+2, r24	; 0x02
     c46:	93 83       	std	Z+3, r25	; 0x03
     c48:	5f c0       	rjmp	.+190    	; 0xd08 <_ZN6parser9eval_exp6ERd+0x236>
            else if (!strcmp(temp_token, "LOG"))
     c4a:	6c e2       	ldi	r22, 0x2C	; 44
     c4c:	71 e0       	ldi	r23, 0x01	; 1
     c4e:	ce 01       	movw	r24, r28
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	0e 94 f6 20 	call	0x41ec	; 0x41ec <strcmp>
     c56:	89 2b       	or	r24, r25
     c58:	69 f4       	brne	.+26     	; 0xc74 <_ZN6parser9eval_exp6ERd+0x1a2>
                result = log10(result);
     c5a:	d7 01       	movw	r26, r14
     c5c:	6d 91       	ld	r22, X+
     c5e:	7d 91       	ld	r23, X+
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <log10>
     c68:	f7 01       	movw	r30, r14
     c6a:	60 83       	st	Z, r22
     c6c:	71 83       	std	Z+1, r23	; 0x01
     c6e:	82 83       	std	Z+2, r24	; 0x02
     c70:	93 83       	std	Z+3, r25	; 0x03
     c72:	4a c0       	rjmp	.+148    	; 0xd08 <_ZN6parser9eval_exp6ERd+0x236>
            else if (!strcmp(temp_token, "EXP"))
     c74:	60 e3       	ldi	r22, 0x30	; 48
     c76:	71 e0       	ldi	r23, 0x01	; 1
     c78:	ce 01       	movw	r24, r28
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	0e 94 f6 20 	call	0x41ec	; 0x41ec <strcmp>
     c80:	89 2b       	or	r24, r25
     c82:	69 f4       	brne	.+26     	; 0xc9e <_ZN6parser9eval_exp6ERd+0x1cc>
                result = exp(result);
     c84:	d7 01       	movw	r26, r14
     c86:	6d 91       	ld	r22, X+
     c88:	7d 91       	ld	r23, X+
     c8a:	8d 91       	ld	r24, X+
     c8c:	9c 91       	ld	r25, X
     c8e:	0e 94 8f 1c 	call	0x391e	; 0x391e <exp>
     c92:	f7 01       	movw	r30, r14
     c94:	60 83       	st	Z, r22
     c96:	71 83       	std	Z+1, r23	; 0x01
     c98:	82 83       	std	Z+2, r24	; 0x02
     c9a:	93 83       	std	Z+3, r25	; 0x03
     c9c:	35 c0       	rjmp	.+106    	; 0xd08 <_ZN6parser9eval_exp6ERd+0x236>
            else if (!strcmp(temp_token, "SQRT"))
     c9e:	64 e3       	ldi	r22, 0x34	; 52
     ca0:	71 e0       	ldi	r23, 0x01	; 1
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	0e 94 f6 20 	call	0x41ec	; 0x41ec <strcmp>
     caa:	89 2b       	or	r24, r25
     cac:	69 f4       	brne	.+26     	; 0xcc8 <_ZN6parser9eval_exp6ERd+0x1f6>
                result = sqrt(result);
     cae:	d7 01       	movw	r26, r14
     cb0:	6d 91       	ld	r22, X+
     cb2:	7d 91       	ld	r23, X+
     cb4:	8d 91       	ld	r24, X+
     cb6:	9c 91       	ld	r25, X
     cb8:	0e 94 05 20 	call	0x400a	; 0x400a <sqrt>
     cbc:	f7 01       	movw	r30, r14
     cbe:	60 83       	st	Z, r22
     cc0:	71 83       	std	Z+1, r23	; 0x01
     cc2:	82 83       	std	Z+2, r24	; 0x02
     cc4:	93 83       	std	Z+3, r25	; 0x03
     cc6:	20 c0       	rjmp	.+64     	; 0xd08 <_ZN6parser9eval_exp6ERd+0x236>
            else if (!strcmp(temp_token, "SQR"))
     cc8:	69 e3       	ldi	r22, 0x39	; 57
     cca:	71 e0       	ldi	r23, 0x01	; 1
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	0e 94 f6 20 	call	0x41ec	; 0x41ec <strcmp>
     cd4:	89 2b       	or	r24, r25
     cd6:	79 f4       	brne	.+30     	; 0xcf6 <_ZN6parser9eval_exp6ERd+0x224>
                result = result*result;
     cd8:	d7 01       	movw	r26, r14
     cda:	6d 91       	ld	r22, X+
     cdc:	7d 91       	ld	r23, X+
     cde:	8d 91       	ld	r24, X+
     ce0:	9c 91       	ld	r25, X
     ce2:	9b 01       	movw	r18, r22
     ce4:	ac 01       	movw	r20, r24
     ce6:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
     cea:	f7 01       	movw	r30, r14
     cec:	60 83       	st	Z, r22
     cee:	71 83       	std	Z+1, r23	; 0x01
     cf0:	82 83       	std	Z+2, r24	; 0x02
     cf2:	93 83       	std	Z+3, r25	; 0x03
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <_ZN6parser9eval_exp6ERd+0x236>
            /*else if (!strcmp(temp_token, "ROUND"))
                result = round(result);
            else if (!strcmp(temp_token, "INT"))
                result = floor(result);*/
            else
                strcpy(errormsg, "Error");
     cf6:	86 e0       	ldi	r24, 0x06	; 6
     cf8:	e5 e1       	ldi	r30, 0x15	; 21
     cfa:	f1 e0       	ldi	r31, 0x01	; 1
     cfc:	d8 01       	movw	r26, r16
     cfe:	da 96       	adiw	r26, 0x3a	; 58
     d00:	01 90       	ld	r0, Z+
     d02:	0d 92       	st	X+, r0
     d04:	8a 95       	dec	r24
     d06:	e1 f7       	brne	.-8      	; 0xd00 <_ZN6parser9eval_exp6ERd+0x22e>
        }
        get_token();
     d08:	c8 01       	movw	r24, r16
     d0a:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
     d0e:	35 c0       	rjmp	.+106    	; 0xd7a <_ZN6parser9eval_exp6ERd+0x2a8>
    }
    else
        switch (tok_type)
     d10:	d8 01       	movw	r26, r16
     d12:	51 96       	adiw	r26, 0x11	; 17
     d14:	8c 91       	ld	r24, X
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	19 f0       	breq	.+6      	; 0xd20 <_ZN6parser9eval_exp6ERd+0x24e>
     d1a:	83 30       	cpi	r24, 0x03	; 3
     d1c:	b9 f0       	breq	.+46     	; 0xd4c <_ZN6parser9eval_exp6ERd+0x27a>
     d1e:	24 c0       	rjmp	.+72     	; 0xd68 <_ZN6parser9eval_exp6ERd+0x296>
        {
        case VARIABLE:
            result = vars[*token - 'A'];
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	e1 54       	subi	r30, 0x41	; 65
     d24:	f1 09       	sbc	r31, r1
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	ee 0f       	add	r30, r30
     d2c:	ff 1f       	adc	r31, r31
     d2e:	e0 0f       	add	r30, r16
     d30:	f1 1f       	adc	r31, r17
     d32:	82 89       	ldd	r24, Z+18	; 0x12
     d34:	93 89       	ldd	r25, Z+19	; 0x13
     d36:	a4 89       	ldd	r26, Z+20	; 0x14
     d38:	b5 89       	ldd	r27, Z+21	; 0x15
     d3a:	f7 01       	movw	r30, r14
     d3c:	80 83       	st	Z, r24
     d3e:	91 83       	std	Z+1, r25	; 0x01
     d40:	a2 83       	std	Z+2, r26	; 0x02
     d42:	b3 83       	std	Z+3, r27	; 0x03
            get_token();
     d44:	c8 01       	movw	r24, r16
     d46:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
            return;
     d4a:	17 c0       	rjmp	.+46     	; 0xd7a <_ZN6parser9eval_exp6ERd+0x2a8>
        case NUMBER:
            result = atof(token);
     d4c:	c8 01       	movw	r24, r16
     d4e:	02 96       	adiw	r24, 0x02	; 2
     d50:	0e 94 c0 20 	call	0x4180	; 0x4180 <atof>
     d54:	d7 01       	movw	r26, r14
     d56:	6d 93       	st	X+, r22
     d58:	7d 93       	st	X+, r23
     d5a:	8d 93       	st	X+, r24
     d5c:	9c 93       	st	X, r25
     d5e:	13 97       	sbiw	r26, 0x03	; 3
            get_token();
     d60:	c8 01       	movw	r24, r16
     d62:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
            return;
     d66:	09 c0       	rjmp	.+18     	; 0xd7a <_ZN6parser9eval_exp6ERd+0x2a8>
        default:
            strcpy(errormsg, "Error");
     d68:	d8 01       	movw	r26, r16
     d6a:	da 96       	adiw	r26, 0x3a	; 58
     d6c:	86 e0       	ldi	r24, 0x06	; 6
     d6e:	e5 e1       	ldi	r30, 0x15	; 21
     d70:	f1 e0       	ldi	r31, 0x01	; 1
     d72:	01 90       	ld	r0, Z+
     d74:	0d 92       	st	X+, r0
     d76:	8a 95       	dec	r24
     d78:	e1 f7       	brne	.-8      	; 0xd72 <_ZN6parser9eval_exp6ERd+0x2a0>
        }
}
     d7a:	2f 96       	adiw	r28, 0x0f	; 15
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	df 90       	pop	r13
     d94:	08 95       	ret

00000d96 <_ZN6parser9eval_exp5ERd>:
        result = pow(result, temp);
    }
}
// Evaluate a unary + or -.
void parser::eval_exp5(double &result)
{
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	ec 01       	movw	r28, r24
     da0:	8b 01       	movw	r16, r22
    char op;
    op = 0;
    if ((tok_type == DELIMITER) && *token == '+' || *token == '-')
     da2:	89 89       	ldd	r24, Y+17	; 0x11
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	19 f4       	brne	.+6      	; 0xdae <_ZN6parser9eval_exp5ERd+0x18>
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	8b 32       	cpi	r24, 0x2B	; 43
     dac:	41 f0       	breq	.+16     	; 0xdbe <_ZN6parser9eval_exp5ERd+0x28>
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	8d 32       	cpi	r24, 0x2D	; 45
     db2:	69 f0       	breq	.+26     	; 0xdce <_ZN6parser9eval_exp5ERd+0x38>
    {
        op = *token;
        get_token();
    }
    eval_exp6(result);
     db4:	b8 01       	movw	r22, r16
     db6:	ce 01       	movw	r24, r28
     db8:	0e 94 69 05 	call	0xad2	; 0xad2 <_ZN6parser9eval_exp6ERd>
     dbc:	19 c0       	rjmp	.+50     	; 0xdf0 <_ZN6parser9eval_exp5ERd+0x5a>
    char op;
    op = 0;
    if ((tok_type == DELIMITER) && *token == '+' || *token == '-')
    {
        op = *token;
        get_token();
     dbe:	ce 01       	movw	r24, r28
     dc0:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
    }
    eval_exp6(result);
     dc4:	b8 01       	movw	r22, r16
     dc6:	ce 01       	movw	r24, r28
     dc8:	0e 94 69 05 	call	0xad2	; 0xad2 <_ZN6parser9eval_exp6ERd>
     dcc:	11 c0       	rjmp	.+34     	; 0xdf0 <_ZN6parser9eval_exp5ERd+0x5a>
    char op;
    op = 0;
    if ((tok_type == DELIMITER) && *token == '+' || *token == '-')
    {
        op = *token;
        get_token();
     dce:	ce 01       	movw	r24, r28
     dd0:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
    }
    eval_exp6(result);
     dd4:	b8 01       	movw	r22, r16
     dd6:	ce 01       	movw	r24, r28
     dd8:	0e 94 69 05 	call	0xad2	; 0xad2 <_ZN6parser9eval_exp6ERd>
    if (op == '-')
        result = -result;
     ddc:	f8 01       	movw	r30, r16
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	a2 81       	ldd	r26, Z+2	; 0x02
     de4:	b3 81       	ldd	r27, Z+3	; 0x03
     de6:	b0 58       	subi	r27, 0x80	; 128
     de8:	80 83       	st	Z, r24
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	a2 83       	std	Z+2, r26	; 0x02
     dee:	b3 83       	std	Z+3, r27	; 0x03
}
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	08 95       	ret

00000dfa <_ZN6parser9eval_exp4ERd>:
        }
    }
}
// Process an exponent.
void parser::eval_exp4(double &result)
{
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	00 d0       	rcall	.+0      	; 0xe08 <_ZN6parser9eval_exp4ERd+0xe>
     e08:	00 d0       	rcall	.+0      	; 0xe0a <_ZN6parser9eval_exp4ERd+0x10>
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	8c 01       	movw	r16, r24
     e10:	7b 01       	movw	r14, r22
    double temp;
    eval_exp5(result);
     e12:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN6parser9eval_exp5ERd>
    while (*token == '^')
     e16:	f8 01       	movw	r30, r16
     e18:	82 81       	ldd	r24, Z+2	; 0x02
     e1a:	8e 35       	cpi	r24, 0x5E	; 94
     e1c:	e9 f4       	brne	.+58     	; 0xe58 <_ZN6parser9eval_exp4ERd+0x5e>
    {
        get_token();
     e1e:	c8 01       	movw	r24, r16
     e20:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
        eval_exp5(temp);
     e24:	be 01       	movw	r22, r28
     e26:	6f 5f       	subi	r22, 0xFF	; 255
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	c8 01       	movw	r24, r16
     e2c:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN6parser9eval_exp5ERd>
        result = pow(result, temp);
     e30:	29 81       	ldd	r18, Y+1	; 0x01
     e32:	3a 81       	ldd	r19, Y+2	; 0x02
     e34:	4b 81       	ldd	r20, Y+3	; 0x03
     e36:	5c 81       	ldd	r21, Y+4	; 0x04
     e38:	f7 01       	movw	r30, r14
     e3a:	60 81       	ld	r22, Z
     e3c:	71 81       	ldd	r23, Z+1	; 0x01
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <pow>
     e46:	f7 01       	movw	r30, r14
     e48:	60 83       	st	Z, r22
     e4a:	71 83       	std	Z+1, r23	; 0x01
     e4c:	82 83       	std	Z+2, r24	; 0x02
     e4e:	93 83       	std	Z+3, r25	; 0x03
// Process an exponent.
void parser::eval_exp4(double &result)
{
    double temp;
    eval_exp5(result);
    while (*token == '^')
     e50:	f8 01       	movw	r30, r16
     e52:	82 81       	ldd	r24, Z+2	; 0x02
     e54:	8e 35       	cpi	r24, 0x5E	; 94
     e56:	19 f3       	breq	.-58     	; 0xe1e <_ZN6parser9eval_exp4ERd+0x24>
    {
        get_token();
        eval_exp5(temp);
        result = pow(result, temp);
    }
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	08 95       	ret

00000e6e <_ZN6parser9eval_exp3ERd>:
        }
    }
}
// Multiply or divide two factors.
void parser::eval_exp3(double &result)
{
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <_ZN6parser9eval_exp3ERd+0xe>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <_ZN6parser9eval_exp3ERd+0x10>
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	8c 01       	movw	r16, r24
     e84:	7b 01       	movw	r14, r22
    char op;
    double temp;
    eval_exp4(result);
     e86:	0e 94 fd 06 	call	0xdfa	; 0xdfa <_ZN6parser9eval_exp4ERd>
    while ((op = *token) == '*' || op == '/')
     e8a:	f8 01       	movw	r30, r16
     e8c:	82 81       	ldd	r24, Z+2	; 0x02
     e8e:	8a 32       	cpi	r24, 0x2A	; 42
     e90:	19 f0       	breq	.+6      	; 0xe98 <_ZN6parser9eval_exp3ERd+0x2a>
     e92:	8f 32       	cpi	r24, 0x2F	; 47
     e94:	d9 f0       	breq	.+54     	; 0xecc <_ZN6parser9eval_exp3ERd+0x5e>
     e96:	34 c0       	rjmp	.+104    	; 0xf00 <_ZN6parser9eval_exp3ERd+0x92>
    {
        get_token();
     e98:	c8 01       	movw	r24, r16
     e9a:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
        eval_exp4(temp);
     e9e:	be 01       	movw	r22, r28
     ea0:	6f 5f       	subi	r22, 0xFF	; 255
     ea2:	7f 4f       	sbci	r23, 0xFF	; 255
     ea4:	c8 01       	movw	r24, r16
     ea6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <_ZN6parser9eval_exp4ERd>
        switch (op)
        {
        case '*':
            result = result * temp;
     eaa:	29 81       	ldd	r18, Y+1	; 0x01
     eac:	3a 81       	ldd	r19, Y+2	; 0x02
     eae:	4b 81       	ldd	r20, Y+3	; 0x03
     eb0:	5c 81       	ldd	r21, Y+4	; 0x04
     eb2:	f7 01       	movw	r30, r14
     eb4:	60 81       	ld	r22, Z
     eb6:	71 81       	ldd	r23, Z+1	; 0x01
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	93 81       	ldd	r25, Z+3	; 0x03
     ebc:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
     ec0:	f7 01       	movw	r30, r14
     ec2:	60 83       	st	Z, r22
     ec4:	71 83       	std	Z+1, r23	; 0x01
     ec6:	82 83       	std	Z+2, r24	; 0x02
     ec8:	93 83       	std	Z+3, r25	; 0x03
            break;
     eca:	df cf       	rjmp	.-66     	; 0xe8a <_ZN6parser9eval_exp3ERd+0x1c>
    char op;
    double temp;
    eval_exp4(result);
    while ((op = *token) == '*' || op == '/')
    {
        get_token();
     ecc:	c8 01       	movw	r24, r16
     ece:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
        eval_exp4(temp);
     ed2:	be 01       	movw	r22, r28
     ed4:	6f 5f       	subi	r22, 0xFF	; 255
     ed6:	7f 4f       	sbci	r23, 0xFF	; 255
     ed8:	c8 01       	movw	r24, r16
     eda:	0e 94 fd 06 	call	0xdfa	; 0xdfa <_ZN6parser9eval_exp4ERd>
        {
        case '*':
            result = result * temp;
            break;
        case '/':
            result = result / temp;
     ede:	29 81       	ldd	r18, Y+1	; 0x01
     ee0:	3a 81       	ldd	r19, Y+2	; 0x02
     ee2:	4b 81       	ldd	r20, Y+3	; 0x03
     ee4:	5c 81       	ldd	r21, Y+4	; 0x04
     ee6:	f7 01       	movw	r30, r14
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
     ef4:	f7 01       	movw	r30, r14
     ef6:	60 83       	st	Z, r22
     ef8:	71 83       	std	Z+1, r23	; 0x01
     efa:	82 83       	std	Z+2, r24	; 0x02
     efc:	93 83       	std	Z+3, r25	; 0x03
            break;
     efe:	c5 cf       	rjmp	.-118    	; 0xe8a <_ZN6parser9eval_exp3ERd+0x1c>
        }
    }
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	08 95       	ret

00000f16 <_ZN6parser9eval_exp1ERd>:
        strcpy(errormsg, "Error");
    return result;
}
// Process an assignment.
void parser::eval_exp1(double &result)
{
     f16:	8f 92       	push	r8
     f18:	9f 92       	push	r9
     f1a:	bf 92       	push	r11
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	2f 97       	sbiw	r28, 0x0f	; 15
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	8c 01       	movw	r16, r24
     f3e:	7b 01       	movw	r14, r22
    int slot;
    char temp_token[15];
    if (tok_type == VARIABLE)
     f40:	fc 01       	movw	r30, r24
     f42:	81 89       	ldd	r24, Z+17	; 0x11
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	c9 f5       	brne	.+114    	; 0xfba <_ZN6parser9eval_exp1ERd+0xa4>
    {
        // save old token
        char *t_ptr = exp_ptr;
     f48:	81 90       	ld	r8, Z+
     f4a:	91 90       	ld	r9, Z+
     f4c:	6f 01       	movw	r12, r30
        strcpy(temp_token, token);
     f4e:	bf 01       	movw	r22, r30
     f50:	ce 01       	movw	r24, r28
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	0e 94 ff 20 	call	0x41fe	; 0x41fe <strcpy>
        // compute the index of the variable
        slot = *token - 'A';
     f58:	f8 01       	movw	r30, r16
     f5a:	b2 80       	ldd	r11, Z+2	; 0x02
        get_token();
     f5c:	c8 01       	movw	r24, r16
     f5e:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
        if (*token != '=')
     f62:	f8 01       	movw	r30, r16
     f64:	82 81       	ldd	r24, Z+2	; 0x02
     f66:	8d 33       	cpi	r24, 0x3D	; 61
     f68:	61 f0       	breq	.+24     	; 0xf82 <_ZN6parser9eval_exp1ERd+0x6c>
        {
            exp_ptr = t_ptr; // return current token
     f6a:	91 82       	std	Z+1, r9	; 0x01
     f6c:	80 82       	st	Z, r8
            strcpy(token, temp_token); // restore old token
     f6e:	be 01       	movw	r22, r28
     f70:	6f 5f       	subi	r22, 0xFF	; 255
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	c6 01       	movw	r24, r12
     f76:	0e 94 ff 20 	call	0x41fe	; 0x41fe <strcpy>
            tok_type = VARIABLE;
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	f8 01       	movw	r30, r16
     f7e:	81 8b       	std	Z+17, r24	; 0x11
     f80:	1c c0       	rjmp	.+56     	; 0xfba <_ZN6parser9eval_exp1ERd+0xa4>
        }
        else {
            get_token(); // get next part of exp
     f82:	c8 01       	movw	r24, r16
     f84:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
            eval_exp2(result);
     f88:	b7 01       	movw	r22, r14
     f8a:	c8 01       	movw	r24, r16
     f8c:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN6parser9eval_exp2ERd>
            vars[slot] = result;
     f90:	f7 01       	movw	r30, r14
     f92:	40 81       	ld	r20, Z
     f94:	51 81       	ldd	r21, Z+1	; 0x01
     f96:	62 81       	ldd	r22, Z+2	; 0x02
     f98:	73 81       	ldd	r23, Z+3	; 0x03
     f9a:	8b 2d       	mov	r24, r11
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	81 54       	subi	r24, 0x41	; 65
     fa0:	91 09       	sbc	r25, r1
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	f8 01       	movw	r30, r16
     fac:	e8 0f       	add	r30, r24
     fae:	f9 1f       	adc	r31, r25
     fb0:	42 8b       	std	Z+18, r20	; 0x12
     fb2:	53 8b       	std	Z+19, r21	; 0x13
     fb4:	64 8b       	std	Z+20, r22	; 0x14
     fb6:	75 8b       	std	Z+21, r23	; 0x15
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <_ZN6parser9eval_exp1ERd+0xac>
            return;
        }
    }
    eval_exp2(result);
     fba:	b7 01       	movw	r22, r14
     fbc:	c8 01       	movw	r24, r16
     fbe:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN6parser9eval_exp2ERd>
}
     fc2:	2f 96       	adiw	r28, 0x0f	; 15
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	bf 90       	pop	r11
     fe0:	9f 90       	pop	r9
     fe2:	8f 90       	pop	r8
     fe4:	08 95       	ret

00000fe6 <_ZN6parser8eval_expEPc>:
        vars[i] = 0.0;
    errormsg[0] = '\0';
}
// Parser entry point.
double parser::eval_exp(char *exp)
{
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	00 d0       	rcall	.+0      	; 0xff0 <_ZN6parser8eval_expEPc+0xa>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <_ZN6parser8eval_expEPc+0xc>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	8c 01       	movw	r16, r24
    errormsg[0] = '\0';
     ff8:	fc 01       	movw	r30, r24
     ffa:	12 ae       	std	Z+58, r1	; 0x3a
    double result;
    exp_ptr = exp;
     ffc:	71 83       	std	Z+1, r23	; 0x01
     ffe:	60 83       	st	Z, r22
    get_token();
    1000:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN6parser9get_tokenEv>
    if (!*token)
    1004:	f8 01       	movw	r30, r16
    1006:	82 81       	ldd	r24, Z+2	; 0x02
    1008:	81 11       	cpse	r24, r1
    100a:	0d c0       	rjmp	.+26     	; 0x1026 <_ZN6parser8eval_expEPc+0x40>
    {
        strcpy(errormsg, "Error"); // no expression present
    100c:	d8 01       	movw	r26, r16
    100e:	da 96       	adiw	r26, 0x3a	; 58
    1010:	86 e0       	ldi	r24, 0x06	; 6
    1012:	e5 e1       	ldi	r30, 0x15	; 21
    1014:	f1 e0       	ldi	r31, 0x01	; 1
    1016:	01 90       	ld	r0, Z+
    1018:	0d 92       	st	X+, r0
    101a:	8a 95       	dec	r24
    101c:	e1 f7       	brne	.-8      	; 0x1016 <_ZN6parser8eval_expEPc+0x30>
        return (double)0;
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	cb 01       	movw	r24, r22
    1024:	17 c0       	rjmp	.+46     	; 0x1054 <_ZN6parser8eval_expEPc+0x6e>
    }
    eval_exp1(result);
    1026:	be 01       	movw	r22, r28
    1028:	6f 5f       	subi	r22, 0xFF	; 255
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	c8 01       	movw	r24, r16
    102e:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZN6parser9eval_exp1ERd>
    if (*token) // last token must be null
    1032:	f8 01       	movw	r30, r16
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	88 23       	and	r24, r24
    1038:	49 f0       	breq	.+18     	; 0x104c <_ZN6parser8eval_expEPc+0x66>
        strcpy(errormsg, "Error");
    103a:	d8 01       	movw	r26, r16
    103c:	da 96       	adiw	r26, 0x3a	; 58
    103e:	86 e0       	ldi	r24, 0x06	; 6
    1040:	e5 e1       	ldi	r30, 0x15	; 21
    1042:	f1 e0       	ldi	r31, 0x01	; 1
    1044:	01 90       	ld	r0, Z+
    1046:	0d 92       	st	X+, r0
    1048:	8a 95       	dec	r24
    104a:	e1 f7       	brne	.-8      	; 0x1044 <_ZN6parser8eval_expEPc+0x5e>
    return result;
    104c:	69 81       	ldd	r22, Y+1	; 0x01
    104e:	7a 81       	ldd	r23, Y+2	; 0x02
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	08 95       	ret

00001066 <_Z6appendPciS_>:
char mat[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};
char mat2[4][4][6]={{"sin(","cos(","tan(","sqrt("},{"^","x","3.14","<-"},{"exp(",".","(",")"},{"log(","ln(","asin(","acos("}};
	
void append(char s[] , int len , char s2[])
{
    1066:	9c 01       	movw	r18, r24
	for(int i=0;s2[i]!=0;i++)
    1068:	fa 01       	movw	r30, r20
    106a:	90 81       	ld	r25, Z
    106c:	99 23       	and	r25, r25
    106e:	51 f0       	breq	.+20     	; 0x1084 <_Z6appendPciS_+0x1e>
    1070:	d9 01       	movw	r26, r18
    1072:	a6 0f       	add	r26, r22
    1074:	b7 1f       	adc	r27, r23
    1076:	31 96       	adiw	r30, 0x01	; 1
	{
		s[len] = s2[i];
    1078:	9d 93       	st	X+, r25
		len++;
    107a:	6f 5f       	subi	r22, 0xFF	; 255
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
char mat[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};
char mat2[4][4][6]={{"sin(","cos(","tan(","sqrt("},{"^","x","3.14","<-"},{"exp(",".","(",")"},{"log(","ln(","asin(","acos("}};
	
void append(char s[] , int len , char s2[])
{
	for(int i=0;s2[i]!=0;i++)
    107e:	91 91       	ld	r25, Z+
    1080:	91 11       	cpse	r25, r1
    1082:	fa cf       	rjmp	.-12     	; 0x1078 <_Z6appendPciS_+0x12>
	{
		s[len] = s2[i];
		len++;
	}
	s[len] = 0;
    1084:	f9 01       	movw	r30, r18
    1086:	e6 0f       	add	r30, r22
    1088:	f7 1f       	adc	r31, r23
    108a:	10 82       	st	Z, r1
    108c:	08 95       	ret

0000108e <_Z17evaluate_functionPcd>:

char s[40];
char tmp[15];
parser ob;
double evaluate_function(char str[], double a)
{
    108e:	8f 92       	push	r8
    1090:	9f 92       	push	r9
    1092:	af 92       	push	r10
    1094:	bf 92       	push	r11
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	fc 01       	movw	r30, r24
    10a4:	4a 01       	movw	r8, r20
    10a6:	5b 01       	movw	r10, r22
	
	int idx = 0;
	for(int i=0;str[i]!=0;i++)
    10a8:	90 81       	ld	r25, Z
    10aa:	99 23       	and	r25, r25
    10ac:	51 f1       	breq	.+84     	; 0x1102 <_Z17evaluate_functionPcd+0x74>
    10ae:	7f 01       	movw	r14, r30
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	e8 1a       	sub	r14, r24
    10b4:	f8 0a       	sbc	r15, r24
    10b6:	c0 e0       	ldi	r28, 0x00	; 0
    10b8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(str[i]=='x')
    10ba:	98 37       	cpi	r25, 0x78	; 120
    10bc:	b9 f4       	brne	.+46     	; 0x10ec <_Z17evaluate_functionPcd+0x5e>
		{
			dtostrf(a,1,8,tmp);
    10be:	07 ef       	ldi	r16, 0xF7	; 247
    10c0:	12 e0       	ldi	r17, 0x02	; 2
    10c2:	28 e0       	ldi	r18, 0x08	; 8
    10c4:	41 e0       	ldi	r20, 0x01	; 1
    10c6:	c5 01       	movw	r24, r10
    10c8:	b4 01       	movw	r22, r8
    10ca:	0e 94 a0 20 	call	0x4140	; 0x4140 <dtostrf>
			for(int j=0;tmp[j]!=0;j++)
    10ce:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <tmp>
    10d2:	99 23       	and	r25, r25
    10d4:	81 f0       	breq	.+32     	; 0x10f6 <_Z17evaluate_functionPcd+0x68>
    10d6:	de 01       	movw	r26, r28
    10d8:	aa 5f       	subi	r26, 0xFA	; 250
    10da:	bc 4f       	sbci	r27, 0xFC	; 252
    10dc:	e8 ef       	ldi	r30, 0xF8	; 248
    10de:	f2 e0       	ldi	r31, 0x02	; 2
			{
				s[idx] = tmp[j];
    10e0:	9d 93       	st	X+, r25
				idx++;
    10e2:	21 96       	adiw	r28, 0x01	; 1
	for(int i=0;str[i]!=0;i++)
	{
		if(str[i]=='x')
		{
			dtostrf(a,1,8,tmp);
			for(int j=0;tmp[j]!=0;j++)
    10e4:	91 91       	ld	r25, Z+
    10e6:	91 11       	cpse	r25, r1
    10e8:	fb cf       	rjmp	.-10     	; 0x10e0 <_Z17evaluate_functionPcd+0x52>
    10ea:	05 c0       	rjmp	.+10     	; 0x10f6 <_Z17evaluate_functionPcd+0x68>
				s[idx] = tmp[j];
				idx++;
			}
		}
		else{
			s[idx] = str[i];
    10ec:	fe 01       	movw	r30, r28
    10ee:	ea 5f       	subi	r30, 0xFA	; 250
    10f0:	fc 4f       	sbci	r31, 0xFC	; 252
    10f2:	90 83       	st	Z, r25
			idx++;
    10f4:	21 96       	adiw	r28, 0x01	; 1
parser ob;
double evaluate_function(char str[], double a)
{
	
	int idx = 0;
	for(int i=0;str[i]!=0;i++)
    10f6:	f7 01       	movw	r30, r14
    10f8:	91 91       	ld	r25, Z+
    10fa:	7f 01       	movw	r14, r30
    10fc:	91 11       	cpse	r25, r1
    10fe:	dd cf       	rjmp	.-70     	; 0x10ba <_Z17evaluate_functionPcd+0x2c>
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <_Z17evaluate_functionPcd+0x78>
char tmp[15];
parser ob;
double evaluate_function(char str[], double a)
{
	
	int idx = 0;
    1102:	c0 e0       	ldi	r28, 0x00	; 0
    1104:	d0 e0       	ldi	r29, 0x00	; 0
		else{
			s[idx] = str[i];
			idx++;
		}
	}
	s[idx] = 0;
    1106:	ca 5f       	subi	r28, 0xFA	; 250
    1108:	dc 4f       	sbci	r29, 0xFC	; 252
    110a:	18 82       	st	Y, r1
	
	double ans=ob.eval_exp(s);
    110c:	66 e0       	ldi	r22, 0x06	; 6
    110e:	73 e0       	ldi	r23, 0x03	; 3
    1110:	8e ea       	ldi	r24, 0xAE	; 174
    1112:	92 e0       	ldi	r25, 0x02	; 2
    1114:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN6parser8eval_expEPc>
	return ans;
}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	9f 90       	pop	r9
    112a:	8f 90       	pop	r8
    112c:	08 95       	ret

0000112e <_Z16int_number_inputi>:

//helper functions and gauss
int int_number_input(int pos)
{
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	00 d0       	rcall	.+0      	; 0x113e <_Z16int_number_inputi+0x10>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	//pos is position where u want to show the text
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    1142:	a1 e0       	ldi	r26, 0x01	; 1
    1144:	b0 e0       	ldi	r27, 0x00	; 0
int int_number_input(int pos)
{
	//pos is position where u want to show the text
	while (1)
	{
		for(int c=4;c<8;c++)
    1146:	44 e0       	ldi	r20, 0x04	; 4
    1148:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB=1<<c;
    114a:	9d 01       	movw	r18, r26
    114c:	04 2e       	mov	r0, r20
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <_Z16int_number_inputi+0x26>
    1150:	22 0f       	add	r18, r18
    1152:	33 1f       	adc	r19, r19
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <_Z16int_number_inputi+0x22>
    1158:	28 bb       	out	0x18, r18	; 24
    115a:	9a 01       	movw	r18, r20
    115c:	24 50       	subi	r18, 0x04	; 4
    115e:	31 09       	sbc	r19, r1
    1160:	f9 01       	movw	r30, r18
    1162:	e0 54       	subi	r30, 0x40	; 64
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    1166:	00 e0       	ldi	r16, 0x00	; 0
    1168:	10 e0       	ldi	r17, 0x00	; 0
    116a:	d2 2e       	mov	r13, r18
    116c:	73 2f       	mov	r23, r19
			{
				if(PINB&(1<<r))
    116e:	26 b3       	in	r18, 0x16	; 22
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	00 2e       	mov	r0, r16
    1174:	02 c0       	rjmp	.+4      	; 0x117a <_Z16int_number_inputi+0x4c>
    1176:	35 95       	asr	r19
    1178:	27 95       	ror	r18
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <_Z16int_number_inputi+0x48>
    117e:	20 ff       	sbrs	r18, 0
    1180:	2f c0       	rjmp	.+94     	; 0x11e0 <_Z16int_number_inputi+0xb2>
    1182:	ed 2c       	mov	r14, r13
    1184:	f7 2e       	mov	r15, r23
				{
					if(mat[r][c-4]>='1' && mat[r][c-4]<='7')
    1186:	90 81       	ld	r25, Z
    1188:	2f ec       	ldi	r18, 0xCF	; 207
    118a:	29 0f       	add	r18, r25
    118c:	27 30       	cpi	r18, 0x07	; 7
    118e:	f8 f4       	brcc	.+62     	; 0x11ce <_Z16int_number_inputi+0xa0>
					{
						char tmp[2];
						tmp[0] = mat[r][c-4];
    1190:	99 83       	std	Y+1, r25	; 0x01
						tmp[1] = 0;
    1192:	1a 82       	std	Y+2, r1	; 0x02
						DisplayText(1,pos,tmp);
    1194:	ae 01       	movw	r20, r28
    1196:	4f 5f       	subi	r20, 0xFF	; 255
    1198:	5f 4f       	sbci	r21, 0xFF	; 255
    119a:	68 2f       	mov	r22, r24
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11a2:	2f ef       	ldi	r18, 0xFF	; 255
    11a4:	34 e3       	ldi	r19, 0x34	; 52
    11a6:	8c e0       	ldi	r24, 0x0C	; 12
    11a8:	21 50       	subi	r18, 0x01	; 1
    11aa:	30 40       	sbci	r19, 0x00	; 0
    11ac:	80 40       	sbci	r24, 0x00	; 0
    11ae:	e1 f7       	brne	.-8      	; 0x11a8 <_Z16int_number_inputi+0x7a>
    11b0:	00 c0       	rjmp	.+0      	; 0x11b2 <_Z16int_number_inputi+0x84>
    11b2:	00 00       	nop
						_delay_ms(500);
						return mat[r][c-4]-'0';
    11b4:	00 0f       	add	r16, r16
    11b6:	11 1f       	adc	r17, r17
    11b8:	00 0f       	add	r16, r16
    11ba:	11 1f       	adc	r17, r17
    11bc:	00 54       	subi	r16, 0x40	; 64
    11be:	1f 4f       	sbci	r17, 0xFF	; 255
    11c0:	f8 01       	movw	r30, r16
    11c2:	ee 0d       	add	r30, r14
    11c4:	ff 1d       	adc	r31, r15
    11c6:	80 81       	ld	r24, Z
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	c0 97       	sbiw	r24, 0x30	; 48
    11cc:	1c c0       	rjmp	.+56     	; 0x1206 <_Z16int_number_inputi+0xd8>
    11ce:	9f ef       	ldi	r25, 0xFF	; 255
    11d0:	24 e3       	ldi	r18, 0x34	; 52
    11d2:	3c e0       	ldi	r19, 0x0C	; 12
    11d4:	91 50       	subi	r25, 0x01	; 1
    11d6:	20 40       	sbci	r18, 0x00	; 0
    11d8:	30 40       	sbci	r19, 0x00	; 0
    11da:	e1 f7       	brne	.-8      	; 0x11d4 <_Z16int_number_inputi+0xa6>
    11dc:	00 c0       	rjmp	.+0      	; 0x11de <_Z16int_number_inputi+0xb0>
    11de:	00 00       	nop
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    11e0:	0f 5f       	subi	r16, 0xFF	; 255
    11e2:	1f 4f       	sbci	r17, 0xFF	; 255
    11e4:	34 96       	adiw	r30, 0x04	; 4
    11e6:	04 30       	cpi	r16, 0x04	; 4
    11e8:	11 05       	cpc	r17, r1
    11ea:	09 f6       	brne	.-126    	; 0x116e <_Z16int_number_inputi+0x40>
    11ec:	ef e1       	ldi	r30, 0x1F	; 31
    11ee:	fe e4       	ldi	r31, 0x4E	; 78
    11f0:	31 97       	sbiw	r30, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <_Z16int_number_inputi+0xc2>
    11f4:	00 c0       	rjmp	.+0      	; 0x11f6 <_Z16int_number_inputi+0xc8>
    11f6:	00 00       	nop
int int_number_input(int pos)
{
	//pos is position where u want to show the text
	while (1)
	{
		for(int c=4;c<8;c++)
    11f8:	4f 5f       	subi	r20, 0xFF	; 255
    11fa:	5f 4f       	sbci	r21, 0xFF	; 255
    11fc:	48 30       	cpi	r20, 0x08	; 8
    11fe:	51 05       	cpc	r21, r1
    1200:	09 f0       	breq	.+2      	; 0x1204 <_Z16int_number_inputi+0xd6>
    1202:	a3 cf       	rjmp	.-186    	; 0x114a <_Z16int_number_inputi+0x1c>
    1204:	a0 cf       	rjmp	.-192    	; 0x1146 <_Z16int_number_inputi+0x18>
				}
			}
			_delay_ms(10);
		}
	}
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	df 90       	pop	r13
    1218:	08 95       	ret

0000121a <_Z16string_to_doublePci>:

double string_to_double(char s[], int id)
{
    121a:	6f 92       	push	r6
    121c:	7f 92       	push	r7
    121e:	8f 92       	push	r8
    1220:	9f 92       	push	r9
    1222:	af 92       	push	r10
    1224:	bf 92       	push	r11
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
	double d = 0;
	bool flag = 0;
	int koto = 1;
	bool minus = 0;
	for(int i=0;i<id;i++)
    1236:	16 16       	cp	r1, r22
    1238:	17 06       	cpc	r1, r23
    123a:	0c f0       	brlt	.+2      	; 0x123e <_Z16string_to_doublePci+0x24>
    123c:	52 c0       	rjmp	.+164    	; 0x12e2 <_Z16string_to_doublePci+0xc8>
    123e:	7c 01       	movw	r14, r24
    1240:	ec 01       	movw	r28, r24
    1242:	e6 0e       	add	r14, r22
    1244:	f7 1e       	adc	r15, r23
    1246:	71 2c       	mov	r7, r1
    1248:	01 e0       	ldi	r16, 0x01	; 1
    124a:	10 e0       	ldi	r17, 0x00	; 0
    124c:	d1 2c       	mov	r13, r1
    124e:	81 2c       	mov	r8, r1
    1250:	91 2c       	mov	r9, r1
    1252:	54 01       	movw	r10, r8
	{
		if(s[i]=='-')
		{
			minus = 1;
    1254:	cc 24       	eor	r12, r12
    1256:	c3 94       	inc	r12
	bool flag = 0;
	int koto = 1;
	bool minus = 0;
	for(int i=0;i<id;i++)
	{
		if(s[i]=='-')
    1258:	69 90       	ld	r6, Y+
    125a:	8d e2       	ldi	r24, 0x2D	; 45
    125c:	68 16       	cp	r6, r24
    125e:	59 f1       	breq	.+86     	; 0x12b6 <_Z16string_to_doublePci+0x9c>
		{
			minus = 1;
			continue;
		}
		if(s[i]=='.')
    1260:	8e e2       	ldi	r24, 0x2E	; 46
    1262:	68 16       	cp	r6, r24
    1264:	51 f1       	breq	.+84     	; 0x12ba <_Z16string_to_doublePci+0xa0>
		{
			flag = 1;
			continue;
		}
		int now = (int)(s[i]-'0');
		d = d*10.0 + (double)now;
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	40 e2       	ldi	r20, 0x20	; 32
    126c:	51 e4       	ldi	r21, 0x41	; 65
    126e:	c5 01       	movw	r24, r10
    1270:	b4 01       	movw	r22, r8
    1272:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    1276:	4b 01       	movw	r8, r22
    1278:	5c 01       	movw	r10, r24
    127a:	66 2d       	mov	r22, r6
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	60 53       	subi	r22, 0x30	; 48
    1280:	71 09       	sbc	r23, r1
    1282:	07 2e       	mov	r0, r23
    1284:	00 0c       	add	r0, r0
    1286:	88 0b       	sbc	r24, r24
    1288:	99 0b       	sbc	r25, r25
    128a:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__floatsisf>
    128e:	a5 01       	movw	r20, r10
    1290:	94 01       	movw	r18, r8
    1292:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    1296:	4b 01       	movw	r8, r22
    1298:	5c 01       	movw	r10, r24
		if(flag)
    129a:	dd 20       	and	r13, r13
    129c:	79 f0       	breq	.+30     	; 0x12bc <_Z16string_to_doublePci+0xa2>
		{
			koto*=10;
    129e:	c8 01       	movw	r24, r16
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	00 0f       	add	r16, r16
    12a6:	11 1f       	adc	r17, r17
    12a8:	00 0f       	add	r16, r16
    12aa:	11 1f       	adc	r17, r17
    12ac:	00 0f       	add	r16, r16
    12ae:	11 1f       	adc	r17, r17
    12b0:	08 0f       	add	r16, r24
    12b2:	19 1f       	adc	r17, r25
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <_Z16string_to_doublePci+0xa2>
	bool minus = 0;
	for(int i=0;i<id;i++)
	{
		if(s[i]=='-')
		{
			minus = 1;
    12b6:	7c 2c       	mov	r7, r12
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <_Z16string_to_doublePci+0xa2>
			continue;
		}
		if(s[i]=='.')
		{
			flag = 1;
    12ba:	dc 2c       	mov	r13, r12
{
	double d = 0;
	bool flag = 0;
	int koto = 1;
	bool minus = 0;
	for(int i=0;i<id;i++)
    12bc:	ec 16       	cp	r14, r28
    12be:	fd 06       	cpc	r15, r29
    12c0:	59 f6       	brne	.-106    	; 0x1258 <_Z16string_to_doublePci+0x3e>
		if(flag)
		{
			koto*=10;
		}
	}
	d/= (double)koto;
    12c2:	b8 01       	movw	r22, r16
    12c4:	11 0f       	add	r17, r17
    12c6:	88 0b       	sbc	r24, r24
    12c8:	99 0b       	sbc	r25, r25
    12ca:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__floatsisf>
    12ce:	9b 01       	movw	r18, r22
    12d0:	ac 01       	movw	r20, r24
    12d2:	c5 01       	movw	r24, r10
    12d4:	b4 01       	movw	r22, r8
    12d6:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
	if(minus)
    12da:	77 20       	and	r7, r7
    12dc:	29 f0       	breq	.+10     	; 0x12e8 <_Z16string_to_doublePci+0xce>
	d= -d;
    12de:	90 58       	subi	r25, 0x80	; 128
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <_Z16string_to_doublePci+0xce>
		if(flag)
		{
			koto*=10;
		}
	}
	d/= (double)koto;
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	cb 01       	movw	r24, r22
	if(minus)
	d= -d;
	return d;
}
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	bf 90       	pop	r11
    12fa:	af 90       	pop	r10
    12fc:	9f 90       	pop	r9
    12fe:	8f 90       	pop	r8
    1300:	7f 90       	pop	r7
    1302:	6f 90       	pop	r6
    1304:	08 95       	ret

00001306 <_Z16double_num_inputi>:

double double_num_input(int pos)
{
    1306:	2f 92       	push	r2
    1308:	3f 92       	push	r3
    130a:	4f 92       	push	r4
    130c:	5f 92       	push	r5
    130e:	6f 92       	push	r6
    1310:	7f 92       	push	r7
    1312:	8f 92       	push	r8
    1314:	9f 92       	push	r9
    1316:	af 92       	push	r10
    1318:	bf 92       	push	r11
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	60 97       	sbiw	r28, 0x10	; 16
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	8b 87       	std	Y+11, r24	; 0x0b
	//pos is position where u want to show the text
	char s[10];
	int id = 0;
	bool dot = 0;
    133c:	18 8a       	std	Y+16, r1	; 0x10

double double_num_input(int pos)
{
	//pos is position where u want to show the text
	char s[10];
	int id = 0;
    133e:	a1 2c       	mov	r10, r1
    1340:	b1 2c       	mov	r11, r1
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    1342:	88 24       	eor	r8, r8
    1344:	83 94       	inc	r8
    1346:	91 2c       	mov	r9, r1
						
					}
					else if(mat2[r][c-4][0]=='.' && dot==0)
					{
						dot = 1;
						s[id] = mat2[r][c-4][0];
    1348:	ce 01       	movw	r24, r28
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	2c 01       	movw	r4, r24
    134e:	8c 87       	std	Y+12, r24	; 0x0c
    1350:	5d 86       	std	Y+13, r5	; 0x0d
    1352:	0f 2e       	mov	r0, r31
    1354:	f0 e6       	ldi	r31, 0x60	; 96
    1356:	2f 2e       	mov	r2, r31
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	3f 2e       	mov	r3, r31
    135c:	f0 2d       	mov	r31, r0
	int id = 0;
	bool dot = 0;
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    135e:	68 94       	set
    1360:	66 24       	eor	r6, r6
    1362:	62 f8       	bld	r6, 2
    1364:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    1366:	c4 01       	movw	r24, r8
    1368:	06 2c       	mov	r0, r6
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <_Z16double_num_inputi+0x6a>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <_Z16double_num_inputi+0x66>
    1374:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    1376:	8b bb       	out	0x1b, r24	; 27
    1378:	f3 01       	movw	r30, r6
    137a:	e4 54       	subi	r30, 0x44	; 68
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	7f 01       	movw	r14, r30
    1380:	61 01       	movw	r12, r2
			for(int r=0;r<4;r++)
    1382:	00 e0       	ldi	r16, 0x00	; 0
    1384:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    1386:	86 b3       	in	r24, 0x16	; 22
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	00 2e       	mov	r0, r16
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <_Z16double_num_inputi+0x8c>
    138e:	95 95       	asr	r25
    1390:	87 95       	ror	r24
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <_Z16double_num_inputi+0x88>
    1396:	80 ff       	sbrs	r24, 0
    1398:	36 c0       	rjmp	.+108    	; 0x1406 <_Z16double_num_inputi+0x100>
				{
					if(mat[r][c-4]>='0' && mat[r][c-4]<='9')
    139a:	f7 01       	movw	r30, r14
    139c:	80 81       	ld	r24, Z
    139e:	90 ed       	ldi	r25, 0xD0	; 208
    13a0:	98 0f       	add	r25, r24
    13a2:	9a 30       	cpi	r25, 0x0A	; 10
    13a4:	90 f4       	brcc	.+36     	; 0x13ca <_Z16double_num_inputi+0xc4>
					{
						s[id] = mat[r][c-4];
    13a6:	f2 01       	movw	r30, r4
    13a8:	ea 0d       	add	r30, r10
    13aa:	fb 1d       	adc	r31, r11
    13ac:	80 83       	st	Z, r24
						id++;
    13ae:	ff ef       	ldi	r31, 0xFF	; 255
    13b0:	af 1a       	sub	r10, r31
    13b2:	bf 0a       	sbc	r11, r31
						s[id] = 0;
    13b4:	f2 01       	movw	r30, r4
    13b6:	ea 0d       	add	r30, r10
    13b8:	fb 1d       	adc	r31, r11
    13ba:	10 82       	st	Z, r1
						DisplayText(1,pos , s);
    13bc:	4c 85       	ldd	r20, Y+12	; 0x0c
    13be:	5d 85       	ldd	r21, Y+13	; 0x0d
    13c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
    13c8:	14 c0       	rjmp	.+40     	; 0x13f2 <_Z16double_num_inputi+0xec>
					}
					else if(mat[r][c-4]=='=')
    13ca:	8d 33       	cpi	r24, 0x3D	; 61
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <_Z16double_num_inputi+0xca>
    13ce:	8e c0       	rjmp	.+284    	; 0x14ec <_Z16double_num_inputi+0x1e6>
					{
						done = 1;
						break;
					}
					else if(id==0 && mat[r][c-4]=='-')
    13d0:	a1 14       	cp	r10, r1
    13d2:	b1 04       	cpc	r11, r1
    13d4:	71 f4       	brne	.+28     	; 0x13f2 <_Z16double_num_inputi+0xec>
    13d6:	8d 32       	cpi	r24, 0x2D	; 45
    13d8:	61 f4       	brne	.+24     	; 0x13f2 <_Z16double_num_inputi+0xec>
					{
						s[id] = mat[r][c-4];
    13da:	2d e2       	ldi	r18, 0x2D	; 45
    13dc:	29 83       	std	Y+1, r18	; 0x01
						id++;
						s[id] = 0;
    13de:	1a 82       	std	Y+2, r1	; 0x02
						DisplayText(1,pos , s);
    13e0:	4c 85       	ldd	r20, Y+12	; 0x0c
    13e2:	5d 85       	ldd	r21, Y+13	; 0x0d
    13e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
						break;
					}
					else if(id==0 && mat[r][c-4]=='-')
					{
						s[id] = mat[r][c-4];
						id++;
    13ec:	aa 24       	eor	r10, r10
    13ee:	a3 94       	inc	r10
    13f0:	b1 2c       	mov	r11, r1
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	94 e3       	ldi	r25, 0x34	; 52
    13f6:	ec e0       	ldi	r30, 0x0C	; 12
    13f8:	81 50       	subi	r24, 0x01	; 1
    13fa:	90 40       	sbci	r25, 0x00	; 0
    13fc:	e0 40       	sbci	r30, 0x00	; 0
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <_Z16double_num_inputi+0xf2>
    1400:	00 c0       	rjmp	.+0      	; 0x1402 <_Z16double_num_inputi+0xfc>
    1402:	00 00       	nop
    1404:	51 c0       	rjmp	.+162    	; 0x14a8 <_Z16double_num_inputi+0x1a2>
						s[id] = 0;
						DisplayText(1,pos , s);
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    1406:	89 b3       	in	r24, 0x19	; 25
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	00 2e       	mov	r0, r16
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <_Z16double_num_inputi+0x10c>
    140e:	95 95       	asr	r25
    1410:	87 95       	ror	r24
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <_Z16double_num_inputi+0x108>
    1416:	80 ff       	sbrs	r24, 0
    1418:	47 c0       	rjmp	.+142    	; 0x14a8 <_Z16double_num_inputi+0x1a2>
				{
					if(mat2[r][c-4][0]=='<')
    141a:	f6 01       	movw	r30, r12
    141c:	80 81       	ld	r24, Z
    141e:	8c 33       	cpi	r24, 0x3C	; 60
    1420:	09 f5       	brne	.+66     	; 0x1464 <_Z16double_num_inputi+0x15e>
					{
						if(id==0){
    1422:	a1 14       	cp	r10, r1
    1424:	b1 04       	cpc	r11, r1
    1426:	51 f4       	brne	.+20     	; 0x143c <_Z16double_num_inputi+0x136>
    1428:	ff ef       	ldi	r31, 0xFF	; 255
    142a:	24 e3       	ldi	r18, 0x34	; 52
    142c:	8c e0       	ldi	r24, 0x0C	; 12
    142e:	f1 50       	subi	r31, 0x01	; 1
    1430:	20 40       	sbci	r18, 0x00	; 0
    1432:	80 40       	sbci	r24, 0x00	; 0
    1434:	e1 f7       	brne	.-8      	; 0x142e <_Z16double_num_inputi+0x128>
    1436:	00 c0       	rjmp	.+0      	; 0x1438 <_Z16double_num_inputi+0x132>
    1438:	00 00       	nop
    143a:	3a c0       	rjmp	.+116    	; 0x14b0 <_Z16double_num_inputi+0x1aa>
							_delay_ms(500);
							continue;
						}
						s[id-1]=' ';
    143c:	91 e0       	ldi	r25, 0x01	; 1
    143e:	a9 1a       	sub	r10, r25
    1440:	b1 08       	sbc	r11, r1
    1442:	f2 01       	movw	r30, r4
    1444:	ea 0d       	add	r30, r10
    1446:	fb 1d       	adc	r31, r11
    1448:	ff 87       	std	Y+15, r31	; 0x0f
    144a:	ee 87       	std	Y+14, r30	; 0x0e
    144c:	20 e2       	ldi	r18, 0x20	; 32
    144e:	20 83       	st	Z, r18
						DisplayText(1,pos,s);
    1450:	4c 85       	ldd	r20, Y+12	; 0x0c
    1452:	5d 85       	ldd	r21, Y+13	; 0x0d
    1454:	6b 85       	ldd	r22, Y+11	; 0x0b
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
						id--;
						s[id]=0;
    145c:	ee 85       	ldd	r30, Y+14	; 0x0e
    145e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1460:	10 82       	st	Z, r1
    1462:	19 c0       	rjmp	.+50     	; 0x1496 <_Z16double_num_inputi+0x190>
						
					}
					else if(mat2[r][c-4][0]=='.' && dot==0)
    1464:	8e 32       	cpi	r24, 0x2E	; 46
    1466:	b9 f4       	brne	.+46     	; 0x1496 <_Z16double_num_inputi+0x190>
    1468:	f8 89       	ldd	r31, Y+16	; 0x10
    146a:	f1 11       	cpse	r31, r1
    146c:	14 c0       	rjmp	.+40     	; 0x1496 <_Z16double_num_inputi+0x190>
					{
						dot = 1;
						s[id] = mat2[r][c-4][0];
    146e:	f2 01       	movw	r30, r4
    1470:	ea 0d       	add	r30, r10
    1472:	fb 1d       	adc	r31, r11
    1474:	2e e2       	ldi	r18, 0x2E	; 46
    1476:	20 83       	st	Z, r18
						id++;
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	a8 1a       	sub	r10, r24
    147c:	b8 0a       	sbc	r11, r24
						s[id] = 0;
    147e:	f2 01       	movw	r30, r4
    1480:	ea 0d       	add	r30, r10
    1482:	fb 1d       	adc	r31, r11
    1484:	10 82       	st	Z, r1
						DisplayText(1,pos , s);
    1486:	4c 85       	ldd	r20, Y+12	; 0x0c
    1488:	5d 85       	ldd	r21, Y+13	; 0x0d
    148a:	6b 85       	ldd	r22, Y+11	; 0x0b
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
						s[id]=0;
						
					}
					else if(mat2[r][c-4][0]=='.' && dot==0)
					{
						dot = 1;
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	98 8b       	std	Y+16, r25	; 0x10
    1496:	ef ef       	ldi	r30, 0xFF	; 255
    1498:	f4 e3       	ldi	r31, 0x34	; 52
    149a:	2c e0       	ldi	r18, 0x0C	; 12
    149c:	e1 50       	subi	r30, 0x01	; 1
    149e:	f0 40       	sbci	r31, 0x00	; 0
    14a0:	20 40       	sbci	r18, 0x00	; 0
    14a2:	e1 f7       	brne	.-8      	; 0x149c <_Z16double_num_inputi+0x196>
    14a4:	00 c0       	rjmp	.+0      	; 0x14a6 <_Z16double_num_inputi+0x1a0>
    14a6:	00 00       	nop
						s[id] = 0;
						DisplayText(1,pos , s);
					}
					_delay_ms(500);
				}
				if (id==9)
    14a8:	89 e0       	ldi	r24, 0x09	; 9
    14aa:	a8 16       	cp	r10, r24
    14ac:	b1 04       	cpc	r11, r1
    14ae:	f1 f0       	breq	.+60     	; 0x14ec <_Z16double_num_inputi+0x1e6>
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    14b0:	0f 5f       	subi	r16, 0xFF	; 255
    14b2:	1f 4f       	sbci	r17, 0xFF	; 255
    14b4:	98 e1       	ldi	r25, 0x18	; 24
    14b6:	c9 0e       	add	r12, r25
    14b8:	d1 1c       	adc	r13, r1
    14ba:	e4 e0       	ldi	r30, 0x04	; 4
    14bc:	ee 0e       	add	r14, r30
    14be:	f1 1c       	adc	r15, r1
    14c0:	04 30       	cpi	r16, 0x04	; 4
    14c2:	11 05       	cpc	r17, r1
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <_Z16double_num_inputi+0x1c2>
    14c6:	5f cf       	rjmp	.-322    	; 0x1386 <_Z16double_num_inputi+0x80>
    14c8:	8f e1       	ldi	r24, 0x1F	; 31
    14ca:	9e e4       	ldi	r25, 0x4E	; 78
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <_Z16double_num_inputi+0x1c6>
    14d0:	00 c0       	rjmp	.+0      	; 0x14d2 <_Z16double_num_inputi+0x1cc>
    14d2:	00 00       	nop
	int id = 0;
	bool dot = 0;
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    14d4:	9f ef       	ldi	r25, 0xFF	; 255
    14d6:	69 1a       	sub	r6, r25
    14d8:	79 0a       	sbc	r7, r25
    14da:	e6 e0       	ldi	r30, 0x06	; 6
    14dc:	2e 0e       	add	r2, r30
    14de:	31 1c       	adc	r3, r1
    14e0:	f8 e0       	ldi	r31, 0x08	; 8
    14e2:	6f 16       	cp	r6, r31
    14e4:	71 04       	cpc	r7, r1
    14e6:	09 f0       	breq	.+2      	; 0x14ea <_Z16double_num_inputi+0x1e4>
    14e8:	3e cf       	rjmp	.-388    	; 0x1366 <_Z16double_num_inputi+0x60>
    14ea:	33 cf       	rjmp	.-410    	; 0x1352 <_Z16double_num_inputi+0x4c>
    14ec:	8f e1       	ldi	r24, 0x1F	; 31
    14ee:	9e e4       	ldi	r25, 0x4E	; 78
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <_Z16double_num_inputi+0x1ea>
    14f4:	00 c0       	rjmp	.+0      	; 0x14f6 <_Z16double_num_inputi+0x1f0>
    14f6:	00 00       	nop
		{
			break;
		}
	}
	
	return string_to_double(s,id);
    14f8:	b5 01       	movw	r22, r10
    14fa:	ce 01       	movw	r24, r28
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	0e 94 0d 09 	call	0x121a	; 0x121a <_Z16string_to_doublePci>
}
    1502:	60 96       	adiw	r28, 0x10	; 16
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	df 90       	pop	r13
    151c:	cf 90       	pop	r12
    151e:	bf 90       	pop	r11
    1520:	af 90       	pop	r10
    1522:	9f 90       	pop	r9
    1524:	8f 90       	pop	r8
    1526:	7f 90       	pop	r7
    1528:	6f 90       	pop	r6
    152a:	5f 90       	pop	r5
    152c:	4f 90       	pop	r4
    152e:	3f 90       	pop	r3
    1530:	2f 90       	pop	r2
    1532:	08 95       	ret

00001534 <_Z9show_textPci>:
void show_text(char txt[], int pos1)
{
    1534:	cf 92       	push	r12
    1536:	df 92       	push	r13
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	65 97       	sbiw	r28, 0x15	; 21
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	6c 01       	movw	r12, r24
    1556:	7b 01       	movw	r14, r22
	if(pos1==1){
    1558:	61 30       	cpi	r22, 0x01	; 1
    155a:	71 05       	cpc	r23, r1
    155c:	11 f4       	brne	.+4      	; 0x1562 <_Z9show_textPci+0x2e>
		LCD_Clear();
    155e:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
	}
	int len = strlen(txt);
    1562:	f6 01       	movw	r30, r12
    1564:	01 90       	ld	r0, Z+
    1566:	00 20       	and	r0, r0
    1568:	e9 f7       	brne	.-6      	; 0x1564 <_Z9show_textPci+0x30>
    156a:	31 97       	sbiw	r30, 0x01	; 1
    156c:	ec 19       	sub	r30, r12
    156e:	fd 09       	sbc	r31, r13
	char s[21];
	int cnt = pos1;
	int id  = 0;
	for(int i=0;i<len;i++)
    1570:	1e 16       	cp	r1, r30
    1572:	1f 06       	cpc	r1, r31
    1574:	94 f1       	brlt	.+100    	; 0x15da <_Z9show_textPci+0xa6>
    1576:	3a c0       	rjmp	.+116    	; 0x15ec <_Z9show_textPci+0xb8>
	{
		s[id] = txt[i];
    1578:	d8 01       	movw	r26, r16
    157a:	9d 91       	ld	r25, X+
    157c:	8d 01       	movw	r16, r26
    157e:	e1 e0       	ldi	r30, 0x01	; 1
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	ec 0f       	add	r30, r28
    1584:	fd 1f       	adc	r31, r29
    1586:	e2 0f       	add	r30, r18
    1588:	f3 1f       	adc	r31, r19
    158a:	90 83       	st	Z, r25
		id++;
    158c:	2f 5f       	subi	r18, 0xFF	; 255
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
		if(id==20)
    1590:	24 31       	cpi	r18, 0x14	; 20
    1592:	31 05       	cpc	r19, r1
    1594:	69 f4       	brne	.+26     	; 0x15b0 <_Z9show_textPci+0x7c>
		{
			s[id] = 0;
    1596:	1d 8a       	std	Y+21, r1	; 0x15
			DisplayText(1,cnt,s);
    1598:	ae 01       	movw	r20, r28
    159a:	4f 5f       	subi	r20, 0xFF	; 255
    159c:	5f 4f       	sbci	r21, 0xFF	; 255
    159e:	6e 2d       	mov	r22, r14
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
			id = 0;
			cnt += 12;
    15a6:	bc e0       	ldi	r27, 0x0C	; 12
    15a8:	eb 0e       	add	r14, r27
    15aa:	f1 1c       	adc	r15, r1
		id++;
		if(id==20)
		{
			s[id] = 0;
			DisplayText(1,cnt,s);
			id = 0;
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
	}
	int len = strlen(txt);
	char s[21];
	int cnt = pos1;
	int id  = 0;
	for(int i=0;i<len;i++)
    15b0:	c0 16       	cp	r12, r16
    15b2:	d1 06       	cpc	r13, r17
    15b4:	09 f7       	brne	.-62     	; 0x1578 <_Z9show_textPci+0x44>
			id = 0;
			cnt += 12;
		}
		
	}
	if(id)
    15b6:	21 15       	cp	r18, r1
    15b8:	31 05       	cpc	r19, r1
    15ba:	c1 f0       	breq	.+48     	; 0x15ec <_Z9show_textPci+0xb8>
	{
		s[id] = 0;
    15bc:	e1 e0       	ldi	r30, 0x01	; 1
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	ec 0f       	add	r30, r28
    15c2:	fd 1f       	adc	r31, r29
    15c4:	e2 0f       	add	r30, r18
    15c6:	f3 1f       	adc	r31, r19
    15c8:	10 82       	st	Z, r1
		DisplayText(1,cnt,s);
    15ca:	ae 01       	movw	r20, r28
    15cc:	4f 5f       	subi	r20, 0xFF	; 255
    15ce:	5f 4f       	sbci	r21, 0xFF	; 255
    15d0:	6e 2d       	mov	r22, r14
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
	}

    15d8:	09 c0       	rjmp	.+18     	; 0x15ec <_Z9show_textPci+0xb8>
	char s[21];
	int cnt = pos1;
	int id  = 0;
	for(int i=0;i<len;i++)
	{
		s[id] = txt[i];
    15da:	d6 01       	movw	r26, r12
    15dc:	8d 91       	ld	r24, X+
    15de:	8d 01       	movw	r16, r26
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	ce 0e       	add	r12, r30
    15e4:	df 1e       	adc	r13, r31
		id++;
    15e6:	21 e0       	ldi	r18, 0x01	; 1
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	e2 cf       	rjmp	.-60     	; 0x15b0 <_Z9show_textPci+0x7c>
	{
		s[id] = 0;
		DisplayText(1,cnt,s);
	}

    15ec:	65 96       	adiw	r28, 0x15	; 21
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	cf 90       	pop	r12
    1608:	08 95       	ret

0000160a <_Z10gauss_algoii>:
double ans[3];
double a[3][4];
int where[3];

int gauss_algo (int n, int m)
{
    160a:	2f 92       	push	r2
    160c:	3f 92       	push	r3
    160e:	4f 92       	push	r4
    1610:	5f 92       	push	r5
    1612:	6f 92       	push	r6
    1614:	7f 92       	push	r7
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	2e 97       	sbiw	r28, 0x0e	; 14
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	2c 01       	movw	r4, r24
    1640:	1b 01       	movw	r2, r22
	//returns 1 if a single solution
	//returns 2 if infinite solution
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-5;
	for(int i=0; i<m; i++)
    1642:	16 16       	cp	r1, r22
    1644:	17 06       	cpc	r1, r23
    1646:	0c f0       	brlt	.+2      	; 0x164a <_Z10gauss_algoii+0x40>
    1648:	32 c1       	rjmp	.+612    	; 0x18ae <_Z10gauss_algoii+0x2a4>
		where[i] = -1;
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	9f ef       	ldi	r25, 0xFF	; 255
    164e:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <__data_end+0x1>
    1652:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__data_end>
	//returns 1 if a single solution
	//returns 2 if infinite solution
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-5;
	for(int i=0; i<m; i++)
    1656:	62 30       	cpi	r22, 0x02	; 2
    1658:	71 05       	cpc	r23, r1
    165a:	0c f4       	brge	.+2      	; 0x165e <_Z10gauss_algoii+0x54>
    165c:	17 c2       	rjmp	.+1070   	; 0x1a8c <_Z10gauss_algoii+0x482>
		where[i] = -1;
    165e:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <__data_end+0x3>
    1662:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end+0x2>
	//returns 1 if a single solution
	//returns 2 if infinite solution
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-5;
	for(int i=0; i<m; i++)
    1666:	63 30       	cpi	r22, 0x03	; 3
    1668:	71 05       	cpc	r23, r1
    166a:	0c f4       	brge	.+2      	; 0x166e <_Z10gauss_algoii+0x64>
    166c:	0f c2       	rjmp	.+1054   	; 0x1a8c <_Z10gauss_algoii+0x482>
		where[i] = -1;
    166e:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <__data_end+0x5>
    1672:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end+0x4>
    1676:	0a c2       	rjmp	.+1044   	; 0x1a8c <_Z10gauss_algoii+0x482>
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	04 96       	adiw	r24, 0x04	; 4
    167e:	9a 87       	std	Y+10, r25	; 0x0a
    1680:	89 87       	std	Y+9, r24	; 0x09
    1682:	eb 85       	ldd	r30, Y+11	; 0x0b
    1684:	fc 85       	ldd	r31, Y+12	; 0x0c
    1686:	32 96       	adiw	r30, 0x02	; 2
    1688:	fc 87       	std	Y+12, r31	; 0x0c
    168a:	eb 87       	std	Y+11, r30	; 0x0b
	for (int col=0, row=0; col<m && row<n; ++col)
    168c:	c4 14       	cp	r12, r4
    168e:	d5 04       	cpc	r13, r5
    1690:	0c f0       	brlt	.+2      	; 0x1694 <_Z10gauss_algoii+0x8a>
    1692:	10 c2       	rjmp	.+1056   	; 0x1ab4 <_Z10gauss_algoii+0x4aa>
    1694:	56 01       	movw	r10, r12
    1696:	c6 01       	movw	r24, r12
	{
		int sel = row;
		for (int i=row; i<n; ++i)
    1698:	84 15       	cp	r24, r4
    169a:	95 05       	cpc	r25, r5
    169c:	0c f0       	brlt	.+2      	; 0x16a0 <_Z10gauss_algoii+0x96>
    169e:	4a c0       	rjmp	.+148    	; 0x1734 <_Z10gauss_algoii+0x12a>
    16a0:	96 01       	movw	r18, r12
    16a2:	22 0f       	add	r18, r18
    16a4:	33 1f       	adc	r19, r19
    16a6:	22 0f       	add	r18, r18
    16a8:	33 1f       	adc	r19, r19
    16aa:	28 0d       	add	r18, r8
    16ac:	39 1d       	adc	r19, r9
    16ae:	22 0f       	add	r18, r18
    16b0:	33 1f       	adc	r19, r19
    16b2:	22 0f       	add	r18, r18
    16b4:	33 1f       	adc	r19, r19
    16b6:	2e 58       	subi	r18, 0x8E	; 142
    16b8:	3d 4f       	sbci	r19, 0xFD	; 253
    16ba:	86 01       	movw	r16, r12
    16bc:	36 01       	movw	r6, r12
    16be:	3a 83       	std	Y+2, r19	; 0x02
    16c0:	29 83       	std	Y+1, r18	; 0x01
		if (abs (a[i][col]) > abs (a[sel][col]))
    16c2:	e9 81       	ldd	r30, Y+1	; 0x01
    16c4:	fa 81       	ldd	r31, Y+2	; 0x02
    16c6:	60 81       	ld	r22, Z
    16c8:	71 81       	ldd	r23, Z+1	; 0x01
    16ca:	82 81       	ldd	r24, Z+2	; 0x02
    16cc:	93 81       	ldd	r25, Z+3	; 0x03
    16ce:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__fixsfsi>
    16d2:	7b 01       	movw	r14, r22
    16d4:	77 23       	and	r23, r23
    16d6:	24 f4       	brge	.+8      	; 0x16e0 <_Z10gauss_algoii+0xd6>
    16d8:	ee 24       	eor	r14, r14
    16da:	ff 24       	eor	r15, r15
    16dc:	e6 1a       	sub	r14, r22
    16de:	f7 0a       	sbc	r15, r23
    16e0:	f3 01       	movw	r30, r6
    16e2:	ee 0f       	add	r30, r30
    16e4:	ff 1f       	adc	r31, r31
    16e6:	ee 0f       	add	r30, r30
    16e8:	ff 1f       	adc	r31, r31
    16ea:	e8 0d       	add	r30, r8
    16ec:	f9 1d       	adc	r31, r9
    16ee:	ee 0f       	add	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	ee 58       	subi	r30, 0x8E	; 142
    16f8:	fd 4f       	sbci	r31, 0xFD	; 253
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__fixsfsi>
    1706:	9b 01       	movw	r18, r22
    1708:	77 23       	and	r23, r23
    170a:	24 f4       	brge	.+8      	; 0x1714 <_Z10gauss_algoii+0x10a>
    170c:	22 27       	eor	r18, r18
    170e:	33 27       	eor	r19, r19
    1710:	26 1b       	sub	r18, r22
    1712:	37 0b       	sbc	r19, r23
    1714:	2e 15       	cp	r18, r14
    1716:	3f 05       	cpc	r19, r15
    1718:	0c f4       	brge	.+2      	; 0x171c <_Z10gauss_algoii+0x112>
    171a:	38 01       	movw	r6, r16
	for(int i=0; i<m; i++)
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
	{
		int sel = row;
		for (int i=row; i<n; ++i)
    171c:	0f 5f       	subi	r16, 0xFF	; 255
    171e:	1f 4f       	sbci	r17, 0xFF	; 255
    1720:	29 81       	ldd	r18, Y+1	; 0x01
    1722:	3a 81       	ldd	r19, Y+2	; 0x02
    1724:	20 5f       	subi	r18, 0xF0	; 240
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	3a 83       	std	Y+2, r19	; 0x02
    172a:	29 83       	std	Y+1, r18	; 0x01
    172c:	04 15       	cp	r16, r4
    172e:	15 05       	cpc	r17, r5
    1730:	44 f2       	brlt	.-112    	; 0x16c2 <_Z10gauss_algoii+0xb8>
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <_Z10gauss_algoii+0x12c>
    1734:	36 01       	movw	r6, r12
		if (abs (a[i][col]) > abs (a[sel][col]))
		sel = i;
		if (abs (a[sel][col]) < EPS)
    1736:	f3 01       	movw	r30, r6
    1738:	ee 0f       	add	r30, r30
    173a:	ff 1f       	adc	r31, r31
    173c:	ee 0f       	add	r30, r30
    173e:	ff 1f       	adc	r31, r31
    1740:	e8 0d       	add	r30, r8
    1742:	f9 1d       	adc	r31, r9
    1744:	ee 0f       	add	r30, r30
    1746:	ff 1f       	adc	r31, r31
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	ee 58       	subi	r30, 0x8E	; 142
    174e:	fd 4f       	sbci	r31, 0xFD	; 253
    1750:	60 81       	ld	r22, Z
    1752:	71 81       	ldd	r23, Z+1	; 0x01
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	93 81       	ldd	r25, Z+3	; 0x03
    1758:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__fixsfsi>
    175c:	9b 01       	movw	r18, r22
    175e:	77 23       	and	r23, r23
    1760:	24 f4       	brge	.+8      	; 0x176a <_Z10gauss_algoii+0x160>
    1762:	22 27       	eor	r18, r18
    1764:	33 27       	eor	r19, r19
    1766:	26 1b       	sub	r18, r22
    1768:	37 0b       	sbc	r19, r23
    176a:	b9 01       	movw	r22, r18
    176c:	33 0f       	add	r19, r19
    176e:	88 0b       	sbc	r24, r24
    1770:	99 0b       	sbc	r25, r25
    1772:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__floatsisf>
    1776:	2c ea       	ldi	r18, 0xAC	; 172
    1778:	35 ec       	ldi	r19, 0xC5	; 197
    177a:	47 e2       	ldi	r20, 0x27	; 39
    177c:	57 e3       	ldi	r21, 0x37	; 55
    177e:	0e 94 0b 1c 	call	0x3816	; 0x3816 <__cmpsf2>
    1782:	88 23       	and	r24, r24
    1784:	0c f4       	brge	.+2      	; 0x1788 <_Z10gauss_algoii+0x17e>
    1786:	82 c0       	rjmp	.+260    	; 0x188c <_Z10gauss_algoii+0x282>
		continue;
		for (int i=col; i<=m; ++i)
    1788:	28 14       	cp	r2, r8
    178a:	39 04       	cpc	r3, r9
    178c:	0c f4       	brge	.+2      	; 0x1790 <_Z10gauss_algoii+0x186>
    178e:	98 c1       	rjmp	.+816    	; 0x1ac0 <_Z10gauss_algoii+0x4b6>
    1790:	f3 01       	movw	r30, r6
    1792:	ee 0f       	add	r30, r30
    1794:	ff 1f       	adc	r31, r31
    1796:	ee 0f       	add	r30, r30
    1798:	ff 1f       	adc	r31, r31
    179a:	e8 0d       	add	r30, r8
    179c:	f9 1d       	adc	r31, r9
    179e:	ee 0f       	add	r30, r30
    17a0:	ff 1f       	adc	r31, r31
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	ee 58       	subi	r30, 0x8E	; 142
    17a8:	fd 4f       	sbci	r31, 0xFD	; 253
    17aa:	d5 01       	movw	r26, r10
    17ac:	aa 0f       	add	r26, r26
    17ae:	bb 1f       	adc	r27, r27
    17b0:	aa 0f       	add	r26, r26
    17b2:	bb 1f       	adc	r27, r27
    17b4:	a8 0d       	add	r26, r8
    17b6:	b9 1d       	adc	r27, r9
    17b8:	aa 0f       	add	r26, r26
    17ba:	bb 1f       	adc	r27, r27
    17bc:	aa 0f       	add	r26, r26
    17be:	bb 1f       	adc	r27, r27
    17c0:	ae 58       	subi	r26, 0x8E	; 142
    17c2:	bd 4f       	sbci	r27, 0xFD	; 253
    17c4:	c4 01       	movw	r24, r8
		{
			double tmp = a[sel][i];
    17c6:	40 81       	ld	r20, Z
    17c8:	51 81       	ldd	r21, Z+1	; 0x01
    17ca:	62 81       	ldd	r22, Z+2	; 0x02
    17cc:	73 81       	ldd	r23, Z+3	; 0x03
			a[sel][i] = a[row][i];
    17ce:	0d 91       	ld	r16, X+
    17d0:	1d 91       	ld	r17, X+
    17d2:	2d 91       	ld	r18, X+
    17d4:	3c 91       	ld	r19, X
    17d6:	13 97       	sbiw	r26, 0x03	; 3
    17d8:	01 93       	st	Z+, r16
    17da:	11 93       	st	Z+, r17
    17dc:	21 93       	st	Z+, r18
    17de:	31 93       	st	Z+, r19
			a[row][i] = tmp;
    17e0:	4d 93       	st	X+, r20
    17e2:	5d 93       	st	X+, r21
    17e4:	6d 93       	st	X+, r22
    17e6:	7d 93       	st	X+, r23
		for (int i=row; i<n; ++i)
		if (abs (a[i][col]) > abs (a[sel][col]))
		sel = i;
		if (abs (a[sel][col]) < EPS)
		continue;
		for (int i=col; i<=m; ++i)
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	28 16       	cp	r2, r24
    17ec:	39 06       	cpc	r3, r25
    17ee:	5c f7       	brge	.-42     	; 0x17c6 <_Z10gauss_algoii+0x1bc>
    17f0:	67 c1       	rjmp	.+718    	; 0x1ac0 <_Z10gauss_algoii+0x4b6>
			a[sel][i] = a[row][i];
			a[row][i] = tmp;
		}
		where[col] = row;
		for (int i=0; i<n; ++i)
		if (i != row)
    17f2:	ae 14       	cp	r10, r14
    17f4:	bf 04       	cpc	r11, r15
    17f6:	e1 f1       	breq	.+120    	; 0x1870 <_Z10gauss_algoii+0x266>
		{
			double c = a[i][col] / a[row][col];
    17f8:	ed 81       	ldd	r30, Y+5	; 0x05
    17fa:	fe 81       	ldd	r31, Y+6	; 0x06
    17fc:	20 81       	ld	r18, Z
    17fe:	31 81       	ldd	r19, Z+1	; 0x01
    1800:	42 81       	ldd	r20, Z+2	; 0x02
    1802:	53 81       	ldd	r21, Z+3	; 0x03
    1804:	f6 01       	movw	r30, r12
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
    1812:	69 83       	std	Y+1, r22	; 0x01
    1814:	7a 83       	std	Y+2, r23	; 0x02
    1816:	8b 83       	std	Y+3, r24	; 0x03
    1818:	9c 83       	std	Y+4, r25	; 0x04
			for (int j=col; j<=m; ++j)
    181a:	28 14       	cp	r2, r8
    181c:	39 04       	cpc	r3, r9
    181e:	44 f1       	brlt	.+80     	; 0x1870 <_Z10gauss_algoii+0x266>
    1820:	de 86       	std	Y+14, r13	; 0x0e
    1822:	cd 86       	std	Y+13, r12	; 0x0d
    1824:	6f 80       	ldd	r6, Y+7	; 0x07
    1826:	78 84       	ldd	r7, Y+8	; 0x08
    1828:	84 01       	movw	r16, r8
			a[i][j] -= a[row][j] * c;
    182a:	f3 01       	movw	r30, r6
    182c:	21 91       	ld	r18, Z+
    182e:	31 91       	ld	r19, Z+
    1830:	41 91       	ld	r20, Z+
    1832:	51 91       	ld	r21, Z+
    1834:	3f 01       	movw	r6, r30
    1836:	69 81       	ldd	r22, Y+1	; 0x01
    1838:	7a 81       	ldd	r23, Y+2	; 0x02
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    1842:	9b 01       	movw	r18, r22
    1844:	ac 01       	movw	r20, r24
    1846:	ed 85       	ldd	r30, Y+13	; 0x0d
    1848:	fe 85       	ldd	r31, Y+14	; 0x0e
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    1856:	ed 85       	ldd	r30, Y+13	; 0x0d
    1858:	fe 85       	ldd	r31, Y+14	; 0x0e
    185a:	61 93       	st	Z+, r22
    185c:	71 93       	st	Z+, r23
    185e:	81 93       	st	Z+, r24
    1860:	91 93       	st	Z+, r25
    1862:	fe 87       	std	Y+14, r31	; 0x0e
    1864:	ed 87       	std	Y+13, r30	; 0x0d
		where[col] = row;
		for (int i=0; i<n; ++i)
		if (i != row)
		{
			double c = a[i][col] / a[row][col];
			for (int j=col; j<=m; ++j)
    1866:	0f 5f       	subi	r16, 0xFF	; 255
    1868:	1f 4f       	sbci	r17, 0xFF	; 255
    186a:	20 16       	cp	r2, r16
    186c:	31 06       	cpc	r3, r17
    186e:	ec f6       	brge	.-70     	; 0x182a <_Z10gauss_algoii+0x220>
			double tmp = a[sel][i];
			a[sel][i] = a[row][i];
			a[row][i] = tmp;
		}
		where[col] = row;
		for (int i=0; i<n; ++i)
    1870:	ff ef       	ldi	r31, 0xFF	; 255
    1872:	ef 1a       	sub	r14, r31
    1874:	ff 0a       	sbc	r15, r31
    1876:	20 e1       	ldi	r18, 0x10	; 16
    1878:	c2 0e       	add	r12, r18
    187a:	d1 1c       	adc	r13, r1
    187c:	4e 14       	cp	r4, r14
    187e:	5f 04       	cpc	r5, r15
    1880:	09 f0       	breq	.+2      	; 0x1884 <_Z10gauss_algoii+0x27a>
    1882:	b7 cf       	rjmp	.-146    	; 0x17f2 <_Z10gauss_algoii+0x1e8>
		{
			double c = a[i][col] / a[row][col];
			for (int j=col; j<=m; ++j)
			a[i][j] -= a[row][j] * c;
		}
		++row;
    1884:	65 01       	movw	r12, r10
    1886:	3f ef       	ldi	r19, 0xFF	; 255
    1888:	c3 1a       	sub	r12, r19
    188a:	d3 0a       	sbc	r13, r19
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-5;
	for(int i=0; i<m; i++)
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
    188c:	4f ef       	ldi	r20, 0xFF	; 255
    188e:	84 1a       	sub	r8, r20
    1890:	94 0a       	sbc	r9, r20
    1892:	28 14       	cp	r2, r8
    1894:	39 04       	cpc	r3, r9
    1896:	09 f0       	breq	.+2      	; 0x189a <_Z10gauss_algoii+0x290>
    1898:	ef ce       	rjmp	.-546    	; 0x1678 <_Z10gauss_algoii+0x6e>
    189a:	0c c1       	rjmp	.+536    	; 0x1ab4 <_Z10gauss_algoii+0x4aa>
		}
		++row;
	}

	for(int i=0; i<m; i++)
	ans[i] =0;
    189c:	11 92       	st	Z+, r1
    189e:	11 92       	st	Z+, r1
    18a0:	11 92       	st	Z+, r1
    18a2:	11 92       	st	Z+, r1
			a[i][j] -= a[row][j] * c;
		}
		++row;
	}

	for(int i=0; i<m; i++)
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	82 15       	cp	r24, r2
    18a8:	93 05       	cpc	r25, r3
    18aa:	c4 f3       	brlt	.-16     	; 0x189c <_Z10gauss_algoii+0x292>
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <_Z10gauss_algoii+0x2ae>
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
    18ae:	18 16       	cp	r1, r24
    18b0:	19 06       	cpc	r1, r25
    18b2:	0c f4       	brge	.+2      	; 0x18b6 <_Z10gauss_algoii+0x2ac>
    18b4:	44 c0       	rjmp	.+136    	; 0x193e <_Z10gauss_algoii+0x334>
    18b6:	db c0       	rjmp	.+438    	; 0x1a6e <_Z10gauss_algoii+0x464>
    18b8:	0f 2e       	mov	r0, r31
    18ba:	fc e6       	ldi	r31, 0x6C	; 108
    18bc:	ef 2e       	mov	r14, r31
    18be:	f2 e0       	ldi	r31, 0x02	; 2
    18c0:	ff 2e       	mov	r15, r31
    18c2:	f0 2d       	mov	r31, r0
			a[i][j] -= a[row][j] * c;
		}
		++row;
	}

	for(int i=0; i<m; i++)
    18c4:	1a 82       	std	Y+2, r1	; 0x02
    18c6:	19 82       	std	Y+1, r1	; 0x01
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
    18c8:	f7 01       	movw	r30, r14
    18ca:	81 91       	ld	r24, Z+
    18cc:	91 91       	ld	r25, Z+
    18ce:	7f 01       	movw	r14, r30
    18d0:	8f 3f       	cpi	r24, 0xFF	; 255
    18d2:	ff ef       	ldi	r31, 0xFF	; 255
    18d4:	9f 07       	cpc	r25, r31
    18d6:	39 f1       	breq	.+78     	; 0x1926 <_Z10gauss_algoii+0x31c>
	ans[i] = a[where[i]][m] / a[where[i]][i];
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	dc 01       	movw	r26, r24
    18e2:	a2 0d       	add	r26, r2
    18e4:	b3 1d       	adc	r27, r3
    18e6:	aa 0f       	add	r26, r26
    18e8:	bb 1f       	adc	r27, r27
    18ea:	aa 0f       	add	r26, r26
    18ec:	bb 1f       	adc	r27, r27
    18ee:	ae 58       	subi	r26, 0x8E	; 142
    18f0:	bd 4f       	sbci	r27, 0xFD	; 253
    18f2:	29 81       	ldd	r18, Y+1	; 0x01
    18f4:	3a 81       	ldd	r19, Y+2	; 0x02
    18f6:	82 0f       	add	r24, r18
    18f8:	93 1f       	adc	r25, r19
    18fa:	fc 01       	movw	r30, r24
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	ee 58       	subi	r30, 0x8E	; 142
    1906:	fd 4f       	sbci	r31, 0xFD	; 253
    1908:	20 81       	ld	r18, Z
    190a:	31 81       	ldd	r19, Z+1	; 0x01
    190c:	42 81       	ldd	r20, Z+2	; 0x02
    190e:	53 81       	ldd	r21, Z+3	; 0x03
    1910:	6d 91       	ld	r22, X+
    1912:	7d 91       	ld	r23, X+
    1914:	8d 91       	ld	r24, X+
    1916:	9c 91       	ld	r25, X
    1918:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
    191c:	f8 01       	movw	r30, r16
    191e:	60 83       	st	Z, r22
    1920:	71 83       	std	Z+1, r23	; 0x01
    1922:	82 83       	std	Z+2, r24	; 0x02
    1924:	93 83       	std	Z+3, r25	; 0x03
		++row;
	}

	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
    1926:	29 81       	ldd	r18, Y+1	; 0x01
    1928:	3a 81       	ldd	r19, Y+2	; 0x02
    192a:	2f 5f       	subi	r18, 0xFF	; 255
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	3a 83       	std	Y+2, r19	; 0x02
    1930:	29 83       	std	Y+1, r18	; 0x01
    1932:	0c 5f       	subi	r16, 0xFC	; 252
    1934:	1f 4f       	sbci	r17, 0xFF	; 255
    1936:	22 15       	cp	r18, r2
    1938:	33 05       	cpc	r19, r3
    193a:	34 f2       	brlt	.-116    	; 0x18c8 <_Z10gauss_algoii+0x2be>
    193c:	dc c0       	rjmp	.+440    	; 0x1af6 <_Z10gauss_algoii+0x4ec>
    193e:	c1 01       	movw	r24, r2
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	fc 01       	movw	r30, r24
    194a:	ee 58       	subi	r30, 0x8E	; 142
    194c:	fd 4f       	sbci	r31, 0xFD	; 253
    194e:	4f 01       	movw	r8, r30
    1950:	02 e7       	ldi	r16, 0x72	; 114
    1952:	12 e0       	ldi	r17, 0x02	; 2
    1954:	9c 01       	movw	r18, r24
    1956:	2e 55       	subi	r18, 0x5E	; 94
    1958:	3d 4f       	sbci	r19, 0xFD	; 253
    195a:	59 01       	movw	r10, r18
			a[i][j] -= a[row][j] * c;
		}
		++row;
	}

	for(int i=0; i<m; i++)
    195c:	61 2c       	mov	r6, r1
    195e:	71 2c       	mov	r7, r1
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
    1960:	78 01       	movw	r14, r16
    1962:	5e 82       	std	Y+6, r5	; 0x06
    1964:	4d 82       	std	Y+5, r4	; 0x05
    1966:	3a 82       	std	Y+2, r3	; 0x02
    1968:	29 82       	std	Y+1, r2	; 0x01
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	18 16       	cp	r1, r24
    1970:	19 06       	cpc	r1, r25
    1972:	44 f0       	brlt	.+16     	; 0x1984 <_Z10gauss_algoii+0x37a>
    1974:	2f c0       	rjmp	.+94     	; 0x19d4 <_Z10gauss_algoii+0x3ca>
    1976:	29 80       	ldd	r2, Y+1	; 0x01
    1978:	3a 80       	ldd	r3, Y+2	; 0x02
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
    197a:	12 14       	cp	r1, r2
    197c:	13 04       	cpc	r1, r3
    197e:	0c f4       	brge	.+2      	; 0x1982 <_Z10gauss_algoii+0x378>
    1980:	5f c0       	rjmp	.+190    	; 0x1a40 <_Z10gauss_algoii+0x436>
    1982:	78 c0       	rjmp	.+240    	; 0x1a74 <_Z10gauss_algoii+0x46a>
    1984:	02 ea       	ldi	r16, 0xA2	; 162
    1986:	12 e0       	ldi	r17, 0x02	; 2
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
    1988:	f8 86       	std	Y+8, r15	; 0x08
    198a:	ef 82       	std	Y+7, r14	; 0x07
    198c:	31 2c       	mov	r3, r1
    198e:	51 2c       	mov	r5, r1
    1990:	c1 2c       	mov	r12, r1
    1992:	d1 2c       	mov	r13, r1
		sum += ans[j] * a[i][j];
    1994:	f8 01       	movw	r30, r16
    1996:	61 91       	ld	r22, Z+
    1998:	71 91       	ld	r23, Z+
    199a:	81 91       	ld	r24, Z+
    199c:	91 91       	ld	r25, Z+
    199e:	8f 01       	movw	r16, r30
    19a0:	ef 81       	ldd	r30, Y+7	; 0x07
    19a2:	f8 85       	ldd	r31, Y+8	; 0x08
    19a4:	21 91       	ld	r18, Z+
    19a6:	31 91       	ld	r19, Z+
    19a8:	41 91       	ld	r20, Z+
    19aa:	51 91       	ld	r21, Z+
    19ac:	f8 87       	std	Y+8, r31	; 0x08
    19ae:	ef 83       	std	Y+7, r30	; 0x07
    19b0:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    19b4:	9b 01       	movw	r18, r22
    19b6:	ac 01       	movw	r20, r24
    19b8:	63 2d       	mov	r22, r3
    19ba:	75 2d       	mov	r23, r5
    19bc:	8c 2d       	mov	r24, r12
    19be:	9d 2d       	mov	r25, r13
    19c0:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    19c4:	36 2e       	mov	r3, r22
    19c6:	57 2e       	mov	r5, r23
    19c8:	c8 2e       	mov	r12, r24
    19ca:	d9 2e       	mov	r13, r25
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
    19cc:	a0 16       	cp	r10, r16
    19ce:	b1 06       	cpc	r11, r17
    19d0:	09 f7       	brne	.-62     	; 0x1994 <_Z10gauss_algoii+0x38a>
    19d2:	04 c0       	rjmp	.+8      	; 0x19dc <_Z10gauss_algoii+0x3d2>
    19d4:	31 2c       	mov	r3, r1
    19d6:	51 2c       	mov	r5, r1
    19d8:	c1 2c       	mov	r12, r1
    19da:	d1 2c       	mov	r13, r1
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
    19dc:	f4 01       	movw	r30, r8
    19de:	20 81       	ld	r18, Z
    19e0:	31 81       	ldd	r19, Z+1	; 0x01
    19e2:	42 81       	ldd	r20, Z+2	; 0x02
    19e4:	53 81       	ldd	r21, Z+3	; 0x03
    19e6:	63 2d       	mov	r22, r3
    19e8:	75 2d       	mov	r23, r5
    19ea:	8c 2d       	mov	r24, r12
    19ec:	9d 2d       	mov	r25, r13
    19ee:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    19f2:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__fixsfsi>
    19f6:	9b 01       	movw	r18, r22
    19f8:	77 23       	and	r23, r23
    19fa:	24 f4       	brge	.+8      	; 0x1a04 <_Z10gauss_algoii+0x3fa>
    19fc:	22 27       	eor	r18, r18
    19fe:	33 27       	eor	r19, r19
    1a00:	26 1b       	sub	r18, r22
    1a02:	37 0b       	sbc	r19, r23
    1a04:	b9 01       	movw	r22, r18
    1a06:	33 0f       	add	r19, r19
    1a08:	88 0b       	sbc	r24, r24
    1a0a:	99 0b       	sbc	r25, r25
    1a0c:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__floatsisf>
    1a10:	2c ea       	ldi	r18, 0xAC	; 172
    1a12:	35 ec       	ldi	r19, 0xC5	; 197
    1a14:	47 e2       	ldi	r20, 0x27	; 39
    1a16:	57 e3       	ldi	r21, 0x37	; 55
    1a18:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__gesf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	6c f1       	brlt	.+90     	; 0x1a7a <_Z10gauss_algoii+0x470>
	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
    1a20:	ff ef       	ldi	r31, 0xFF	; 255
    1a22:	6f 1a       	sub	r6, r31
    1a24:	7f 0a       	sbc	r7, r31
    1a26:	20 e1       	ldi	r18, 0x10	; 16
    1a28:	82 0e       	add	r8, r18
    1a2a:	91 1c       	adc	r9, r1
    1a2c:	30 e1       	ldi	r19, 0x10	; 16
    1a2e:	e3 0e       	add	r14, r19
    1a30:	f1 1c       	adc	r15, r1
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	68 16       	cp	r6, r24
    1a38:	79 06       	cpc	r7, r25
    1a3a:	0c f4       	brge	.+2      	; 0x1a3e <_Z10gauss_algoii+0x434>
    1a3c:	96 cf       	rjmp	.-212    	; 0x196a <_Z10gauss_algoii+0x360>
    1a3e:	9b cf       	rjmp	.-202    	; 0x1976 <_Z10gauss_algoii+0x36c>
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
		if (where[i] == -1){
    1a40:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
    1a44:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <__data_end+0x1>
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	d1 f0       	breq	.+52     	; 0x1a80 <_Z10gauss_algoii+0x476>
    1a4c:	ee e6       	ldi	r30, 0x6E	; 110
    1a4e:	f2 e0       	ldi	r31, 0x02	; 2
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	05 c0       	rjmp	.+10     	; 0x1a60 <_Z10gauss_algoii+0x456>
    1a56:	21 91       	ld	r18, Z+
    1a58:	31 91       	ld	r19, Z+
    1a5a:	2f 3f       	cpi	r18, 0xFF	; 255
    1a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5e:	99 f0       	breq	.+38     	; 0x1a86 <_Z10gauss_algoii+0x47c>
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	82 15       	cp	r24, r2
    1a64:	93 05       	cpc	r25, r3
    1a66:	bc f3       	brlt	.-18     	; 0x1a56 <_Z10gauss_algoii+0x44c>
		if (where[i] == -1){
			return 2;
		}
	}
	return 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	49 c0       	rjmp	.+146    	; 0x1b00 <_Z10gauss_algoii+0x4f6>
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	46 c0       	rjmp	.+140    	; 0x1b00 <_Z10gauss_algoii+0x4f6>
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	43 c0       	rjmp	.+134    	; 0x1b00 <_Z10gauss_algoii+0x4f6>
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
		return 0;
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	40 c0       	rjmp	.+128    	; 0x1b00 <_Z10gauss_algoii+0x4f6>
	}

	for (int i=0; i<m; ++i){
		if (where[i] == -1){
			return 2;
    1a80:	82 e0       	ldi	r24, 0x02	; 2
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	3d c0       	rjmp	.+122    	; 0x1b00 <_Z10gauss_algoii+0x4f6>
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	3a c0       	rjmp	.+116    	; 0x1b00 <_Z10gauss_algoii+0x4f6>
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-5;
	for(int i=0; i<m; i++)
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
    1a8c:	14 14       	cp	r1, r4
    1a8e:	15 04       	cpc	r1, r5
    1a90:	8c f4       	brge	.+34     	; 0x1ab4 <_Z10gauss_algoii+0x4aa>
    1a92:	82 e7       	ldi	r24, 0x72	; 114
    1a94:	92 e0       	ldi	r25, 0x02	; 2
    1a96:	9a 87       	std	Y+10, r25	; 0x0a
    1a98:	89 87       	std	Y+9, r24	; 0x09
    1a9a:	ec e6       	ldi	r30, 0x6C	; 108
    1a9c:	f2 e0       	ldi	r31, 0x02	; 2
    1a9e:	fc 87       	std	Y+12, r31	; 0x0c
    1aa0:	eb 87       	std	Y+11, r30	; 0x0b
    1aa2:	a1 2c       	mov	r10, r1
    1aa4:	b1 2c       	mov	r11, r1
    1aa6:	81 2c       	mov	r8, r1
    1aa8:	91 2c       	mov	r9, r1
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	c1 2c       	mov	r12, r1
    1ab0:	d1 2c       	mov	r13, r1
    1ab2:	f2 cd       	rjmp	.-1052   	; 0x1698 <_Z10gauss_algoii+0x8e>
    1ab4:	02 ea       	ldi	r16, 0xA2	; 162
    1ab6:	12 e0       	ldi	r17, 0x02	; 2
		where[col] = row;
		for (int i=0; i<n; ++i)
		if (i != row)
		{
			double c = a[i][col] / a[row][col];
			for (int j=col; j<=m; ++j)
    1ab8:	f8 01       	movw	r30, r16
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	ee ce       	rjmp	.-548    	; 0x189c <_Z10gauss_algoii+0x292>
		{
			double tmp = a[sel][i];
			a[sel][i] = a[row][i];
			a[row][i] = tmp;
		}
		where[col] = row;
    1ac0:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ac2:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ac4:	b1 82       	std	Z+1, r11	; 0x01
    1ac6:	a0 82       	st	Z, r10
    1ac8:	c5 01       	movw	r24, r10
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	88 0d       	add	r24, r8
    1ad4:	99 1d       	adc	r25, r9
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	9c 01       	movw	r18, r24
    1ae0:	2e 58       	subi	r18, 0x8E	; 142
    1ae2:	3d 4f       	sbci	r19, 0xFD	; 253
    1ae4:	38 87       	std	Y+8, r19	; 0x08
    1ae6:	2f 83       	std	Y+7, r18	; 0x07
    1ae8:	c9 84       	ldd	r12, Y+9	; 0x09
    1aea:	da 84       	ldd	r13, Y+10	; 0x0a
    1aec:	e1 2c       	mov	r14, r1
    1aee:	f1 2c       	mov	r15, r1
		for (int i=0; i<n; ++i)
		if (i != row)
		{
			double c = a[i][col] / a[row][col];
    1af0:	3e 83       	std	Y+6, r19	; 0x06
    1af2:	2d 83       	std	Y+5, r18	; 0x05
    1af4:	7e ce       	rjmp	.-772    	; 0x17f2 <_Z10gauss_algoii+0x1e8>
	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
    1af6:	14 14       	cp	r1, r4
    1af8:	15 04       	cpc	r1, r5
    1afa:	0c f4       	brge	.+2      	; 0x1afe <_Z10gauss_algoii+0x4f4>
    1afc:	20 cf       	rjmp	.-448    	; 0x193e <_Z10gauss_algoii+0x334>
    1afe:	a0 cf       	rjmp	.-192    	; 0x1a40 <_Z10gauss_algoii+0x436>
		if (where[i] == -1){
			return 2;
		}
	}
	return 1;
}
    1b00:	2e 96       	adiw	r28, 0x0e	; 14
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	0f 91       	pop	r16
    1b14:	ff 90       	pop	r15
    1b16:	ef 90       	pop	r14
    1b18:	df 90       	pop	r13
    1b1a:	cf 90       	pop	r12
    1b1c:	bf 90       	pop	r11
    1b1e:	af 90       	pop	r10
    1b20:	9f 90       	pop	r9
    1b22:	8f 90       	pop	r8
    1b24:	7f 90       	pop	r7
    1b26:	6f 90       	pop	r6
    1b28:	5f 90       	pop	r5
    1b2a:	4f 90       	pop	r4
    1b2c:	3f 90       	pop	r3
    1b2e:	2f 90       	pop	r2
    1b30:	08 95       	ret

00001b32 <_Z5gaussv>:
void gauss()
{
    1b32:	2f 92       	push	r2
    1b34:	3f 92       	push	r3
    1b36:	4f 92       	push	r4
    1b38:	5f 92       	push	r5
    1b3a:	6f 92       	push	r6
    1b3c:	7f 92       	push	r7
    1b3e:	8f 92       	push	r8
    1b40:	9f 92       	push	r9
    1b42:	af 92       	push	r10
    1b44:	bf 92       	push	r11
    1b46:	cf 92       	push	r12
    1b48:	df 92       	push	r13
    1b4a:	ef 92       	push	r14
    1b4c:	ff 92       	push	r15
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	cb 54       	subi	r28, 0x4B	; 75
    1b5c:	d1 09       	sbc	r29, r1
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
	char text1[] = "Number of Variables (1-7)?";
    1b68:	8b e1       	ldi	r24, 0x1B	; 27
    1b6a:	ed e5       	ldi	r30, 0x5D	; 93
    1b6c:	f1 e0       	ldi	r31, 0x01	; 1
    1b6e:	de 01       	movw	r26, r28
    1b70:	11 96       	adiw	r26, 0x01	; 1
    1b72:	01 90       	ld	r0, Z+
    1b74:	0d 92       	st	X+, r0
    1b76:	8a 95       	dec	r24
    1b78:	e1 f7       	brne	.-8      	; 0x1b72 <_Z5gaussv+0x40>
	show_text(text1,1);
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	ce 01       	movw	r24, r28
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
	int m = int_number_input(24);
    1b86:	88 e1       	ldi	r24, 0x18	; 24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 97 08 	call	0x112e	; 0x112e <_Z16int_number_inputi>
    1b8e:	5c 01       	movw	r10, r24
	strcpy(text1,"Number of equations (1-7)?");
    1b90:	8b e1       	ldi	r24, 0x1B	; 27
    1b92:	e8 e7       	ldi	r30, 0x78	; 120
    1b94:	f1 e0       	ldi	r31, 0x01	; 1
    1b96:	de 01       	movw	r26, r28
    1b98:	11 96       	adiw	r26, 0x01	; 1
    1b9a:	01 90       	ld	r0, Z+
    1b9c:	0d 92       	st	X+, r0
    1b9e:	8a 95       	dec	r24
    1ba0:	e1 f7       	brne	.-8      	; 0x1b9a <_Z5gaussv+0x68>
	show_text(text1,1);
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	01 96       	adiw	r24, 0x01	; 1
    1baa:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
	int n = int_number_input(24);
    1bae:	88 e1       	ldi	r24, 0x18	; 24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 97 08 	call	0x112e	; 0x112e <_Z16int_number_inputi>
    1bb6:	2c 96       	adiw	r28, 0x0c	; 12
    1bb8:	9f af       	std	Y+63, r25	; 0x3f
    1bba:	8e af       	std	Y+62, r24	; 0x3e
    1bbc:	2c 97       	sbiw	r28, 0x0c	; 12
	

	
	
	for(int i=0;i<n;i++)
    1bbe:	18 16       	cp	r1, r24
    1bc0:	19 06       	cpc	r1, r25
    1bc2:	0c f0       	brlt	.+2      	; 0x1bc6 <_Z5gaussv+0x94>
    1bc4:	db c0       	rjmp	.+438    	; 0x1d7c <_Z5gaussv+0x24a>
    1bc6:	c5 01       	movw	r24, r10
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	9c 01       	movw	r18, r24
    1bd2:	2e 58       	subi	r18, 0x8E	; 142
    1bd4:	3d 4f       	sbci	r19, 0xFD	; 253
    1bd6:	28 96       	adiw	r28, 0x08	; 8
    1bd8:	3f af       	std	Y+63, r19	; 0x3f
    1bda:	2e af       	std	Y+62, r18	; 0x3e
    1bdc:	28 97       	sbiw	r28, 0x08	; 8
    1bde:	82 e7       	ldi	r24, 0x72	; 114
    1be0:	92 e0       	ldi	r25, 0x02	; 2
    1be2:	2a 96       	adiw	r28, 0x0a	; 10
    1be4:	9f af       	std	Y+63, r25	; 0x3f
    1be6:	8e af       	std	Y+62, r24	; 0x3e
    1be8:	2a 97       	sbiw	r28, 0x0a	; 10
    1bea:	0f 2e       	mov	r0, r31
    1bec:	f0 e3       	ldi	r31, 0x30	; 48
    1bee:	3f 2e       	mov	r3, r31
    1bf0:	f0 2d       	mov	r31, r0
    1bf2:	81 2c       	mov	r8, r1
    1bf4:	91 2c       	mov	r9, r1
	{
		for(int j=0;j<m;j++)
		{
			char text[14] = "Input a[";
    1bf6:	0f 2e       	mov	r0, r31
    1bf8:	f5 e0       	ldi	r31, 0x05	; 5
    1bfa:	2f 2e       	mov	r2, r31
    1bfc:	f0 2d       	mov	r31, r0
    1bfe:	fe 01       	movw	r30, r28
    1c00:	f9 96       	adiw	r30, 0x39	; 57
    1c02:	26 96       	adiw	r28, 0x06	; 6
    1c04:	ff af       	std	Y+63, r31	; 0x3f
    1c06:	ee af       	std	Y+62, r30	; 0x3e
    1c08:	26 97       	sbiw	r28, 0x06	; 6
			char ek[2];
			ek[0] = (char)(i+'0');
    1c0a:	8e 01       	movw	r16, r28
    1c0c:	0e 5b       	subi	r16, 0xBE	; 190
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
			ek[1] = 0;
			strcat(text , ek);
			ek[0] = ']';
    1c10:	0f 2e       	mov	r0, r31
    1c12:	fd e5       	ldi	r31, 0x5D	; 93
    1c14:	4f 2e       	mov	r4, r31
    1c16:	f0 2d       	mov	r31, r0
	{
		for(int j=0;j<m;j++)
		{
			char text[14] = "Input a[";
			char ek[2];
			ek[0] = (char)(i+'0');
    1c18:	e0 2e       	mov	r14, r16
    1c1a:	f1 2e       	mov	r15, r17

	
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
    1c1c:	1a 14       	cp	r1, r10
    1c1e:	1b 04       	cpc	r1, r11
    1c20:	0c f0       	brlt	.+2      	; 0x1c24 <_Z5gaussv+0xf2>
    1c22:	5d c0       	rjmp	.+186    	; 0x1cde <_Z5gaussv+0x1ac>
    1c24:	2a 96       	adiw	r28, 0x0a	; 10
    1c26:	ce ac       	ldd	r12, Y+62	; 0x3e
    1c28:	df ac       	ldd	r13, Y+63	; 0x3f
    1c2a:	2a 97       	sbiw	r28, 0x0a	; 10
    1c2c:	0f 2e       	mov	r0, r31
    1c2e:	f0 e3       	ldi	r31, 0x30	; 48
    1c30:	5f 2e       	mov	r5, r31
    1c32:	f0 2d       	mov	r31, r0
    1c34:	61 2c       	mov	r6, r1
    1c36:	71 2c       	mov	r7, r1
		{
			char text[14] = "Input a[";
    1c38:	89 e0       	ldi	r24, 0x09	; 9
    1c3a:	e0 ed       	ldi	r30, 0xD0	; 208
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	de 01       	movw	r26, r28
    1c40:	d0 96       	adiw	r26, 0x30	; 48
    1c42:	01 90       	ld	r0, Z+
    1c44:	0d 92       	st	X+, r0
    1c46:	8a 95       	dec	r24
    1c48:	e1 f7       	brne	.-8      	; 0x1c42 <_Z5gaussv+0x110>
    1c4a:	26 96       	adiw	r28, 0x06	; 6
    1c4c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c4e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c50:	26 97       	sbiw	r28, 0x06	; 6
    1c52:	22 2d       	mov	r18, r2
    1c54:	11 92       	st	Z+, r1
    1c56:	2a 95       	dec	r18
    1c58:	e9 f7       	brne	.-6      	; 0x1c54 <_Z5gaussv+0x122>
			char ek[2];
			ek[0] = (char)(i+'0');
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	30 82       	st	Z, r3
			ek[1] = 0;
    1c5e:	11 82       	std	Z+1, r1	; 0x01
			strcat(text , ek);
    1c60:	6e 2d       	mov	r22, r14
    1c62:	7f 2d       	mov	r23, r15
    1c64:	ce 01       	movw	r24, r28
    1c66:	c0 96       	adiw	r24, 0x30	; 48
    1c68:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <strcat>
			ek[0] = ']';
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	40 82       	st	Z, r4
			strcat(text , ek);
    1c70:	6e 2d       	mov	r22, r14
    1c72:	7f 2d       	mov	r23, r15
    1c74:	ce 01       	movw	r24, r28
    1c76:	c0 96       	adiw	r24, 0x30	; 48
    1c78:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <strcat>
			ek[0] = '[';
    1c7c:	2b e5       	ldi	r18, 0x5B	; 91
    1c7e:	f8 01       	movw	r30, r16
    1c80:	20 83       	st	Z, r18
			strcat(text , ek);
    1c82:	6e 2d       	mov	r22, r14
    1c84:	7f 2d       	mov	r23, r15
    1c86:	ce 01       	movw	r24, r28
    1c88:	c0 96       	adiw	r24, 0x30	; 48
    1c8a:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <strcat>
			ek[0] = (char)(j+'0');
    1c8e:	f8 01       	movw	r30, r16
    1c90:	50 82       	st	Z, r5
			strcat(text , ek);
    1c92:	6e 2d       	mov	r22, r14
    1c94:	7f 2d       	mov	r23, r15
    1c96:	ce 01       	movw	r24, r28
    1c98:	c0 96       	adiw	r24, 0x30	; 48
    1c9a:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <strcat>
			ek[0] = ']';
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	40 82       	st	Z, r4
			strcat(text , ek);
    1ca2:	6e 2d       	mov	r22, r14
    1ca4:	7f 2d       	mov	r23, r15
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	c0 96       	adiw	r24, 0x30	; 48
    1caa:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <strcat>
			show_text(text,1);
    1cae:	61 e0       	ldi	r22, 0x01	; 1
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	c0 96       	adiw	r24, 0x30	; 48
    1cb6:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
			a[i][j] = double_num_input(12);
    1cba:	8c e0       	ldi	r24, 0x0C	; 12
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 83 09 	call	0x1306	; 0x1306 <_Z16double_num_inputi>
    1cc2:	f6 01       	movw	r30, r12
    1cc4:	61 93       	st	Z+, r22
    1cc6:	71 93       	st	Z+, r23
    1cc8:	81 93       	st	Z+, r24
    1cca:	91 93       	st	Z+, r25
    1ccc:	6f 01       	movw	r12, r30

	
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
    1cce:	ff ef       	ldi	r31, 0xFF	; 255
    1cd0:	6f 1a       	sub	r6, r31
    1cd2:	7f 0a       	sbc	r7, r31
    1cd4:	53 94       	inc	r5
    1cd6:	a6 14       	cp	r10, r6
    1cd8:	b7 04       	cpc	r11, r7
    1cda:	09 f0       	breq	.+2      	; 0x1cde <_Z5gaussv+0x1ac>
    1cdc:	ad cf       	rjmp	.-166    	; 0x1c38 <_Z5gaussv+0x106>
			strcat(text , ek);
			show_text(text,1);
			a[i][j] = double_num_input(12);
		}
		{
			char text[18] = "Input column d[";
    1cde:	80 e1       	ldi	r24, 0x10	; 16
    1ce0:	ee ed       	ldi	r30, 0xDE	; 222
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	de 01       	movw	r26, r28
    1ce6:	d0 96       	adiw	r26, 0x30	; 48
    1ce8:	01 90       	ld	r0, Z+
    1cea:	0d 92       	st	X+, r0
    1cec:	8a 95       	dec	r24
    1cee:	e1 f7       	brne	.-8      	; 0x1ce8 <_Z5gaussv+0x1b6>
    1cf0:	22 96       	adiw	r28, 0x02	; 2
    1cf2:	1f ae       	std	Y+63, r1	; 0x3f
    1cf4:	1e ae       	std	Y+62, r1	; 0x3e
    1cf6:	22 97       	sbiw	r28, 0x02	; 2
			char ek[2];
			ek[0] = (char)(i+'0');
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	30 82       	st	Z, r3
			ek[1] = 0;
    1cfc:	11 82       	std	Z+1, r1	; 0x01
			strcat(text , ek);
    1cfe:	6e 2d       	mov	r22, r14
    1d00:	7f 2d       	mov	r23, r15
    1d02:	ce 01       	movw	r24, r28
    1d04:	c0 96       	adiw	r24, 0x30	; 48
    1d06:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <strcat>
			ek[0] = ']';
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	40 82       	st	Z, r4
			strcat(text , ek);
    1d0e:	6e 2d       	mov	r22, r14
    1d10:	7f 2d       	mov	r23, r15
    1d12:	ce 01       	movw	r24, r28
    1d14:	c0 96       	adiw	r24, 0x30	; 48
    1d16:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <strcat>
			show_text(text,1);
    1d1a:	61 e0       	ldi	r22, 0x01	; 1
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	ce 01       	movw	r24, r28
    1d20:	c0 96       	adiw	r24, 0x30	; 48
    1d22:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
			a[i][m] = double_num_input(12);
    1d26:	8c e0       	ldi	r24, 0x0C	; 12
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 83 09 	call	0x1306	; 0x1306 <_Z16double_num_inputi>
    1d2e:	28 96       	adiw	r28, 0x08	; 8
    1d30:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d32:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d34:	28 97       	sbiw	r28, 0x08	; 8
    1d36:	60 83       	st	Z, r22
    1d38:	71 83       	std	Z+1, r23	; 0x01
    1d3a:	82 83       	std	Z+2, r24	; 0x02
    1d3c:	93 83       	std	Z+3, r25	; 0x03
	int n = int_number_input(24);
	

	
	
	for(int i=0;i<n;i++)
    1d3e:	ff ef       	ldi	r31, 0xFF	; 255
    1d40:	8f 1a       	sub	r8, r31
    1d42:	9f 0a       	sbc	r9, r31
    1d44:	33 94       	inc	r3
    1d46:	28 96       	adiw	r28, 0x08	; 8
    1d48:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d4a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d4c:	28 97       	sbiw	r28, 0x08	; 8
    1d4e:	20 5f       	subi	r18, 0xF0	; 240
    1d50:	3f 4f       	sbci	r19, 0xFF	; 255
    1d52:	28 96       	adiw	r28, 0x08	; 8
    1d54:	3f af       	std	Y+63, r19	; 0x3f
    1d56:	2e af       	std	Y+62, r18	; 0x3e
    1d58:	28 97       	sbiw	r28, 0x08	; 8
    1d5a:	2a 96       	adiw	r28, 0x0a	; 10
    1d5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d60:	2a 97       	sbiw	r28, 0x0a	; 10
    1d62:	40 96       	adiw	r24, 0x10	; 16
    1d64:	2a 96       	adiw	r28, 0x0a	; 10
    1d66:	9f af       	std	Y+63, r25	; 0x3f
    1d68:	8e af       	std	Y+62, r24	; 0x3e
    1d6a:	2a 97       	sbiw	r28, 0x0a	; 10
    1d6c:	2c 96       	adiw	r28, 0x0c	; 12
    1d6e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d70:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d72:	2c 97       	sbiw	r28, 0x0c	; 12
    1d74:	e8 15       	cp	r30, r8
    1d76:	f9 05       	cpc	r31, r9
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <_Z5gaussv+0x24a>
    1d7a:	50 cf       	rjmp	.-352    	; 0x1c1c <_Z5gaussv+0xea>
			strcat(text , ek);
			show_text(text,1);
			a[i][m] = double_num_input(12);
		}
	}
	int koto = gauss_algo(n,m);
    1d7c:	b5 01       	movw	r22, r10
    1d7e:	2c 96       	adiw	r28, 0x0c	; 12
    1d80:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d82:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d84:	2c 97       	sbiw	r28, 0x0c	; 12
    1d86:	0e 94 05 0b 	call	0x160a	; 0x160a <_Z10gauss_algoii>
	if(koto==0)
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	81 f4       	brne	.+32     	; 0x1dae <_Z5gaussv+0x27c>
	{
		strcpy(text1,"No Solution!");
    1d8e:	8d e0       	ldi	r24, 0x0D	; 13
    1d90:	ed e3       	ldi	r30, 0x3D	; 61
    1d92:	f1 e0       	ldi	r31, 0x01	; 1
    1d94:	de 01       	movw	r26, r28
    1d96:	11 96       	adiw	r26, 0x01	; 1
    1d98:	01 90       	ld	r0, Z+
    1d9a:	0d 92       	st	X+, r0
    1d9c:	8a 95       	dec	r24
    1d9e:	e1 f7       	brne	.-8      	; 0x1d98 <_Z5gaussv+0x266>
		show_text(text1,1);
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	ce 01       	movw	r24, r28
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
    1dac:	bb c0       	rjmp	.+374    	; 0x1f24 <_Z5gaussv+0x3f2>
		return;
	}
	else if(koto==1)
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	91 05       	cpc	r25, r1
    1db2:	69 f4       	brne	.+26     	; 0x1dce <_Z5gaussv+0x29c>
    1db4:	ff ef       	ldi	r31, 0xFF	; 255
    1db6:	2e e9       	ldi	r18, 0x9E	; 158
    1db8:	34 e2       	ldi	r19, 0x24	; 36
    1dba:	f1 50       	subi	r31, 0x01	; 1
    1dbc:	20 40       	sbci	r18, 0x00	; 0
    1dbe:	30 40       	sbci	r19, 0x00	; 0
    1dc0:	e1 f7       	brne	.-8      	; 0x1dba <_Z5gaussv+0x288>
    1dc2:	00 c0       	rjmp	.+0      	; 0x1dc4 <_Z5gaussv+0x292>
    1dc4:	00 00       	nop
		strcpy(text1,"Infinite Solution!");
		show_text(text1,1);
		_delay_ms(1500);
	}
	char s[20];
	for(int i=0;i<m;i++)
    1dc6:	1a 14       	cp	r1, r10
    1dc8:	1b 04       	cpc	r1, r11
    1dca:	e4 f0       	brlt	.+56     	; 0x1e04 <_Z5gaussv+0x2d2>
    1dcc:	ab c0       	rjmp	.+342    	; 0x1f24 <_Z5gaussv+0x3f2>
	}
	else if(koto==1)
	{
		_delay_ms(1500);
	}
	else if(koto==2)
    1dce:	02 97       	sbiw	r24, 0x02	; 2
    1dd0:	d1 f7       	brne	.-12     	; 0x1dc6 <_Z5gaussv+0x294>
	{
		strcpy(text1,"Infinite Solution!");
    1dd2:	83 e1       	ldi	r24, 0x13	; 19
    1dd4:	ea e4       	ldi	r30, 0x4A	; 74
    1dd6:	f1 e0       	ldi	r31, 0x01	; 1
    1dd8:	de 01       	movw	r26, r28
    1dda:	11 96       	adiw	r26, 0x01	; 1
    1ddc:	01 90       	ld	r0, Z+
    1dde:	0d 92       	st	X+, r0
    1de0:	8a 95       	dec	r24
    1de2:	e1 f7       	brne	.-8      	; 0x1ddc <_Z5gaussv+0x2aa>
		show_text(text1,1);
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	ce 01       	movw	r24, r28
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
    1df0:	8f ef       	ldi	r24, 0xFF	; 255
    1df2:	9e e9       	ldi	r25, 0x9E	; 158
    1df4:	e4 e2       	ldi	r30, 0x24	; 36
    1df6:	81 50       	subi	r24, 0x01	; 1
    1df8:	90 40       	sbci	r25, 0x00	; 0
    1dfa:	e0 40       	sbci	r30, 0x00	; 0
    1dfc:	e1 f7       	brne	.-8      	; 0x1df6 <_Z5gaussv+0x2c4>
    1dfe:	00 c0       	rjmp	.+0      	; 0x1e00 <_Z5gaussv+0x2ce>
    1e00:	00 00       	nop
    1e02:	e1 cf       	rjmp	.-62     	; 0x1dc6 <_Z5gaussv+0x294>
    1e04:	0f 2e       	mov	r0, r31
    1e06:	f2 ea       	ldi	r31, 0xA2	; 162
    1e08:	8f 2e       	mov	r8, r31
    1e0a:	f2 e0       	ldi	r31, 0x02	; 2
    1e0c:	9f 2e       	mov	r9, r31
    1e0e:	f0 2d       	mov	r31, r0
		_delay_ms(1500);
	}
	char s[20];
	for(int i=0;i<m;i++)
    1e10:	0f 2e       	mov	r0, r31
    1e12:	f0 e3       	ldi	r31, 0x30	; 48
    1e14:	5f 2e       	mov	r5, r31
    1e16:	f0 2d       	mov	r31, r0
    1e18:	c1 2c       	mov	r12, r1
    1e1a:	d1 2c       	mov	r13, r1
	{
		char text[14] = "Ans x[";
    1e1c:	0f 2e       	mov	r0, r31
    1e1e:	f7 e0       	ldi	r31, 0x07	; 7
    1e20:	3f 2e       	mov	r3, r31
    1e22:	f0 2d       	mov	r31, r0
    1e24:	3e 01       	movw	r6, r28
    1e26:	f7 e3       	ldi	r31, 0x37	; 55
    1e28:	6f 0e       	add	r6, r31
    1e2a:	71 1c       	adc	r7, r1
		char ek[2];
		ek[0] = (char)(i+'0');
		ek[1] = 0;
		strcat(text , ek);
		ek[0] = ']';
    1e2c:	0f 2e       	mov	r0, r31
    1e2e:	fd e5       	ldi	r31, 0x5D	; 93
    1e30:	4f 2e       	mov	r4, r31
    1e32:	f0 2d       	mov	r31, r0
		strcat(text , ek);
		show_text(text,1);
    1e34:	ee 24       	eor	r14, r14
    1e36:	e3 94       	inc	r14
    1e38:	f1 2c       	mov	r15, r1
		_delay_ms(1500);
	}
	char s[20];
	for(int i=0;i<m;i++)
	{
		char text[14] = "Ans x[";
    1e3a:	87 e0       	ldi	r24, 0x07	; 7
    1e3c:	e0 ef       	ldi	r30, 0xF0	; 240
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	de 01       	movw	r26, r28
    1e42:	d0 96       	adiw	r26, 0x30	; 48
    1e44:	01 90       	ld	r0, Z+
    1e46:	0d 92       	st	X+, r0
    1e48:	8a 95       	dec	r24
    1e4a:	e1 f7       	brne	.-8      	; 0x1e44 <_Z5gaussv+0x312>
    1e4c:	f3 01       	movw	r30, r6
    1e4e:	23 2d       	mov	r18, r3
    1e50:	11 92       	st	Z+, r1
    1e52:	2a 95       	dec	r18
    1e54:	e9 f7       	brne	.-6      	; 0x1e50 <_Z5gaussv+0x31e>
		char ek[2];
		ek[0] = (char)(i+'0');
    1e56:	23 96       	adiw	r28, 0x03	; 3
    1e58:	5f ae       	std	Y+63, r5	; 0x3f
    1e5a:	23 97       	sbiw	r28, 0x03	; 3
		ek[1] = 0;
    1e5c:	24 96       	adiw	r28, 0x04	; 4
    1e5e:	1f ae       	std	Y+63, r1	; 0x3f
    1e60:	24 97       	sbiw	r28, 0x04	; 4
		strcat(text , ek);
    1e62:	be 01       	movw	r22, r28
    1e64:	6e 5b       	subi	r22, 0xBE	; 190
    1e66:	7f 4f       	sbci	r23, 0xFF	; 255
    1e68:	ce 01       	movw	r24, r28
    1e6a:	c0 96       	adiw	r24, 0x30	; 48
    1e6c:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <strcat>
		ek[0] = ']';
    1e70:	23 96       	adiw	r28, 0x03	; 3
    1e72:	4f ae       	std	Y+63, r4	; 0x3f
    1e74:	23 97       	sbiw	r28, 0x03	; 3
		strcat(text , ek);
    1e76:	be 01       	movw	r22, r28
    1e78:	6e 5b       	subi	r22, 0xBE	; 190
    1e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	c0 96       	adiw	r24, 0x30	; 48
    1e80:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <strcat>
		show_text(text,1);
    1e84:	b7 01       	movw	r22, r14
    1e86:	ce 01       	movw	r24, r28
    1e88:	c0 96       	adiw	r24, 0x30	; 48
    1e8a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
		
		dtostrf(ans[i],1,2,s);
    1e8e:	f4 01       	movw	r30, r8
    1e90:	61 91       	ld	r22, Z+
    1e92:	71 91       	ld	r23, Z+
    1e94:	81 91       	ld	r24, Z+
    1e96:	91 91       	ld	r25, Z+
    1e98:	4f 01       	movw	r8, r30
    1e9a:	8e 01       	movw	r16, r28
    1e9c:	04 5e       	subi	r16, 0xE4	; 228
    1e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea0:	22 e0       	ldi	r18, 0x02	; 2
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 a0 20 	call	0x4140	; 0x4140 <dtostrf>
		show_text(s,12);
    1ea8:	6c e0       	ldi	r22, 0x0C	; 12
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	c8 01       	movw	r24, r16
    1eae:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
		//wait for equal
		bool done = 0;
		while (1)
		{
			for(int c=4;c<8;c++)
    1eb2:	44 e0       	ldi	r20, 0x04	; 4
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
			{
				PORTB=1<<c;
    1eb6:	c7 01       	movw	r24, r14
    1eb8:	04 2e       	mov	r0, r20
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <_Z5gaussv+0x38e>
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	0a 94       	dec	r0
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <_Z5gaussv+0x38a>
    1ec4:	88 bb       	out	0x18, r24	; 24
    1ec6:	fa 01       	movw	r30, r20
    1ec8:	e4 54       	subi	r30, 0x44	; 68
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
				for(int r=0;r<4;r++)
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
				{
					if(PINB&(1<<r))
    1ed0:	86 b3       	in	r24, 0x16	; 22
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	02 2e       	mov	r0, r18
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <_Z5gaussv+0x3aa>
    1ed8:	95 95       	asr	r25
    1eda:	87 95       	ror	r24
    1edc:	0a 94       	dec	r0
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <_Z5gaussv+0x3a6>
    1ee0:	80 ff       	sbrs	r24, 0
    1ee2:	03 c0       	rjmp	.+6      	; 0x1eea <_Z5gaussv+0x3b8>
					{
						if(mat[r][c-4]=='=')
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8d 33       	cpi	r24, 0x3D	; 61
    1ee8:	61 f0       	breq	.+24     	; 0x1f02 <_Z5gaussv+0x3d0>
		while (1)
		{
			for(int c=4;c<8;c++)
			{
				PORTB=1<<c;
				for(int r=0;r<4;r++)
    1eea:	2f 5f       	subi	r18, 0xFF	; 255
    1eec:	3f 4f       	sbci	r19, 0xFF	; 255
    1eee:	34 96       	adiw	r30, 0x04	; 4
    1ef0:	24 30       	cpi	r18, 0x04	; 4
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <_Z5gaussv+0x39e>
		show_text(s,12);
		//wait for equal
		bool done = 0;
		while (1)
		{
			for(int c=4;c<8;c++)
    1ef6:	4f 5f       	subi	r20, 0xFF	; 255
    1ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    1efa:	48 30       	cpi	r20, 0x08	; 8
    1efc:	51 05       	cpc	r21, r1
    1efe:	d9 f6       	brne	.-74     	; 0x1eb6 <_Z5gaussv+0x384>
    1f00:	d8 cf       	rjmp	.-80     	; 0x1eb2 <_Z5gaussv+0x380>
    1f02:	ff ef       	ldi	r31, 0xFF	; 255
    1f04:	24 e3       	ldi	r18, 0x34	; 52
    1f06:	3c e0       	ldi	r19, 0x0C	; 12
    1f08:	f1 50       	subi	r31, 0x01	; 1
    1f0a:	20 40       	sbci	r18, 0x00	; 0
    1f0c:	30 40       	sbci	r19, 0x00	; 0
    1f0e:	e1 f7       	brne	.-8      	; 0x1f08 <_Z5gaussv+0x3d6>
    1f10:	00 c0       	rjmp	.+0      	; 0x1f12 <_Z5gaussv+0x3e0>
    1f12:	00 00       	nop
		strcpy(text1,"Infinite Solution!");
		show_text(text1,1);
		_delay_ms(1500);
	}
	char s[20];
	for(int i=0;i<m;i++)
    1f14:	8f ef       	ldi	r24, 0xFF	; 255
    1f16:	c8 1a       	sub	r12, r24
    1f18:	d8 0a       	sbc	r13, r24
    1f1a:	53 94       	inc	r5
    1f1c:	ac 14       	cp	r10, r12
    1f1e:	bd 04       	cpc	r11, r13
    1f20:	09 f0       	breq	.+2      	; 0x1f24 <_Z5gaussv+0x3f2>
    1f22:	8b cf       	rjmp	.-234    	; 0x1e3a <_Z5gaussv+0x308>
			}
		}
		_delay_ms(500);
	}
	
    1f24:	c5 5b       	subi	r28, 0xB5	; 181
    1f26:	df 4f       	sbci	r29, 0xFF	; 255
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	1f 91       	pop	r17
    1f38:	0f 91       	pop	r16
    1f3a:	ff 90       	pop	r15
    1f3c:	ef 90       	pop	r14
    1f3e:	df 90       	pop	r13
    1f40:	cf 90       	pop	r12
    1f42:	bf 90       	pop	r11
    1f44:	af 90       	pop	r10
    1f46:	9f 90       	pop	r9
    1f48:	8f 90       	pop	r8
    1f4a:	7f 90       	pop	r7
    1f4c:	6f 90       	pop	r6
    1f4e:	5f 90       	pop	r5
    1f50:	4f 90       	pop	r4
    1f52:	3f 90       	pop	r3
    1f54:	2f 90       	pop	r2
    1f56:	08 95       	ret

00001f58 <_Z19simpson_integrationPcdd>:



double simpson_integration(char str[] , double a, double b){
    1f58:	2f 92       	push	r2
    1f5a:	3f 92       	push	r3
    1f5c:	4f 92       	push	r4
    1f5e:	5f 92       	push	r5
    1f60:	6f 92       	push	r6
    1f62:	7f 92       	push	r7
    1f64:	8f 92       	push	r8
    1f66:	9f 92       	push	r9
    1f68:	af 92       	push	r10
    1f6a:	bf 92       	push	r11
    1f6c:	cf 92       	push	r12
    1f6e:	df 92       	push	r13
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	28 97       	sbiw	r28, 0x08	; 8
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	7c 01       	movw	r14, r24
    1f8e:	2a 01       	movw	r4, r20
    1f90:	3b 01       	movw	r6, r22
    1f92:	48 01       	movw	r8, r16
    1f94:	59 01       	movw	r10, r18
	const int N = 50;
	double h = (b - a) / N;
    1f96:	9a 01       	movw	r18, r20
    1f98:	ab 01       	movw	r20, r22
    1f9a:	c5 01       	movw	r24, r10
    1f9c:	b4 01       	movw	r22, r8
    1f9e:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	48 e4       	ldi	r20, 0x48	; 72
    1fa8:	52 e4       	ldi	r21, 0x42	; 66
    1faa:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
    1fae:	69 83       	std	Y+1, r22	; 0x01
    1fb0:	7a 83       	std	Y+2, r23	; 0x02
    1fb2:	8b 83       	std	Y+3, r24	; 0x03
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
	double s = evaluate_function(str, a) + evaluate_function(str , b);
    1fb6:	b3 01       	movw	r22, r6
    1fb8:	a2 01       	movw	r20, r4
    1fba:	c7 01       	movw	r24, r14
    1fbc:	0e 94 47 08 	call	0x108e	; 0x108e <_Z17evaluate_functionPcd>
    1fc0:	6d 83       	std	Y+5, r22	; 0x05
    1fc2:	7e 83       	std	Y+6, r23	; 0x06
    1fc4:	8f 83       	std	Y+7, r24	; 0x07
    1fc6:	98 87       	std	Y+8, r25	; 0x08
    1fc8:	b5 01       	movw	r22, r10
    1fca:	a4 01       	movw	r20, r8
    1fcc:	c7 01       	movw	r24, r14
    1fce:	0e 94 47 08 	call	0x108e	; 0x108e <_Z17evaluate_functionPcd>
    1fd2:	9b 01       	movw	r18, r22
    1fd4:	ac 01       	movw	r20, r24
    1fd6:	6d 81       	ldd	r22, Y+5	; 0x05
    1fd8:	7e 81       	ldd	r23, Y+6	; 0x06
    1fda:	8f 81       	ldd	r24, Y+7	; 0x07
    1fdc:	98 85       	ldd	r25, Y+8	; 0x08
    1fde:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    1fe2:	4b 01       	movw	r8, r22
    1fe4:	5c 01       	movw	r10, r24
	for (int i = 1; i <= N - 1; ++i) {
		double x = a + h * i;
		s += evaluate_function(str , x) * ((i & 1) ? 4 : 2);
    1fe6:	29 81       	ldd	r18, Y+1	; 0x01
    1fe8:	3a 81       	ldd	r19, Y+2	; 0x02
    1fea:	4b 81       	ldd	r20, Y+3	; 0x03
    1fec:	5c 81       	ldd	r21, Y+4	; 0x04
    1fee:	c3 01       	movw	r24, r6
    1ff0:	b2 01       	movw	r22, r4
    1ff2:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    1ff6:	ab 01       	movw	r20, r22
    1ff8:	bc 01       	movw	r22, r24
    1ffa:	c7 01       	movw	r24, r14
    1ffc:	0e 94 47 08 	call	0x108e	; 0x108e <_Z17evaluate_functionPcd>
    2000:	9b 01       	movw	r18, r22
    2002:	ac 01       	movw	r20, r24

double simpson_integration(char str[] , double a, double b){
	const int N = 50;
	double h = (b - a) / N;
	double s = evaluate_function(str, a) + evaluate_function(str , b);
	for (int i = 1; i <= N - 1; ++i) {
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
		double x = a + h * i;
		s += evaluate_function(str , x) * ((i & 1) ? 4 : 2);
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	a0 e0       	ldi	r26, 0x00	; 0
    200c:	f0 e8       	ldi	r31, 0x80	; 128
    200e:	e0 e4       	ldi	r30, 0x40	; 64
    2010:	d1 2c       	mov	r13, r1
    2012:	00 e8       	ldi	r16, 0x80	; 128
    2014:	c1 2c       	mov	r12, r1
    2016:	31 2c       	mov	r3, r1
    2018:	21 2c       	mov	r2, r1
    201a:	10 e4       	ldi	r17, 0x40	; 64
    201c:	9e 83       	std	Y+6, r25	; 0x06
    201e:	8d 83       	std	Y+5, r24	; 0x05
    2020:	25 c0       	rjmp	.+74     	; 0x206c <_Z19simpson_integrationPcdd+0x114>
    2022:	2d 81       	ldd	r18, Y+5	; 0x05
    2024:	3e 81       	ldd	r19, Y+6	; 0x06
    2026:	b9 01       	movw	r22, r18
    2028:	33 0f       	add	r19, r19
    202a:	88 0b       	sbc	r24, r24
    202c:	99 0b       	sbc	r25, r25
    202e:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__floatsisf>
    2032:	29 81       	ldd	r18, Y+1	; 0x01
    2034:	3a 81       	ldd	r19, Y+2	; 0x02
    2036:	4b 81       	ldd	r20, Y+3	; 0x03
    2038:	5c 81       	ldd	r21, Y+4	; 0x04
    203a:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    203e:	a3 01       	movw	r20, r6
    2040:	92 01       	movw	r18, r4
    2042:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    2046:	ab 01       	movw	r20, r22
    2048:	bc 01       	movw	r22, r24
    204a:	c7 01       	movw	r24, r14
    204c:	0e 94 47 08 	call	0x108e	; 0x108e <_Z17evaluate_functionPcd>
    2050:	9b 01       	movw	r18, r22
    2052:	ac 01       	movw	r20, r24
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	80 fd       	sbrc	r24, 0
    2058:	05 c0       	rjmp	.+10     	; 0x2064 <_Z19simpson_integrationPcdd+0x10c>
    205a:	bc 2d       	mov	r27, r12
    205c:	a3 2d       	mov	r26, r3
    205e:	f2 2d       	mov	r31, r2
    2060:	e1 2f       	mov	r30, r17
    2062:	04 c0       	rjmp	.+8      	; 0x206c <_Z19simpson_integrationPcdd+0x114>
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	ad 2d       	mov	r26, r13
    2068:	f0 2f       	mov	r31, r16
    206a:	e0 e4       	ldi	r30, 0x40	; 64
    206c:	6b 2f       	mov	r22, r27
    206e:	7a 2f       	mov	r23, r26
    2070:	8f 2f       	mov	r24, r31
    2072:	9e 2f       	mov	r25, r30
    2074:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    2078:	9b 01       	movw	r18, r22
    207a:	ac 01       	movw	r20, r24
    207c:	c5 01       	movw	r24, r10
    207e:	b4 01       	movw	r22, r8
    2080:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    2084:	4b 01       	movw	r8, r22
    2086:	5c 01       	movw	r10, r24

double simpson_integration(char str[] , double a, double b){
	const int N = 50;
	double h = (b - a) / N;
	double s = evaluate_function(str, a) + evaluate_function(str , b);
	for (int i = 1; i <= N - 1; ++i) {
    2088:	2d 81       	ldd	r18, Y+5	; 0x05
    208a:	3e 81       	ldd	r19, Y+6	; 0x06
    208c:	2f 5f       	subi	r18, 0xFF	; 255
    208e:	3f 4f       	sbci	r19, 0xFF	; 255
    2090:	3e 83       	std	Y+6, r19	; 0x06
    2092:	2d 83       	std	Y+5, r18	; 0x05
    2094:	22 33       	cpi	r18, 0x32	; 50
    2096:	31 05       	cpc	r19, r1
    2098:	21 f6       	brne	.-120    	; 0x2022 <_Z19simpson_integrationPcdd+0xca>
		double x = a + h * i;
		s += evaluate_function(str , x) * ((i & 1) ? 4 : 2);
	}
	s *= h / 3;
	return s;
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e4       	ldi	r20, 0x40	; 64
    20a0:	50 e4       	ldi	r21, 0x40	; 64
    20a2:	69 81       	ldd	r22, Y+1	; 0x01
    20a4:	7a 81       	ldd	r23, Y+2	; 0x02
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
    20ae:	a5 01       	movw	r20, r10
    20b0:	94 01       	movw	r18, r8
    20b2:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
}
    20b6:	28 96       	adiw	r28, 0x08	; 8
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	ff 90       	pop	r15
    20cc:	ef 90       	pop	r14
    20ce:	df 90       	pop	r13
    20d0:	cf 90       	pop	r12
    20d2:	bf 90       	pop	r11
    20d4:	af 90       	pop	r10
    20d6:	9f 90       	pop	r9
    20d8:	8f 90       	pop	r8
    20da:	7f 90       	pop	r7
    20dc:	6f 90       	pop	r6
    20de:	5f 90       	pop	r5
    20e0:	4f 90       	pop	r4
    20e2:	3f 90       	pop	r3
    20e4:	2f 90       	pop	r2
    20e6:	08 95       	ret

000020e8 <_Z7simpsonv>:
void simpson()
{
    20e8:	2f 92       	push	r2
    20ea:	3f 92       	push	r3
    20ec:	4f 92       	push	r4
    20ee:	5f 92       	push	r5
    20f0:	6f 92       	push	r6
    20f2:	7f 92       	push	r7
    20f4:	8f 92       	push	r8
    20f6:	9f 92       	push	r9
    20f8:	af 92       	push	r10
    20fa:	bf 92       	push	r11
    20fc:	cf 92       	push	r12
    20fe:	df 92       	push	r13
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	ca 55       	subi	r28, 0x5A	; 90
    2112:	d1 09       	sbc	r29, r1
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    211e:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
	char text1[] = "Input Function of x:";
    2122:	85 e1       	ldi	r24, 0x15	; 21
    2124:	e3 e9       	ldi	r30, 0x93	; 147
    2126:	f1 e0       	ldi	r31, 0x01	; 1
    2128:	de 01       	movw	r26, r28
    212a:	11 96       	adiw	r26, 0x01	; 1
    212c:	01 90       	ld	r0, Z+
    212e:	0d 92       	st	X+, r0
    2130:	8a 95       	dec	r24
    2132:	e1 f7       	brne	.-8      	; 0x212c <_Z7simpsonv+0x44>
	char text2[] = "Input lower limit:";
    2134:	83 e1       	ldi	r24, 0x13	; 19
    2136:	e8 ea       	ldi	r30, 0xA8	; 168
    2138:	f1 e0       	ldi	r31, 0x01	; 1
    213a:	de 01       	movw	r26, r28
    213c:	56 96       	adiw	r26, 0x16	; 22
    213e:	01 90       	ld	r0, Z+
    2140:	0d 92       	st	X+, r0
    2142:	8a 95       	dec	r24
    2144:	e1 f7       	brne	.-8      	; 0x213e <_Z7simpsonv+0x56>
	char text3[] = "Input upper limit:";
    2146:	83 e1       	ldi	r24, 0x13	; 19
    2148:	eb eb       	ldi	r30, 0xBB	; 187
    214a:	f1 e0       	ldi	r31, 0x01	; 1
    214c:	de 01       	movw	r26, r28
    214e:	99 96       	adiw	r26, 0x29	; 41
    2150:	01 90       	ld	r0, Z+
    2152:	0d 92       	st	X+, r0
    2154:	8a 95       	dec	r24
    2156:	e1 f7       	brne	.-8      	; 0x2150 <_Z7simpsonv+0x68>
	DisplayText(1,1,text1);
    2158:	ae 01       	movw	r20, r28
    215a:	4f 5f       	subi	r20, 0xFF	; 255
    215c:	5f 4f       	sbci	r21, 0xFF	; 255
    215e:	61 e0       	ldi	r22, 0x01	; 1
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
	//input function
	char s[21];
	int len=0;
	int where=12;
    2166:	0f 2e       	mov	r0, r31
    2168:	fc e0       	ldi	r31, 0x0C	; 12
    216a:	8f 2e       	mov	r8, r31
    216c:	91 2c       	mov	r9, r1
    216e:	f0 2d       	mov	r31, r0
	char text2[] = "Input lower limit:";
	char text3[] = "Input upper limit:";
	DisplayText(1,1,text1);
	//input function
	char s[21];
	int len=0;
    2170:	e1 2c       	mov	r14, r1
    2172:	f1 2c       	mov	r15, r1
					else
					{
						append(s , len , mat2[r][c-4]);
						len = strlen(s);
					}
					DisplayText(1,where,s);
    2174:	2e 01       	movw	r4, r28
    2176:	2c e3       	ldi	r18, 0x3C	; 60
    2178:	42 0e       	add	r4, r18
    217a:	51 1c       	adc	r5, r1
    217c:	68 96       	adiw	r28, 0x18	; 24
    217e:	4f ae       	std	Y+63, r4	; 0x3f
    2180:	68 97       	sbiw	r28, 0x18	; 24
    2182:	69 96       	adiw	r28, 0x19	; 25
    2184:	5f ae       	std	Y+63, r5	; 0x3f
    2186:	69 97       	sbiw	r28, 0x19	; 25
    2188:	0f 2e       	mov	r0, r31
    218a:	f0 e6       	ldi	r31, 0x60	; 96
    218c:	2f 2e       	mov	r2, r31
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	3f 2e       	mov	r3, r31
    2192:	f0 2d       	mov	r31, r0
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    2194:	68 94       	set
    2196:	66 24       	eor	r6, r6
    2198:	62 f8       	bld	r6, 2
    219a:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	06 2c       	mov	r0, r6
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <_Z7simpsonv+0xc0>
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	0a 94       	dec	r0
    21aa:	e2 f7       	brpl	.-8      	; 0x21a4 <_Z7simpsonv+0xbc>
    21ac:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    21ae:	8b bb       	out	0x1b, r24	; 27
    21b0:	c3 01       	movw	r24, r6
    21b2:	84 54       	subi	r24, 0x44	; 68
    21b4:	9f 4f       	sbci	r25, 0xFF	; 255
    21b6:	6c 01       	movw	r12, r24
    21b8:	51 01       	movw	r10, r2
			for(int r=0;r<4;r++)
    21ba:	00 e0       	ldi	r16, 0x00	; 0
    21bc:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    21be:	86 b3       	in	r24, 0x16	; 22
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	00 2e       	mov	r0, r16
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <_Z7simpsonv+0xe2>
    21c6:	95 95       	asr	r25
    21c8:	87 95       	ror	r24
    21ca:	0a 94       	dec	r0
    21cc:	e2 f7       	brpl	.-8      	; 0x21c6 <_Z7simpsonv+0xde>
    21ce:	80 ff       	sbrs	r24, 0
    21d0:	43 c0       	rjmp	.+134    	; 0x2258 <_Z7simpsonv+0x170>
				{
					if(mat[r][c-4]=='C')
    21d2:	f6 01       	movw	r30, r12
    21d4:	80 81       	ld	r24, Z
    21d6:	83 34       	cpi	r24, 0x43	; 67
    21d8:	99 f4       	brne	.+38     	; 0x2200 <_Z7simpsonv+0x118>
					{
						len=0;
						s[0]=0;
    21da:	1c ae       	std	Y+60, r1	; 0x3c
						where=1;
						LCD_Clear();
    21dc:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    21e0:	68 96       	adiw	r28, 0x18	; 24
    21e2:	4f ad       	ldd	r20, Y+63	; 0x3f
    21e4:	68 97       	sbiw	r28, 0x18	; 24
    21e6:	69 96       	adiw	r28, 0x19	; 25
    21e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    21ea:	69 97       	sbiw	r28, 0x19	; 25
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    21f4:	88 24       	eor	r8, r8
    21f6:	83 94       	inc	r8
    21f8:	91 2c       	mov	r9, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    21fa:	e1 2c       	mov	r14, r1
    21fc:	f1 2c       	mov	r15, r1
    21fe:	22 c0       	rjmp	.+68     	; 0x2244 <_Z7simpsonv+0x15c>
						where=1;
						LCD_Clear();
					}
					else
					{
						if(mat[r][c-4]=='=')
    2200:	8d 33       	cpi	r24, 0x3D	; 61
    2202:	09 f4       	brne	.+2      	; 0x2206 <_Z7simpsonv+0x11e>
    2204:	df c0       	rjmp	.+446    	; 0x23c4 <_Z7simpsonv+0x2dc>
						{
							done = 1;
							break;
						}
						s[len]=mat[r][c-4];
    2206:	f2 01       	movw	r30, r4
    2208:	ee 0d       	add	r30, r14
    220a:	ff 1d       	adc	r31, r15
    220c:	80 83       	st	Z, r24
						len+=1;
    220e:	ff ef       	ldi	r31, 0xFF	; 255
    2210:	ef 1a       	sub	r14, r31
    2212:	ff 0a       	sbc	r15, r31
						s[len]=0;
    2214:	f2 01       	movw	r30, r4
    2216:	ee 0d       	add	r30, r14
    2218:	ff 1d       	adc	r31, r15
    221a:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    221c:	68 96       	adiw	r28, 0x18	; 24
    221e:	4f ad       	ldd	r20, Y+63	; 0x3f
    2220:	68 97       	sbiw	r28, 0x18	; 24
    2222:	69 96       	adiw	r28, 0x19	; 25
    2224:	5f ad       	ldd	r21, Y+63	; 0x3f
    2226:	69 97       	sbiw	r28, 0x19	; 25
    2228:	68 2d       	mov	r22, r8
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
					if(len==20)
    2230:	24 e1       	ldi	r18, 0x14	; 20
    2232:	e2 16       	cp	r14, r18
    2234:	f1 04       	cpc	r15, r1
    2236:	31 f4       	brne	.+12     	; 0x2244 <_Z7simpsonv+0x15c>
					{
						where+=12;
    2238:	8c e0       	ldi	r24, 0x0C	; 12
    223a:	88 0e       	add	r8, r24
    223c:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    223e:	1c ae       	std	Y+60, r1	; 0x3c
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    2240:	e1 2c       	mov	r14, r1
    2242:	f1 2c       	mov	r15, r1
    2244:	9f ef       	ldi	r25, 0xFF	; 255
    2246:	e4 e3       	ldi	r30, 0x34	; 52
    2248:	fc e0       	ldi	r31, 0x0C	; 12
    224a:	91 50       	subi	r25, 0x01	; 1
    224c:	e0 40       	sbci	r30, 0x00	; 0
    224e:	f0 40       	sbci	r31, 0x00	; 0
    2250:	e1 f7       	brne	.-8      	; 0x224a <_Z7simpsonv+0x162>
    2252:	00 c0       	rjmp	.+0      	; 0x2254 <_Z7simpsonv+0x16c>
    2254:	00 00       	nop
    2256:	66 c0       	rjmp	.+204    	; 0x2324 <_Z7simpsonv+0x23c>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    2258:	89 b3       	in	r24, 0x19	; 25
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	00 2e       	mov	r0, r16
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <_Z7simpsonv+0x17c>
    2260:	95 95       	asr	r25
    2262:	87 95       	ror	r24
    2264:	0a 94       	dec	r0
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <_Z7simpsonv+0x178>
    2268:	80 ff       	sbrs	r24, 0
    226a:	5c c0       	rjmp	.+184    	; 0x2324 <_Z7simpsonv+0x23c>
				{
					if(mat2[r][c-4][0]=='<')
    226c:	f5 01       	movw	r30, r10
    226e:	80 81       	ld	r24, Z
    2270:	8c 33       	cpi	r24, 0x3C	; 60
    2272:	49 f5       	brne	.+82     	; 0x22c6 <_Z7simpsonv+0x1de>
					{
						if(len==0){
    2274:	e1 14       	cp	r14, r1
    2276:	f1 04       	cpc	r15, r1
    2278:	51 f4       	brne	.+20     	; 0x228e <_Z7simpsonv+0x1a6>
    227a:	ff ef       	ldi	r31, 0xFF	; 255
    227c:	24 e3       	ldi	r18, 0x34	; 52
    227e:	8c e0       	ldi	r24, 0x0C	; 12
    2280:	f1 50       	subi	r31, 0x01	; 1
    2282:	20 40       	sbci	r18, 0x00	; 0
    2284:	80 40       	sbci	r24, 0x00	; 0
    2286:	e1 f7       	brne	.-8      	; 0x2280 <_Z7simpsonv+0x198>
    2288:	00 c0       	rjmp	.+0      	; 0x228a <_Z7simpsonv+0x1a2>
    228a:	00 00       	nop
    228c:	4b c0       	rjmp	.+150    	; 0x2324 <_Z7simpsonv+0x23c>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    228e:	91 e0       	ldi	r25, 0x01	; 1
    2290:	e9 1a       	sub	r14, r25
    2292:	f1 08       	sbc	r15, r1
    2294:	f2 01       	movw	r30, r4
    2296:	ee 0d       	add	r30, r14
    2298:	ff 1d       	adc	r31, r15
    229a:	6b 96       	adiw	r28, 0x1b	; 27
    229c:	ff af       	std	Y+63, r31	; 0x3f
    229e:	ee af       	std	Y+62, r30	; 0x3e
    22a0:	6b 97       	sbiw	r28, 0x1b	; 27
    22a2:	20 e2       	ldi	r18, 0x20	; 32
    22a4:	20 83       	st	Z, r18
						DisplayText(1,where,s);
    22a6:	68 96       	adiw	r28, 0x18	; 24
    22a8:	4f ad       	ldd	r20, Y+63	; 0x3f
    22aa:	68 97       	sbiw	r28, 0x18	; 24
    22ac:	69 96       	adiw	r28, 0x19	; 25
    22ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    22b0:	69 97       	sbiw	r28, 0x19	; 25
    22b2:	68 2d       	mov	r22, r8
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
						len--;
						s[len]=0;
    22ba:	6b 96       	adiw	r28, 0x1b	; 27
    22bc:	ee ad       	ldd	r30, Y+62	; 0x3e
    22be:	ff ad       	ldd	r31, Y+63	; 0x3f
    22c0:	6b 97       	sbiw	r28, 0x1b	; 27
    22c2:	10 82       	st	Z, r1
    22c4:	12 c0       	rjmp	.+36     	; 0x22ea <_Z7simpsonv+0x202>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    22c6:	a5 01       	movw	r20, r10
    22c8:	b7 01       	movw	r22, r14
    22ca:	68 96       	adiw	r28, 0x18	; 24
    22cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    22ce:	68 97       	sbiw	r28, 0x18	; 24
    22d0:	69 96       	adiw	r28, 0x19	; 25
    22d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    22d4:	69 97       	sbiw	r28, 0x19	; 25
    22d6:	0e 94 33 08 	call	0x1066	; 0x1066 <_Z6appendPciS_>
						len = strlen(s);
    22da:	f2 01       	movw	r30, r4
    22dc:	01 90       	ld	r0, Z+
    22de:	00 20       	and	r0, r0
    22e0:	e9 f7       	brne	.-6      	; 0x22dc <_Z7simpsonv+0x1f4>
    22e2:	31 97       	sbiw	r30, 0x01	; 1
    22e4:	7f 01       	movw	r14, r30
    22e6:	e4 18       	sub	r14, r4
    22e8:	f5 08       	sbc	r15, r5
					}
					DisplayText(1,where,s);
    22ea:	68 96       	adiw	r28, 0x18	; 24
    22ec:	4f ad       	ldd	r20, Y+63	; 0x3f
    22ee:	68 97       	sbiw	r28, 0x18	; 24
    22f0:	69 96       	adiw	r28, 0x19	; 25
    22f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    22f4:	69 97       	sbiw	r28, 0x19	; 25
    22f6:	68 2d       	mov	r22, r8
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
					if(len==20)
    22fe:	f4 e1       	ldi	r31, 0x14	; 20
    2300:	ef 16       	cp	r14, r31
    2302:	f1 04       	cpc	r15, r1
    2304:	31 f4       	brne	.+12     	; 0x2312 <_Z7simpsonv+0x22a>
					{
						where+=12;
    2306:	2c e0       	ldi	r18, 0x0C	; 12
    2308:	82 0e       	add	r8, r18
    230a:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    230c:	1c ae       	std	Y+60, r1	; 0x3c
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    230e:	e1 2c       	mov	r14, r1
    2310:	f1 2c       	mov	r15, r1
    2312:	8f ef       	ldi	r24, 0xFF	; 255
    2314:	94 e3       	ldi	r25, 0x34	; 52
    2316:	ec e0       	ldi	r30, 0x0C	; 12
    2318:	81 50       	subi	r24, 0x01	; 1
    231a:	90 40       	sbci	r25, 0x00	; 0
    231c:	e0 40       	sbci	r30, 0x00	; 0
    231e:	e1 f7       	brne	.-8      	; 0x2318 <_Z7simpsonv+0x230>
    2320:	00 c0       	rjmp	.+0      	; 0x2322 <_Z7simpsonv+0x23a>
    2322:	00 00       	nop
		bool done = 0;
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    2324:	0f 5f       	subi	r16, 0xFF	; 255
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	f8 e1       	ldi	r31, 0x18	; 24
    232a:	af 0e       	add	r10, r31
    232c:	b1 1c       	adc	r11, r1
    232e:	24 e0       	ldi	r18, 0x04	; 4
    2330:	c2 0e       	add	r12, r18
    2332:	d1 1c       	adc	r13, r1
    2334:	04 30       	cpi	r16, 0x04	; 4
    2336:	11 05       	cpc	r17, r1
    2338:	09 f0       	breq	.+2      	; 0x233c <_Z7simpsonv+0x254>
    233a:	41 cf       	rjmp	.-382    	; 0x21be <_Z7simpsonv+0xd6>
    233c:	8f e1       	ldi	r24, 0x1F	; 31
    233e:	9e e4       	ldi	r25, 0x4E	; 78
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <_Z7simpsonv+0x258>
    2344:	00 c0       	rjmp	.+0      	; 0x2346 <_Z7simpsonv+0x25e>
    2346:	00 00       	nop
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    2348:	9f ef       	ldi	r25, 0xFF	; 255
    234a:	69 1a       	sub	r6, r25
    234c:	79 0a       	sbc	r7, r25
    234e:	e6 e0       	ldi	r30, 0x06	; 6
    2350:	2e 0e       	add	r2, r30
    2352:	31 1c       	adc	r3, r1
    2354:	f8 e0       	ldi	r31, 0x08	; 8
    2356:	6f 16       	cp	r6, r31
    2358:	71 04       	cpc	r7, r1
    235a:	09 f0       	breq	.+2      	; 0x235e <_Z7simpsonv+0x276>
    235c:	1f cf       	rjmp	.-450    	; 0x219c <_Z7simpsonv+0xb4>
    235e:	14 cf       	rjmp	.-472    	; 0x2188 <_Z7simpsonv+0xa0>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    2360:	44 e0       	ldi	r20, 0x04	; 4
    2362:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB=1<<c;
    2364:	cb 01       	movw	r24, r22
    2366:	04 2e       	mov	r0, r20
    2368:	02 c0       	rjmp	.+4      	; 0x236e <_Z7simpsonv+0x286>
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	0a 94       	dec	r0
    2370:	e2 f7       	brpl	.-8      	; 0x236a <_Z7simpsonv+0x282>
    2372:	88 bb       	out	0x18, r24	; 24
    2374:	fa 01       	movw	r30, r20
    2376:	e4 54       	subi	r30, 0x44	; 68
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
			{
				if(PINB&(1<<r))
    237e:	86 b3       	in	r24, 0x16	; 22
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	02 2e       	mov	r0, r18
    2384:	02 c0       	rjmp	.+4      	; 0x238a <_Z7simpsonv+0x2a2>
    2386:	95 95       	asr	r25
    2388:	87 95       	ror	r24
    238a:	0a 94       	dec	r0
    238c:	e2 f7       	brpl	.-8      	; 0x2386 <_Z7simpsonv+0x29e>
    238e:	80 ff       	sbrs	r24, 0
    2390:	03 c0       	rjmp	.+6      	; 0x2398 <_Z7simpsonv+0x2b0>
				{
					if(mat[r][c-4]=='=')
    2392:	80 81       	ld	r24, Z
    2394:	8d 33       	cpi	r24, 0x3D	; 61
    2396:	61 f0       	breq	.+24     	; 0x23b0 <_Z7simpsonv+0x2c8>
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    2398:	2f 5f       	subi	r18, 0xFF	; 255
    239a:	3f 4f       	sbci	r19, 0xFF	; 255
    239c:	34 96       	adiw	r30, 0x04	; 4
    239e:	24 30       	cpi	r18, 0x04	; 4
    23a0:	31 05       	cpc	r19, r1
    23a2:	69 f7       	brne	.-38     	; 0x237e <_Z7simpsonv+0x296>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    23a4:	4f 5f       	subi	r20, 0xFF	; 255
    23a6:	5f 4f       	sbci	r21, 0xFF	; 255
    23a8:	48 30       	cpi	r20, 0x08	; 8
    23aa:	51 05       	cpc	r21, r1
    23ac:	d9 f6       	brne	.-74     	; 0x2364 <_Z7simpsonv+0x27c>
    23ae:	d8 cf       	rjmp	.-80     	; 0x2360 <_Z7simpsonv+0x278>
    23b0:	2f ef       	ldi	r18, 0xFF	; 255
    23b2:	84 e3       	ldi	r24, 0x34	; 52
    23b4:	9c e0       	ldi	r25, 0x0C	; 12
    23b6:	21 50       	subi	r18, 0x01	; 1
    23b8:	80 40       	sbci	r24, 0x00	; 0
    23ba:	90 40       	sbci	r25, 0x00	; 0
    23bc:	e1 f7       	brne	.-8      	; 0x23b6 <_Z7simpsonv+0x2ce>
    23be:	00 c0       	rjmp	.+0      	; 0x23c0 <_Z7simpsonv+0x2d8>
    23c0:	00 00       	nop
		{
			break;
		}
	}
	_delay_ms(500);
    23c2:	4e c0       	rjmp	.+156    	; 0x2460 <_Z7simpsonv+0x378>
    23c4:	ef e1       	ldi	r30, 0x1F	; 31
    23c6:	fe e4       	ldi	r31, 0x4E	; 78
    23c8:	31 97       	sbiw	r30, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <_Z7simpsonv+0x2e0>
    23cc:	00 c0       	rjmp	.+0      	; 0x23ce <_Z7simpsonv+0x2e6>
    23ce:	00 00       	nop
			break;
		}
		if(done)
		break;
	}
	LCD_Clear();
    23d0:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
	double l , r;
	DisplayText(1,1,text2);
    23d4:	ae 01       	movw	r20, r28
    23d6:	4a 5e       	subi	r20, 0xEA	; 234
    23d8:	5f 4f       	sbci	r21, 0xFF	; 255
    23da:	61 e0       	ldi	r22, 0x01	; 1
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
	l = double_num_input(12);
    23e2:	8c e0       	ldi	r24, 0x0C	; 12
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0e 94 83 09 	call	0x1306	; 0x1306 <_Z16double_num_inputi>
    23ea:	6b 01       	movw	r12, r22
    23ec:	7c 01       	movw	r14, r24
	LCD_Clear();
    23ee:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
	DisplayText(1,1,text3);
    23f2:	ae 01       	movw	r20, r28
    23f4:	47 5d       	subi	r20, 0xD7	; 215
    23f6:	5f 4f       	sbci	r21, 0xFF	; 255
    23f8:	61 e0       	ldi	r22, 0x01	; 1
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
	r = double_num_input(12);
    2400:	8c e0       	ldi	r24, 0x0C	; 12
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 94 83 09 	call	0x1306	; 0x1306 <_Z16double_num_inputi>
    2408:	8b 01       	movw	r16, r22
    240a:	9c 01       	movw	r18, r24
	double ans = simpson_integration(s,l,r);
    240c:	b7 01       	movw	r22, r14
    240e:	a6 01       	movw	r20, r12
    2410:	ce 01       	movw	r24, r28
    2412:	cc 96       	adiw	r24, 0x3c	; 60
    2414:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_Z19simpson_integrationPcdd>
    2418:	6b 01       	movw	r12, r22
    241a:	7c 01       	movw	r14, r24
	
	//printing ans
	char text[] = "Ans =";
    241c:	86 e0       	ldi	r24, 0x06	; 6
    241e:	ee ec       	ldi	r30, 0xCE	; 206
    2420:	f1 e0       	ldi	r31, 0x01	; 1
    2422:	de 01       	movw	r26, r28
    2424:	af 5a       	subi	r26, 0xAF	; 175
    2426:	bf 4f       	sbci	r27, 0xFF	; 255
    2428:	01 90       	ld	r0, Z+
    242a:	0d 92       	st	X+, r0
    242c:	8a 95       	dec	r24
    242e:	e1 f7       	brne	.-8      	; 0x2428 <_Z7simpsonv+0x340>
	show_text(text,1);
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	70 e0       	ldi	r23, 0x00	; 0
    2434:	ce 01       	movw	r24, r28
    2436:	8f 5a       	subi	r24, 0xAF	; 175
    2438:	9f 4f       	sbci	r25, 0xFF	; 255
    243a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
	dtostrf(ans,1,2,s);
    243e:	8e 01       	movw	r16, r28
    2440:	04 5c       	subi	r16, 0xC4	; 196
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	22 e0       	ldi	r18, 0x02	; 2
    2446:	41 e0       	ldi	r20, 0x01	; 1
    2448:	c7 01       	movw	r24, r14
    244a:	b6 01       	movw	r22, r12
    244c:	0e 94 a0 20 	call	0x4140	; 0x4140 <dtostrf>
	show_text(s,12);
    2450:	6c e0       	ldi	r22, 0x0C	; 12
    2452:	70 e0       	ldi	r23, 0x00	; 0
    2454:	c8 01       	movw	r24, r16
    2456:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    245a:	61 e0       	ldi	r22, 0x01	; 1
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	80 cf       	rjmp	.-256    	; 0x2360 <_Z7simpsonv+0x278>
		{
			break;
		}
	}
	_delay_ms(500);
    2460:	c6 5a       	subi	r28, 0xA6	; 166
    2462:	df 4f       	sbci	r29, 0xFF	; 255
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	1f 91       	pop	r17
    2474:	0f 91       	pop	r16
    2476:	ff 90       	pop	r15
    2478:	ef 90       	pop	r14
    247a:	df 90       	pop	r13
    247c:	cf 90       	pop	r12
    247e:	bf 90       	pop	r11
    2480:	af 90       	pop	r10
    2482:	9f 90       	pop	r9
    2484:	8f 90       	pop	r8
    2486:	7f 90       	pop	r7
    2488:	6f 90       	pop	r6
    248a:	5f 90       	pop	r5
    248c:	4f 90       	pop	r4
    248e:	3f 90       	pop	r3
    2490:	2f 90       	pop	r2
    2492:	08 95       	ret

00002494 <_Z12show_and_getPcS_>:
void show_and_get(char *F, char * s)
{
    2494:	2f 92       	push	r2
    2496:	3f 92       	push	r3
    2498:	4f 92       	push	r4
    249a:	5f 92       	push	r5
    249c:	6f 92       	push	r6
    249e:	7f 92       	push	r7
    24a0:	8f 92       	push	r8
    24a2:	9f 92       	push	r9
    24a4:	af 92       	push	r10
    24a6:	bf 92       	push	r11
    24a8:	cf 92       	push	r12
    24aa:	df 92       	push	r13
    24ac:	ef 92       	push	r14
    24ae:	ff 92       	push	r15
    24b0:	0f 93       	push	r16
    24b2:	1f 93       	push	r17
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	ec 01       	movw	r28, r24
    24ba:	6b 01       	movw	r12, r22
	LCD_Clear();
    24bc:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
    24c0:	2f ef       	ldi	r18, 0xFF	; 255
    24c2:	81 ee       	ldi	r24, 0xE1	; 225
    24c4:	94 e0       	ldi	r25, 0x04	; 4
    24c6:	21 50       	subi	r18, 0x01	; 1
    24c8:	80 40       	sbci	r24, 0x00	; 0
    24ca:	90 40       	sbci	r25, 0x00	; 0
    24cc:	e1 f7       	brne	.-8      	; 0x24c6 <_Z12show_and_getPcS_+0x32>
    24ce:	00 c0       	rjmp	.+0      	; 0x24d0 <_Z12show_and_getPcS_+0x3c>
    24d0:	00 00       	nop
	_delay_ms(200);
	DisplayText(1,1,F);
    24d2:	ae 01       	movw	r20, r28
    24d4:	61 e0       	ldi	r22, 0x01	; 1
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
    24dc:	ef ef       	ldi	r30, 0xFF	; 255
    24de:	f1 ee       	ldi	r31, 0xE1	; 225
    24e0:	24 e0       	ldi	r18, 0x04	; 4
    24e2:	e1 50       	subi	r30, 0x01	; 1
    24e4:	f0 40       	sbci	r31, 0x00	; 0
    24e6:	20 40       	sbci	r18, 0x00	; 0
    24e8:	e1 f7       	brne	.-8      	; 0x24e2 <_Z12show_and_getPcS_+0x4e>
    24ea:	00 c0       	rjmp	.+0      	; 0x24ec <_Z12show_and_getPcS_+0x58>
    24ec:	00 00       	nop
	_delay_ms(200);
	
	int len=0;
	int where=12;
    24ee:	0f 2e       	mov	r0, r31
    24f0:	fc e0       	ldi	r31, 0x0C	; 12
    24f2:	4f 2e       	mov	r4, r31
    24f4:	51 2c       	mov	r5, r1
    24f6:	f0 2d       	mov	r31, r0
	LCD_Clear();
	_delay_ms(200);
	DisplayText(1,1,F);
	_delay_ms(200);
	
	int len=0;
    24f8:	00 e0       	ldi	r16, 0x00	; 0
    24fa:	10 e0       	ldi	r17, 0x00	; 0
	int where=12;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    24fc:	22 24       	eor	r2, r2
    24fe:	23 94       	inc	r2
    2500:	31 2c       	mov	r3, r1
    2502:	0f 2e       	mov	r0, r31
    2504:	f0 e6       	ldi	r31, 0x60	; 96
    2506:	6f 2e       	mov	r6, r31
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	7f 2e       	mov	r7, r31
    250c:	f0 2d       	mov	r31, r0
	
	int len=0;
	int where=12;
	while (1)
	{
		for(int c=4;c<8;c++)
    250e:	68 94       	set
    2510:	aa 24       	eor	r10, r10
    2512:	a2 f8       	bld	r10, 2
    2514:	b1 2c       	mov	r11, r1
		{
			PORTB=1<<c;
    2516:	c1 01       	movw	r24, r2
    2518:	0a 2c       	mov	r0, r10
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <_Z12show_and_getPcS_+0x8c>
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	0a 94       	dec	r0
    2522:	e2 f7       	brpl	.-8      	; 0x251c <_Z12show_and_getPcS_+0x88>
    2524:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    2526:	8b bb       	out	0x1b, r24	; 27
    2528:	c5 01       	movw	r24, r10
    252a:	84 54       	subi	r24, 0x44	; 68
    252c:	9f 4f       	sbci	r25, 0xFF	; 255
    252e:	4c 01       	movw	r8, r24
    2530:	73 01       	movw	r14, r6
			for(int r=0;r<4;r++)
    2532:	c0 e0       	ldi	r28, 0x00	; 0
    2534:	d0 e0       	ldi	r29, 0x00	; 0
			{
				if(PINB&(1<<r))
    2536:	86 b3       	in	r24, 0x16	; 22
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0c 2e       	mov	r0, r28
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <_Z12show_and_getPcS_+0xae>
    253e:	95 95       	asr	r25
    2540:	87 95       	ror	r24
    2542:	0a 94       	dec	r0
    2544:	e2 f7       	brpl	.-8      	; 0x253e <_Z12show_and_getPcS_+0xaa>
    2546:	80 ff       	sbrs	r24, 0
    2548:	39 c0       	rjmp	.+114    	; 0x25bc <_Z12show_and_getPcS_+0x128>
				{
					if(mat[r][c-4]=='C')
    254a:	f4 01       	movw	r30, r8
    254c:	80 81       	ld	r24, Z
    254e:	83 34       	cpi	r24, 0x43	; 67
    2550:	79 f4       	brne	.+30     	; 0x2570 <_Z12show_and_getPcS_+0xdc>
					{
						len=0;
						s[0]=0;
    2552:	f6 01       	movw	r30, r12
    2554:	10 82       	st	Z, r1
						where=1;
						LCD_Clear();
    2556:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    255a:	a6 01       	movw	r20, r12
    255c:	61 e0       	ldi	r22, 0x01	; 1
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    2564:	44 24       	eor	r4, r4
    2566:	43 94       	inc	r4
    2568:	51 2c       	mov	r5, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    256a:	00 e0       	ldi	r16, 0x00	; 0
    256c:	10 e0       	ldi	r17, 0x00	; 0
    256e:	1c c0       	rjmp	.+56     	; 0x25a8 <_Z12show_and_getPcS_+0x114>
						where=1;
						LCD_Clear();
					}
					else
					{
						if(mat[r][c-4]=='=')
    2570:	8d 33       	cpi	r24, 0x3D	; 61
    2572:	09 f4       	brne	.+2      	; 0x2576 <_Z12show_and_getPcS_+0xe2>
    2574:	92 c0       	rjmp	.+292    	; 0x269a <_Z12show_and_getPcS_+0x206>
						{
							return;
						}
						s[len]=mat[r][c-4];
    2576:	f6 01       	movw	r30, r12
    2578:	e0 0f       	add	r30, r16
    257a:	f1 1f       	adc	r31, r17
    257c:	80 83       	st	Z, r24
						len+=1;
    257e:	0f 5f       	subi	r16, 0xFF	; 255
    2580:	1f 4f       	sbci	r17, 0xFF	; 255
						s[len]=0;
    2582:	f6 01       	movw	r30, r12
    2584:	e0 0f       	add	r30, r16
    2586:	f1 1f       	adc	r31, r17
    2588:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    258a:	a6 01       	movw	r20, r12
    258c:	64 2d       	mov	r22, r4
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
					if(len==20)
    2594:	04 31       	cpi	r16, 0x14	; 20
    2596:	11 05       	cpc	r17, r1
    2598:	39 f4       	brne	.+14     	; 0x25a8 <_Z12show_and_getPcS_+0x114>
					{
						where+=12;
    259a:	fc e0       	ldi	r31, 0x0C	; 12
    259c:	4f 0e       	add	r4, r31
    259e:	51 1c       	adc	r5, r1
						len=0;
						s[0]=0;
    25a0:	f6 01       	movw	r30, r12
    25a2:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    25a4:	00 e0       	ldi	r16, 0x00	; 0
    25a6:	10 e0       	ldi	r17, 0x00	; 0
    25a8:	ff ef       	ldi	r31, 0xFF	; 255
    25aa:	24 e3       	ldi	r18, 0x34	; 52
    25ac:	8c e0       	ldi	r24, 0x0C	; 12
    25ae:	f1 50       	subi	r31, 0x01	; 1
    25b0:	20 40       	sbci	r18, 0x00	; 0
    25b2:	80 40       	sbci	r24, 0x00	; 0
    25b4:	e1 f7       	brne	.-8      	; 0x25ae <_Z12show_and_getPcS_+0x11a>
    25b6:	00 c0       	rjmp	.+0      	; 0x25b8 <_Z12show_and_getPcS_+0x124>
    25b8:	00 00       	nop
    25ba:	52 c0       	rjmp	.+164    	; 0x2660 <_Z12show_and_getPcS_+0x1cc>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    25bc:	89 b3       	in	r24, 0x19	; 25
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	0c 2e       	mov	r0, r28
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <_Z12show_and_getPcS_+0x134>
    25c4:	95 95       	asr	r25
    25c6:	87 95       	ror	r24
    25c8:	0a 94       	dec	r0
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <_Z12show_and_getPcS_+0x130>
    25cc:	80 ff       	sbrs	r24, 0
    25ce:	48 c0       	rjmp	.+144    	; 0x2660 <_Z12show_and_getPcS_+0x1cc>
				{
					if(mat2[r][c-4][0]=='<')
    25d0:	f7 01       	movw	r30, r14
    25d2:	80 81       	ld	r24, Z
    25d4:	8c 33       	cpi	r24, 0x3C	; 60
    25d6:	f9 f4       	brne	.+62     	; 0x2616 <_Z12show_and_getPcS_+0x182>
					{
						if(len==0){
    25d8:	01 15       	cp	r16, r1
    25da:	11 05       	cpc	r17, r1
    25dc:	51 f4       	brne	.+20     	; 0x25f2 <_Z12show_and_getPcS_+0x15e>
    25de:	ff ef       	ldi	r31, 0xFF	; 255
    25e0:	24 e3       	ldi	r18, 0x34	; 52
    25e2:	8c e0       	ldi	r24, 0x0C	; 12
    25e4:	f1 50       	subi	r31, 0x01	; 1
    25e6:	20 40       	sbci	r18, 0x00	; 0
    25e8:	80 40       	sbci	r24, 0x00	; 0
    25ea:	e1 f7       	brne	.-8      	; 0x25e4 <_Z12show_and_getPcS_+0x150>
    25ec:	00 c0       	rjmp	.+0      	; 0x25ee <_Z12show_and_getPcS_+0x15a>
    25ee:	00 00       	nop
    25f0:	37 c0       	rjmp	.+110    	; 0x2660 <_Z12show_and_getPcS_+0x1cc>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    25f2:	f6 01       	movw	r30, r12
    25f4:	e0 0f       	add	r30, r16
    25f6:	f1 1f       	adc	r31, r17
    25f8:	31 97       	sbiw	r30, 0x01	; 1
    25fa:	90 e2       	ldi	r25, 0x20	; 32
    25fc:	90 83       	st	Z, r25
						DisplayText(1,where,s);
    25fe:	a6 01       	movw	r20, r12
    2600:	64 2d       	mov	r22, r4
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
						len--;
    2608:	01 50       	subi	r16, 0x01	; 1
    260a:	11 09       	sbc	r17, r1
						s[len]=0;
    260c:	f6 01       	movw	r30, r12
    260e:	e0 0f       	add	r30, r16
    2610:	f1 1f       	adc	r31, r17
    2612:	10 82       	st	Z, r1
    2614:	0d c0       	rjmp	.+26     	; 0x2630 <_Z12show_and_getPcS_+0x19c>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    2616:	a7 01       	movw	r20, r14
    2618:	b8 01       	movw	r22, r16
    261a:	c6 01       	movw	r24, r12
    261c:	0e 94 33 08 	call	0x1066	; 0x1066 <_Z6appendPciS_>
						len = strlen(s);
    2620:	f6 01       	movw	r30, r12
    2622:	01 90       	ld	r0, Z+
    2624:	00 20       	and	r0, r0
    2626:	e9 f7       	brne	.-6      	; 0x2622 <_Z12show_and_getPcS_+0x18e>
    2628:	31 97       	sbiw	r30, 0x01	; 1
    262a:	8f 01       	movw	r16, r30
    262c:	0c 19       	sub	r16, r12
    262e:	1d 09       	sbc	r17, r13
					}
					DisplayText(1,where,s);
    2630:	a6 01       	movw	r20, r12
    2632:	64 2d       	mov	r22, r4
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
					if(len==20)
    263a:	04 31       	cpi	r16, 0x14	; 20
    263c:	11 05       	cpc	r17, r1
    263e:	39 f4       	brne	.+14     	; 0x264e <_Z12show_and_getPcS_+0x1ba>
					{
						where+=12;
    2640:	ec e0       	ldi	r30, 0x0C	; 12
    2642:	4e 0e       	add	r4, r30
    2644:	51 1c       	adc	r5, r1
						len=0;
						s[0]=0;
    2646:	f6 01       	movw	r30, r12
    2648:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    264a:	00 e0       	ldi	r16, 0x00	; 0
    264c:	10 e0       	ldi	r17, 0x00	; 0
    264e:	ff ef       	ldi	r31, 0xFF	; 255
    2650:	24 e3       	ldi	r18, 0x34	; 52
    2652:	8c e0       	ldi	r24, 0x0C	; 12
    2654:	f1 50       	subi	r31, 0x01	; 1
    2656:	20 40       	sbci	r18, 0x00	; 0
    2658:	80 40       	sbci	r24, 0x00	; 0
    265a:	e1 f7       	brne	.-8      	; 0x2654 <_Z12show_and_getPcS_+0x1c0>
    265c:	00 c0       	rjmp	.+0      	; 0x265e <_Z12show_and_getPcS_+0x1ca>
    265e:	00 00       	nop
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    2660:	21 96       	adiw	r28, 0x01	; 1
    2662:	98 e1       	ldi	r25, 0x18	; 24
    2664:	e9 0e       	add	r14, r25
    2666:	f1 1c       	adc	r15, r1
    2668:	e4 e0       	ldi	r30, 0x04	; 4
    266a:	8e 0e       	add	r8, r30
    266c:	91 1c       	adc	r9, r1
    266e:	c4 30       	cpi	r28, 0x04	; 4
    2670:	d1 05       	cpc	r29, r1
    2672:	09 f0       	breq	.+2      	; 0x2676 <_Z12show_and_getPcS_+0x1e2>
    2674:	60 cf       	rjmp	.-320    	; 0x2536 <_Z12show_and_getPcS_+0xa2>
    2676:	8f e1       	ldi	r24, 0x1F	; 31
    2678:	9e e4       	ldi	r25, 0x4E	; 78
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <_Z12show_and_getPcS_+0x1e6>
    267e:	00 c0       	rjmp	.+0      	; 0x2680 <_Z12show_and_getPcS_+0x1ec>
    2680:	00 00       	nop
	
	int len=0;
	int where=12;
	while (1)
	{
		for(int c=4;c<8;c++)
    2682:	9f ef       	ldi	r25, 0xFF	; 255
    2684:	a9 1a       	sub	r10, r25
    2686:	b9 0a       	sbc	r11, r25
    2688:	e6 e0       	ldi	r30, 0x06	; 6
    268a:	6e 0e       	add	r6, r30
    268c:	71 1c       	adc	r7, r1
    268e:	f8 e0       	ldi	r31, 0x08	; 8
    2690:	af 16       	cp	r10, r31
    2692:	b1 04       	cpc	r11, r1
    2694:	09 f0       	breq	.+2      	; 0x2698 <_Z12show_and_getPcS_+0x204>
    2696:	3f cf       	rjmp	.-386    	; 0x2516 <_Z12show_and_getPcS_+0x82>
    2698:	34 cf       	rjmp	.-408    	; 0x2502 <_Z12show_and_getPcS_+0x6e>
			}
			
			_delay_ms(10);
		}
	}
}
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	ff 90       	pop	r15
    26a4:	ef 90       	pop	r14
    26a6:	df 90       	pop	r13
    26a8:	cf 90       	pop	r12
    26aa:	bf 90       	pop	r11
    26ac:	af 90       	pop	r10
    26ae:	9f 90       	pop	r9
    26b0:	8f 90       	pop	r8
    26b2:	7f 90       	pop	r7
    26b4:	6f 90       	pop	r6
    26b6:	5f 90       	pop	r5
    26b8:	4f 90       	pop	r4
    26ba:	3f 90       	pop	r3
    26bc:	2f 90       	pop	r2
    26be:	08 95       	ret

000026c0 <_Z10graph_plotv>:


void graph_plot()
{
    26c0:	2f 92       	push	r2
    26c2:	3f 92       	push	r3
    26c4:	4f 92       	push	r4
    26c6:	5f 92       	push	r5
    26c8:	6f 92       	push	r6
    26ca:	7f 92       	push	r7
    26cc:	8f 92       	push	r8
    26ce:	9f 92       	push	r9
    26d0:	af 92       	push	r10
    26d2:	bf 92       	push	r11
    26d4:	cf 92       	push	r12
    26d6:	df 92       	push	r13
    26d8:	ef 92       	push	r14
    26da:	ff 92       	push	r15
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	c2 57       	subi	r28, 0x72	; 114
    26ea:	d1 09       	sbc	r29, r1
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
	char F1[]="F(x) = ";
    26f6:	88 e0       	ldi	r24, 0x08	; 8
    26f8:	e4 ed       	ldi	r30, 0xD4	; 212
    26fa:	f1 e0       	ldi	r31, 0x01	; 1
    26fc:	de 01       	movw	r26, r28
    26fe:	11 96       	adiw	r26, 0x01	; 1
    2700:	01 90       	ld	r0, Z+
    2702:	0d 92       	st	X+, r0
    2704:	8a 95       	dec	r24
    2706:	e1 f7       	brne	.-8      	; 0x2700 <_Z10graph_plotv+0x40>
	char s1[10];
	show_and_get(F1,s1);
    2708:	be 01       	movw	r22, r28
    270a:	67 5f       	subi	r22, 0xF7	; 247
    270c:	7f 4f       	sbci	r23, 0xFF	; 255
    270e:	ce 01       	movw	r24, r28
    2710:	01 96       	adiw	r24, 0x01	; 1
    2712:	0e 94 4a 12 	call	0x2494	; 0x2494 <_Z12show_and_getPcS_>
	
	strcpy(F1,"minX = ");
    2716:	88 e0       	ldi	r24, 0x08	; 8
    2718:	ec ed       	ldi	r30, 0xDC	; 220
    271a:	f1 e0       	ldi	r31, 0x01	; 1
    271c:	de 01       	movw	r26, r28
    271e:	11 96       	adiw	r26, 0x01	; 1
    2720:	01 90       	ld	r0, Z+
    2722:	0d 92       	st	X+, r0
    2724:	8a 95       	dec	r24
    2726:	e1 f7       	brne	.-8      	; 0x2720 <_Z10graph_plotv+0x60>
	char s2[10];
	show_and_get(F1,s2);
    2728:	be 01       	movw	r22, r28
    272a:	6d 5e       	subi	r22, 0xED	; 237
    272c:	7f 4f       	sbci	r23, 0xFF	; 255
    272e:	ce 01       	movw	r24, r28
    2730:	01 96       	adiw	r24, 0x01	; 1
    2732:	0e 94 4a 12 	call	0x2494	; 0x2494 <_Z12show_and_getPcS_>
	double l=ob.eval_exp(s2);
    2736:	be 01       	movw	r22, r28
    2738:	6d 5e       	subi	r22, 0xED	; 237
    273a:	7f 4f       	sbci	r23, 0xFF	; 255
    273c:	8e ea       	ldi	r24, 0xAE	; 174
    273e:	92 e0       	ldi	r25, 0x02	; 2
    2740:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN6parser8eval_expEPc>
    2744:	62 96       	adiw	r28, 0x12	; 18
    2746:	6f af       	std	Y+63, r22	; 0x3f
    2748:	62 97       	sbiw	r28, 0x12	; 18
    274a:	63 96       	adiw	r28, 0x13	; 19
    274c:	7f af       	std	Y+63, r23	; 0x3f
    274e:	63 97       	sbiw	r28, 0x13	; 19
    2750:	64 96       	adiw	r28, 0x14	; 20
    2752:	8f af       	std	Y+63, r24	; 0x3f
    2754:	64 97       	sbiw	r28, 0x14	; 20
    2756:	19 2f       	mov	r17, r25
	
	strcpy(F1,"maxX = ");
    2758:	88 e0       	ldi	r24, 0x08	; 8
    275a:	e4 ee       	ldi	r30, 0xE4	; 228
    275c:	f1 e0       	ldi	r31, 0x01	; 1
    275e:	de 01       	movw	r26, r28
    2760:	11 96       	adiw	r26, 0x01	; 1
    2762:	01 90       	ld	r0, Z+
    2764:	0d 92       	st	X+, r0
    2766:	8a 95       	dec	r24
    2768:	e1 f7       	brne	.-8      	; 0x2762 <_Z10graph_plotv+0xa2>
	show_and_get(F1,s2);
    276a:	be 01       	movw	r22, r28
    276c:	6d 5e       	subi	r22, 0xED	; 237
    276e:	7f 4f       	sbci	r23, 0xFF	; 255
    2770:	ce 01       	movw	r24, r28
    2772:	01 96       	adiw	r24, 0x01	; 1
    2774:	0e 94 4a 12 	call	0x2494	; 0x2494 <_Z12show_and_getPcS_>
	double r=ob.eval_exp(s2);
    2778:	be 01       	movw	r22, r28
    277a:	6d 5e       	subi	r22, 0xED	; 237
    277c:	7f 4f       	sbci	r23, 0xFF	; 255
    277e:	8e ea       	ldi	r24, 0xAE	; 174
    2780:	92 e0       	ldi	r25, 0x02	; 2
    2782:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN6parser8eval_expEPc>
    2786:	66 2e       	mov	r6, r22
    2788:	77 2e       	mov	r7, r23
    278a:	88 2e       	mov	r8, r24
    278c:	99 2e       	mov	r9, r25
	
	const int T=12;

	if(l>r)
    278e:	26 2f       	mov	r18, r22
    2790:	37 2f       	mov	r19, r23
    2792:	48 2f       	mov	r20, r24
    2794:	59 2f       	mov	r21, r25
    2796:	62 96       	adiw	r28, 0x12	; 18
    2798:	6f ad       	ldd	r22, Y+63	; 0x3f
    279a:	62 97       	sbiw	r28, 0x12	; 18
    279c:	63 96       	adiw	r28, 0x13	; 19
    279e:	7f ad       	ldd	r23, Y+63	; 0x3f
    27a0:	63 97       	sbiw	r28, 0x13	; 19
    27a2:	64 96       	adiw	r28, 0x14	; 20
    27a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    27a6:	64 97       	sbiw	r28, 0x14	; 20
    27a8:	91 2f       	mov	r25, r17
    27aa:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__gesf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	c4 f4       	brge	.+48     	; 0x27e2 <_Z10graph_plotv+0x122>
    27b2:	62 96       	adiw	r28, 0x12	; 18
    27b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    27b6:	62 97       	sbiw	r28, 0x12	; 18
    27b8:	63 96       	adiw	r28, 0x13	; 19
    27ba:	2f ad       	ldd	r18, Y+63	; 0x3f
    27bc:	63 97       	sbiw	r28, 0x13	; 19
    27be:	64 96       	adiw	r28, 0x14	; 20
    27c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    27c2:	64 97       	sbiw	r28, 0x14	; 20
    27c4:	81 2f       	mov	r24, r17
	{
		double t=r;
		r=l;
		l=t;
    27c6:	62 96       	adiw	r28, 0x12	; 18
    27c8:	6f ae       	std	Y+63, r6	; 0x3f
    27ca:	62 97       	sbiw	r28, 0x12	; 18
    27cc:	63 96       	adiw	r28, 0x13	; 19
    27ce:	7f ae       	std	Y+63, r7	; 0x3f
    27d0:	63 97       	sbiw	r28, 0x13	; 19
    27d2:	64 96       	adiw	r28, 0x14	; 20
    27d4:	8f ae       	std	Y+63, r8	; 0x3f
    27d6:	64 97       	sbiw	r28, 0x14	; 20
    27d8:	19 2d       	mov	r17, r9
	const int T=12;

	if(l>r)
	{
		double t=r;
		r=l;
    27da:	63 2e       	mov	r6, r19
    27dc:	72 2e       	mov	r7, r18
    27de:	89 2e       	mov	r8, r25
    27e0:	98 2e       	mov	r9, r24
    27e2:	2e 01       	movw	r4, r28
    27e4:	2d e1       	ldi	r18, 0x1D	; 29
    27e6:	42 0e       	add	r4, r18
    27e8:	51 1c       	adc	r5, r1
    27ea:	12 01       	movw	r2, r4
    27ec:	80 e3       	ldi	r24, 0x30	; 48
    27ee:	28 0e       	add	r2, r24
    27f0:	31 1c       	adc	r3, r1
    27f2:	72 01       	movw	r14, r4
	}
	
	double save_y[T];
	
	int w=0;
	for(double x=l;w<T;w++)
    27f4:	62 96       	adiw	r28, 0x12	; 18
    27f6:	df ac       	ldd	r13, Y+63	; 0x3f
    27f8:	62 97       	sbiw	r28, 0x12	; 18
    27fa:	63 96       	adiw	r28, 0x13	; 19
    27fc:	cf ac       	ldd	r12, Y+63	; 0x3f
    27fe:	63 97       	sbiw	r28, 0x13	; 19
    2800:	64 96       	adiw	r28, 0x14	; 20
    2802:	bf ac       	ldd	r11, Y+63	; 0x3f
    2804:	64 97       	sbiw	r28, 0x14	; 20
    2806:	a1 2e       	mov	r10, r17
	{
		save_y[w]=evaluate_function(s1,x);
    2808:	66 96       	adiw	r28, 0x16	; 22
    280a:	5f ae       	std	Y+63, r5	; 0x3f
    280c:	4e ae       	std	Y+62, r4	; 0x3e
    280e:	66 97       	sbiw	r28, 0x16	; 22
    2810:	56 2c       	mov	r5, r6
    2812:	47 2c       	mov	r4, r7
    2814:	71 2e       	mov	r7, r17
    2816:	2e 96       	adiw	r28, 0x0e	; 14
    2818:	8f ae       	std	Y+63, r8	; 0x3f
    281a:	2e 97       	sbiw	r28, 0x0e	; 14
    281c:	69 2c       	mov	r6, r9
    281e:	1b 2d       	mov	r17, r11
    2820:	0a 2d       	mov	r16, r10
    2822:	4d 2d       	mov	r20, r13
    2824:	5c 2d       	mov	r21, r12
    2826:	61 2f       	mov	r22, r17
    2828:	70 2f       	mov	r23, r16
    282a:	ce 01       	movw	r24, r28
    282c:	09 96       	adiw	r24, 0x09	; 9
    282e:	0e 94 47 08 	call	0x108e	; 0x108e <_Z17evaluate_functionPcd>
    2832:	f7 01       	movw	r30, r14
    2834:	61 93       	st	Z+, r22
    2836:	71 93       	st	Z+, r23
    2838:	81 93       	st	Z+, r24
    283a:	91 93       	st	Z+, r25
    283c:	7f 01       	movw	r14, r30
		_delay_ms(500);
		dtostrf(save_y[w],1,2,t2);
		show_and_get(t2,t2);
		*/
		//_delay_ms(1000);
		x+=(r-l)/(T-1);
    283e:	62 96       	adiw	r28, 0x12	; 18
    2840:	2f ad       	ldd	r18, Y+63	; 0x3f
    2842:	62 97       	sbiw	r28, 0x12	; 18
    2844:	63 96       	adiw	r28, 0x13	; 19
    2846:	3f ad       	ldd	r19, Y+63	; 0x3f
    2848:	63 97       	sbiw	r28, 0x13	; 19
    284a:	64 96       	adiw	r28, 0x14	; 20
    284c:	4f ad       	ldd	r20, Y+63	; 0x3f
    284e:	64 97       	sbiw	r28, 0x14	; 20
    2850:	57 2d       	mov	r21, r7
    2852:	65 2d       	mov	r22, r5
    2854:	74 2d       	mov	r23, r4
    2856:	2e 96       	adiw	r28, 0x0e	; 14
    2858:	8f ad       	ldd	r24, Y+63	; 0x3f
    285a:	2e 97       	sbiw	r28, 0x0e	; 14
    285c:	96 2d       	mov	r25, r6
    285e:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    2862:	4b 01       	movw	r8, r22
    2864:	5c 01       	movw	r10, r24
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e3       	ldi	r20, 0x30	; 48
    286c:	51 e4       	ldi	r21, 0x41	; 65
    286e:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
    2872:	9b 01       	movw	r18, r22
    2874:	ac 01       	movw	r20, r24
    2876:	6d 2d       	mov	r22, r13
    2878:	7c 2d       	mov	r23, r12
    287a:	81 2f       	mov	r24, r17
    287c:	90 2f       	mov	r25, r16
    287e:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    2882:	d6 2e       	mov	r13, r22
    2884:	c7 2e       	mov	r12, r23
    2886:	18 2f       	mov	r17, r24
    2888:	09 2f       	mov	r16, r25
	}
	
	double save_y[T];
	
	int w=0;
	for(double x=l;w<T;w++)
    288a:	2e 14       	cp	r2, r14
    288c:	3f 04       	cpc	r3, r15
    288e:	49 f6       	brne	.-110    	; 0x2822 <_Z10graph_plotv+0x162>
    2890:	a8 96       	adiw	r28, 0x28	; 40
    2892:	8c ae       	std	Y+60, r8	; 0x3c
    2894:	9d ae       	std	Y+61, r9	; 0x3d
    2896:	ae ae       	std	Y+62, r10	; 0x3e
    2898:	bf ae       	std	Y+63, r11	; 0x3f
    289a:	a8 97       	sbiw	r28, 0x28	; 40
    289c:	66 96       	adiw	r28, 0x16	; 22
    289e:	4e ac       	ldd	r4, Y+62	; 0x3e
    28a0:	5f ac       	ldd	r5, Y+63	; 0x3f
    28a2:	66 97       	sbiw	r28, 0x16	; 22
    28a4:	17 2d       	mov	r17, r7
    28a6:	62 01       	movw	r12, r4
    28a8:	61 2c       	mov	r6, r1
    28aa:	71 2c       	mov	r7, r1
    28ac:	6d 96       	adiw	r28, 0x1d	; 29
    28ae:	1f ae       	std	Y+63, r1	; 0x3f
    28b0:	6d 97       	sbiw	r28, 0x1d	; 29
    28b2:	a1 96       	adiw	r28, 0x21	; 33
    28b4:	1f ae       	std	Y+63, r1	; 0x3f
    28b6:	a1 97       	sbiw	r28, 0x21	; 33
    28b8:	aa 96       	adiw	r28, 0x2a	; 42
    28ba:	1f ae       	std	Y+63, r1	; 0x3f
    28bc:	aa 97       	sbiw	r28, 0x2a	; 42
    28be:	ab 96       	adiw	r28, 0x2b	; 43
    28c0:	1f ae       	std	Y+63, r1	; 0x3f
    28c2:	ab 97       	sbiw	r28, 0x2b	; 43
    28c4:	61 96       	adiw	r28, 0x11	; 17
    28c6:	1c ae       	std	Y+60, r1	; 0x3c
    28c8:	1d ae       	std	Y+61, r1	; 0x3d
    28ca:	1e ae       	std	Y+62, r1	; 0x3e
    28cc:	1f ae       	std	Y+63, r1	; 0x3f
    28ce:	61 97       	sbiw	r28, 0x11	; 17
    28d0:	ac 96       	adiw	r28, 0x2c	; 44
    28d2:	1f ae       	std	Y+63, r1	; 0x3f
    28d4:	ac 97       	sbiw	r28, 0x2c	; 44
    28d6:	ad 96       	adiw	r28, 0x2d	; 45
    28d8:	1f ae       	std	Y+63, r1	; 0x3f
    28da:	ad 97       	sbiw	r28, 0x2d	; 45
    28dc:	ae 96       	adiw	r28, 0x2e	; 46
    28de:	1f ae       	std	Y+63, r1	; 0x3f
    28e0:	ae 97       	sbiw	r28, 0x2e	; 46
    28e2:	af 96       	adiw	r28, 0x2f	; 47
    28e4:	1f ae       	std	Y+63, r1	; 0x3f
    28e6:	af 97       	sbiw	r28, 0x2f	; 47
    28e8:	00 e0       	ldi	r16, 0x00	; 0
    28ea:	65 96       	adiw	r28, 0x15	; 21
    28ec:	1f ae       	std	Y+63, r1	; 0x3f
    28ee:	65 97       	sbiw	r28, 0x15	; 21
    28f0:	69 96       	adiw	r28, 0x19	; 25
    28f2:	1f ae       	std	Y+63, r1	; 0x3f
    28f4:	69 97       	sbiw	r28, 0x19	; 25
    28f6:	a9 96       	adiw	r28, 0x29	; 41
    28f8:	1f ae       	std	Y+63, r1	; 0x3f
    28fa:	a9 97       	sbiw	r28, 0x29	; 41
    28fc:	e1 96       	adiw	r28, 0x31	; 49
    28fe:	3f ae       	std	Y+63, r3	; 0x3f
    2900:	2e ae       	std	Y+62, r2	; 0x3e
    2902:	e1 97       	sbiw	r28, 0x31	; 49
    2904:	e3 96       	adiw	r28, 0x33	; 51
    2906:	5f ae       	std	Y+63, r5	; 0x3f
    2908:	4e ae       	std	Y+62, r4	; 0x3e
    290a:	e3 97       	sbiw	r28, 0x33	; 51
    290c:	51 2e       	mov	r5, r17
    290e:	30 2e       	mov	r3, r16

	
	double mxX=0,mxY=0,mnX=0,mnY=0;
	for(int i=0;i<T;i++)
	{
		if(l+i*(r-l)/(T-1)>mxX) mxX=l+i*(r-l)/(T-1);
    2910:	b3 01       	movw	r22, r6
    2912:	07 2c       	mov	r0, r7
    2914:	00 0c       	add	r0, r0
    2916:	88 0b       	sbc	r24, r24
    2918:	99 0b       	sbc	r25, r25
    291a:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__floatsisf>
    291e:	a8 96       	adiw	r28, 0x28	; 40
    2920:	2c ad       	ldd	r18, Y+60	; 0x3c
    2922:	3d ad       	ldd	r19, Y+61	; 0x3d
    2924:	4e ad       	ldd	r20, Y+62	; 0x3e
    2926:	5f ad       	ldd	r21, Y+63	; 0x3f
    2928:	a8 97       	sbiw	r28, 0x28	; 40
    292a:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e3       	ldi	r20, 0x30	; 48
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
    293a:	62 96       	adiw	r28, 0x12	; 18
    293c:	2f ad       	ldd	r18, Y+63	; 0x3f
    293e:	62 97       	sbiw	r28, 0x12	; 18
    2940:	63 96       	adiw	r28, 0x13	; 19
    2942:	3f ad       	ldd	r19, Y+63	; 0x3f
    2944:	63 97       	sbiw	r28, 0x13	; 19
    2946:	64 96       	adiw	r28, 0x14	; 20
    2948:	4f ad       	ldd	r20, Y+63	; 0x3f
    294a:	64 97       	sbiw	r28, 0x14	; 20
    294c:	55 2d       	mov	r21, r5
    294e:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    2952:	06 2f       	mov	r16, r22
    2954:	17 2f       	mov	r17, r23
    2956:	f8 2e       	mov	r15, r24
    2958:	e9 2e       	mov	r14, r25
    295a:	23 2d       	mov	r18, r3
    295c:	65 96       	adiw	r28, 0x15	; 21
    295e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2960:	65 97       	sbiw	r28, 0x15	; 21
    2962:	69 96       	adiw	r28, 0x19	; 25
    2964:	4f ad       	ldd	r20, Y+63	; 0x3f
    2966:	69 97       	sbiw	r28, 0x19	; 25
    2968:	a9 96       	adiw	r28, 0x29	; 41
    296a:	5f ad       	ldd	r21, Y+63	; 0x3f
    296c:	a9 97       	sbiw	r28, 0x29	; 41
    296e:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__gesf2>
    2972:	18 16       	cp	r1, r24
    2974:	54 f4       	brge	.+20     	; 0x298a <_Z10graph_plotv+0x2ca>
    2976:	30 2e       	mov	r3, r16
    2978:	65 96       	adiw	r28, 0x15	; 21
    297a:	1f af       	std	Y+63, r17	; 0x3f
    297c:	65 97       	sbiw	r28, 0x15	; 21
    297e:	69 96       	adiw	r28, 0x19	; 25
    2980:	ff ae       	std	Y+63, r15	; 0x3f
    2982:	69 97       	sbiw	r28, 0x19	; 25
    2984:	a9 96       	adiw	r28, 0x29	; 41
    2986:	ef ae       	std	Y+63, r14	; 0x3f
    2988:	a9 97       	sbiw	r28, 0x29	; 41
		if(save_y[i]>mxY) mxY=save_y[i];
    298a:	f6 01       	movw	r30, r12
    298c:	81 90       	ld	r8, Z+
    298e:	91 90       	ld	r9, Z+
    2990:	a1 90       	ld	r10, Z+
    2992:	b1 90       	ld	r11, Z+
    2994:	6f 01       	movw	r12, r30
    2996:	ac 96       	adiw	r28, 0x2c	; 44
    2998:	2f ad       	ldd	r18, Y+63	; 0x3f
    299a:	ac 97       	sbiw	r28, 0x2c	; 44
    299c:	ad 96       	adiw	r28, 0x2d	; 45
    299e:	3f ad       	ldd	r19, Y+63	; 0x3f
    29a0:	ad 97       	sbiw	r28, 0x2d	; 45
    29a2:	ae 96       	adiw	r28, 0x2e	; 46
    29a4:	4f ad       	ldd	r20, Y+63	; 0x3f
    29a6:	ae 97       	sbiw	r28, 0x2e	; 46
    29a8:	af 96       	adiw	r28, 0x2f	; 47
    29aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    29ac:	af 97       	sbiw	r28, 0x2f	; 47
    29ae:	c5 01       	movw	r24, r10
    29b0:	b4 01       	movw	r22, r8
    29b2:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__gesf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	64 f4       	brge	.+24     	; 0x29d2 <_Z10graph_plotv+0x312>
    29ba:	ac 96       	adiw	r28, 0x2c	; 44
    29bc:	8f ae       	std	Y+63, r8	; 0x3f
    29be:	ac 97       	sbiw	r28, 0x2c	; 44
    29c0:	ad 96       	adiw	r28, 0x2d	; 45
    29c2:	9f ae       	std	Y+63, r9	; 0x3f
    29c4:	ad 97       	sbiw	r28, 0x2d	; 45
    29c6:	ae 96       	adiw	r28, 0x2e	; 46
    29c8:	af ae       	std	Y+63, r10	; 0x3f
    29ca:	ae 97       	sbiw	r28, 0x2e	; 46
    29cc:	af 96       	adiw	r28, 0x2f	; 47
    29ce:	bf ae       	std	Y+63, r11	; 0x3f
    29d0:	af 97       	sbiw	r28, 0x2f	; 47
		
		if(l+i*(r-l)/(T-1)<mnX) mnX=l+i*(r-l)/(T-1);
    29d2:	61 96       	adiw	r28, 0x11	; 17
    29d4:	2c ad       	ldd	r18, Y+60	; 0x3c
    29d6:	3d ad       	ldd	r19, Y+61	; 0x3d
    29d8:	4e ad       	ldd	r20, Y+62	; 0x3e
    29da:	5f ad       	ldd	r21, Y+63	; 0x3f
    29dc:	61 97       	sbiw	r28, 0x11	; 17
    29de:	60 2f       	mov	r22, r16
    29e0:	71 2f       	mov	r23, r17
    29e2:	8f 2d       	mov	r24, r15
    29e4:	9e 2d       	mov	r25, r14
    29e6:	0e 94 0b 1c 	call	0x3816	; 0x3816 <__cmpsf2>
    29ea:	88 23       	and	r24, r24
    29ec:	54 f4       	brge	.+20     	; 0x2a02 <_Z10graph_plotv+0x342>
    29ee:	80 2f       	mov	r24, r16
    29f0:	91 2f       	mov	r25, r17
    29f2:	af 2d       	mov	r26, r15
    29f4:	be 2d       	mov	r27, r14
    29f6:	61 96       	adiw	r28, 0x11	; 17
    29f8:	8c af       	std	Y+60, r24	; 0x3c
    29fa:	9d af       	std	Y+61, r25	; 0x3d
    29fc:	ae af       	std	Y+62, r26	; 0x3e
    29fe:	bf af       	std	Y+63, r27	; 0x3f
    2a00:	61 97       	sbiw	r28, 0x11	; 17
		if(save_y[i]<mnY) mnY=save_y[i];	
    2a02:	6d 96       	adiw	r28, 0x1d	; 29
    2a04:	2f ad       	ldd	r18, Y+63	; 0x3f
    2a06:	6d 97       	sbiw	r28, 0x1d	; 29
    2a08:	a1 96       	adiw	r28, 0x21	; 33
    2a0a:	3f ad       	ldd	r19, Y+63	; 0x3f
    2a0c:	a1 97       	sbiw	r28, 0x21	; 33
    2a0e:	aa 96       	adiw	r28, 0x2a	; 42
    2a10:	4f ad       	ldd	r20, Y+63	; 0x3f
    2a12:	aa 97       	sbiw	r28, 0x2a	; 42
    2a14:	ab 96       	adiw	r28, 0x2b	; 43
    2a16:	5f ad       	ldd	r21, Y+63	; 0x3f
    2a18:	ab 97       	sbiw	r28, 0x2b	; 43
    2a1a:	c5 01       	movw	r24, r10
    2a1c:	b4 01       	movw	r22, r8
    2a1e:	0e 94 0b 1c 	call	0x3816	; 0x3816 <__cmpsf2>
    2a22:	88 23       	and	r24, r24
    2a24:	64 f4       	brge	.+24     	; 0x2a3e <_Z10graph_plotv+0x37e>
    2a26:	6d 96       	adiw	r28, 0x1d	; 29
    2a28:	8f ae       	std	Y+63, r8	; 0x3f
    2a2a:	6d 97       	sbiw	r28, 0x1d	; 29
    2a2c:	a1 96       	adiw	r28, 0x21	; 33
    2a2e:	9f ae       	std	Y+63, r9	; 0x3f
    2a30:	a1 97       	sbiw	r28, 0x21	; 33
    2a32:	aa 96       	adiw	r28, 0x2a	; 42
    2a34:	af ae       	std	Y+63, r10	; 0x3f
    2a36:	aa 97       	sbiw	r28, 0x2a	; 42
    2a38:	ab 96       	adiw	r28, 0x2b	; 43
    2a3a:	bf ae       	std	Y+63, r11	; 0x3f
    2a3c:	ab 97       	sbiw	r28, 0x2b	; 43
	}
	//l+i*(r-l)/(T-1)

	
	double mxX=0,mxY=0,mnX=0,mnY=0;
	for(int i=0;i<T;i++)
    2a3e:	ff ef       	ldi	r31, 0xFF	; 255
    2a40:	6f 1a       	sub	r6, r31
    2a42:	7f 0a       	sbc	r7, r31
    2a44:	2c e0       	ldi	r18, 0x0C	; 12
    2a46:	62 16       	cp	r6, r18
    2a48:	71 04       	cpc	r7, r1
    2a4a:	09 f0       	breq	.+2      	; 0x2a4e <_Z10graph_plotv+0x38e>
    2a4c:	61 cf       	rjmp	.-318    	; 0x2910 <_Z10graph_plotv+0x250>
    2a4e:	15 2d       	mov	r17, r5
    2a50:	e3 96       	adiw	r28, 0x33	; 51
    2a52:	4e ac       	ldd	r4, Y+62	; 0x3e
    2a54:	5f ac       	ldd	r5, Y+63	; 0x3f
    2a56:	e3 97       	sbiw	r28, 0x33	; 51
    2a58:	03 2d       	mov	r16, r3
    2a5a:	e1 96       	adiw	r28, 0x31	; 49
    2a5c:	2e ac       	ldd	r2, Y+62	; 0x3e
    2a5e:	3f ac       	ldd	r3, Y+63	; 0x3f
    2a60:	e1 97       	sbiw	r28, 0x31	; 49
    2a62:	72 01       	movw	r14, r4
    2a64:	6d 96       	adiw	r28, 0x1d	; 29
    2a66:	df ac       	ldd	r13, Y+63	; 0x3f
    2a68:	6d 97       	sbiw	r28, 0x1d	; 29
    2a6a:	a1 96       	adiw	r28, 0x21	; 33
    2a6c:	cf ac       	ldd	r12, Y+63	; 0x3f
    2a6e:	a1 97       	sbiw	r28, 0x21	; 33
    2a70:	aa 96       	adiw	r28, 0x2a	; 42
    2a72:	bf ac       	ldd	r11, Y+63	; 0x3f
    2a74:	aa 97       	sbiw	r28, 0x2a	; 42
    2a76:	ab 96       	adiw	r28, 0x2b	; 43
    2a78:	af ac       	ldd	r10, Y+63	; 0x3f
    2a7a:	ab 97       	sbiw	r28, 0x2b	; 43
		if(l+i*(r-l)/(T-1)<mnX) mnX=l+i*(r-l)/(T-1);
		if(save_y[i]<mnY) mnY=save_y[i];	
	}
	for(int i=0;i<T;i++)
	{
		save_y[i]-=mnY;
    2a7c:	2d 2d       	mov	r18, r13
    2a7e:	3c 2d       	mov	r19, r12
    2a80:	4b 2d       	mov	r20, r11
    2a82:	5a 2d       	mov	r21, r10
    2a84:	f7 01       	movw	r30, r14
    2a86:	60 81       	ld	r22, Z
    2a88:	71 81       	ldd	r23, Z+1	; 0x01
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    2a92:	f7 01       	movw	r30, r14
    2a94:	61 93       	st	Z+, r22
    2a96:	71 93       	st	Z+, r23
    2a98:	81 93       	st	Z+, r24
    2a9a:	91 93       	st	Z+, r25
    2a9c:	7f 01       	movw	r14, r30
		if(save_y[i]>mxY) mxY=save_y[i];
		
		if(l+i*(r-l)/(T-1)<mnX) mnX=l+i*(r-l)/(T-1);
		if(save_y[i]<mnY) mnY=save_y[i];	
	}
	for(int i=0;i<T;i++)
    2a9e:	2e 16       	cp	r2, r30
    2aa0:	3f 06       	cpc	r3, r31
    2aa2:	61 f7       	brne	.-40     	; 0x2a7c <_Z10graph_plotv+0x3bc>
	{
		save_y[i]-=mnY;
	}
	//((l+i*(r-l)/(T-1))-mnX)
	double scaleX=120/(mxX-mnX);
    2aa4:	61 96       	adiw	r28, 0x11	; 17
    2aa6:	2c ad       	ldd	r18, Y+60	; 0x3c
    2aa8:	3d ad       	ldd	r19, Y+61	; 0x3d
    2aaa:	4e ad       	ldd	r20, Y+62	; 0x3e
    2aac:	5f ad       	ldd	r21, Y+63	; 0x3f
    2aae:	61 97       	sbiw	r28, 0x11	; 17
    2ab0:	60 2f       	mov	r22, r16
    2ab2:	65 96       	adiw	r28, 0x15	; 21
    2ab4:	7f ad       	ldd	r23, Y+63	; 0x3f
    2ab6:	65 97       	sbiw	r28, 0x15	; 21
    2ab8:	69 96       	adiw	r28, 0x19	; 25
    2aba:	8f ad       	ldd	r24, Y+63	; 0x3f
    2abc:	69 97       	sbiw	r28, 0x19	; 25
    2abe:	a9 96       	adiw	r28, 0x29	; 41
    2ac0:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ac2:	a9 97       	sbiw	r28, 0x29	; 41
    2ac4:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    2ac8:	9b 01       	movw	r18, r22
    2aca:	ac 01       	movw	r20, r24
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	70 e0       	ldi	r23, 0x00	; 0
    2ad0:	80 ef       	ldi	r24, 0xF0	; 240
    2ad2:	92 e4       	ldi	r25, 0x42	; 66
    2ad4:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
    2ad8:	68 96       	adiw	r28, 0x18	; 24
    2ada:	6c af       	std	Y+60, r22	; 0x3c
    2adc:	7d af       	std	Y+61, r23	; 0x3d
    2ade:	8e af       	std	Y+62, r24	; 0x3e
    2ae0:	9f af       	std	Y+63, r25	; 0x3f
    2ae2:	68 97       	sbiw	r28, 0x18	; 24
	double scaleY=60/(mxY-mnY);
    2ae4:	6d 96       	adiw	r28, 0x1d	; 29
    2ae6:	2f ad       	ldd	r18, Y+63	; 0x3f
    2ae8:	6d 97       	sbiw	r28, 0x1d	; 29
    2aea:	a1 96       	adiw	r28, 0x21	; 33
    2aec:	3f ad       	ldd	r19, Y+63	; 0x3f
    2aee:	a1 97       	sbiw	r28, 0x21	; 33
    2af0:	aa 96       	adiw	r28, 0x2a	; 42
    2af2:	4f ad       	ldd	r20, Y+63	; 0x3f
    2af4:	aa 97       	sbiw	r28, 0x2a	; 42
    2af6:	ab 96       	adiw	r28, 0x2b	; 43
    2af8:	5f ad       	ldd	r21, Y+63	; 0x3f
    2afa:	ab 97       	sbiw	r28, 0x2b	; 43
    2afc:	ac 96       	adiw	r28, 0x2c	; 44
    2afe:	6f ad       	ldd	r22, Y+63	; 0x3f
    2b00:	ac 97       	sbiw	r28, 0x2c	; 44
    2b02:	ad 96       	adiw	r28, 0x2d	; 45
    2b04:	7f ad       	ldd	r23, Y+63	; 0x3f
    2b06:	ad 97       	sbiw	r28, 0x2d	; 45
    2b08:	ae 96       	adiw	r28, 0x2e	; 46
    2b0a:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b0c:	ae 97       	sbiw	r28, 0x2e	; 46
    2b0e:	af 96       	adiw	r28, 0x2f	; 47
    2b10:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b12:	af 97       	sbiw	r28, 0x2f	; 47
    2b14:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    2b18:	9b 01       	movw	r18, r22
    2b1a:	ac 01       	movw	r20, r24
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	80 e7       	ldi	r24, 0x70	; 112
    2b22:	92 e4       	ldi	r25, 0x42	; 66
    2b24:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
    2b28:	6c 96       	adiw	r28, 0x1c	; 28
    2b2a:	6c af       	std	Y+60, r22	; 0x3c
    2b2c:	7d af       	std	Y+61, r23	; 0x3d
    2b2e:	8e af       	std	Y+62, r24	; 0x3e
    2b30:	9f af       	std	Y+63, r25	; 0x3f
    2b32:	6c 97       	sbiw	r28, 0x1c	; 28

	LCD_Clear();
    2b34:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
    2b38:	ff ef       	ldi	r31, 0xFF	; 255
    2b3a:	24 e3       	ldi	r18, 0x34	; 52
    2b3c:	8c e0       	ldi	r24, 0x0C	; 12
    2b3e:	f1 50       	subi	r31, 0x01	; 1
    2b40:	20 40       	sbci	r18, 0x00	; 0
    2b42:	80 40       	sbci	r24, 0x00	; 0
    2b44:	e1 f7       	brne	.-8      	; 0x2b3e <_Z10graph_plotv+0x47e>
    2b46:	00 c0       	rjmp	.+0      	; 0x2b48 <_Z10graph_plotv+0x488>
    2b48:	00 00       	nop
		//i_x[i]=round(save_x[i]*scaleX);
		//i_y[i]=63-round(save_y[i]*scaleY);
	}
	for(int y=0;y<64;y++)
	{
		int x=round((-mnX)*scaleX);
    2b4a:	68 96       	adiw	r28, 0x18	; 24
    2b4c:	2c ad       	ldd	r18, Y+60	; 0x3c
    2b4e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2b50:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b52:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b54:	68 97       	sbiw	r28, 0x18	; 24
    2b56:	61 96       	adiw	r28, 0x11	; 17
    2b58:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b5a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b60:	61 97       	sbiw	r28, 0x11	; 17
    2b62:	90 58       	subi	r25, 0x80	; 128
    2b64:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    2b68:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <round>
		PutPixel(x,y,1);
    2b6c:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__fixsfsi>
    2b70:	f6 2e       	mov	r15, r22
    2b72:	00 e0       	ldi	r16, 0x00	; 0
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	60 2f       	mov	r22, r16
    2b78:	8f 2d       	mov	r24, r15
    2b7a:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z8PutPixelhhc>
    2b7e:	0f 5f       	subi	r16, 0xFF	; 255
	for(int i=0;i<T;i++)
	{
		//i_x[i]=round(save_x[i]*scaleX);
		//i_y[i]=63-round(save_y[i]*scaleY);
	}
	for(int y=0;y<64;y++)
    2b80:	00 34       	cpi	r16, 0x40	; 64
    2b82:	c1 f7       	brne	.-16     	; 0x2b74 <_Z10graph_plotv+0x4b4>
		int x=round((-mnX)*scaleX);
		PutPixel(x,y,1);
	}
	for(int x=0;x<128;x++)
	{
		int y=63-round((-mnY)*scaleY);
    2b84:	6c 96       	adiw	r28, 0x1c	; 28
    2b86:	2c ad       	ldd	r18, Y+60	; 0x3c
    2b88:	3d ad       	ldd	r19, Y+61	; 0x3d
    2b8a:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b8c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b8e:	6c 97       	sbiw	r28, 0x1c	; 28
    2b90:	6d 96       	adiw	r28, 0x1d	; 29
    2b92:	6f ad       	ldd	r22, Y+63	; 0x3f
    2b94:	6d 97       	sbiw	r28, 0x1d	; 29
    2b96:	a1 96       	adiw	r28, 0x21	; 33
    2b98:	7f ad       	ldd	r23, Y+63	; 0x3f
    2b9a:	a1 97       	sbiw	r28, 0x21	; 33
    2b9c:	aa 96       	adiw	r28, 0x2a	; 42
    2b9e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ba0:	aa 97       	sbiw	r28, 0x2a	; 42
    2ba2:	ab 96       	adiw	r28, 0x2b	; 43
    2ba4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ba6:	ab 97       	sbiw	r28, 0x2b	; 43
    2ba8:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    2bac:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <round>
		PutPixel(x,y,1);
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	4c e7       	ldi	r20, 0x7C	; 124
    2bb6:	52 e4       	ldi	r21, 0x42	; 66
    2bb8:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    2bbc:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__fixsfsi>
    2bc0:	f6 2e       	mov	r15, r22
    2bc2:	00 e0       	ldi	r16, 0x00	; 0
    2bc4:	41 e0       	ldi	r20, 0x01	; 1
    2bc6:	6f 2d       	mov	r22, r15
    2bc8:	80 2f       	mov	r24, r16
    2bca:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z8PutPixelhhc>
    2bce:	0f 5f       	subi	r16, 0xFF	; 255
	for(int y=0;y<64;y++)
	{
		int x=round((-mnX)*scaleX);
		PutPixel(x,y,1);
	}
	for(int x=0;x<128;x++)
    2bd0:	00 38       	cpi	r16, 0x80	; 128
    2bd2:	c1 f7       	brne	.-16     	; 0x2bc4 <_Z10graph_plotv+0x504>
    2bd4:	22 24       	eor	r2, r2
    2bd6:	23 94       	inc	r2
    2bd8:	31 2c       	mov	r3, r1
    2bda:	71 2e       	mov	r7, r17
	}
	
	for(int i=1;i<T;i++)
	{
		//PutPixel(i_x[i],i_y[i],1);
		line(round(((l+(i-1)*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i-1]*scaleY),round(((l+i*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i]*scaleY),1);
    2bdc:	f2 01       	movw	r30, r4
    2bde:	24 81       	ldd	r18, Z+4	; 0x04
    2be0:	35 81       	ldd	r19, Z+5	; 0x05
    2be2:	46 81       	ldd	r20, Z+6	; 0x06
    2be4:	57 81       	ldd	r21, Z+7	; 0x07
    2be6:	6c 96       	adiw	r28, 0x1c	; 28
    2be8:	6c ad       	ldd	r22, Y+60	; 0x3c
    2bea:	7d ad       	ldd	r23, Y+61	; 0x3d
    2bec:	8e ad       	ldd	r24, Y+62	; 0x3e
    2bee:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bf0:	6c 97       	sbiw	r28, 0x1c	; 28
    2bf2:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    2bf6:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <round>
    2bfa:	a0 96       	adiw	r28, 0x20	; 32
    2bfc:	6c af       	std	Y+60, r22	; 0x3c
    2bfe:	7d af       	std	Y+61, r23	; 0x3d
    2c00:	8e af       	std	Y+62, r24	; 0x3e
    2c02:	9f af       	std	Y+63, r25	; 0x3f
    2c04:	a0 97       	sbiw	r28, 0x20	; 32
    2c06:	b1 01       	movw	r22, r2
    2c08:	03 2c       	mov	r0, r3
    2c0a:	00 0c       	add	r0, r0
    2c0c:	88 0b       	sbc	r24, r24
    2c0e:	99 0b       	sbc	r25, r25
    2c10:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__floatsisf>
    2c14:	a8 96       	adiw	r28, 0x28	; 40
    2c16:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c18:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c1a:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c1c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c1e:	a8 97       	sbiw	r28, 0x28	; 40
    2c20:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e3       	ldi	r20, 0x30	; 48
    2c2a:	51 e4       	ldi	r21, 0x41	; 65
    2c2c:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
    2c30:	62 96       	adiw	r28, 0x12	; 18
    2c32:	2f ad       	ldd	r18, Y+63	; 0x3f
    2c34:	62 97       	sbiw	r28, 0x12	; 18
    2c36:	63 96       	adiw	r28, 0x13	; 19
    2c38:	3f ad       	ldd	r19, Y+63	; 0x3f
    2c3a:	63 97       	sbiw	r28, 0x13	; 19
    2c3c:	64 96       	adiw	r28, 0x14	; 20
    2c3e:	4f ad       	ldd	r20, Y+63	; 0x3f
    2c40:	64 97       	sbiw	r28, 0x14	; 20
    2c42:	57 2d       	mov	r21, r7
    2c44:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    2c48:	61 96       	adiw	r28, 0x11	; 17
    2c4a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c4c:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c4e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c50:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c52:	61 97       	sbiw	r28, 0x11	; 17
    2c54:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    2c58:	68 96       	adiw	r28, 0x18	; 24
    2c5a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c5c:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c5e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c60:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c62:	68 97       	sbiw	r28, 0x18	; 24
    2c64:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    2c68:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <round>
    2c6c:	a4 96       	adiw	r28, 0x24	; 36
    2c6e:	6c af       	std	Y+60, r22	; 0x3c
    2c70:	7d af       	std	Y+61, r23	; 0x3d
    2c72:	8e af       	std	Y+62, r24	; 0x3e
    2c74:	9f af       	std	Y+63, r25	; 0x3f
    2c76:	a4 97       	sbiw	r28, 0x24	; 36
    2c78:	f2 01       	movw	r30, r4
    2c7a:	20 81       	ld	r18, Z
    2c7c:	31 81       	ldd	r19, Z+1	; 0x01
    2c7e:	42 81       	ldd	r20, Z+2	; 0x02
    2c80:	53 81       	ldd	r21, Z+3	; 0x03
    2c82:	f4 e0       	ldi	r31, 0x04	; 4
    2c84:	4f 0e       	add	r4, r31
    2c86:	51 1c       	adc	r5, r1
    2c88:	6c 96       	adiw	r28, 0x1c	; 28
    2c8a:	6c ad       	ldd	r22, Y+60	; 0x3c
    2c8c:	7d ad       	ldd	r23, Y+61	; 0x3d
    2c8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c90:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c92:	6c 97       	sbiw	r28, 0x1c	; 28
    2c94:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    2c98:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <round>
    2c9c:	4b 01       	movw	r8, r22
    2c9e:	5c 01       	movw	r10, r24
    2ca0:	b1 01       	movw	r22, r2
    2ca2:	61 50       	subi	r22, 0x01	; 1
    2ca4:	71 09       	sbc	r23, r1
    2ca6:	07 2e       	mov	r0, r23
    2ca8:	00 0c       	add	r0, r0
    2caa:	88 0b       	sbc	r24, r24
    2cac:	99 0b       	sbc	r25, r25
    2cae:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__floatsisf>
    2cb2:	a8 96       	adiw	r28, 0x28	; 40
    2cb4:	2c ad       	ldd	r18, Y+60	; 0x3c
    2cb6:	3d ad       	ldd	r19, Y+61	; 0x3d
    2cb8:	4e ad       	ldd	r20, Y+62	; 0x3e
    2cba:	5f ad       	ldd	r21, Y+63	; 0x3f
    2cbc:	a8 97       	sbiw	r28, 0x28	; 40
    2cbe:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e3       	ldi	r20, 0x30	; 48
    2cc8:	51 e4       	ldi	r21, 0x41	; 65
    2cca:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
    2cce:	62 96       	adiw	r28, 0x12	; 18
    2cd0:	2f ad       	ldd	r18, Y+63	; 0x3f
    2cd2:	62 97       	sbiw	r28, 0x12	; 18
    2cd4:	63 96       	adiw	r28, 0x13	; 19
    2cd6:	3f ad       	ldd	r19, Y+63	; 0x3f
    2cd8:	63 97       	sbiw	r28, 0x13	; 19
    2cda:	64 96       	adiw	r28, 0x14	; 20
    2cdc:	4f ad       	ldd	r20, Y+63	; 0x3f
    2cde:	64 97       	sbiw	r28, 0x14	; 20
    2ce0:	57 2d       	mov	r21, r7
    2ce2:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    2ce6:	61 96       	adiw	r28, 0x11	; 17
    2ce8:	2c ad       	ldd	r18, Y+60	; 0x3c
    2cea:	3d ad       	ldd	r19, Y+61	; 0x3d
    2cec:	4e ad       	ldd	r20, Y+62	; 0x3e
    2cee:	5f ad       	ldd	r21, Y+63	; 0x3f
    2cf0:	61 97       	sbiw	r28, 0x11	; 17
    2cf2:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    2cf6:	68 96       	adiw	r28, 0x18	; 24
    2cf8:	2c ad       	ldd	r18, Y+60	; 0x3c
    2cfa:	3d ad       	ldd	r19, Y+61	; 0x3d
    2cfc:	4e ad       	ldd	r20, Y+62	; 0x3e
    2cfe:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d00:	68 97       	sbiw	r28, 0x18	; 24
    2d02:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    2d06:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <round>
    2d0a:	6b 01       	movw	r12, r22
    2d0c:	7c 01       	movw	r14, r24
    2d0e:	a0 96       	adiw	r28, 0x20	; 32
    2d10:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d12:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d14:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d16:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d18:	a0 97       	sbiw	r28, 0x20	; 32
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	8c e7       	ldi	r24, 0x7C	; 124
    2d20:	92 e4       	ldi	r25, 0x42	; 66
    2d22:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    2d26:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__fixunssfsi>
    2d2a:	16 2f       	mov	r17, r22
    2d2c:	a4 96       	adiw	r28, 0x24	; 36
    2d2e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2d30:	7d ad       	ldd	r23, Y+61	; 0x3d
    2d32:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d34:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d36:	a4 97       	sbiw	r28, 0x24	; 36
    2d38:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__fixunssfsi>
    2d3c:	66 2e       	mov	r6, r22
    2d3e:	a5 01       	movw	r20, r10
    2d40:	94 01       	movw	r18, r8
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	8c e7       	ldi	r24, 0x7C	; 124
    2d48:	92 e4       	ldi	r25, 0x42	; 66
    2d4a:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    2d4e:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__fixunssfsi>
    2d52:	b6 2e       	mov	r11, r22
    2d54:	c7 01       	movw	r24, r14
    2d56:	b6 01       	movw	r22, r12
    2d58:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__fixunssfsi>
    2d5c:	86 2f       	mov	r24, r22
    2d5e:	01 e0       	ldi	r16, 0x01	; 1
    2d60:	21 2f       	mov	r18, r17
    2d62:	46 2d       	mov	r20, r6
    2d64:	6b 2d       	mov	r22, r11
    2d66:	0e 94 5f 03 	call	0x6be	; 0x6be <_Z4lineccccc>
    2d6a:	2f e7       	ldi	r18, 0x7F	; 127
    2d6c:	88 e3       	ldi	r24, 0x38	; 56
    2d6e:	91 e0       	ldi	r25, 0x01	; 1
    2d70:	21 50       	subi	r18, 0x01	; 1
    2d72:	80 40       	sbci	r24, 0x00	; 0
    2d74:	90 40       	sbci	r25, 0x00	; 0
    2d76:	e1 f7       	brne	.-8      	; 0x2d70 <_Z10graph_plotv+0x6b0>
    2d78:	00 c0       	rjmp	.+0      	; 0x2d7a <_Z10graph_plotv+0x6ba>
    2d7a:	00 00       	nop
	{
		int y=63-round((-mnY)*scaleY);
		PutPixel(x,y,1);
	}
	
	for(int i=1;i<T;i++)
    2d7c:	ef ef       	ldi	r30, 0xFF	; 255
    2d7e:	2e 1a       	sub	r2, r30
    2d80:	3e 0a       	sbc	r3, r30
    2d82:	fc e0       	ldi	r31, 0x0C	; 12
    2d84:	2f 16       	cp	r2, r31
    2d86:	31 04       	cpc	r3, r1
    2d88:	09 f0       	breq	.+2      	; 0x2d8c <_Z10graph_plotv+0x6cc>
    2d8a:	28 cf       	rjmp	.-432    	; 0x2bdc <_Z10graph_plotv+0x51c>
		line(round(((l+(i-1)*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i-1]*scaleY),round(((l+i*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i]*scaleY),1);
		_delay_ms(50);
	}

	
    2d8c:	ce 58       	subi	r28, 0x8E	; 142
    2d8e:	df 4f       	sbci	r29, 0xFF	; 255
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	df 91       	pop	r29
    2d9c:	cf 91       	pop	r28
    2d9e:	1f 91       	pop	r17
    2da0:	0f 91       	pop	r16
    2da2:	ff 90       	pop	r15
    2da4:	ef 90       	pop	r14
    2da6:	df 90       	pop	r13
    2da8:	cf 90       	pop	r12
    2daa:	bf 90       	pop	r11
    2dac:	af 90       	pop	r10
    2dae:	9f 90       	pop	r9
    2db0:	8f 90       	pop	r8
    2db2:	7f 90       	pop	r7
    2db4:	6f 90       	pop	r6
    2db6:	5f 90       	pop	r5
    2db8:	4f 90       	pop	r4
    2dba:	3f 90       	pop	r3
    2dbc:	2f 90       	pop	r2
    2dbe:	08 95       	ret

00002dc0 <_Z13diffentiationPcd>:
double diffentiation(char str[],double x)
{
    2dc0:	8f 92       	push	r8
    2dc2:	9f 92       	push	r9
    2dc4:	af 92       	push	r10
    2dc6:	bf 92       	push	r11
    2dc8:	cf 92       	push	r12
    2dca:	df 92       	push	r13
    2dcc:	ef 92       	push	r14
    2dce:	ff 92       	push	r15
    2dd0:	cf 93       	push	r28
    2dd2:	df 93       	push	r29
    2dd4:	ec 01       	movw	r28, r24
    2dd6:	6a 01       	movw	r12, r20
    2dd8:	7b 01       	movw	r14, r22
	double h = 1e-6;
	return (evaluate_function(str , x+h)-evaluate_function(str, x-h))/(2.00*h);
    2dda:	2d eb       	ldi	r18, 0xBD	; 189
    2ddc:	37 e3       	ldi	r19, 0x37	; 55
    2dde:	46 e8       	ldi	r20, 0x86	; 134
    2de0:	55 e3       	ldi	r21, 0x35	; 53
    2de2:	c7 01       	movw	r24, r14
    2de4:	b6 01       	movw	r22, r12
    2de6:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    2dea:	ab 01       	movw	r20, r22
    2dec:	bc 01       	movw	r22, r24
    2dee:	ce 01       	movw	r24, r28
    2df0:	0e 94 47 08 	call	0x108e	; 0x108e <_Z17evaluate_functionPcd>
    2df4:	4b 01       	movw	r8, r22
    2df6:	5c 01       	movw	r10, r24
    2df8:	2d eb       	ldi	r18, 0xBD	; 189
    2dfa:	37 e3       	ldi	r19, 0x37	; 55
    2dfc:	46 e8       	ldi	r20, 0x86	; 134
    2dfe:	55 e3       	ldi	r21, 0x35	; 53
    2e00:	c7 01       	movw	r24, r14
    2e02:	b6 01       	movw	r22, r12
    2e04:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    2e08:	ab 01       	movw	r20, r22
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	ce 01       	movw	r24, r28
    2e0e:	0e 94 47 08 	call	0x108e	; 0x108e <_Z17evaluate_functionPcd>
    2e12:	9b 01       	movw	r18, r22
    2e14:	ac 01       	movw	r20, r24
    2e16:	c5 01       	movw	r24, r10
    2e18:	b4 01       	movw	r22, r8
    2e1a:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    2e1e:	2d eb       	ldi	r18, 0xBD	; 189
    2e20:	37 e3       	ldi	r19, 0x37	; 55
    2e22:	46 e0       	ldi	r20, 0x06	; 6
    2e24:	56 e3       	ldi	r21, 0x36	; 54
    2e26:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
}
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	ff 90       	pop	r15
    2e30:	ef 90       	pop	r14
    2e32:	df 90       	pop	r13
    2e34:	cf 90       	pop	r12
    2e36:	bf 90       	pop	r11
    2e38:	af 90       	pop	r10
    2e3a:	9f 90       	pop	r9
    2e3c:	8f 90       	pop	r8
    2e3e:	08 95       	ret

00002e40 <_Z6newtonPcd>:

double newton(char str[],double guess)
{
    2e40:	8f 92       	push	r8
    2e42:	9f 92       	push	r9
    2e44:	af 92       	push	r10
    2e46:	bf 92       	push	r11
    2e48:	cf 92       	push	r12
    2e4a:	df 92       	push	r13
    2e4c:	ef 92       	push	r14
    2e4e:	ff 92       	push	r15
    2e50:	0f 93       	push	r16
    2e52:	1f 93       	push	r17
    2e54:	cf 93       	push	r28
    2e56:	df 93       	push	r29
    2e58:	8c 01       	movw	r16, r24
    2e5a:	e4 2e       	mov	r14, r20
    2e5c:	f5 2e       	mov	r15, r21
    2e5e:	d6 2e       	mov	r13, r22
    2e60:	c7 2e       	mov	r12, r23
    2e62:	c9 e2       	ldi	r28, 0x29	; 41
    2e64:	d0 e0       	ldi	r29, 0x00	; 0
	double x = guess;
	for (int rep = 0; rep<=40; rep++)
	{
		double nx = x - (evaluate_function(str, x)/diffentiation(str , x));
    2e66:	4e 2d       	mov	r20, r14
    2e68:	5f 2d       	mov	r21, r15
    2e6a:	6d 2d       	mov	r22, r13
    2e6c:	7c 2d       	mov	r23, r12
    2e6e:	c8 01       	movw	r24, r16
    2e70:	0e 94 47 08 	call	0x108e	; 0x108e <_Z17evaluate_functionPcd>
    2e74:	4b 01       	movw	r8, r22
    2e76:	5c 01       	movw	r10, r24
    2e78:	4e 2d       	mov	r20, r14
    2e7a:	5f 2d       	mov	r21, r15
    2e7c:	6d 2d       	mov	r22, r13
    2e7e:	7c 2d       	mov	r23, r12
    2e80:	c8 01       	movw	r24, r16
    2e82:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <_Z13diffentiationPcd>
    2e86:	9b 01       	movw	r18, r22
    2e88:	ac 01       	movw	r20, r24
    2e8a:	c5 01       	movw	r24, r10
    2e8c:	b4 01       	movw	r22, r8
    2e8e:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3>
    2e92:	9b 01       	movw	r18, r22
    2e94:	ac 01       	movw	r20, r24
    2e96:	6e 2d       	mov	r22, r14
    2e98:	7f 2d       	mov	r23, r15
    2e9a:	8d 2d       	mov	r24, r13
    2e9c:	9c 2d       	mov	r25, r12
    2e9e:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
	"mov	%0, %C1		\n\t"
	"lsl	%0		\n\t"
	"mov	%0, %D1		\n\t"
	"rol	%0		"
	: "=r" (__exp)
	: "r" (__x)	);
    2ea2:	28 2f       	mov	r18, r24
    2ea4:	22 0f       	add	r18, r18
    2ea6:	29 2f       	mov	r18, r25
    2ea8:	22 1f       	adc	r18, r18
		if(!isfinite(nx))
    2eaa:	2f 3f       	cpi	r18, 0xFF	; 255
    2eac:	31 f0       	breq	.+12     	; 0x2eba <_Z6newtonPcd+0x7a>
    2eae:	21 97       	sbiw	r28, 0x01	; 1
double newton(char str[],double guess)
{
	double x = guess;
	for (int rep = 0; rep<=40; rep++)
	{
		double nx = x - (evaluate_function(str, x)/diffentiation(str , x));
    2eb0:	e6 2e       	mov	r14, r22
    2eb2:	f7 2e       	mov	r15, r23
    2eb4:	d8 2e       	mov	r13, r24
    2eb6:	c9 2e       	mov	r12, r25
}

double newton(char str[],double guess)
{
	double x = guess;
	for (int rep = 0; rep<=40; rep++)
    2eb8:	b1 f6       	brne	.-84     	; 0x2e66 <_Z6newtonPcd+0x26>
			break;
		}
		x = nx;
	}
	return x;
}
    2eba:	6e 2d       	mov	r22, r14
    2ebc:	7f 2d       	mov	r23, r15
    2ebe:	8d 2d       	mov	r24, r13
    2ec0:	9c 2d       	mov	r25, r12
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	ff 90       	pop	r15
    2ecc:	ef 90       	pop	r14
    2ece:	df 90       	pop	r13
    2ed0:	cf 90       	pop	r12
    2ed2:	bf 90       	pop	r11
    2ed4:	af 90       	pop	r10
    2ed6:	9f 90       	pop	r9
    2ed8:	8f 90       	pop	r8
    2eda:	08 95       	ret

00002edc <_Z14newton_raphsonv>:
void newton_raphson()
{
    2edc:	2f 92       	push	r2
    2ede:	3f 92       	push	r3
    2ee0:	4f 92       	push	r4
    2ee2:	5f 92       	push	r5
    2ee4:	6f 92       	push	r6
    2ee6:	7f 92       	push	r7
    2ee8:	8f 92       	push	r8
    2eea:	9f 92       	push	r9
    2eec:	af 92       	push	r10
    2eee:	bf 92       	push	r11
    2ef0:	cf 92       	push	r12
    2ef2:	df 92       	push	r13
    2ef4:	ef 92       	push	r14
    2ef6:	ff 92       	push	r15
    2ef8:	0f 93       	push	r16
    2efa:	1f 93       	push	r17
    2efc:	cf 93       	push	r28
    2efe:	df 93       	push	r29
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	c0 55       	subi	r28, 0x50	; 80
    2f06:	d1 09       	sbc	r29, r1
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	de bf       	out	0x3e, r29	; 62
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    2f12:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
	char text1[] = "Input Equation of x:";
    2f16:	85 e1       	ldi	r24, 0x15	; 21
    2f18:	ec ee       	ldi	r30, 0xEC	; 236
    2f1a:	f1 e0       	ldi	r31, 0x01	; 1
    2f1c:	de 01       	movw	r26, r28
    2f1e:	11 96       	adiw	r26, 0x01	; 1
    2f20:	01 90       	ld	r0, Z+
    2f22:	0d 92       	st	X+, r0
    2f24:	8a 95       	dec	r24
    2f26:	e1 f7       	brne	.-8      	; 0x2f20 <_Z14newton_raphsonv+0x44>
	char text2[] = "Input initial approximation:";
    2f28:	8d e1       	ldi	r24, 0x1D	; 29
    2f2a:	e1 e0       	ldi	r30, 0x01	; 1
    2f2c:	f2 e0       	ldi	r31, 0x02	; 2
    2f2e:	de 01       	movw	r26, r28
    2f30:	56 96       	adiw	r26, 0x16	; 22
    2f32:	01 90       	ld	r0, Z+
    2f34:	0d 92       	st	X+, r0
    2f36:	8a 95       	dec	r24
    2f38:	e1 f7       	brne	.-8      	; 0x2f32 <_Z14newton_raphsonv+0x56>
	DisplayText(1,1,text1);
    2f3a:	ae 01       	movw	r20, r28
    2f3c:	4f 5f       	subi	r20, 0xFF	; 255
    2f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f40:	61 e0       	ldi	r22, 0x01	; 1
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
	//input function
	char s[20];
	int len=0;
	int where=12;
    2f48:	0f 2e       	mov	r0, r31
    2f4a:	fc e0       	ldi	r31, 0x0C	; 12
    2f4c:	8f 2e       	mov	r8, r31
    2f4e:	91 2c       	mov	r9, r1
    2f50:	f0 2d       	mov	r31, r0
	char text1[] = "Input Equation of x:";
	char text2[] = "Input initial approximation:";
	DisplayText(1,1,text1);
	//input function
	char s[20];
	int len=0;
    2f52:	e1 2c       	mov	r14, r1
    2f54:	f1 2c       	mov	r15, r1
					else
					{
						append(s , len , mat2[r][c-4]);
						len = strlen(s);
					}
					DisplayText(1,where,s);
    2f56:	2e 01       	movw	r4, r28
    2f58:	23 e3       	ldi	r18, 0x33	; 51
    2f5a:	42 0e       	add	r4, r18
    2f5c:	51 1c       	adc	r5, r1
    2f5e:	2e 96       	adiw	r28, 0x0e	; 14
    2f60:	4f ae       	std	Y+63, r4	; 0x3f
    2f62:	2e 97       	sbiw	r28, 0x0e	; 14
    2f64:	2f 96       	adiw	r28, 0x0f	; 15
    2f66:	5f ae       	std	Y+63, r5	; 0x3f
    2f68:	2f 97       	sbiw	r28, 0x0f	; 15
    2f6a:	0f 2e       	mov	r0, r31
    2f6c:	f0 e6       	ldi	r31, 0x60	; 96
    2f6e:	2f 2e       	mov	r2, r31
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	3f 2e       	mov	r3, r31
    2f74:	f0 2d       	mov	r31, r0
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    2f76:	68 94       	set
    2f78:	66 24       	eor	r6, r6
    2f7a:	62 f8       	bld	r6, 2
    2f7c:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	06 2c       	mov	r0, r6
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <_Z14newton_raphsonv+0xae>
    2f86:	88 0f       	add	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	0a 94       	dec	r0
    2f8c:	e2 f7       	brpl	.-8      	; 0x2f86 <_Z14newton_raphsonv+0xaa>
    2f8e:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    2f90:	8b bb       	out	0x1b, r24	; 27
    2f92:	c3 01       	movw	r24, r6
    2f94:	84 54       	subi	r24, 0x44	; 68
    2f96:	9f 4f       	sbci	r25, 0xFF	; 255
    2f98:	6c 01       	movw	r12, r24
    2f9a:	51 01       	movw	r10, r2
			for(int r=0;r<4;r++)
    2f9c:	00 e0       	ldi	r16, 0x00	; 0
    2f9e:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    2fa0:	86 b3       	in	r24, 0x16	; 22
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	00 2e       	mov	r0, r16
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <_Z14newton_raphsonv+0xd0>
    2fa8:	95 95       	asr	r25
    2faa:	87 95       	ror	r24
    2fac:	0a 94       	dec	r0
    2fae:	e2 f7       	brpl	.-8      	; 0x2fa8 <_Z14newton_raphsonv+0xcc>
    2fb0:	80 ff       	sbrs	r24, 0
    2fb2:	43 c0       	rjmp	.+134    	; 0x303a <_Z14newton_raphsonv+0x15e>
				{
					if(mat[r][c-4]=='C')
    2fb4:	f6 01       	movw	r30, r12
    2fb6:	80 81       	ld	r24, Z
    2fb8:	83 34       	cpi	r24, 0x43	; 67
    2fba:	99 f4       	brne	.+38     	; 0x2fe2 <_Z14newton_raphsonv+0x106>
					{
						len=0;
						s[0]=0;
    2fbc:	1b aa       	std	Y+51, r1	; 0x33
						where=1;
						LCD_Clear();
    2fbe:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    2fc2:	2e 96       	adiw	r28, 0x0e	; 14
    2fc4:	4f ad       	ldd	r20, Y+63	; 0x3f
    2fc6:	2e 97       	sbiw	r28, 0x0e	; 14
    2fc8:	2f 96       	adiw	r28, 0x0f	; 15
    2fca:	5f ad       	ldd	r21, Y+63	; 0x3f
    2fcc:	2f 97       	sbiw	r28, 0x0f	; 15
    2fce:	61 e0       	ldi	r22, 0x01	; 1
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    2fd6:	88 24       	eor	r8, r8
    2fd8:	83 94       	inc	r8
    2fda:	91 2c       	mov	r9, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    2fdc:	e1 2c       	mov	r14, r1
    2fde:	f1 2c       	mov	r15, r1
    2fe0:	22 c0       	rjmp	.+68     	; 0x3026 <_Z14newton_raphsonv+0x14a>
						where=1;
						LCD_Clear();
					}
					else
					{
						if(mat[r][c-4]=='=')
    2fe2:	8d 33       	cpi	r24, 0x3D	; 61
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <_Z14newton_raphsonv+0x10c>
    2fe6:	df c0       	rjmp	.+446    	; 0x31a6 <_Z14newton_raphsonv+0x2ca>
						{
							done = 1;
							break;
						}
						s[len]=mat[r][c-4];
    2fe8:	f2 01       	movw	r30, r4
    2fea:	ee 0d       	add	r30, r14
    2fec:	ff 1d       	adc	r31, r15
    2fee:	80 83       	st	Z, r24
						len+=1;
    2ff0:	ff ef       	ldi	r31, 0xFF	; 255
    2ff2:	ef 1a       	sub	r14, r31
    2ff4:	ff 0a       	sbc	r15, r31
						s[len]=0;
    2ff6:	f2 01       	movw	r30, r4
    2ff8:	ee 0d       	add	r30, r14
    2ffa:	ff 1d       	adc	r31, r15
    2ffc:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    2ffe:	2e 96       	adiw	r28, 0x0e	; 14
    3000:	4f ad       	ldd	r20, Y+63	; 0x3f
    3002:	2e 97       	sbiw	r28, 0x0e	; 14
    3004:	2f 96       	adiw	r28, 0x0f	; 15
    3006:	5f ad       	ldd	r21, Y+63	; 0x3f
    3008:	2f 97       	sbiw	r28, 0x0f	; 15
    300a:	68 2d       	mov	r22, r8
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
					if(len==20)
    3012:	24 e1       	ldi	r18, 0x14	; 20
    3014:	e2 16       	cp	r14, r18
    3016:	f1 04       	cpc	r15, r1
    3018:	31 f4       	brne	.+12     	; 0x3026 <_Z14newton_raphsonv+0x14a>
					{
						where+=12;
    301a:	8c e0       	ldi	r24, 0x0C	; 12
    301c:	88 0e       	add	r8, r24
    301e:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    3020:	1b aa       	std	Y+51, r1	; 0x33
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    3022:	e1 2c       	mov	r14, r1
    3024:	f1 2c       	mov	r15, r1
    3026:	9f ef       	ldi	r25, 0xFF	; 255
    3028:	e4 e3       	ldi	r30, 0x34	; 52
    302a:	fc e0       	ldi	r31, 0x0C	; 12
    302c:	91 50       	subi	r25, 0x01	; 1
    302e:	e0 40       	sbci	r30, 0x00	; 0
    3030:	f0 40       	sbci	r31, 0x00	; 0
    3032:	e1 f7       	brne	.-8      	; 0x302c <_Z14newton_raphsonv+0x150>
    3034:	00 c0       	rjmp	.+0      	; 0x3036 <_Z14newton_raphsonv+0x15a>
    3036:	00 00       	nop
    3038:	66 c0       	rjmp	.+204    	; 0x3106 <_Z14newton_raphsonv+0x22a>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    303a:	89 b3       	in	r24, 0x19	; 25
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	00 2e       	mov	r0, r16
    3040:	02 c0       	rjmp	.+4      	; 0x3046 <_Z14newton_raphsonv+0x16a>
    3042:	95 95       	asr	r25
    3044:	87 95       	ror	r24
    3046:	0a 94       	dec	r0
    3048:	e2 f7       	brpl	.-8      	; 0x3042 <_Z14newton_raphsonv+0x166>
    304a:	80 ff       	sbrs	r24, 0
    304c:	5c c0       	rjmp	.+184    	; 0x3106 <_Z14newton_raphsonv+0x22a>
				{
					if(mat2[r][c-4][0]=='<')
    304e:	f5 01       	movw	r30, r10
    3050:	80 81       	ld	r24, Z
    3052:	8c 33       	cpi	r24, 0x3C	; 60
    3054:	49 f5       	brne	.+82     	; 0x30a8 <_Z14newton_raphsonv+0x1cc>
					{
						if(len==0){
    3056:	e1 14       	cp	r14, r1
    3058:	f1 04       	cpc	r15, r1
    305a:	51 f4       	brne	.+20     	; 0x3070 <_Z14newton_raphsonv+0x194>
    305c:	ff ef       	ldi	r31, 0xFF	; 255
    305e:	24 e3       	ldi	r18, 0x34	; 52
    3060:	8c e0       	ldi	r24, 0x0C	; 12
    3062:	f1 50       	subi	r31, 0x01	; 1
    3064:	20 40       	sbci	r18, 0x00	; 0
    3066:	80 40       	sbci	r24, 0x00	; 0
    3068:	e1 f7       	brne	.-8      	; 0x3062 <_Z14newton_raphsonv+0x186>
    306a:	00 c0       	rjmp	.+0      	; 0x306c <_Z14newton_raphsonv+0x190>
    306c:	00 00       	nop
    306e:	4b c0       	rjmp	.+150    	; 0x3106 <_Z14newton_raphsonv+0x22a>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    3070:	91 e0       	ldi	r25, 0x01	; 1
    3072:	e9 1a       	sub	r14, r25
    3074:	f1 08       	sbc	r15, r1
    3076:	f2 01       	movw	r30, r4
    3078:	ee 0d       	add	r30, r14
    307a:	ff 1d       	adc	r31, r15
    307c:	61 96       	adiw	r28, 0x11	; 17
    307e:	ff af       	std	Y+63, r31	; 0x3f
    3080:	ee af       	std	Y+62, r30	; 0x3e
    3082:	61 97       	sbiw	r28, 0x11	; 17
    3084:	20 e2       	ldi	r18, 0x20	; 32
    3086:	20 83       	st	Z, r18
						DisplayText(1,where,s);
    3088:	2e 96       	adiw	r28, 0x0e	; 14
    308a:	4f ad       	ldd	r20, Y+63	; 0x3f
    308c:	2e 97       	sbiw	r28, 0x0e	; 14
    308e:	2f 96       	adiw	r28, 0x0f	; 15
    3090:	5f ad       	ldd	r21, Y+63	; 0x3f
    3092:	2f 97       	sbiw	r28, 0x0f	; 15
    3094:	68 2d       	mov	r22, r8
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
						len--;
						s[len]=0;
    309c:	61 96       	adiw	r28, 0x11	; 17
    309e:	ee ad       	ldd	r30, Y+62	; 0x3e
    30a0:	ff ad       	ldd	r31, Y+63	; 0x3f
    30a2:	61 97       	sbiw	r28, 0x11	; 17
    30a4:	10 82       	st	Z, r1
    30a6:	12 c0       	rjmp	.+36     	; 0x30cc <_Z14newton_raphsonv+0x1f0>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    30a8:	a5 01       	movw	r20, r10
    30aa:	b7 01       	movw	r22, r14
    30ac:	2e 96       	adiw	r28, 0x0e	; 14
    30ae:	8f ad       	ldd	r24, Y+63	; 0x3f
    30b0:	2e 97       	sbiw	r28, 0x0e	; 14
    30b2:	2f 96       	adiw	r28, 0x0f	; 15
    30b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    30b6:	2f 97       	sbiw	r28, 0x0f	; 15
    30b8:	0e 94 33 08 	call	0x1066	; 0x1066 <_Z6appendPciS_>
						len = strlen(s);
    30bc:	f2 01       	movw	r30, r4
    30be:	01 90       	ld	r0, Z+
    30c0:	00 20       	and	r0, r0
    30c2:	e9 f7       	brne	.-6      	; 0x30be <_Z14newton_raphsonv+0x1e2>
    30c4:	31 97       	sbiw	r30, 0x01	; 1
    30c6:	7f 01       	movw	r14, r30
    30c8:	e4 18       	sub	r14, r4
    30ca:	f5 08       	sbc	r15, r5
					}
					DisplayText(1,where,s);
    30cc:	2e 96       	adiw	r28, 0x0e	; 14
    30ce:	4f ad       	ldd	r20, Y+63	; 0x3f
    30d0:	2e 97       	sbiw	r28, 0x0e	; 14
    30d2:	2f 96       	adiw	r28, 0x0f	; 15
    30d4:	5f ad       	ldd	r21, Y+63	; 0x3f
    30d6:	2f 97       	sbiw	r28, 0x0f	; 15
    30d8:	68 2d       	mov	r22, r8
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
					if(len==20)
    30e0:	f4 e1       	ldi	r31, 0x14	; 20
    30e2:	ef 16       	cp	r14, r31
    30e4:	f1 04       	cpc	r15, r1
    30e6:	31 f4       	brne	.+12     	; 0x30f4 <_Z14newton_raphsonv+0x218>
					{
						where+=12;
    30e8:	2c e0       	ldi	r18, 0x0C	; 12
    30ea:	82 0e       	add	r8, r18
    30ec:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    30ee:	1b aa       	std	Y+51, r1	; 0x33
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    30f0:	e1 2c       	mov	r14, r1
    30f2:	f1 2c       	mov	r15, r1
    30f4:	8f ef       	ldi	r24, 0xFF	; 255
    30f6:	94 e3       	ldi	r25, 0x34	; 52
    30f8:	ec e0       	ldi	r30, 0x0C	; 12
    30fa:	81 50       	subi	r24, 0x01	; 1
    30fc:	90 40       	sbci	r25, 0x00	; 0
    30fe:	e0 40       	sbci	r30, 0x00	; 0
    3100:	e1 f7       	brne	.-8      	; 0x30fa <_Z14newton_raphsonv+0x21e>
    3102:	00 c0       	rjmp	.+0      	; 0x3104 <_Z14newton_raphsonv+0x228>
    3104:	00 00       	nop
		bool done = 0;
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    3106:	0f 5f       	subi	r16, 0xFF	; 255
    3108:	1f 4f       	sbci	r17, 0xFF	; 255
    310a:	f8 e1       	ldi	r31, 0x18	; 24
    310c:	af 0e       	add	r10, r31
    310e:	b1 1c       	adc	r11, r1
    3110:	24 e0       	ldi	r18, 0x04	; 4
    3112:	c2 0e       	add	r12, r18
    3114:	d1 1c       	adc	r13, r1
    3116:	04 30       	cpi	r16, 0x04	; 4
    3118:	11 05       	cpc	r17, r1
    311a:	09 f0       	breq	.+2      	; 0x311e <_Z14newton_raphsonv+0x242>
    311c:	41 cf       	rjmp	.-382    	; 0x2fa0 <_Z14newton_raphsonv+0xc4>
    311e:	8f e1       	ldi	r24, 0x1F	; 31
    3120:	9e e4       	ldi	r25, 0x4E	; 78
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <_Z14newton_raphsonv+0x246>
    3126:	00 c0       	rjmp	.+0      	; 0x3128 <_Z14newton_raphsonv+0x24c>
    3128:	00 00       	nop
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    312a:	9f ef       	ldi	r25, 0xFF	; 255
    312c:	69 1a       	sub	r6, r25
    312e:	79 0a       	sbc	r7, r25
    3130:	e6 e0       	ldi	r30, 0x06	; 6
    3132:	2e 0e       	add	r2, r30
    3134:	31 1c       	adc	r3, r1
    3136:	f8 e0       	ldi	r31, 0x08	; 8
    3138:	6f 16       	cp	r6, r31
    313a:	71 04       	cpc	r7, r1
    313c:	09 f0       	breq	.+2      	; 0x3140 <_Z14newton_raphsonv+0x264>
    313e:	1f cf       	rjmp	.-450    	; 0x2f7e <_Z14newton_raphsonv+0xa2>
    3140:	14 cf       	rjmp	.-472    	; 0x2f6a <_Z14newton_raphsonv+0x8e>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    3142:	44 e0       	ldi	r20, 0x04	; 4
    3144:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB=1<<c;
    3146:	cb 01       	movw	r24, r22
    3148:	04 2e       	mov	r0, r20
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <_Z14newton_raphsonv+0x274>
    314c:	88 0f       	add	r24, r24
    314e:	99 1f       	adc	r25, r25
    3150:	0a 94       	dec	r0
    3152:	e2 f7       	brpl	.-8      	; 0x314c <_Z14newton_raphsonv+0x270>
    3154:	88 bb       	out	0x18, r24	; 24
    3156:	fa 01       	movw	r30, r20
    3158:	e4 54       	subi	r30, 0x44	; 68
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
			{
				if(PINB&(1<<r))
    3160:	86 b3       	in	r24, 0x16	; 22
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	02 2e       	mov	r0, r18
    3166:	02 c0       	rjmp	.+4      	; 0x316c <_Z14newton_raphsonv+0x290>
    3168:	95 95       	asr	r25
    316a:	87 95       	ror	r24
    316c:	0a 94       	dec	r0
    316e:	e2 f7       	brpl	.-8      	; 0x3168 <_Z14newton_raphsonv+0x28c>
    3170:	80 ff       	sbrs	r24, 0
    3172:	03 c0       	rjmp	.+6      	; 0x317a <_Z14newton_raphsonv+0x29e>
				{
					if(mat[r][c-4]=='=')
    3174:	80 81       	ld	r24, Z
    3176:	8d 33       	cpi	r24, 0x3D	; 61
    3178:	61 f0       	breq	.+24     	; 0x3192 <_Z14newton_raphsonv+0x2b6>
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    317a:	2f 5f       	subi	r18, 0xFF	; 255
    317c:	3f 4f       	sbci	r19, 0xFF	; 255
    317e:	34 96       	adiw	r30, 0x04	; 4
    3180:	24 30       	cpi	r18, 0x04	; 4
    3182:	31 05       	cpc	r19, r1
    3184:	69 f7       	brne	.-38     	; 0x3160 <_Z14newton_raphsonv+0x284>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    3186:	4f 5f       	subi	r20, 0xFF	; 255
    3188:	5f 4f       	sbci	r21, 0xFF	; 255
    318a:	48 30       	cpi	r20, 0x08	; 8
    318c:	51 05       	cpc	r21, r1
    318e:	d9 f6       	brne	.-74     	; 0x3146 <_Z14newton_raphsonv+0x26a>
    3190:	d8 cf       	rjmp	.-80     	; 0x3142 <_Z14newton_raphsonv+0x266>
    3192:	2f ef       	ldi	r18, 0xFF	; 255
    3194:	84 e3       	ldi	r24, 0x34	; 52
    3196:	9c e0       	ldi	r25, 0x0C	; 12
    3198:	21 50       	subi	r18, 0x01	; 1
    319a:	80 40       	sbci	r24, 0x00	; 0
    319c:	90 40       	sbci	r25, 0x00	; 0
    319e:	e1 f7       	brne	.-8      	; 0x3198 <_Z14newton_raphsonv+0x2bc>
    31a0:	00 c0       	rjmp	.+0      	; 0x31a2 <_Z14newton_raphsonv+0x2c6>
    31a2:	00 00       	nop
		{
			break;
		}
	}
	_delay_ms(500);
    31a4:	40 c0       	rjmp	.+128    	; 0x3226 <_Z14newton_raphsonv+0x34a>
    31a6:	ef e1       	ldi	r30, 0x1F	; 31
    31a8:	fe e4       	ldi	r31, 0x4E	; 78
    31aa:	31 97       	sbiw	r30, 0x01	; 1
    31ac:	f1 f7       	brne	.-4      	; 0x31aa <_Z14newton_raphsonv+0x2ce>
    31ae:	00 c0       	rjmp	.+0      	; 0x31b0 <_Z14newton_raphsonv+0x2d4>
    31b0:	00 00       	nop
			break;
		}
		if(done)
		break;
	}
	LCD_Clear();
    31b2:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
	double l;
	show_text(text2,1);
    31b6:	61 e0       	ldi	r22, 0x01	; 1
    31b8:	70 e0       	ldi	r23, 0x00	; 0
    31ba:	ce 01       	movw	r24, r28
    31bc:	46 96       	adiw	r24, 0x16	; 22
    31be:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
	l = double_num_input(24);
    31c2:	88 e1       	ldi	r24, 0x18	; 24
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	0e 94 83 09 	call	0x1306	; 0x1306 <_Z16double_num_inputi>
    31ca:	6b 01       	movw	r12, r22
    31cc:	7c 01       	movw	r14, r24
	LCD_Clear();
    31ce:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
	double ans = newton(s,l);
    31d2:	b7 01       	movw	r22, r14
    31d4:	a6 01       	movw	r20, r12
    31d6:	ce 01       	movw	r24, r28
    31d8:	c3 96       	adiw	r24, 0x33	; 51
    31da:	0e 94 20 17 	call	0x2e40	; 0x2e40 <_Z6newtonPcd>
    31de:	6b 01       	movw	r12, r22
    31e0:	7c 01       	movw	r14, r24
	
	//printing ans
	char text[] = "Ans =";
    31e2:	86 e0       	ldi	r24, 0x06	; 6
    31e4:	ee ec       	ldi	r30, 0xCE	; 206
    31e6:	f1 e0       	ldi	r31, 0x01	; 1
    31e8:	de 01       	movw	r26, r28
    31ea:	a9 5b       	subi	r26, 0xB9	; 185
    31ec:	bf 4f       	sbci	r27, 0xFF	; 255
    31ee:	01 90       	ld	r0, Z+
    31f0:	0d 92       	st	X+, r0
    31f2:	8a 95       	dec	r24
    31f4:	e1 f7       	brne	.-8      	; 0x31ee <_Z14newton_raphsonv+0x312>
	show_text(text,1);
    31f6:	61 e0       	ldi	r22, 0x01	; 1
    31f8:	70 e0       	ldi	r23, 0x00	; 0
    31fa:	ce 01       	movw	r24, r28
    31fc:	89 5b       	subi	r24, 0xB9	; 185
    31fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3200:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
	dtostrf(ans,1,2,s);
    3204:	8e 01       	movw	r16, r28
    3206:	0d 5c       	subi	r16, 0xCD	; 205
    3208:	1f 4f       	sbci	r17, 0xFF	; 255
    320a:	22 e0       	ldi	r18, 0x02	; 2
    320c:	41 e0       	ldi	r20, 0x01	; 1
    320e:	c7 01       	movw	r24, r14
    3210:	b6 01       	movw	r22, r12
    3212:	0e 94 a0 20 	call	0x4140	; 0x4140 <dtostrf>
	show_text(s,12);
    3216:	6c e0       	ldi	r22, 0x0C	; 12
    3218:	70 e0       	ldi	r23, 0x00	; 0
    321a:	c8 01       	movw	r24, r16
    321c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z9show_textPci>
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    3220:	61 e0       	ldi	r22, 0x01	; 1
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	8e cf       	rjmp	.-228    	; 0x3142 <_Z14newton_raphsonv+0x266>
		{
			break;
		}
	}
	_delay_ms(500);
    3226:	c0 5b       	subi	r28, 0xB0	; 176
    3228:	df 4f       	sbci	r29, 0xFF	; 255
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	df 91       	pop	r29
    3236:	cf 91       	pop	r28
    3238:	1f 91       	pop	r17
    323a:	0f 91       	pop	r16
    323c:	ff 90       	pop	r15
    323e:	ef 90       	pop	r14
    3240:	df 90       	pop	r13
    3242:	cf 90       	pop	r12
    3244:	bf 90       	pop	r11
    3246:	af 90       	pop	r10
    3248:	9f 90       	pop	r9
    324a:	8f 90       	pop	r8
    324c:	7f 90       	pop	r7
    324e:	6f 90       	pop	r6
    3250:	5f 90       	pop	r5
    3252:	4f 90       	pop	r4
    3254:	3f 90       	pop	r3
    3256:	2f 90       	pop	r2
    3258:	08 95       	ret

0000325a <_Z10calculatorv>:
void calculator()
{
    325a:	2f 92       	push	r2
    325c:	3f 92       	push	r3
    325e:	4f 92       	push	r4
    3260:	5f 92       	push	r5
    3262:	6f 92       	push	r6
    3264:	7f 92       	push	r7
    3266:	8f 92       	push	r8
    3268:	9f 92       	push	r9
    326a:	af 92       	push	r10
    326c:	bf 92       	push	r11
    326e:	cf 92       	push	r12
    3270:	df 92       	push	r13
    3272:	ef 92       	push	r14
    3274:	ff 92       	push	r15
    3276:	0f 93       	push	r16
    3278:	1f 93       	push	r17
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
    3282:	68 97       	sbiw	r28, 0x18	; 24
    3284:	0f b6       	in	r0, 0x3f	; 63
    3286:	f8 94       	cli
    3288:	de bf       	out	0x3e, r29	; 62
    328a:	0f be       	out	0x3f, r0	; 63
    328c:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    328e:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
	char s[20];
	int len=0;
	int where=1;
    3292:	88 24       	eor	r8, r8
    3294:	83 94       	inc	r8
    3296:	91 2c       	mov	r9, r1
void calculator()
{
	LCD_Clear();
	char s[20];
	int len=0;
    3298:	e1 2c       	mov	r14, r1
    329a:	f1 2c       	mov	r15, r1
					else
					{
						append(s , len , mat2[r][c-4]);
						len = strlen(s);
					}
					DisplayText(1,where,s);
    329c:	9e 01       	movw	r18, r28
    329e:	2f 5f       	subi	r18, 0xFF	; 255
    32a0:	3f 4f       	sbci	r19, 0xFF	; 255
    32a2:	29 01       	movw	r4, r18
    32a4:	2d 8b       	std	Y+21, r18	; 0x15
    32a6:	5e 8a       	std	Y+22, r5	; 0x16
    32a8:	0f 2e       	mov	r0, r31
    32aa:	f0 e6       	ldi	r31, 0x60	; 96
    32ac:	2f 2e       	mov	r2, r31
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	3f 2e       	mov	r3, r31
    32b2:	f0 2d       	mov	r31, r0
	char s[20];
	int len=0;
	int where=1;
	while (1)
	{
		for(int c=4;c<8;c++)
    32b4:	68 94       	set
    32b6:	66 24       	eor	r6, r6
    32b8:	62 f8       	bld	r6, 2
    32ba:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	06 2c       	mov	r0, r6
    32c2:	02 c0       	rjmp	.+4      	; 0x32c8 <_Z10calculatorv+0x6e>
    32c4:	88 0f       	add	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	0a 94       	dec	r0
    32ca:	e2 f7       	brpl	.-8      	; 0x32c4 <_Z10calculatorv+0x6a>
    32cc:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    32ce:	8b bb       	out	0x1b, r24	; 27
    32d0:	c3 01       	movw	r24, r6
    32d2:	84 54       	subi	r24, 0x44	; 68
    32d4:	9f 4f       	sbci	r25, 0xFF	; 255
    32d6:	6c 01       	movw	r12, r24
    32d8:	51 01       	movw	r10, r2
			for(int r=0;r<4;r++)
    32da:	00 e0       	ldi	r16, 0x00	; 0
    32dc:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    32de:	86 b3       	in	r24, 0x16	; 22
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	00 2e       	mov	r0, r16
    32e4:	02 c0       	rjmp	.+4      	; 0x32ea <_Z10calculatorv+0x90>
    32e6:	95 95       	asr	r25
    32e8:	87 95       	ror	r24
    32ea:	0a 94       	dec	r0
    32ec:	e2 f7       	brpl	.-8      	; 0x32e6 <_Z10calculatorv+0x8c>
    32ee:	80 ff       	sbrs	r24, 0
    32f0:	6b c0       	rjmp	.+214    	; 0x33c8 <_Z10calculatorv+0x16e>
				{
					if(mat[r][c-4]=='C')
    32f2:	f6 01       	movw	r30, r12
    32f4:	80 81       	ld	r24, Z
    32f6:	83 34       	cpi	r24, 0x43	; 67
    32f8:	79 f4       	brne	.+30     	; 0x3318 <_Z10calculatorv+0xbe>
					{
						len=0;
						s[0]=0;
    32fa:	19 82       	std	Y+1, r1	; 0x01
						where=1;
						LCD_Clear();
    32fc:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    3300:	4d 89       	ldd	r20, Y+21	; 0x15
    3302:	5e 89       	ldd	r21, Y+22	; 0x16
    3304:	61 e0       	ldi	r22, 0x01	; 1
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    330c:	88 24       	eor	r8, r8
    330e:	83 94       	inc	r8
    3310:	91 2c       	mov	r9, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    3312:	e1 2c       	mov	r14, r1
    3314:	f1 2c       	mov	r15, r1
    3316:	4e c0       	rjmp	.+156    	; 0x33b4 <_Z10calculatorv+0x15a>
						where=1;
						LCD_Clear();
					}
					else
					{	
						if(mat[r][c-4]=='=')
    3318:	8d 33       	cpi	r24, 0x3D	; 61
    331a:	89 f5       	brne	.+98     	; 0x337e <_Z10calculatorv+0x124>
						{
							double ans=ob.eval_exp(s);
    331c:	be 01       	movw	r22, r28
    331e:	6f 5f       	subi	r22, 0xFF	; 255
    3320:	7f 4f       	sbci	r23, 0xFF	; 255
    3322:	8e ea       	ldi	r24, 0xAE	; 174
    3324:	92 e0       	ldi	r25, 0x02	; 2
    3326:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN6parser8eval_expEPc>
    332a:	ff ef       	ldi	r31, 0xFF	; 255
    332c:	20 e7       	ldi	r18, 0x70	; 112
    332e:	32 e0       	ldi	r19, 0x02	; 2
    3330:	f1 50       	subi	r31, 0x01	; 1
    3332:	20 40       	sbci	r18, 0x00	; 0
    3334:	30 40       	sbci	r19, 0x00	; 0
    3336:	e1 f7       	brne	.-8      	; 0x3330 <_Z10calculatorv+0xd6>
    3338:	00 c0       	rjmp	.+0      	; 0x333a <_Z10calculatorv+0xe0>
    333a:	00 00       	nop
							_delay_ms(100);
							dtostrf(ans,1,2,s);
    333c:	8e 01       	movw	r16, r28
    333e:	0f 5f       	subi	r16, 0xFF	; 255
    3340:	1f 4f       	sbci	r17, 0xFF	; 255
    3342:	22 e0       	ldi	r18, 0x02	; 2
    3344:	41 e0       	ldi	r20, 0x01	; 1
    3346:	0e 94 a0 20 	call	0x4140	; 0x4140 <dtostrf>
    334a:	4f ef       	ldi	r20, 0xFF	; 255
    334c:	80 e7       	ldi	r24, 0x70	; 112
    334e:	92 e0       	ldi	r25, 0x02	; 2
    3350:	41 50       	subi	r20, 0x01	; 1
    3352:	80 40       	sbci	r24, 0x00	; 0
    3354:	90 40       	sbci	r25, 0x00	; 0
    3356:	e1 f7       	brne	.-8      	; 0x3350 <_Z10calculatorv+0xf6>
    3358:	00 c0       	rjmp	.+0      	; 0x335a <_Z10calculatorv+0x100>
    335a:	00 00       	nop
							_delay_ms(100);
							LCD_Clear();
    335c:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
    3360:	ef ef       	ldi	r30, 0xFF	; 255
    3362:	f0 e7       	ldi	r31, 0x70	; 112
    3364:	22 e0       	ldi	r18, 0x02	; 2
    3366:	e1 50       	subi	r30, 0x01	; 1
    3368:	f0 40       	sbci	r31, 0x00	; 0
    336a:	20 40       	sbci	r18, 0x00	; 0
    336c:	e1 f7       	brne	.-8      	; 0x3366 <_Z10calculatorv+0x10c>
    336e:	00 c0       	rjmp	.+0      	; 0x3370 <_Z10calculatorv+0x116>
    3370:	00 00       	nop
							_delay_ms(100);
							DisplayText(1,1,s);
    3372:	a8 01       	movw	r20, r16
    3374:	61 e0       	ldi	r22, 0x01	; 1
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
							return;
    337c:	9a c0       	rjmp	.+308    	; 0x34b2 <_Z10calculatorv+0x258>
						}
						s[len]=mat[r][c-4];
    337e:	f2 01       	movw	r30, r4
    3380:	ee 0d       	add	r30, r14
    3382:	ff 1d       	adc	r31, r15
    3384:	80 83       	st	Z, r24
						len+=1;
    3386:	3f ef       	ldi	r19, 0xFF	; 255
    3388:	e3 1a       	sub	r14, r19
    338a:	f3 0a       	sbc	r15, r19
						s[len]=0;
    338c:	f2 01       	movw	r30, r4
    338e:	ee 0d       	add	r30, r14
    3390:	ff 1d       	adc	r31, r15
    3392:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    3394:	4d 89       	ldd	r20, Y+21	; 0x15
    3396:	5e 89       	ldd	r21, Y+22	; 0x16
    3398:	68 2d       	mov	r22, r8
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
					if(len==20)
    33a0:	44 e1       	ldi	r20, 0x14	; 20
    33a2:	e4 16       	cp	r14, r20
    33a4:	f1 04       	cpc	r15, r1
    33a6:	31 f4       	brne	.+12     	; 0x33b4 <_Z10calculatorv+0x15a>
					{
						where+=12;
    33a8:	8c e0       	ldi	r24, 0x0C	; 12
    33aa:	88 0e       	add	r8, r24
    33ac:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    33ae:	19 82       	std	Y+1, r1	; 0x01
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    33b0:	e1 2c       	mov	r14, r1
    33b2:	f1 2c       	mov	r15, r1
    33b4:	9f ef       	ldi	r25, 0xFF	; 255
    33b6:	e4 e3       	ldi	r30, 0x34	; 52
    33b8:	fc e0       	ldi	r31, 0x0C	; 12
    33ba:	91 50       	subi	r25, 0x01	; 1
    33bc:	e0 40       	sbci	r30, 0x00	; 0
    33be:	f0 40       	sbci	r31, 0x00	; 0
    33c0:	e1 f7       	brne	.-8      	; 0x33ba <_Z10calculatorv+0x160>
    33c2:	00 c0       	rjmp	.+0      	; 0x33c4 <_Z10calculatorv+0x16a>
    33c4:	00 00       	nop
    33c6:	57 c0       	rjmp	.+174    	; 0x3476 <_Z10calculatorv+0x21c>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    33c8:	89 b3       	in	r24, 0x19	; 25
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	00 2e       	mov	r0, r16
    33ce:	02 c0       	rjmp	.+4      	; 0x33d4 <_Z10calculatorv+0x17a>
    33d0:	95 95       	asr	r25
    33d2:	87 95       	ror	r24
    33d4:	0a 94       	dec	r0
    33d6:	e2 f7       	brpl	.-8      	; 0x33d0 <_Z10calculatorv+0x176>
    33d8:	80 ff       	sbrs	r24, 0
    33da:	4d c0       	rjmp	.+154    	; 0x3476 <_Z10calculatorv+0x21c>
				{
					if(mat2[r][c-4][0]=='<')
    33dc:	f5 01       	movw	r30, r10
    33de:	80 81       	ld	r24, Z
    33e0:	8c 33       	cpi	r24, 0x3C	; 60
    33e2:	11 f5       	brne	.+68     	; 0x3428 <_Z10calculatorv+0x1ce>
					{
						if(len==0){
    33e4:	e1 14       	cp	r14, r1
    33e6:	f1 04       	cpc	r15, r1
    33e8:	51 f4       	brne	.+20     	; 0x33fe <_Z10calculatorv+0x1a4>
    33ea:	ff ef       	ldi	r31, 0xFF	; 255
    33ec:	24 e3       	ldi	r18, 0x34	; 52
    33ee:	3c e0       	ldi	r19, 0x0C	; 12
    33f0:	f1 50       	subi	r31, 0x01	; 1
    33f2:	20 40       	sbci	r18, 0x00	; 0
    33f4:	30 40       	sbci	r19, 0x00	; 0
    33f6:	e1 f7       	brne	.-8      	; 0x33f0 <_Z10calculatorv+0x196>
    33f8:	00 c0       	rjmp	.+0      	; 0x33fa <_Z10calculatorv+0x1a0>
    33fa:	00 00       	nop
    33fc:	3c c0       	rjmp	.+120    	; 0x3476 <_Z10calculatorv+0x21c>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    33fe:	41 e0       	ldi	r20, 0x01	; 1
    3400:	e4 1a       	sub	r14, r20
    3402:	f1 08       	sbc	r15, r1
    3404:	c2 01       	movw	r24, r4
    3406:	8e 0d       	add	r24, r14
    3408:	9f 1d       	adc	r25, r15
    340a:	98 8f       	std	Y+24, r25	; 0x18
    340c:	8f 8b       	std	Y+23, r24	; 0x17
    340e:	20 e2       	ldi	r18, 0x20	; 32
    3410:	fc 01       	movw	r30, r24
    3412:	20 83       	st	Z, r18
						DisplayText(1,where,s);
    3414:	4d 89       	ldd	r20, Y+21	; 0x15
    3416:	5e 89       	ldd	r21, Y+22	; 0x16
    3418:	68 2d       	mov	r22, r8
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
						len--;
						s[len]=0;
    3420:	ef 89       	ldd	r30, Y+23	; 0x17
    3422:	f8 8d       	ldd	r31, Y+24	; 0x18
    3424:	10 82       	st	Z, r1
    3426:	0e c0       	rjmp	.+28     	; 0x3444 <_Z10calculatorv+0x1ea>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    3428:	a5 01       	movw	r20, r10
    342a:	b7 01       	movw	r22, r14
    342c:	8d 89       	ldd	r24, Y+21	; 0x15
    342e:	9e 89       	ldd	r25, Y+22	; 0x16
    3430:	0e 94 33 08 	call	0x1066	; 0x1066 <_Z6appendPciS_>
						len = strlen(s);
    3434:	f2 01       	movw	r30, r4
    3436:	01 90       	ld	r0, Z+
    3438:	00 20       	and	r0, r0
    343a:	e9 f7       	brne	.-6      	; 0x3436 <_Z10calculatorv+0x1dc>
    343c:	31 97       	sbiw	r30, 0x01	; 1
    343e:	7f 01       	movw	r14, r30
    3440:	e4 18       	sub	r14, r4
    3442:	f5 08       	sbc	r15, r5
					}
					DisplayText(1,where,s);
    3444:	4d 89       	ldd	r20, Y+21	; 0x15
    3446:	5e 89       	ldd	r21, Y+22	; 0x16
    3448:	68 2d       	mov	r22, r8
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
					if(len==20)
    3450:	f4 e1       	ldi	r31, 0x14	; 20
    3452:	ef 16       	cp	r14, r31
    3454:	f1 04       	cpc	r15, r1
    3456:	31 f4       	brne	.+12     	; 0x3464 <_Z10calculatorv+0x20a>
					{
						where+=12;
    3458:	2c e0       	ldi	r18, 0x0C	; 12
    345a:	82 0e       	add	r8, r18
    345c:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    345e:	19 82       	std	Y+1, r1	; 0x01
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    3460:	e1 2c       	mov	r14, r1
    3462:	f1 2c       	mov	r15, r1
    3464:	3f ef       	ldi	r19, 0xFF	; 255
    3466:	44 e3       	ldi	r20, 0x34	; 52
    3468:	8c e0       	ldi	r24, 0x0C	; 12
    346a:	31 50       	subi	r19, 0x01	; 1
    346c:	40 40       	sbci	r20, 0x00	; 0
    346e:	80 40       	sbci	r24, 0x00	; 0
    3470:	e1 f7       	brne	.-8      	; 0x346a <_Z10calculatorv+0x210>
    3472:	00 c0       	rjmp	.+0      	; 0x3474 <_Z10calculatorv+0x21a>
    3474:	00 00       	nop
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    3476:	0f 5f       	subi	r16, 0xFF	; 255
    3478:	1f 4f       	sbci	r17, 0xFF	; 255
    347a:	98 e1       	ldi	r25, 0x18	; 24
    347c:	a9 0e       	add	r10, r25
    347e:	b1 1c       	adc	r11, r1
    3480:	e4 e0       	ldi	r30, 0x04	; 4
    3482:	ce 0e       	add	r12, r30
    3484:	d1 1c       	adc	r13, r1
    3486:	04 30       	cpi	r16, 0x04	; 4
    3488:	11 05       	cpc	r17, r1
    348a:	09 f0       	breq	.+2      	; 0x348e <_Z10calculatorv+0x234>
    348c:	28 cf       	rjmp	.-432    	; 0x32de <_Z10calculatorv+0x84>
    348e:	8f e1       	ldi	r24, 0x1F	; 31
    3490:	9e e4       	ldi	r25, 0x4E	; 78
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	f1 f7       	brne	.-4      	; 0x3492 <_Z10calculatorv+0x238>
    3496:	00 c0       	rjmp	.+0      	; 0x3498 <_Z10calculatorv+0x23e>
    3498:	00 00       	nop
	char s[20];
	int len=0;
	int where=1;
	while (1)
	{
		for(int c=4;c<8;c++)
    349a:	9f ef       	ldi	r25, 0xFF	; 255
    349c:	69 1a       	sub	r6, r25
    349e:	79 0a       	sbc	r7, r25
    34a0:	e6 e0       	ldi	r30, 0x06	; 6
    34a2:	2e 0e       	add	r2, r30
    34a4:	31 1c       	adc	r3, r1
    34a6:	f8 e0       	ldi	r31, 0x08	; 8
    34a8:	6f 16       	cp	r6, r31
    34aa:	71 04       	cpc	r7, r1
    34ac:	09 f0       	breq	.+2      	; 0x34b0 <_Z10calculatorv+0x256>
    34ae:	06 cf       	rjmp	.-500    	; 0x32bc <_Z10calculatorv+0x62>
    34b0:	fb ce       	rjmp	.-522    	; 0x32a8 <_Z10calculatorv+0x4e>
			}
			
			_delay_ms(10);
		}
	}
    34b2:	68 96       	adiw	r28, 0x18	; 24
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	cd bf       	out	0x3d, r28	; 61
    34be:	df 91       	pop	r29
    34c0:	cf 91       	pop	r28
    34c2:	1f 91       	pop	r17
    34c4:	0f 91       	pop	r16
    34c6:	ff 90       	pop	r15
    34c8:	ef 90       	pop	r14
    34ca:	df 90       	pop	r13
    34cc:	cf 90       	pop	r12
    34ce:	bf 90       	pop	r11
    34d0:	af 90       	pop	r10
    34d2:	9f 90       	pop	r9
    34d4:	8f 90       	pop	r8
    34d6:	7f 90       	pop	r7
    34d8:	6f 90       	pop	r6
    34da:	5f 90       	pop	r5
    34dc:	4f 90       	pop	r4
    34de:	3f 90       	pop	r3
    34e0:	2f 90       	pop	r2
    34e2:	08 95       	ret

000034e4 <_Z12initial_pagev>:
#include "Newton.h"
#include "calculator.h"

void initial_page()
{
	DisplayText(1,1,"1.Calculator");
    34e4:	4e e1       	ldi	r20, 0x1E	; 30
    34e6:	52 e0       	ldi	r21, 0x02	; 2
    34e8:	61 e0       	ldi	r22, 0x01	; 1
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
	DisplayText(1,12,"2.Gauss Elimination");
    34f0:	4b e2       	ldi	r20, 0x2B	; 43
    34f2:	52 e0       	ldi	r21, 0x02	; 2
    34f4:	6c e0       	ldi	r22, 0x0C	; 12
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
	DisplayText(1,24,"3.Newton Raphson");
    34fc:	4f e3       	ldi	r20, 0x3F	; 63
    34fe:	52 e0       	ldi	r21, 0x02	; 2
    3500:	68 e1       	ldi	r22, 0x18	; 24
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
	DisplayText(1,36,"4.Integration");
    3508:	40 e5       	ldi	r20, 0x50	; 80
    350a:	52 e0       	ldi	r21, 0x02	; 2
    350c:	64 e2       	ldi	r22, 0x24	; 36
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
	DisplayText(1,48,"5.Graph Plot");
    3514:	4e e5       	ldi	r20, 0x5E	; 94
    3516:	52 e0       	ldi	r21, 0x02	; 2
    3518:	60 e3       	ldi	r22, 0x30	; 48
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	0e 94 12 04 	call	0x824	; 0x824 <_Z11DisplayTexthhPc>
    3520:	08 95       	ret

00003522 <_Z13mode_selectorv>:
}



char mode_selector()
{
    3522:	cf 93       	push	r28
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    3524:	a1 e0       	ldi	r26, 0x01	; 1
    3526:	b0 e0       	ldi	r27, 0x00	; 0

char mode_selector()
{
	while (1)
	{
		for(int c=4;c<8;c++)
    3528:	64 e0       	ldi	r22, 0x04	; 4
    352a:	70 e0       	ldi	r23, 0x00	; 0
		{
			PORTB=1<<c;
    352c:	cd 01       	movw	r24, r26
    352e:	06 2e       	mov	r0, r22
    3530:	02 c0       	rjmp	.+4      	; 0x3536 <_Z13mode_selectorv+0x14>
    3532:	88 0f       	add	r24, r24
    3534:	99 1f       	adc	r25, r25
    3536:	0a 94       	dec	r0
    3538:	e2 f7       	brpl	.-8      	; 0x3532 <_Z13mode_selectorv+0x10>
    353a:	88 bb       	out	0x18, r24	; 24
    353c:	cb 01       	movw	r24, r22
    353e:	04 97       	sbiw	r24, 0x04	; 4
    3540:	fc 01       	movw	r30, r24
    3542:	e0 54       	subi	r30, 0x40	; 64
    3544:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	c8 2f       	mov	r28, r24
    354c:	59 2f       	mov	r21, r25
			{
				if(PINB&(1<<r))
    354e:	86 b3       	in	r24, 0x16	; 22
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	02 2e       	mov	r0, r18
    3554:	02 c0       	rjmp	.+4      	; 0x355a <_Z13mode_selectorv+0x38>
    3556:	95 95       	asr	r25
    3558:	87 95       	ror	r24
    355a:	0a 94       	dec	r0
    355c:	e2 f7       	brpl	.-8      	; 0x3556 <_Z13mode_selectorv+0x34>
    355e:	80 ff       	sbrs	r24, 0
    3560:	23 c0       	rjmp	.+70     	; 0x35a8 <_Z13mode_selectorv+0x86>
    3562:	8c 2f       	mov	r24, r28
    3564:	95 2f       	mov	r25, r21
				{
					if(mat[r][c-4]>='1' && mat[r][c-4]<='5')
    3566:	40 81       	ld	r20, Z
    3568:	41 53       	subi	r20, 0x31	; 49
    356a:	45 30       	cpi	r20, 0x05	; 5
    356c:	a0 f4       	brcc	.+40     	; 0x3596 <_Z13mode_selectorv+0x74>
    356e:	4f ef       	ldi	r20, 0xFF	; 255
    3570:	54 e3       	ldi	r21, 0x34	; 52
    3572:	6c e0       	ldi	r22, 0x0C	; 12
    3574:	41 50       	subi	r20, 0x01	; 1
    3576:	50 40       	sbci	r21, 0x00	; 0
    3578:	60 40       	sbci	r22, 0x00	; 0
    357a:	e1 f7       	brne	.-8      	; 0x3574 <_Z13mode_selectorv+0x52>
    357c:	00 c0       	rjmp	.+0      	; 0x357e <_Z13mode_selectorv+0x5c>
    357e:	00 00       	nop
					{
						_delay_ms(500);
						return mat[r][c-4];
    3580:	22 0f       	add	r18, r18
    3582:	33 1f       	adc	r19, r19
    3584:	22 0f       	add	r18, r18
    3586:	33 1f       	adc	r19, r19
    3588:	20 54       	subi	r18, 0x40	; 64
    358a:	3f 4f       	sbci	r19, 0xFF	; 255
    358c:	f9 01       	movw	r30, r18
    358e:	e8 0f       	add	r30, r24
    3590:	f9 1f       	adc	r31, r25
    3592:	80 81       	ld	r24, Z
    3594:	1c c0       	rjmp	.+56     	; 0x35ce <_Z13mode_selectorv+0xac>
    3596:	8f ef       	ldi	r24, 0xFF	; 255
    3598:	94 e3       	ldi	r25, 0x34	; 52
    359a:	4c e0       	ldi	r20, 0x0C	; 12
    359c:	81 50       	subi	r24, 0x01	; 1
    359e:	90 40       	sbci	r25, 0x00	; 0
    35a0:	40 40       	sbci	r20, 0x00	; 0
    35a2:	e1 f7       	brne	.-8      	; 0x359c <_Z13mode_selectorv+0x7a>
    35a4:	00 c0       	rjmp	.+0      	; 0x35a6 <_Z13mode_selectorv+0x84>
    35a6:	00 00       	nop
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    35a8:	2f 5f       	subi	r18, 0xFF	; 255
    35aa:	3f 4f       	sbci	r19, 0xFF	; 255
    35ac:	34 96       	adiw	r30, 0x04	; 4
    35ae:	24 30       	cpi	r18, 0x04	; 4
    35b0:	31 05       	cpc	r19, r1
    35b2:	69 f6       	brne	.-102    	; 0x354e <_Z13mode_selectorv+0x2c>
    35b4:	8f e1       	ldi	r24, 0x1F	; 31
    35b6:	9e e4       	ldi	r25, 0x4E	; 78
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <_Z13mode_selectorv+0x96>
    35bc:	00 c0       	rjmp	.+0      	; 0x35be <_Z13mode_selectorv+0x9c>
    35be:	00 00       	nop

char mode_selector()
{
	while (1)
	{
		for(int c=4;c<8;c++)
    35c0:	6f 5f       	subi	r22, 0xFF	; 255
    35c2:	7f 4f       	sbci	r23, 0xFF	; 255
    35c4:	68 30       	cpi	r22, 0x08	; 8
    35c6:	71 05       	cpc	r23, r1
    35c8:	09 f0       	breq	.+2      	; 0x35cc <_Z13mode_selectorv+0xaa>
    35ca:	b0 cf       	rjmp	.-160    	; 0x352c <_Z13mode_selectorv+0xa>
    35cc:	ad cf       	rjmp	.-166    	; 0x3528 <_Z13mode_selectorv+0x6>
				}
			}
			_delay_ms(10);
		}
	}
}
    35ce:	cf 91       	pop	r28
    35d0:	08 95       	ret

000035d2 <main>:



int main(void)
{
	InitLCD();
    35d2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_Z7InitLCDv>
	
	DDRB=0xFF;
    35d6:	8f ef       	ldi	r24, 0xFF	; 255
    35d8:	87 bb       	out	0x17, r24	; 23
	DDRA=0xFF;
    35da:	8a bb       	out	0x1a, r24	; 26
		bool f=1;
		while (f)
		{
			for(int c=4;c<8&&f;c++)
			{
				PORTB=1<<c;
    35dc:	c1 e0       	ldi	r28, 0x01	; 1
    35de:	d0 e0       	ldi	r29, 0x00	; 0
				for(int r=0;r<4&&f;r++)
				{
					if(PINB&(1<<r))
					{
						if(mat[r][c-4]=='C')
    35e0:	ff 24       	eor	r15, r15
    35e2:	f3 94       	inc	r15
    35e4:	e1 2c       	mov	r14, r1
    35e6:	1f 2d       	mov	r17, r15
    35e8:	0e 2d       	mov	r16, r14
	
	DDRB=0xFF;
	DDRA=0xFF;
	
	while(true){
		LCD_Clear();
    35ea:	0e 94 14 03 	call	0x628	; 0x628 <_Z9LCD_Clearv>
		initial_page();
    35ee:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <_Z12initial_pagev>
		//take input
		char input = mode_selector();
    35f2:	0e 94 91 1a 	call	0x3522	; 0x3522 <_Z13mode_selectorv>
		if(input=='1')
    35f6:	81 33       	cpi	r24, 0x31	; 49
    35f8:	19 f4       	brne	.+6      	; 0x3600 <main+0x2e>
		{
			calculator();	
    35fa:	0e 94 2d 19 	call	0x325a	; 0x325a <_Z10calculatorv>
    35fe:	16 c0       	rjmp	.+44     	; 0x362c <main+0x5a>
		}
		else if(input=='2')
    3600:	82 33       	cpi	r24, 0x32	; 50
    3602:	19 f4       	brne	.+6      	; 0x360a <main+0x38>
		{
			gauss();
    3604:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <_Z5gaussv>
    3608:	11 c0       	rjmp	.+34     	; 0x362c <main+0x5a>
		}
		else if(input=='3')
    360a:	83 33       	cpi	r24, 0x33	; 51
    360c:	19 f4       	brne	.+6      	; 0x3614 <main+0x42>
		{
			newton_raphson();
    360e:	0e 94 6e 17 	call	0x2edc	; 0x2edc <_Z14newton_raphsonv>
    3612:	0c c0       	rjmp	.+24     	; 0x362c <main+0x5a>
		}
		else if(input=='4')
    3614:	84 33       	cpi	r24, 0x34	; 52
    3616:	19 f4       	brne	.+6      	; 0x361e <main+0x4c>
		{
			simpson();
    3618:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_Z7simpsonv>
    361c:	07 c0       	rjmp	.+14     	; 0x362c <main+0x5a>
		}
		else if(input=='5')
    361e:	85 33       	cpi	r24, 0x35	; 53
    3620:	29 f4       	brne	.+10     	; 0x362c <main+0x5a>
		{
			graph_plot();
    3622:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_Z10graph_plotv>
    3626:	02 c0       	rjmp	.+4      	; 0x362c <main+0x5a>
		}
		
		bool f=1;
		while (f)
    3628:	99 23       	and	r25, r25
    362a:	f9 f2       	breq	.-66     	; 0x35ea <main+0x18>
		{
			for(int c=4;c<8&&f;c++)
    362c:	44 e0       	ldi	r20, 0x04	; 4
    362e:	50 e0       	ldi	r21, 0x00	; 0
    3630:	02 c0       	rjmp	.+4      	; 0x3636 <main+0x64>
    3632:	99 23       	and	r25, r25
    3634:	d1 f2       	breq	.-76     	; 0x35ea <main+0x18>
			{
				PORTB=1<<c;
    3636:	ce 01       	movw	r24, r28
    3638:	04 2e       	mov	r0, r20
    363a:	02 c0       	rjmp	.+4      	; 0x3640 <main+0x6e>
    363c:	88 0f       	add	r24, r24
    363e:	99 1f       	adc	r25, r25
    3640:	0a 94       	dec	r0
    3642:	e2 f7       	brpl	.-8      	; 0x363c <main+0x6a>
    3644:	88 bb       	out	0x18, r24	; 24
    3646:	fa 01       	movw	r30, r20
    3648:	e4 54       	subi	r30, 0x44	; 68
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	03 c0       	rjmp	.+6      	; 0x3658 <main+0x86>
    3652:	34 96       	adiw	r30, 0x04	; 4
				for(int r=0;r<4&&f;r++)
    3654:	83 34       	cpi	r24, 0x43	; 67
    3656:	99 f1       	breq	.+102    	; 0x36be <main+0xec>
				{
					if(PINB&(1<<r))
    3658:	86 b3       	in	r24, 0x16	; 22
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	02 2e       	mov	r0, r18
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <main+0x92>
    3660:	95 95       	asr	r25
    3662:	87 95       	ror	r24
    3664:	0a 94       	dec	r0
    3666:	e2 f7       	brpl	.-8      	; 0x3660 <main+0x8e>
    3668:	80 ff       	sbrs	r24, 0
    366a:	23 c0       	rjmp	.+70     	; 0x36b2 <main+0xe0>
					{
						if(mat[r][c-4]=='C')
    366c:	80 81       	ld	r24, Z
    366e:	91 2f       	mov	r25, r17
    3670:	83 34       	cpi	r24, 0x43	; 67
    3672:	09 f4       	brne	.+2      	; 0x3676 <main+0xa4>
    3674:	90 2f       	mov	r25, r16
    3676:	6f ef       	ldi	r22, 0xFF	; 255
    3678:	74 e3       	ldi	r23, 0x34	; 52
    367a:	ac e0       	ldi	r26, 0x0C	; 12
    367c:	61 50       	subi	r22, 0x01	; 1
    367e:	70 40       	sbci	r23, 0x00	; 0
    3680:	a0 40       	sbci	r26, 0x00	; 0
    3682:	e1 f7       	brne	.-8      	; 0x367c <main+0xaa>
    3684:	00 c0       	rjmp	.+0      	; 0x3686 <main+0xb4>
    3686:	00 00       	nop
		while (f)
		{
			for(int c=4;c<8&&f;c++)
			{
				PORTB=1<<c;
				for(int r=0;r<4&&f;r++)
    3688:	2f 5f       	subi	r18, 0xFF	; 255
    368a:	3f 4f       	sbci	r19, 0xFF	; 255
    368c:	24 30       	cpi	r18, 0x04	; 4
    368e:	31 05       	cpc	r19, r1
    3690:	01 f7       	brne	.-64     	; 0x3652 <main+0x80>
    3692:	01 c0       	rjmp	.+2      	; 0x3696 <main+0xc4>
    3694:	9f 2d       	mov	r25, r15
    3696:	ef e1       	ldi	r30, 0x1F	; 31
    3698:	fe e4       	ldi	r31, 0x4E	; 78
    369a:	31 97       	sbiw	r30, 0x01	; 1
    369c:	f1 f7       	brne	.-4      	; 0x369a <main+0xc8>
    369e:	00 c0       	rjmp	.+0      	; 0x36a0 <main+0xce>
    36a0:	00 00       	nop
		}
		
		bool f=1;
		while (f)
		{
			for(int c=4;c<8&&f;c++)
    36a2:	4f 5f       	subi	r20, 0xFF	; 255
    36a4:	5f 4f       	sbci	r21, 0xFF	; 255
    36a6:	48 30       	cpi	r20, 0x08	; 8
    36a8:	51 05       	cpc	r21, r1
    36aa:	19 f6       	brne	.-122    	; 0x3632 <main+0x60>
    36ac:	bd cf       	rjmp	.-134    	; 0x3628 <main+0x56>
    36ae:	34 96       	adiw	r30, 0x04	; 4
    36b0:	d3 cf       	rjmp	.-90     	; 0x3658 <main+0x86>
			{
				PORTB=1<<c;
				for(int r=0;r<4&&f;r++)
    36b2:	2f 5f       	subi	r18, 0xFF	; 255
    36b4:	3f 4f       	sbci	r19, 0xFF	; 255
    36b6:	24 30       	cpi	r18, 0x04	; 4
    36b8:	31 05       	cpc	r19, r1
    36ba:	c9 f7       	brne	.-14     	; 0x36ae <main+0xdc>
    36bc:	eb cf       	rjmp	.-42     	; 0x3694 <main+0xc2>
    36be:	8f e1       	ldi	r24, 0x1F	; 31
    36c0:	9e e4       	ldi	r25, 0x4E	; 78
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <main+0xf0>
    36c6:	00 c0       	rjmp	.+0      	; 0x36c8 <main+0xf6>
    36c8:	00 00       	nop
		}
		
		bool f=1;
		while (f)
		{
			for(int c=4;c<8&&f;c++)
    36ca:	4f 5f       	subi	r20, 0xFF	; 255
    36cc:	5f 4f       	sbci	r21, 0xFF	; 255
    36ce:	48 30       	cpi	r20, 0x08	; 8
    36d0:	51 05       	cpc	r21, r1
    36d2:	09 f4       	brne	.+2      	; 0x36d6 <main+0x104>
    36d4:	8a cf       	rjmp	.-236    	; 0x35ea <main+0x18>
    36d6:	9e 2d       	mov	r25, r14
    36d8:	ac cf       	rjmp	.-168    	; 0x3632 <main+0x60>

000036da <_GLOBAL__sub_I_Pix>:
	
}

char s[40];
char tmp[15];
parser ob;
    36da:	8e ea       	ldi	r24, 0xAE	; 174
    36dc:	92 e0       	ldi	r25, 0x02	; 2
    36de:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN6parserC1Ev>
    36e2:	08 95       	ret

000036e4 <acos>:
    36e4:	9f 93       	push	r25
    36e6:	9f 77       	andi	r25, 0x7F	; 127
    36e8:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <__fp_arccos>
    36ec:	0f 90       	pop	r0
    36ee:	00 20       	and	r0, r0
    36f0:	42 f4       	brpl	.+16     	; 0x3702 <acos+0x1e>
    36f2:	90 58       	subi	r25, 0x80	; 128
    36f4:	a2 ea       	ldi	r26, 0xA2	; 162
    36f6:	2a ed       	ldi	r18, 0xDA	; 218
    36f8:	3f e0       	ldi	r19, 0x0F	; 15
    36fa:	49 e4       	ldi	r20, 0x49	; 73
    36fc:	50 e4       	ldi	r21, 0x40	; 64
    36fe:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__addsf3x>
    3702:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__fp_round>

00003706 <__subsf3>:
    3706:	50 58       	subi	r21, 0x80	; 128

00003708 <__addsf3>:
    3708:	bb 27       	eor	r27, r27
    370a:	aa 27       	eor	r26, r26
    370c:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__addsf3x>
    3710:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__fp_round>
    3714:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fp_pscA>
    3718:	38 f0       	brcs	.+14     	; 0x3728 <__addsf3+0x20>
    371a:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__fp_pscB>
    371e:	20 f0       	brcs	.+8      	; 0x3728 <__addsf3+0x20>
    3720:	39 f4       	brne	.+14     	; 0x3730 <__addsf3+0x28>
    3722:	9f 3f       	cpi	r25, 0xFF	; 255
    3724:	19 f4       	brne	.+6      	; 0x372c <__addsf3+0x24>
    3726:	26 f4       	brtc	.+8      	; 0x3730 <__addsf3+0x28>
    3728:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_nan>
    372c:	0e f4       	brtc	.+2      	; 0x3730 <__addsf3+0x28>
    372e:	e0 95       	com	r30
    3730:	e7 fb       	bst	r30, 7
    3732:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__fp_inf>

00003736 <__addsf3x>:
    3736:	e9 2f       	mov	r30, r25
    3738:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fp_split3>
    373c:	58 f3       	brcs	.-42     	; 0x3714 <__addsf3+0xc>
    373e:	ba 17       	cp	r27, r26
    3740:	62 07       	cpc	r22, r18
    3742:	73 07       	cpc	r23, r19
    3744:	84 07       	cpc	r24, r20
    3746:	95 07       	cpc	r25, r21
    3748:	20 f0       	brcs	.+8      	; 0x3752 <__addsf3x+0x1c>
    374a:	79 f4       	brne	.+30     	; 0x376a <__addsf3x+0x34>
    374c:	a6 f5       	brtc	.+104    	; 0x37b6 <__addsf3x+0x80>
    374e:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__fp_zero>
    3752:	0e f4       	brtc	.+2      	; 0x3756 <__addsf3x+0x20>
    3754:	e0 95       	com	r30
    3756:	0b 2e       	mov	r0, r27
    3758:	ba 2f       	mov	r27, r26
    375a:	a0 2d       	mov	r26, r0
    375c:	0b 01       	movw	r0, r22
    375e:	b9 01       	movw	r22, r18
    3760:	90 01       	movw	r18, r0
    3762:	0c 01       	movw	r0, r24
    3764:	ca 01       	movw	r24, r20
    3766:	a0 01       	movw	r20, r0
    3768:	11 24       	eor	r1, r1
    376a:	ff 27       	eor	r31, r31
    376c:	59 1b       	sub	r21, r25
    376e:	99 f0       	breq	.+38     	; 0x3796 <__addsf3x+0x60>
    3770:	59 3f       	cpi	r21, 0xF9	; 249
    3772:	50 f4       	brcc	.+20     	; 0x3788 <__addsf3x+0x52>
    3774:	50 3e       	cpi	r21, 0xE0	; 224
    3776:	68 f1       	brcs	.+90     	; 0x37d2 <__addsf3x+0x9c>
    3778:	1a 16       	cp	r1, r26
    377a:	f0 40       	sbci	r31, 0x00	; 0
    377c:	a2 2f       	mov	r26, r18
    377e:	23 2f       	mov	r18, r19
    3780:	34 2f       	mov	r19, r20
    3782:	44 27       	eor	r20, r20
    3784:	58 5f       	subi	r21, 0xF8	; 248
    3786:	f3 cf       	rjmp	.-26     	; 0x376e <__addsf3x+0x38>
    3788:	46 95       	lsr	r20
    378a:	37 95       	ror	r19
    378c:	27 95       	ror	r18
    378e:	a7 95       	ror	r26
    3790:	f0 40       	sbci	r31, 0x00	; 0
    3792:	53 95       	inc	r21
    3794:	c9 f7       	brne	.-14     	; 0x3788 <__addsf3x+0x52>
    3796:	7e f4       	brtc	.+30     	; 0x37b6 <__addsf3x+0x80>
    3798:	1f 16       	cp	r1, r31
    379a:	ba 0b       	sbc	r27, r26
    379c:	62 0b       	sbc	r22, r18
    379e:	73 0b       	sbc	r23, r19
    37a0:	84 0b       	sbc	r24, r20
    37a2:	ba f0       	brmi	.+46     	; 0x37d2 <__addsf3x+0x9c>
    37a4:	91 50       	subi	r25, 0x01	; 1
    37a6:	a1 f0       	breq	.+40     	; 0x37d0 <__addsf3x+0x9a>
    37a8:	ff 0f       	add	r31, r31
    37aa:	bb 1f       	adc	r27, r27
    37ac:	66 1f       	adc	r22, r22
    37ae:	77 1f       	adc	r23, r23
    37b0:	88 1f       	adc	r24, r24
    37b2:	c2 f7       	brpl	.-16     	; 0x37a4 <__addsf3x+0x6e>
    37b4:	0e c0       	rjmp	.+28     	; 0x37d2 <__addsf3x+0x9c>
    37b6:	ba 0f       	add	r27, r26
    37b8:	62 1f       	adc	r22, r18
    37ba:	73 1f       	adc	r23, r19
    37bc:	84 1f       	adc	r24, r20
    37be:	48 f4       	brcc	.+18     	; 0x37d2 <__addsf3x+0x9c>
    37c0:	87 95       	ror	r24
    37c2:	77 95       	ror	r23
    37c4:	67 95       	ror	r22
    37c6:	b7 95       	ror	r27
    37c8:	f7 95       	ror	r31
    37ca:	9e 3f       	cpi	r25, 0xFE	; 254
    37cc:	08 f0       	brcs	.+2      	; 0x37d0 <__addsf3x+0x9a>
    37ce:	b0 cf       	rjmp	.-160    	; 0x3730 <__addsf3+0x28>
    37d0:	93 95       	inc	r25
    37d2:	88 0f       	add	r24, r24
    37d4:	08 f0       	brcs	.+2      	; 0x37d8 <__addsf3x+0xa2>
    37d6:	99 27       	eor	r25, r25
    37d8:	ee 0f       	add	r30, r30
    37da:	97 95       	ror	r25
    37dc:	87 95       	ror	r24
    37de:	08 95       	ret

000037e0 <asin>:
    37e0:	9f 93       	push	r25
    37e2:	9f 77       	andi	r25, 0x7F	; 127
    37e4:	ee e3       	ldi	r30, 0x3E	; 62
    37e6:	89 37       	cpi	r24, 0x79	; 121
    37e8:	9e 07       	cpc	r25, r30
    37ea:	28 f4       	brcc	.+10     	; 0x37f6 <asin+0x16>
    37ec:	e4 e5       	ldi	r30, 0x54	; 84
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__fp_powsodd>
    37f4:	0c c0       	rjmp	.+24     	; 0x380e <asin+0x2e>
    37f6:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <__fp_arccos>
    37fa:	90 58       	subi	r25, 0x80	; 128
    37fc:	a2 ea       	ldi	r26, 0xA2	; 162
    37fe:	2a ed       	ldi	r18, 0xDA	; 218
    3800:	3f e0       	ldi	r19, 0x0F	; 15
    3802:	49 ec       	ldi	r20, 0xC9	; 201
    3804:	5f e3       	ldi	r21, 0x3F	; 63
    3806:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__addsf3x>
    380a:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <__fp_round>
    380e:	0f 90       	pop	r0
    3810:	07 fc       	sbrc	r0, 7
    3812:	90 58       	subi	r25, 0x80	; 128
    3814:	08 95       	ret

00003816 <__cmpsf2>:
    3816:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__fp_cmp>
    381a:	08 f4       	brcc	.+2      	; 0x381e <__cmpsf2+0x8>
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	08 95       	ret

00003820 <cos>:
    3820:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__fp_rempio2>
    3824:	e3 95       	inc	r30
    3826:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__fp_sinus>

0000382a <__divsf3>:
    382a:	0e 94 29 1c 	call	0x3852	; 0x3852 <__divsf3x>
    382e:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__fp_round>
    3832:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__fp_pscB>
    3836:	58 f0       	brcs	.+22     	; 0x384e <__divsf3+0x24>
    3838:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fp_pscA>
    383c:	40 f0       	brcs	.+16     	; 0x384e <__divsf3+0x24>
    383e:	29 f4       	brne	.+10     	; 0x384a <__divsf3+0x20>
    3840:	5f 3f       	cpi	r21, 0xFF	; 255
    3842:	29 f0       	breq	.+10     	; 0x384e <__divsf3+0x24>
    3844:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__fp_inf>
    3848:	51 11       	cpse	r21, r1
    384a:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_szero>
    384e:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_nan>

00003852 <__divsf3x>:
    3852:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fp_split3>
    3856:	68 f3       	brcs	.-38     	; 0x3832 <__divsf3+0x8>

00003858 <__divsf3_pse>:
    3858:	99 23       	and	r25, r25
    385a:	b1 f3       	breq	.-20     	; 0x3848 <__divsf3+0x1e>
    385c:	55 23       	and	r21, r21
    385e:	91 f3       	breq	.-28     	; 0x3844 <__divsf3+0x1a>
    3860:	95 1b       	sub	r25, r21
    3862:	55 0b       	sbc	r21, r21
    3864:	bb 27       	eor	r27, r27
    3866:	aa 27       	eor	r26, r26
    3868:	62 17       	cp	r22, r18
    386a:	73 07       	cpc	r23, r19
    386c:	84 07       	cpc	r24, r20
    386e:	38 f0       	brcs	.+14     	; 0x387e <__divsf3_pse+0x26>
    3870:	9f 5f       	subi	r25, 0xFF	; 255
    3872:	5f 4f       	sbci	r21, 0xFF	; 255
    3874:	22 0f       	add	r18, r18
    3876:	33 1f       	adc	r19, r19
    3878:	44 1f       	adc	r20, r20
    387a:	aa 1f       	adc	r26, r26
    387c:	a9 f3       	breq	.-22     	; 0x3868 <__divsf3_pse+0x10>
    387e:	35 d0       	rcall	.+106    	; 0x38ea <__divsf3_pse+0x92>
    3880:	0e 2e       	mov	r0, r30
    3882:	3a f0       	brmi	.+14     	; 0x3892 <__divsf3_pse+0x3a>
    3884:	e0 e8       	ldi	r30, 0x80	; 128
    3886:	32 d0       	rcall	.+100    	; 0x38ec <__divsf3_pse+0x94>
    3888:	91 50       	subi	r25, 0x01	; 1
    388a:	50 40       	sbci	r21, 0x00	; 0
    388c:	e6 95       	lsr	r30
    388e:	00 1c       	adc	r0, r0
    3890:	ca f7       	brpl	.-14     	; 0x3884 <__divsf3_pse+0x2c>
    3892:	2b d0       	rcall	.+86     	; 0x38ea <__divsf3_pse+0x92>
    3894:	fe 2f       	mov	r31, r30
    3896:	29 d0       	rcall	.+82     	; 0x38ea <__divsf3_pse+0x92>
    3898:	66 0f       	add	r22, r22
    389a:	77 1f       	adc	r23, r23
    389c:	88 1f       	adc	r24, r24
    389e:	bb 1f       	adc	r27, r27
    38a0:	26 17       	cp	r18, r22
    38a2:	37 07       	cpc	r19, r23
    38a4:	48 07       	cpc	r20, r24
    38a6:	ab 07       	cpc	r26, r27
    38a8:	b0 e8       	ldi	r27, 0x80	; 128
    38aa:	09 f0       	breq	.+2      	; 0x38ae <__divsf3_pse+0x56>
    38ac:	bb 0b       	sbc	r27, r27
    38ae:	80 2d       	mov	r24, r0
    38b0:	bf 01       	movw	r22, r30
    38b2:	ff 27       	eor	r31, r31
    38b4:	93 58       	subi	r25, 0x83	; 131
    38b6:	5f 4f       	sbci	r21, 0xFF	; 255
    38b8:	3a f0       	brmi	.+14     	; 0x38c8 <__divsf3_pse+0x70>
    38ba:	9e 3f       	cpi	r25, 0xFE	; 254
    38bc:	51 05       	cpc	r21, r1
    38be:	78 f0       	brcs	.+30     	; 0x38de <__divsf3_pse+0x86>
    38c0:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__fp_inf>
    38c4:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_szero>
    38c8:	5f 3f       	cpi	r21, 0xFF	; 255
    38ca:	e4 f3       	brlt	.-8      	; 0x38c4 <__divsf3_pse+0x6c>
    38cc:	98 3e       	cpi	r25, 0xE8	; 232
    38ce:	d4 f3       	brlt	.-12     	; 0x38c4 <__divsf3_pse+0x6c>
    38d0:	86 95       	lsr	r24
    38d2:	77 95       	ror	r23
    38d4:	67 95       	ror	r22
    38d6:	b7 95       	ror	r27
    38d8:	f7 95       	ror	r31
    38da:	9f 5f       	subi	r25, 0xFF	; 255
    38dc:	c9 f7       	brne	.-14     	; 0x38d0 <__divsf3_pse+0x78>
    38de:	88 0f       	add	r24, r24
    38e0:	91 1d       	adc	r25, r1
    38e2:	96 95       	lsr	r25
    38e4:	87 95       	ror	r24
    38e6:	97 f9       	bld	r25, 7
    38e8:	08 95       	ret
    38ea:	e1 e0       	ldi	r30, 0x01	; 1
    38ec:	66 0f       	add	r22, r22
    38ee:	77 1f       	adc	r23, r23
    38f0:	88 1f       	adc	r24, r24
    38f2:	bb 1f       	adc	r27, r27
    38f4:	62 17       	cp	r22, r18
    38f6:	73 07       	cpc	r23, r19
    38f8:	84 07       	cpc	r24, r20
    38fa:	ba 07       	cpc	r27, r26
    38fc:	20 f0       	brcs	.+8      	; 0x3906 <__divsf3_pse+0xae>
    38fe:	62 1b       	sub	r22, r18
    3900:	73 0b       	sbc	r23, r19
    3902:	84 0b       	sbc	r24, r20
    3904:	ba 0b       	sbc	r27, r26
    3906:	ee 1f       	adc	r30, r30
    3908:	88 f7       	brcc	.-30     	; 0x38ec <__divsf3_pse+0x94>
    390a:	e0 95       	com	r30
    390c:	08 95       	ret
    390e:	29 f4       	brne	.+10     	; 0x391a <__divsf3_pse+0xc2>
    3910:	16 f0       	brts	.+4      	; 0x3916 <__divsf3_pse+0xbe>
    3912:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__fp_inf>
    3916:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__fp_zero>
    391a:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_nan>

0000391e <exp>:
    391e:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_splitA>
    3922:	a8 f3       	brcs	.-22     	; 0x390e <__divsf3_pse+0xb6>
    3924:	96 38       	cpi	r25, 0x86	; 134
    3926:	a0 f7       	brcc	.-24     	; 0x3910 <__divsf3_pse+0xb8>
    3928:	07 f8       	bld	r0, 7
    392a:	0f 92       	push	r0
    392c:	e8 94       	clt
    392e:	2b e3       	ldi	r18, 0x3B	; 59
    3930:	3a ea       	ldi	r19, 0xAA	; 170
    3932:	48 eb       	ldi	r20, 0xB8	; 184
    3934:	5f e7       	ldi	r21, 0x7F	; 127
    3936:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__mulsf3_pse>
    393a:	0f 92       	push	r0
    393c:	0f 92       	push	r0
    393e:	0f 92       	push	r0
    3940:	4d b7       	in	r20, 0x3d	; 61
    3942:	5e b7       	in	r21, 0x3e	; 62
    3944:	0f 92       	push	r0
    3946:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <modf>
    394a:	e8 e6       	ldi	r30, 0x68	; 104
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <__fp_powser>
    3952:	4f 91       	pop	r20
    3954:	5f 91       	pop	r21
    3956:	ef 91       	pop	r30
    3958:	ff 91       	pop	r31
    395a:	e5 95       	asr	r30
    395c:	ee 1f       	adc	r30, r30
    395e:	ff 1f       	adc	r31, r31
    3960:	49 f0       	breq	.+18     	; 0x3974 <exp+0x56>
    3962:	fe 57       	subi	r31, 0x7E	; 126
    3964:	e0 68       	ori	r30, 0x80	; 128
    3966:	44 27       	eor	r20, r20
    3968:	ee 0f       	add	r30, r30
    396a:	44 1f       	adc	r20, r20
    396c:	fa 95       	dec	r31
    396e:	e1 f7       	brne	.-8      	; 0x3968 <exp+0x4a>
    3970:	41 95       	neg	r20
    3972:	55 0b       	sbc	r21, r21
    3974:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <ldexp>
    3978:	0f 90       	pop	r0
    397a:	07 fe       	sbrs	r0, 7
    397c:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <inverse>
    3980:	08 95       	ret

00003982 <__fixsfsi>:
    3982:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__fixunssfsi>
    3986:	68 94       	set
    3988:	b1 11       	cpse	r27, r1
    398a:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_szero>
    398e:	08 95       	ret

00003990 <__fixunssfsi>:
    3990:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_splitA>
    3994:	88 f0       	brcs	.+34     	; 0x39b8 <__fixunssfsi+0x28>
    3996:	9f 57       	subi	r25, 0x7F	; 127
    3998:	98 f0       	brcs	.+38     	; 0x39c0 <__fixunssfsi+0x30>
    399a:	b9 2f       	mov	r27, r25
    399c:	99 27       	eor	r25, r25
    399e:	b7 51       	subi	r27, 0x17	; 23
    39a0:	b0 f0       	brcs	.+44     	; 0x39ce <__fixunssfsi+0x3e>
    39a2:	e1 f0       	breq	.+56     	; 0x39dc <__fixunssfsi+0x4c>
    39a4:	66 0f       	add	r22, r22
    39a6:	77 1f       	adc	r23, r23
    39a8:	88 1f       	adc	r24, r24
    39aa:	99 1f       	adc	r25, r25
    39ac:	1a f0       	brmi	.+6      	; 0x39b4 <__fixunssfsi+0x24>
    39ae:	ba 95       	dec	r27
    39b0:	c9 f7       	brne	.-14     	; 0x39a4 <__fixunssfsi+0x14>
    39b2:	14 c0       	rjmp	.+40     	; 0x39dc <__fixunssfsi+0x4c>
    39b4:	b1 30       	cpi	r27, 0x01	; 1
    39b6:	91 f0       	breq	.+36     	; 0x39dc <__fixunssfsi+0x4c>
    39b8:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__fp_zero>
    39bc:	b1 e0       	ldi	r27, 0x01	; 1
    39be:	08 95       	ret
    39c0:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__fp_zero>
    39c4:	67 2f       	mov	r22, r23
    39c6:	78 2f       	mov	r23, r24
    39c8:	88 27       	eor	r24, r24
    39ca:	b8 5f       	subi	r27, 0xF8	; 248
    39cc:	39 f0       	breq	.+14     	; 0x39dc <__fixunssfsi+0x4c>
    39ce:	b9 3f       	cpi	r27, 0xF9	; 249
    39d0:	cc f3       	brlt	.-14     	; 0x39c4 <__fixunssfsi+0x34>
    39d2:	86 95       	lsr	r24
    39d4:	77 95       	ror	r23
    39d6:	67 95       	ror	r22
    39d8:	b3 95       	inc	r27
    39da:	d9 f7       	brne	.-10     	; 0x39d2 <__fixunssfsi+0x42>
    39dc:	3e f4       	brtc	.+14     	; 0x39ec <__fixunssfsi+0x5c>
    39de:	90 95       	com	r25
    39e0:	80 95       	com	r24
    39e2:	70 95       	com	r23
    39e4:	61 95       	neg	r22
    39e6:	7f 4f       	sbci	r23, 0xFF	; 255
    39e8:	8f 4f       	sbci	r24, 0xFF	; 255
    39ea:	9f 4f       	sbci	r25, 0xFF	; 255
    39ec:	08 95       	ret

000039ee <__floatunsisf>:
    39ee:	e8 94       	clt
    39f0:	09 c0       	rjmp	.+18     	; 0x3a04 <__floatsisf+0x12>

000039f2 <__floatsisf>:
    39f2:	97 fb       	bst	r25, 7
    39f4:	3e f4       	brtc	.+14     	; 0x3a04 <__floatsisf+0x12>
    39f6:	90 95       	com	r25
    39f8:	80 95       	com	r24
    39fa:	70 95       	com	r23
    39fc:	61 95       	neg	r22
    39fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3a00:	8f 4f       	sbci	r24, 0xFF	; 255
    3a02:	9f 4f       	sbci	r25, 0xFF	; 255
    3a04:	99 23       	and	r25, r25
    3a06:	a9 f0       	breq	.+42     	; 0x3a32 <__floatsisf+0x40>
    3a08:	f9 2f       	mov	r31, r25
    3a0a:	96 e9       	ldi	r25, 0x96	; 150
    3a0c:	bb 27       	eor	r27, r27
    3a0e:	93 95       	inc	r25
    3a10:	f6 95       	lsr	r31
    3a12:	87 95       	ror	r24
    3a14:	77 95       	ror	r23
    3a16:	67 95       	ror	r22
    3a18:	b7 95       	ror	r27
    3a1a:	f1 11       	cpse	r31, r1
    3a1c:	f8 cf       	rjmp	.-16     	; 0x3a0e <__floatsisf+0x1c>
    3a1e:	fa f4       	brpl	.+62     	; 0x3a5e <__floatsisf+0x6c>
    3a20:	bb 0f       	add	r27, r27
    3a22:	11 f4       	brne	.+4      	; 0x3a28 <__floatsisf+0x36>
    3a24:	60 ff       	sbrs	r22, 0
    3a26:	1b c0       	rjmp	.+54     	; 0x3a5e <__floatsisf+0x6c>
    3a28:	6f 5f       	subi	r22, 0xFF	; 255
    3a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a30:	16 c0       	rjmp	.+44     	; 0x3a5e <__floatsisf+0x6c>
    3a32:	88 23       	and	r24, r24
    3a34:	11 f0       	breq	.+4      	; 0x3a3a <__floatsisf+0x48>
    3a36:	96 e9       	ldi	r25, 0x96	; 150
    3a38:	11 c0       	rjmp	.+34     	; 0x3a5c <__floatsisf+0x6a>
    3a3a:	77 23       	and	r23, r23
    3a3c:	21 f0       	breq	.+8      	; 0x3a46 <__floatsisf+0x54>
    3a3e:	9e e8       	ldi	r25, 0x8E	; 142
    3a40:	87 2f       	mov	r24, r23
    3a42:	76 2f       	mov	r23, r22
    3a44:	05 c0       	rjmp	.+10     	; 0x3a50 <__floatsisf+0x5e>
    3a46:	66 23       	and	r22, r22
    3a48:	71 f0       	breq	.+28     	; 0x3a66 <__floatsisf+0x74>
    3a4a:	96 e8       	ldi	r25, 0x86	; 134
    3a4c:	86 2f       	mov	r24, r22
    3a4e:	70 e0       	ldi	r23, 0x00	; 0
    3a50:	60 e0       	ldi	r22, 0x00	; 0
    3a52:	2a f0       	brmi	.+10     	; 0x3a5e <__floatsisf+0x6c>
    3a54:	9a 95       	dec	r25
    3a56:	66 0f       	add	r22, r22
    3a58:	77 1f       	adc	r23, r23
    3a5a:	88 1f       	adc	r24, r24
    3a5c:	da f7       	brpl	.-10     	; 0x3a54 <__floatsisf+0x62>
    3a5e:	88 0f       	add	r24, r24
    3a60:	96 95       	lsr	r25
    3a62:	87 95       	ror	r24
    3a64:	97 f9       	bld	r25, 7
    3a66:	08 95       	ret

00003a68 <__fp_arccos>:
    3a68:	df 93       	push	r29
    3a6a:	cf 93       	push	r28
    3a6c:	1f 93       	push	r17
    3a6e:	0f 93       	push	r16
    3a70:	8b 01       	movw	r16, r22
    3a72:	ec 01       	movw	r28, r24
    3a74:	e0 e9       	ldi	r30, 0x90	; 144
    3a76:	f0 e0       	ldi	r31, 0x00	; 0
    3a78:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <__fp_powser>
    3a7c:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <__fp_round>
    3a80:	98 01       	movw	r18, r16
    3a82:	ae 01       	movw	r20, r28
    3a84:	8b 01       	movw	r16, r22
    3a86:	ec 01       	movw	r28, r24
    3a88:	60 e0       	ldi	r22, 0x00	; 0
    3a8a:	70 e0       	ldi	r23, 0x00	; 0
    3a8c:	80 e8       	ldi	r24, 0x80	; 128
    3a8e:	9f e3       	ldi	r25, 0x3F	; 63
    3a90:	0e 94 83 1b 	call	0x3706	; 0x3706 <__subsf3>
    3a94:	0e 94 05 20 	call	0x400a	; 0x400a <sqrt>
    3a98:	98 01       	movw	r18, r16
    3a9a:	ae 01       	movw	r20, r28
    3a9c:	0f 91       	pop	r16
    3a9e:	1f 91       	pop	r17
    3aa0:	cf 91       	pop	r28
    3aa2:	df 91       	pop	r29
    3aa4:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__mulsf3x>

00003aa8 <__fp_cmp>:
    3aa8:	99 0f       	add	r25, r25
    3aaa:	00 08       	sbc	r0, r0
    3aac:	55 0f       	add	r21, r21
    3aae:	aa 0b       	sbc	r26, r26
    3ab0:	e0 e8       	ldi	r30, 0x80	; 128
    3ab2:	fe ef       	ldi	r31, 0xFE	; 254
    3ab4:	16 16       	cp	r1, r22
    3ab6:	17 06       	cpc	r1, r23
    3ab8:	e8 07       	cpc	r30, r24
    3aba:	f9 07       	cpc	r31, r25
    3abc:	c0 f0       	brcs	.+48     	; 0x3aee <__fp_cmp+0x46>
    3abe:	12 16       	cp	r1, r18
    3ac0:	13 06       	cpc	r1, r19
    3ac2:	e4 07       	cpc	r30, r20
    3ac4:	f5 07       	cpc	r31, r21
    3ac6:	98 f0       	brcs	.+38     	; 0x3aee <__fp_cmp+0x46>
    3ac8:	62 1b       	sub	r22, r18
    3aca:	73 0b       	sbc	r23, r19
    3acc:	84 0b       	sbc	r24, r20
    3ace:	95 0b       	sbc	r25, r21
    3ad0:	39 f4       	brne	.+14     	; 0x3ae0 <__fp_cmp+0x38>
    3ad2:	0a 26       	eor	r0, r26
    3ad4:	61 f0       	breq	.+24     	; 0x3aee <__fp_cmp+0x46>
    3ad6:	23 2b       	or	r18, r19
    3ad8:	24 2b       	or	r18, r20
    3ada:	25 2b       	or	r18, r21
    3adc:	21 f4       	brne	.+8      	; 0x3ae6 <__fp_cmp+0x3e>
    3ade:	08 95       	ret
    3ae0:	0a 26       	eor	r0, r26
    3ae2:	09 f4       	brne	.+2      	; 0x3ae6 <__fp_cmp+0x3e>
    3ae4:	a1 40       	sbci	r26, 0x01	; 1
    3ae6:	a6 95       	lsr	r26
    3ae8:	8f ef       	ldi	r24, 0xFF	; 255
    3aea:	81 1d       	adc	r24, r1
    3aec:	81 1d       	adc	r24, r1
    3aee:	08 95       	ret

00003af0 <__fp_inf>:
    3af0:	97 f9       	bld	r25, 7
    3af2:	9f 67       	ori	r25, 0x7F	; 127
    3af4:	80 e8       	ldi	r24, 0x80	; 128
    3af6:	70 e0       	ldi	r23, 0x00	; 0
    3af8:	60 e0       	ldi	r22, 0x00	; 0
    3afa:	08 95       	ret

00003afc <__fp_nan>:
    3afc:	9f ef       	ldi	r25, 0xFF	; 255
    3afe:	80 ec       	ldi	r24, 0xC0	; 192
    3b00:	08 95       	ret

00003b02 <__fp_powser>:
    3b02:	df 93       	push	r29
    3b04:	cf 93       	push	r28
    3b06:	1f 93       	push	r17
    3b08:	0f 93       	push	r16
    3b0a:	ff 92       	push	r15
    3b0c:	ef 92       	push	r14
    3b0e:	df 92       	push	r13
    3b10:	7b 01       	movw	r14, r22
    3b12:	8c 01       	movw	r16, r24
    3b14:	68 94       	set
    3b16:	06 c0       	rjmp	.+12     	; 0x3b24 <__fp_powser+0x22>
    3b18:	da 2e       	mov	r13, r26
    3b1a:	ef 01       	movw	r28, r30
    3b1c:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__mulsf3x>
    3b20:	fe 01       	movw	r30, r28
    3b22:	e8 94       	clt
    3b24:	a5 91       	lpm	r26, Z+
    3b26:	25 91       	lpm	r18, Z+
    3b28:	35 91       	lpm	r19, Z+
    3b2a:	45 91       	lpm	r20, Z+
    3b2c:	55 91       	lpm	r21, Z+
    3b2e:	a6 f3       	brts	.-24     	; 0x3b18 <__fp_powser+0x16>
    3b30:	ef 01       	movw	r28, r30
    3b32:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__addsf3x>
    3b36:	fe 01       	movw	r30, r28
    3b38:	97 01       	movw	r18, r14
    3b3a:	a8 01       	movw	r20, r16
    3b3c:	da 94       	dec	r13
    3b3e:	69 f7       	brne	.-38     	; 0x3b1a <__fp_powser+0x18>
    3b40:	df 90       	pop	r13
    3b42:	ef 90       	pop	r14
    3b44:	ff 90       	pop	r15
    3b46:	0f 91       	pop	r16
    3b48:	1f 91       	pop	r17
    3b4a:	cf 91       	pop	r28
    3b4c:	df 91       	pop	r29
    3b4e:	08 95       	ret

00003b50 <__fp_powsodd>:
    3b50:	9f 93       	push	r25
    3b52:	8f 93       	push	r24
    3b54:	7f 93       	push	r23
    3b56:	6f 93       	push	r22
    3b58:	ff 93       	push	r31
    3b5a:	ef 93       	push	r30
    3b5c:	9b 01       	movw	r18, r22
    3b5e:	ac 01       	movw	r20, r24
    3b60:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    3b64:	ef 91       	pop	r30
    3b66:	ff 91       	pop	r31
    3b68:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <__fp_powser>
    3b6c:	2f 91       	pop	r18
    3b6e:	3f 91       	pop	r19
    3b70:	4f 91       	pop	r20
    3b72:	5f 91       	pop	r21
    3b74:	0c 94 16 1f 	jmp	0x3e2c	; 0x3e2c <__mulsf3>

00003b78 <__fp_pscA>:
    3b78:	00 24       	eor	r0, r0
    3b7a:	0a 94       	dec	r0
    3b7c:	16 16       	cp	r1, r22
    3b7e:	17 06       	cpc	r1, r23
    3b80:	18 06       	cpc	r1, r24
    3b82:	09 06       	cpc	r0, r25
    3b84:	08 95       	ret

00003b86 <__fp_pscB>:
    3b86:	00 24       	eor	r0, r0
    3b88:	0a 94       	dec	r0
    3b8a:	12 16       	cp	r1, r18
    3b8c:	13 06       	cpc	r1, r19
    3b8e:	14 06       	cpc	r1, r20
    3b90:	05 06       	cpc	r0, r21
    3b92:	08 95       	ret
    3b94:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_nan>

00003b98 <__fp_rempio2>:
    3b98:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_splitA>
    3b9c:	d8 f3       	brcs	.-10     	; 0x3b94 <__fp_pscB+0xe>
    3b9e:	e8 94       	clt
    3ba0:	e0 e0       	ldi	r30, 0x00	; 0
    3ba2:	bb 27       	eor	r27, r27
    3ba4:	9f 57       	subi	r25, 0x7F	; 127
    3ba6:	f0 f0       	brcs	.+60     	; 0x3be4 <__fp_rempio2+0x4c>
    3ba8:	2a ed       	ldi	r18, 0xDA	; 218
    3baa:	3f e0       	ldi	r19, 0x0F	; 15
    3bac:	49 ec       	ldi	r20, 0xC9	; 201
    3bae:	06 c0       	rjmp	.+12     	; 0x3bbc <__fp_rempio2+0x24>
    3bb0:	ee 0f       	add	r30, r30
    3bb2:	bb 0f       	add	r27, r27
    3bb4:	66 1f       	adc	r22, r22
    3bb6:	77 1f       	adc	r23, r23
    3bb8:	88 1f       	adc	r24, r24
    3bba:	28 f0       	brcs	.+10     	; 0x3bc6 <__fp_rempio2+0x2e>
    3bbc:	b2 3a       	cpi	r27, 0xA2	; 162
    3bbe:	62 07       	cpc	r22, r18
    3bc0:	73 07       	cpc	r23, r19
    3bc2:	84 07       	cpc	r24, r20
    3bc4:	28 f0       	brcs	.+10     	; 0x3bd0 <__fp_rempio2+0x38>
    3bc6:	b2 5a       	subi	r27, 0xA2	; 162
    3bc8:	62 0b       	sbc	r22, r18
    3bca:	73 0b       	sbc	r23, r19
    3bcc:	84 0b       	sbc	r24, r20
    3bce:	e3 95       	inc	r30
    3bd0:	9a 95       	dec	r25
    3bd2:	72 f7       	brpl	.-36     	; 0x3bb0 <__fp_rempio2+0x18>
    3bd4:	80 38       	cpi	r24, 0x80	; 128
    3bd6:	30 f4       	brcc	.+12     	; 0x3be4 <__fp_rempio2+0x4c>
    3bd8:	9a 95       	dec	r25
    3bda:	bb 0f       	add	r27, r27
    3bdc:	66 1f       	adc	r22, r22
    3bde:	77 1f       	adc	r23, r23
    3be0:	88 1f       	adc	r24, r24
    3be2:	d2 f7       	brpl	.-12     	; 0x3bd8 <__fp_rempio2+0x40>
    3be4:	90 48       	sbci	r25, 0x80	; 128
    3be6:	0c 94 87 20 	jmp	0x410e	; 0x410e <__fp_mpack_finite>

00003bea <__fp_round>:
    3bea:	09 2e       	mov	r0, r25
    3bec:	03 94       	inc	r0
    3bee:	00 0c       	add	r0, r0
    3bf0:	11 f4       	brne	.+4      	; 0x3bf6 <__fp_round+0xc>
    3bf2:	88 23       	and	r24, r24
    3bf4:	52 f0       	brmi	.+20     	; 0x3c0a <__fp_round+0x20>
    3bf6:	bb 0f       	add	r27, r27
    3bf8:	40 f4       	brcc	.+16     	; 0x3c0a <__fp_round+0x20>
    3bfa:	bf 2b       	or	r27, r31
    3bfc:	11 f4       	brne	.+4      	; 0x3c02 <__fp_round+0x18>
    3bfe:	60 ff       	sbrs	r22, 0
    3c00:	04 c0       	rjmp	.+8      	; 0x3c0a <__fp_round+0x20>
    3c02:	6f 5f       	subi	r22, 0xFF	; 255
    3c04:	7f 4f       	sbci	r23, 0xFF	; 255
    3c06:	8f 4f       	sbci	r24, 0xFF	; 255
    3c08:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0a:	08 95       	ret

00003c0c <__fp_sinus>:
    3c0c:	ef 93       	push	r30
    3c0e:	e0 ff       	sbrs	r30, 0
    3c10:	07 c0       	rjmp	.+14     	; 0x3c20 <__fp_sinus+0x14>
    3c12:	a2 ea       	ldi	r26, 0xA2	; 162
    3c14:	2a ed       	ldi	r18, 0xDA	; 218
    3c16:	3f e0       	ldi	r19, 0x0F	; 15
    3c18:	49 ec       	ldi	r20, 0xC9	; 201
    3c1a:	5f eb       	ldi	r21, 0xBF	; 191
    3c1c:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__addsf3x>
    3c20:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <__fp_round>
    3c24:	0f 90       	pop	r0
    3c26:	03 94       	inc	r0
    3c28:	01 fc       	sbrc	r0, 1
    3c2a:	90 58       	subi	r25, 0x80	; 128
    3c2c:	e8 eb       	ldi	r30, 0xB8	; 184
    3c2e:	f0 e0       	ldi	r31, 0x00	; 0
    3c30:	0c 94 a8 1d 	jmp	0x3b50	; 0x3b50 <__fp_powsodd>

00003c34 <__fp_split3>:
    3c34:	57 fd       	sbrc	r21, 7
    3c36:	90 58       	subi	r25, 0x80	; 128
    3c38:	44 0f       	add	r20, r20
    3c3a:	55 1f       	adc	r21, r21
    3c3c:	59 f0       	breq	.+22     	; 0x3c54 <__fp_splitA+0x10>
    3c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c40:	71 f0       	breq	.+28     	; 0x3c5e <__fp_splitA+0x1a>
    3c42:	47 95       	ror	r20

00003c44 <__fp_splitA>:
    3c44:	88 0f       	add	r24, r24
    3c46:	97 fb       	bst	r25, 7
    3c48:	99 1f       	adc	r25, r25
    3c4a:	61 f0       	breq	.+24     	; 0x3c64 <__fp_splitA+0x20>
    3c4c:	9f 3f       	cpi	r25, 0xFF	; 255
    3c4e:	79 f0       	breq	.+30     	; 0x3c6e <__fp_splitA+0x2a>
    3c50:	87 95       	ror	r24
    3c52:	08 95       	ret
    3c54:	12 16       	cp	r1, r18
    3c56:	13 06       	cpc	r1, r19
    3c58:	14 06       	cpc	r1, r20
    3c5a:	55 1f       	adc	r21, r21
    3c5c:	f2 cf       	rjmp	.-28     	; 0x3c42 <__fp_split3+0xe>
    3c5e:	46 95       	lsr	r20
    3c60:	f1 df       	rcall	.-30     	; 0x3c44 <__fp_splitA>
    3c62:	08 c0       	rjmp	.+16     	; 0x3c74 <__fp_splitA+0x30>
    3c64:	16 16       	cp	r1, r22
    3c66:	17 06       	cpc	r1, r23
    3c68:	18 06       	cpc	r1, r24
    3c6a:	99 1f       	adc	r25, r25
    3c6c:	f1 cf       	rjmp	.-30     	; 0x3c50 <__fp_splitA+0xc>
    3c6e:	86 95       	lsr	r24
    3c70:	71 05       	cpc	r23, r1
    3c72:	61 05       	cpc	r22, r1
    3c74:	08 94       	sec
    3c76:	08 95       	ret

00003c78 <__fp_zero>:
    3c78:	e8 94       	clt

00003c7a <__fp_szero>:
    3c7a:	bb 27       	eor	r27, r27
    3c7c:	66 27       	eor	r22, r22
    3c7e:	77 27       	eor	r23, r23
    3c80:	cb 01       	movw	r24, r22
    3c82:	97 f9       	bld	r25, 7
    3c84:	08 95       	ret

00003c86 <__gesf2>:
    3c86:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__fp_cmp>
    3c8a:	08 f4       	brcc	.+2      	; 0x3c8e <__gesf2+0x8>
    3c8c:	8f ef       	ldi	r24, 0xFF	; 255
    3c8e:	08 95       	ret

00003c90 <inverse>:
    3c90:	9b 01       	movw	r18, r22
    3c92:	ac 01       	movw	r20, r24
    3c94:	60 e0       	ldi	r22, 0x00	; 0
    3c96:	70 e0       	ldi	r23, 0x00	; 0
    3c98:	80 e8       	ldi	r24, 0x80	; 128
    3c9a:	9f e3       	ldi	r25, 0x3F	; 63
    3c9c:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__divsf3>
    3ca0:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__fp_inf>
    3ca4:	0c 94 85 20 	jmp	0x410a	; 0x410a <__fp_mpack>

00003ca8 <ldexp>:
    3ca8:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_splitA>
    3cac:	d8 f3       	brcs	.-10     	; 0x3ca4 <inverse+0x14>
    3cae:	99 23       	and	r25, r25
    3cb0:	c9 f3       	breq	.-14     	; 0x3ca4 <inverse+0x14>
    3cb2:	94 0f       	add	r25, r20
    3cb4:	51 1d       	adc	r21, r1
    3cb6:	a3 f3       	brvs	.-24     	; 0x3ca0 <inverse+0x10>
    3cb8:	91 50       	subi	r25, 0x01	; 1
    3cba:	50 40       	sbci	r21, 0x00	; 0
    3cbc:	94 f0       	brlt	.+36     	; 0x3ce2 <ldexp+0x3a>
    3cbe:	59 f0       	breq	.+22     	; 0x3cd6 <ldexp+0x2e>
    3cc0:	88 23       	and	r24, r24
    3cc2:	32 f0       	brmi	.+12     	; 0x3cd0 <ldexp+0x28>
    3cc4:	66 0f       	add	r22, r22
    3cc6:	77 1f       	adc	r23, r23
    3cc8:	88 1f       	adc	r24, r24
    3cca:	91 50       	subi	r25, 0x01	; 1
    3ccc:	50 40       	sbci	r21, 0x00	; 0
    3cce:	c1 f7       	brne	.-16     	; 0x3cc0 <ldexp+0x18>
    3cd0:	9e 3f       	cpi	r25, 0xFE	; 254
    3cd2:	51 05       	cpc	r21, r1
    3cd4:	2c f7       	brge	.-54     	; 0x3ca0 <inverse+0x10>
    3cd6:	88 0f       	add	r24, r24
    3cd8:	91 1d       	adc	r25, r1
    3cda:	96 95       	lsr	r25
    3cdc:	87 95       	ror	r24
    3cde:	97 f9       	bld	r25, 7
    3ce0:	08 95       	ret
    3ce2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ce4:	ac f0       	brlt	.+42     	; 0x3d10 <ldexp+0x68>
    3ce6:	98 3e       	cpi	r25, 0xE8	; 232
    3ce8:	9c f0       	brlt	.+38     	; 0x3d10 <ldexp+0x68>
    3cea:	bb 27       	eor	r27, r27
    3cec:	86 95       	lsr	r24
    3cee:	77 95       	ror	r23
    3cf0:	67 95       	ror	r22
    3cf2:	b7 95       	ror	r27
    3cf4:	08 f4       	brcc	.+2      	; 0x3cf8 <ldexp+0x50>
    3cf6:	b1 60       	ori	r27, 0x01	; 1
    3cf8:	93 95       	inc	r25
    3cfa:	c1 f7       	brne	.-16     	; 0x3cec <ldexp+0x44>
    3cfc:	bb 0f       	add	r27, r27
    3cfe:	58 f7       	brcc	.-42     	; 0x3cd6 <ldexp+0x2e>
    3d00:	11 f4       	brne	.+4      	; 0x3d06 <ldexp+0x5e>
    3d02:	60 ff       	sbrs	r22, 0
    3d04:	e8 cf       	rjmp	.-48     	; 0x3cd6 <ldexp+0x2e>
    3d06:	6f 5f       	subi	r22, 0xFF	; 255
    3d08:	7f 4f       	sbci	r23, 0xFF	; 255
    3d0a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0e:	e3 cf       	rjmp	.-58     	; 0x3cd6 <ldexp+0x2e>
    3d10:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_szero>

00003d14 <log10>:
    3d14:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <log>
    3d18:	29 ed       	ldi	r18, 0xD9	; 217
    3d1a:	3b e5       	ldi	r19, 0x5B	; 91
    3d1c:	4e ed       	ldi	r20, 0xDE	; 222
    3d1e:	5e e3       	ldi	r21, 0x3E	; 62
    3d20:	0c 94 16 1f 	jmp	0x3e2c	; 0x3e2c <__mulsf3>
    3d24:	16 f0       	brts	.+4      	; 0x3d2a <log10+0x16>
    3d26:	0c 94 85 20 	jmp	0x410a	; 0x410a <__fp_mpack>
    3d2a:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_nan>
    3d2e:	68 94       	set
    3d30:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__fp_inf>

00003d34 <log>:
    3d34:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_splitA>
    3d38:	a8 f3       	brcs	.-22     	; 0x3d24 <log10+0x10>
    3d3a:	99 23       	and	r25, r25
    3d3c:	c1 f3       	breq	.-16     	; 0x3d2e <log10+0x1a>
    3d3e:	ae f3       	brts	.-22     	; 0x3d2a <log10+0x16>
    3d40:	df 93       	push	r29
    3d42:	cf 93       	push	r28
    3d44:	1f 93       	push	r17
    3d46:	0f 93       	push	r16
    3d48:	ff 92       	push	r15
    3d4a:	c9 2f       	mov	r28, r25
    3d4c:	dd 27       	eor	r29, r29
    3d4e:	88 23       	and	r24, r24
    3d50:	2a f0       	brmi	.+10     	; 0x3d5c <log+0x28>
    3d52:	21 97       	sbiw	r28, 0x01	; 1
    3d54:	66 0f       	add	r22, r22
    3d56:	77 1f       	adc	r23, r23
    3d58:	88 1f       	adc	r24, r24
    3d5a:	da f7       	brpl	.-10     	; 0x3d52 <log+0x1e>
    3d5c:	20 e0       	ldi	r18, 0x00	; 0
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	40 e8       	ldi	r20, 0x80	; 128
    3d62:	5f eb       	ldi	r21, 0xBF	; 191
    3d64:	9f e3       	ldi	r25, 0x3F	; 63
    3d66:	88 39       	cpi	r24, 0x98	; 152
    3d68:	20 f0       	brcs	.+8      	; 0x3d72 <log+0x3e>
    3d6a:	80 3e       	cpi	r24, 0xE0	; 224
    3d6c:	38 f0       	brcs	.+14     	; 0x3d7c <log+0x48>
    3d6e:	21 96       	adiw	r28, 0x01	; 1
    3d70:	8f 77       	andi	r24, 0x7F	; 127
    3d72:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    3d76:	e6 ed       	ldi	r30, 0xD6	; 214
    3d78:	f0 e0       	ldi	r31, 0x00	; 0
    3d7a:	04 c0       	rjmp	.+8      	; 0x3d84 <log+0x50>
    3d7c:	0e 94 84 1b 	call	0x3708	; 0x3708 <__addsf3>
    3d80:	e3 e0       	ldi	r30, 0x03	; 3
    3d82:	f1 e0       	ldi	r31, 0x01	; 1
    3d84:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <__fp_powser>
    3d88:	8b 01       	movw	r16, r22
    3d8a:	be 01       	movw	r22, r28
    3d8c:	ec 01       	movw	r28, r24
    3d8e:	fb 2e       	mov	r15, r27
    3d90:	6f 57       	subi	r22, 0x7F	; 127
    3d92:	71 09       	sbc	r23, r1
    3d94:	75 95       	asr	r23
    3d96:	77 1f       	adc	r23, r23
    3d98:	88 0b       	sbc	r24, r24
    3d9a:	99 0b       	sbc	r25, r25
    3d9c:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__floatsisf>
    3da0:	28 e1       	ldi	r18, 0x18	; 24
    3da2:	32 e7       	ldi	r19, 0x72	; 114
    3da4:	41 e3       	ldi	r20, 0x31	; 49
    3da6:	5f e3       	ldi	r21, 0x3F	; 63
    3da8:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__mulsf3x>
    3dac:	af 2d       	mov	r26, r15
    3dae:	98 01       	movw	r18, r16
    3db0:	ae 01       	movw	r20, r28
    3db2:	ff 90       	pop	r15
    3db4:	0f 91       	pop	r16
    3db6:	1f 91       	pop	r17
    3db8:	cf 91       	pop	r28
    3dba:	df 91       	pop	r29
    3dbc:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__addsf3x>
    3dc0:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__fp_round>

00003dc4 <modf>:
    3dc4:	fa 01       	movw	r30, r20
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	aa 0f       	add	r26, r26
    3dca:	bb 1f       	adc	r27, r27
    3dcc:	9b 01       	movw	r18, r22
    3dce:	ac 01       	movw	r20, r24
    3dd0:	bf 57       	subi	r27, 0x7F	; 127
    3dd2:	28 f4       	brcc	.+10     	; 0x3dde <modf+0x1a>
    3dd4:	22 27       	eor	r18, r18
    3dd6:	33 27       	eor	r19, r19
    3dd8:	44 27       	eor	r20, r20
    3dda:	50 78       	andi	r21, 0x80	; 128
    3ddc:	20 c0       	rjmp	.+64     	; 0x3e1e <modf+0x5a>
    3dde:	b7 51       	subi	r27, 0x17	; 23
    3de0:	90 f4       	brcc	.+36     	; 0x3e06 <modf+0x42>
    3de2:	ab 2f       	mov	r26, r27
    3de4:	00 24       	eor	r0, r0
    3de6:	46 95       	lsr	r20
    3de8:	37 95       	ror	r19
    3dea:	27 95       	ror	r18
    3dec:	01 1c       	adc	r0, r1
    3dee:	a3 95       	inc	r26
    3df0:	d2 f3       	brmi	.-12     	; 0x3de6 <modf+0x22>
    3df2:	00 20       	and	r0, r0
    3df4:	71 f0       	breq	.+28     	; 0x3e12 <modf+0x4e>
    3df6:	22 0f       	add	r18, r18
    3df8:	33 1f       	adc	r19, r19
    3dfa:	44 1f       	adc	r20, r20
    3dfc:	b3 95       	inc	r27
    3dfe:	da f3       	brmi	.-10     	; 0x3df6 <modf+0x32>
    3e00:	0e d0       	rcall	.+28     	; 0x3e1e <modf+0x5a>
    3e02:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__subsf3>
    3e06:	61 30       	cpi	r22, 0x01	; 1
    3e08:	71 05       	cpc	r23, r1
    3e0a:	a0 e8       	ldi	r26, 0x80	; 128
    3e0c:	8a 07       	cpc	r24, r26
    3e0e:	b9 46       	sbci	r27, 0x69	; 105
    3e10:	30 f4       	brcc	.+12     	; 0x3e1e <modf+0x5a>
    3e12:	9b 01       	movw	r18, r22
    3e14:	ac 01       	movw	r20, r24
    3e16:	66 27       	eor	r22, r22
    3e18:	77 27       	eor	r23, r23
    3e1a:	88 27       	eor	r24, r24
    3e1c:	90 78       	andi	r25, 0x80	; 128
    3e1e:	30 96       	adiw	r30, 0x00	; 0
    3e20:	21 f0       	breq	.+8      	; 0x3e2a <modf+0x66>
    3e22:	20 83       	st	Z, r18
    3e24:	31 83       	std	Z+1, r19	; 0x01
    3e26:	42 83       	std	Z+2, r20	; 0x02
    3e28:	53 83       	std	Z+3, r21	; 0x03
    3e2a:	08 95       	ret

00003e2c <__mulsf3>:
    3e2c:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__mulsf3x>
    3e30:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__fp_round>
    3e34:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__fp_pscA>
    3e38:	38 f0       	brcs	.+14     	; 0x3e48 <__mulsf3+0x1c>
    3e3a:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__fp_pscB>
    3e3e:	20 f0       	brcs	.+8      	; 0x3e48 <__mulsf3+0x1c>
    3e40:	95 23       	and	r25, r21
    3e42:	11 f0       	breq	.+4      	; 0x3e48 <__mulsf3+0x1c>
    3e44:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__fp_inf>
    3e48:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_nan>
    3e4c:	11 24       	eor	r1, r1
    3e4e:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_szero>

00003e52 <__mulsf3x>:
    3e52:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__fp_split3>
    3e56:	70 f3       	brcs	.-36     	; 0x3e34 <__mulsf3+0x8>

00003e58 <__mulsf3_pse>:
    3e58:	95 9f       	mul	r25, r21
    3e5a:	c1 f3       	breq	.-16     	; 0x3e4c <__mulsf3+0x20>
    3e5c:	95 0f       	add	r25, r21
    3e5e:	50 e0       	ldi	r21, 0x00	; 0
    3e60:	55 1f       	adc	r21, r21
    3e62:	62 9f       	mul	r22, r18
    3e64:	f0 01       	movw	r30, r0
    3e66:	72 9f       	mul	r23, r18
    3e68:	bb 27       	eor	r27, r27
    3e6a:	f0 0d       	add	r31, r0
    3e6c:	b1 1d       	adc	r27, r1
    3e6e:	63 9f       	mul	r22, r19
    3e70:	aa 27       	eor	r26, r26
    3e72:	f0 0d       	add	r31, r0
    3e74:	b1 1d       	adc	r27, r1
    3e76:	aa 1f       	adc	r26, r26
    3e78:	64 9f       	mul	r22, r20
    3e7a:	66 27       	eor	r22, r22
    3e7c:	b0 0d       	add	r27, r0
    3e7e:	a1 1d       	adc	r26, r1
    3e80:	66 1f       	adc	r22, r22
    3e82:	82 9f       	mul	r24, r18
    3e84:	22 27       	eor	r18, r18
    3e86:	b0 0d       	add	r27, r0
    3e88:	a1 1d       	adc	r26, r1
    3e8a:	62 1f       	adc	r22, r18
    3e8c:	73 9f       	mul	r23, r19
    3e8e:	b0 0d       	add	r27, r0
    3e90:	a1 1d       	adc	r26, r1
    3e92:	62 1f       	adc	r22, r18
    3e94:	83 9f       	mul	r24, r19
    3e96:	a0 0d       	add	r26, r0
    3e98:	61 1d       	adc	r22, r1
    3e9a:	22 1f       	adc	r18, r18
    3e9c:	74 9f       	mul	r23, r20
    3e9e:	33 27       	eor	r19, r19
    3ea0:	a0 0d       	add	r26, r0
    3ea2:	61 1d       	adc	r22, r1
    3ea4:	23 1f       	adc	r18, r19
    3ea6:	84 9f       	mul	r24, r20
    3ea8:	60 0d       	add	r22, r0
    3eaa:	21 1d       	adc	r18, r1
    3eac:	82 2f       	mov	r24, r18
    3eae:	76 2f       	mov	r23, r22
    3eb0:	6a 2f       	mov	r22, r26
    3eb2:	11 24       	eor	r1, r1
    3eb4:	9f 57       	subi	r25, 0x7F	; 127
    3eb6:	50 40       	sbci	r21, 0x00	; 0
    3eb8:	9a f0       	brmi	.+38     	; 0x3ee0 <__mulsf3_pse+0x88>
    3eba:	f1 f0       	breq	.+60     	; 0x3ef8 <__mulsf3_pse+0xa0>
    3ebc:	88 23       	and	r24, r24
    3ebe:	4a f0       	brmi	.+18     	; 0x3ed2 <__mulsf3_pse+0x7a>
    3ec0:	ee 0f       	add	r30, r30
    3ec2:	ff 1f       	adc	r31, r31
    3ec4:	bb 1f       	adc	r27, r27
    3ec6:	66 1f       	adc	r22, r22
    3ec8:	77 1f       	adc	r23, r23
    3eca:	88 1f       	adc	r24, r24
    3ecc:	91 50       	subi	r25, 0x01	; 1
    3ece:	50 40       	sbci	r21, 0x00	; 0
    3ed0:	a9 f7       	brne	.-22     	; 0x3ebc <__mulsf3_pse+0x64>
    3ed2:	9e 3f       	cpi	r25, 0xFE	; 254
    3ed4:	51 05       	cpc	r21, r1
    3ed6:	80 f0       	brcs	.+32     	; 0x3ef8 <__mulsf3_pse+0xa0>
    3ed8:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__fp_inf>
    3edc:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_szero>
    3ee0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ee2:	e4 f3       	brlt	.-8      	; 0x3edc <__mulsf3_pse+0x84>
    3ee4:	98 3e       	cpi	r25, 0xE8	; 232
    3ee6:	d4 f3       	brlt	.-12     	; 0x3edc <__mulsf3_pse+0x84>
    3ee8:	86 95       	lsr	r24
    3eea:	77 95       	ror	r23
    3eec:	67 95       	ror	r22
    3eee:	b7 95       	ror	r27
    3ef0:	f7 95       	ror	r31
    3ef2:	e7 95       	ror	r30
    3ef4:	9f 5f       	subi	r25, 0xFF	; 255
    3ef6:	c1 f7       	brne	.-16     	; 0x3ee8 <__mulsf3_pse+0x90>
    3ef8:	fe 2b       	or	r31, r30
    3efa:	88 0f       	add	r24, r24
    3efc:	91 1d       	adc	r25, r1
    3efe:	96 95       	lsr	r25
    3f00:	87 95       	ror	r24
    3f02:	97 f9       	bld	r25, 7
    3f04:	08 95       	ret

00003f06 <pow>:
    3f06:	fa 01       	movw	r30, r20
    3f08:	ee 0f       	add	r30, r30
    3f0a:	ff 1f       	adc	r31, r31
    3f0c:	30 96       	adiw	r30, 0x00	; 0
    3f0e:	21 05       	cpc	r18, r1
    3f10:	31 05       	cpc	r19, r1
    3f12:	a1 f1       	breq	.+104    	; 0x3f7c <pow+0x76>
    3f14:	61 15       	cp	r22, r1
    3f16:	71 05       	cpc	r23, r1
    3f18:	61 f4       	brne	.+24     	; 0x3f32 <pow+0x2c>
    3f1a:	80 38       	cpi	r24, 0x80	; 128
    3f1c:	bf e3       	ldi	r27, 0x3F	; 63
    3f1e:	9b 07       	cpc	r25, r27
    3f20:	49 f1       	breq	.+82     	; 0x3f74 <pow+0x6e>
    3f22:	68 94       	set
    3f24:	90 38       	cpi	r25, 0x80	; 128
    3f26:	81 05       	cpc	r24, r1
    3f28:	61 f0       	breq	.+24     	; 0x3f42 <pow+0x3c>
    3f2a:	80 38       	cpi	r24, 0x80	; 128
    3f2c:	bf ef       	ldi	r27, 0xFF	; 255
    3f2e:	9b 07       	cpc	r25, r27
    3f30:	41 f0       	breq	.+16     	; 0x3f42 <pow+0x3c>
    3f32:	99 23       	and	r25, r25
    3f34:	4a f5       	brpl	.+82     	; 0x3f88 <pow+0x82>
    3f36:	ff 3f       	cpi	r31, 0xFF	; 255
    3f38:	e1 05       	cpc	r30, r1
    3f3a:	31 05       	cpc	r19, r1
    3f3c:	21 05       	cpc	r18, r1
    3f3e:	19 f1       	breq	.+70     	; 0x3f86 <pow+0x80>
    3f40:	e8 94       	clt
    3f42:	08 94       	sec
    3f44:	e7 95       	ror	r30
    3f46:	d9 01       	movw	r26, r18
    3f48:	aa 23       	and	r26, r26
    3f4a:	29 f4       	brne	.+10     	; 0x3f56 <pow+0x50>
    3f4c:	ab 2f       	mov	r26, r27
    3f4e:	be 2f       	mov	r27, r30
    3f50:	f8 5f       	subi	r31, 0xF8	; 248
    3f52:	d0 f3       	brcs	.-12     	; 0x3f48 <pow+0x42>
    3f54:	10 c0       	rjmp	.+32     	; 0x3f76 <pow+0x70>
    3f56:	ff 5f       	subi	r31, 0xFF	; 255
    3f58:	70 f4       	brcc	.+28     	; 0x3f76 <pow+0x70>
    3f5a:	a6 95       	lsr	r26
    3f5c:	e0 f7       	brcc	.-8      	; 0x3f56 <pow+0x50>
    3f5e:	f7 39       	cpi	r31, 0x97	; 151
    3f60:	50 f0       	brcs	.+20     	; 0x3f76 <pow+0x70>
    3f62:	19 f0       	breq	.+6      	; 0x3f6a <pow+0x64>
    3f64:	ff 3a       	cpi	r31, 0xAF	; 175
    3f66:	38 f4       	brcc	.+14     	; 0x3f76 <pow+0x70>
    3f68:	9f 77       	andi	r25, 0x7F	; 127
    3f6a:	9f 93       	push	r25
    3f6c:	0d d0       	rcall	.+26     	; 0x3f88 <pow+0x82>
    3f6e:	0f 90       	pop	r0
    3f70:	07 fc       	sbrc	r0, 7
    3f72:	90 58       	subi	r25, 0x80	; 128
    3f74:	08 95       	ret
    3f76:	46 f0       	brts	.+16     	; 0x3f88 <pow+0x82>
    3f78:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_nan>
    3f7c:	60 e0       	ldi	r22, 0x00	; 0
    3f7e:	70 e0       	ldi	r23, 0x00	; 0
    3f80:	80 e8       	ldi	r24, 0x80	; 128
    3f82:	9f e3       	ldi	r25, 0x3F	; 63
    3f84:	08 95       	ret
    3f86:	4f e7       	ldi	r20, 0x7F	; 127
    3f88:	9f 77       	andi	r25, 0x7F	; 127
    3f8a:	5f 93       	push	r21
    3f8c:	4f 93       	push	r20
    3f8e:	3f 93       	push	r19
    3f90:	2f 93       	push	r18
    3f92:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <log>
    3f96:	2f 91       	pop	r18
    3f98:	3f 91       	pop	r19
    3f9a:	4f 91       	pop	r20
    3f9c:	5f 91       	pop	r21
    3f9e:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    3fa2:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <exp>

00003fa6 <round>:
    3fa6:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_splitA>
    3faa:	e8 f0       	brcs	.+58     	; 0x3fe6 <round+0x40>
    3fac:	9e 37       	cpi	r25, 0x7E	; 126
    3fae:	e8 f0       	brcs	.+58     	; 0x3fea <round+0x44>
    3fb0:	96 39       	cpi	r25, 0x96	; 150
    3fb2:	b8 f4       	brcc	.+46     	; 0x3fe2 <round+0x3c>
    3fb4:	9e 38       	cpi	r25, 0x8E	; 142
    3fb6:	48 f4       	brcc	.+18     	; 0x3fca <round+0x24>
    3fb8:	67 2f       	mov	r22, r23
    3fba:	78 2f       	mov	r23, r24
    3fbc:	88 27       	eor	r24, r24
    3fbe:	98 5f       	subi	r25, 0xF8	; 248
    3fc0:	f9 cf       	rjmp	.-14     	; 0x3fb4 <round+0xe>
    3fc2:	86 95       	lsr	r24
    3fc4:	77 95       	ror	r23
    3fc6:	67 95       	ror	r22
    3fc8:	93 95       	inc	r25
    3fca:	95 39       	cpi	r25, 0x95	; 149
    3fcc:	d0 f3       	brcs	.-12     	; 0x3fc2 <round+0x1c>
    3fce:	b6 2f       	mov	r27, r22
    3fd0:	b1 70       	andi	r27, 0x01	; 1
    3fd2:	6b 0f       	add	r22, r27
    3fd4:	71 1d       	adc	r23, r1
    3fd6:	81 1d       	adc	r24, r1
    3fd8:	20 f4       	brcc	.+8      	; 0x3fe2 <round+0x3c>
    3fda:	87 95       	ror	r24
    3fdc:	77 95       	ror	r23
    3fde:	67 95       	ror	r22
    3fe0:	93 95       	inc	r25
    3fe2:	0c 94 6a 20 	jmp	0x40d4	; 0x40d4 <__fp_mintl>
    3fe6:	0c 94 85 20 	jmp	0x410a	; 0x410a <__fp_mpack>
    3fea:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__fp_szero>

00003fee <sin>:
    3fee:	9f 93       	push	r25
    3ff0:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__fp_rempio2>
    3ff4:	0f 90       	pop	r0
    3ff6:	07 fc       	sbrc	r0, 7
    3ff8:	ee 5f       	subi	r30, 0xFE	; 254
    3ffa:	0c 94 06 1e 	jmp	0x3c0c	; 0x3c0c <__fp_sinus>
    3ffe:	19 f4       	brne	.+6      	; 0x4006 <sin+0x18>
    4000:	16 f4       	brtc	.+4      	; 0x4006 <sin+0x18>
    4002:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_nan>
    4006:	0c 94 85 20 	jmp	0x410a	; 0x410a <__fp_mpack>

0000400a <sqrt>:
    400a:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_splitA>
    400e:	b8 f3       	brcs	.-18     	; 0x3ffe <sin+0x10>
    4010:	99 23       	and	r25, r25
    4012:	c9 f3       	breq	.-14     	; 0x4006 <sin+0x18>
    4014:	b6 f3       	brts	.-20     	; 0x4002 <sin+0x14>
    4016:	9f 57       	subi	r25, 0x7F	; 127
    4018:	55 0b       	sbc	r21, r21
    401a:	87 ff       	sbrs	r24, 7
    401c:	0e 94 93 20 	call	0x4126	; 0x4126 <__fp_norm2>
    4020:	00 24       	eor	r0, r0
    4022:	a0 e6       	ldi	r26, 0x60	; 96
    4024:	40 ea       	ldi	r20, 0xA0	; 160
    4026:	90 01       	movw	r18, r0
    4028:	80 58       	subi	r24, 0x80	; 128
    402a:	56 95       	lsr	r21
    402c:	97 95       	ror	r25
    402e:	28 f4       	brcc	.+10     	; 0x403a <sqrt+0x30>
    4030:	80 5c       	subi	r24, 0xC0	; 192
    4032:	66 0f       	add	r22, r22
    4034:	77 1f       	adc	r23, r23
    4036:	88 1f       	adc	r24, r24
    4038:	20 f0       	brcs	.+8      	; 0x4042 <sqrt+0x38>
    403a:	26 17       	cp	r18, r22
    403c:	37 07       	cpc	r19, r23
    403e:	48 07       	cpc	r20, r24
    4040:	30 f4       	brcc	.+12     	; 0x404e <sqrt+0x44>
    4042:	62 1b       	sub	r22, r18
    4044:	73 0b       	sbc	r23, r19
    4046:	84 0b       	sbc	r24, r20
    4048:	20 29       	or	r18, r0
    404a:	31 29       	or	r19, r1
    404c:	4a 2b       	or	r20, r26
    404e:	a6 95       	lsr	r26
    4050:	17 94       	ror	r1
    4052:	07 94       	ror	r0
    4054:	20 25       	eor	r18, r0
    4056:	31 25       	eor	r19, r1
    4058:	4a 27       	eor	r20, r26
    405a:	58 f7       	brcc	.-42     	; 0x4032 <sqrt+0x28>
    405c:	66 0f       	add	r22, r22
    405e:	77 1f       	adc	r23, r23
    4060:	88 1f       	adc	r24, r24
    4062:	20 f0       	brcs	.+8      	; 0x406c <sqrt+0x62>
    4064:	26 17       	cp	r18, r22
    4066:	37 07       	cpc	r19, r23
    4068:	48 07       	cpc	r20, r24
    406a:	30 f4       	brcc	.+12     	; 0x4078 <sqrt+0x6e>
    406c:	62 0b       	sbc	r22, r18
    406e:	73 0b       	sbc	r23, r19
    4070:	84 0b       	sbc	r24, r20
    4072:	20 0d       	add	r18, r0
    4074:	31 1d       	adc	r19, r1
    4076:	41 1d       	adc	r20, r1
    4078:	a0 95       	com	r26
    407a:	81 f7       	brne	.-32     	; 0x405c <sqrt+0x52>
    407c:	b9 01       	movw	r22, r18
    407e:	84 2f       	mov	r24, r20
    4080:	91 58       	subi	r25, 0x81	; 129
    4082:	88 0f       	add	r24, r24
    4084:	96 95       	lsr	r25
    4086:	87 95       	ror	r24
    4088:	08 95       	ret

0000408a <tan>:
    408a:	df 93       	push	r29
    408c:	d9 2f       	mov	r29, r25
    408e:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__fp_rempio2>
    4092:	e6 95       	lsr	r30
    4094:	d7 95       	ror	r29
    4096:	2a ed       	ldi	r18, 0xDA	; 218
    4098:	3f e0       	ldi	r19, 0x0F	; 15
    409a:	49 e4       	ldi	r20, 0x49	; 73
    409c:	5f e3       	ldi	r21, 0x3F	; 63
    409e:	b3 3a       	cpi	r27, 0xA3	; 163
    40a0:	62 07       	cpc	r22, r18
    40a2:	73 07       	cpc	r23, r19
    40a4:	84 07       	cpc	r24, r20
    40a6:	95 07       	cpc	r25, r21
    40a8:	d7 95       	ror	r29
    40aa:	3a f0       	brmi	.+14     	; 0x40ba <tan+0x30>
    40ac:	a2 ea       	ldi	r26, 0xA2	; 162
    40ae:	49 ec       	ldi	r20, 0xC9	; 201
    40b0:	90 68       	ori	r25, 0x80	; 128
    40b2:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__addsf3x>
    40b6:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <__fp_round>
    40ba:	e0 e3       	ldi	r30, 0x30	; 48
    40bc:	f1 e0       	ldi	r31, 0x01	; 1
    40be:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__fp_powsodd>
    40c2:	dd 0f       	add	r29, r29
    40c4:	13 f0       	brvs	.+4      	; 0x40ca <tan+0x40>
    40c6:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <inverse>
    40ca:	dd 0f       	add	r29, r29
    40cc:	0b f4       	brvc	.+2      	; 0x40d0 <tan+0x46>
    40ce:	90 58       	subi	r25, 0x80	; 128
    40d0:	df 91       	pop	r29
    40d2:	08 95       	ret

000040d4 <__fp_mintl>:
    40d4:	88 23       	and	r24, r24
    40d6:	71 f4       	brne	.+28     	; 0x40f4 <__fp_mintl+0x20>
    40d8:	77 23       	and	r23, r23
    40da:	21 f0       	breq	.+8      	; 0x40e4 <__fp_mintl+0x10>
    40dc:	98 50       	subi	r25, 0x08	; 8
    40de:	87 2b       	or	r24, r23
    40e0:	76 2f       	mov	r23, r22
    40e2:	07 c0       	rjmp	.+14     	; 0x40f2 <__fp_mintl+0x1e>
    40e4:	66 23       	and	r22, r22
    40e6:	11 f4       	brne	.+4      	; 0x40ec <__fp_mintl+0x18>
    40e8:	99 27       	eor	r25, r25
    40ea:	0d c0       	rjmp	.+26     	; 0x4106 <__fp_mintl+0x32>
    40ec:	90 51       	subi	r25, 0x10	; 16
    40ee:	86 2b       	or	r24, r22
    40f0:	70 e0       	ldi	r23, 0x00	; 0
    40f2:	60 e0       	ldi	r22, 0x00	; 0
    40f4:	2a f0       	brmi	.+10     	; 0x4100 <__fp_mintl+0x2c>
    40f6:	9a 95       	dec	r25
    40f8:	66 0f       	add	r22, r22
    40fa:	77 1f       	adc	r23, r23
    40fc:	88 1f       	adc	r24, r24
    40fe:	da f7       	brpl	.-10     	; 0x40f6 <__fp_mintl+0x22>
    4100:	88 0f       	add	r24, r24
    4102:	96 95       	lsr	r25
    4104:	87 95       	ror	r24
    4106:	97 f9       	bld	r25, 7
    4108:	08 95       	ret

0000410a <__fp_mpack>:
    410a:	9f 3f       	cpi	r25, 0xFF	; 255
    410c:	31 f0       	breq	.+12     	; 0x411a <__fp_mpack_finite+0xc>

0000410e <__fp_mpack_finite>:
    410e:	91 50       	subi	r25, 0x01	; 1
    4110:	20 f4       	brcc	.+8      	; 0x411a <__fp_mpack_finite+0xc>
    4112:	87 95       	ror	r24
    4114:	77 95       	ror	r23
    4116:	67 95       	ror	r22
    4118:	b7 95       	ror	r27
    411a:	88 0f       	add	r24, r24
    411c:	91 1d       	adc	r25, r1
    411e:	96 95       	lsr	r25
    4120:	87 95       	ror	r24
    4122:	97 f9       	bld	r25, 7
    4124:	08 95       	ret

00004126 <__fp_norm2>:
    4126:	91 50       	subi	r25, 0x01	; 1
    4128:	50 40       	sbci	r21, 0x00	; 0
    412a:	66 0f       	add	r22, r22
    412c:	77 1f       	adc	r23, r23
    412e:	88 1f       	adc	r24, r24
    4130:	d2 f7       	brpl	.-12     	; 0x4126 <__fp_norm2>
    4132:	08 95       	ret

00004134 <__tablejump2__>:
    4134:	ee 0f       	add	r30, r30
    4136:	ff 1f       	adc	r31, r31
    4138:	05 90       	lpm	r0, Z+
    413a:	f4 91       	lpm	r31, Z
    413c:	e0 2d       	mov	r30, r0
    413e:	09 94       	ijmp

00004140 <dtostrf>:
    4140:	ef 92       	push	r14
    4142:	0f 93       	push	r16
    4144:	1f 93       	push	r17
    4146:	cf 93       	push	r28
    4148:	df 93       	push	r29
    414a:	e8 01       	movw	r28, r16
    414c:	47 fd       	sbrc	r20, 7
    414e:	02 c0       	rjmp	.+4      	; 0x4154 <dtostrf+0x14>
    4150:	34 e0       	ldi	r19, 0x04	; 4
    4152:	01 c0       	rjmp	.+2      	; 0x4156 <dtostrf+0x16>
    4154:	34 e1       	ldi	r19, 0x14	; 20
    4156:	04 2e       	mov	r0, r20
    4158:	00 0c       	add	r0, r0
    415a:	55 0b       	sbc	r21, r21
    415c:	57 ff       	sbrs	r21, 7
    415e:	03 c0       	rjmp	.+6      	; 0x4166 <dtostrf+0x26>
    4160:	51 95       	neg	r21
    4162:	41 95       	neg	r20
    4164:	51 09       	sbc	r21, r1
    4166:	e3 2e       	mov	r14, r19
    4168:	02 2f       	mov	r16, r18
    416a:	24 2f       	mov	r18, r20
    416c:	ae 01       	movw	r20, r28
    416e:	0e 94 06 21 	call	0x420c	; 0x420c <dtoa_prf>
    4172:	ce 01       	movw	r24, r28
    4174:	df 91       	pop	r29
    4176:	cf 91       	pop	r28
    4178:	1f 91       	pop	r17
    417a:	0f 91       	pop	r16
    417c:	ef 90       	pop	r14
    417e:	08 95       	ret

00004180 <atof>:
    4180:	66 27       	eor	r22, r22
    4182:	77 27       	eor	r23, r23
    4184:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <strtod>

00004188 <isupper>:
    4188:	85 fd       	sbrc	r24, 5
    418a:	0c 94 86 24 	jmp	0x490c	; 0x490c <__ctype_isfalse>

0000418e <isalpha>:
    418e:	80 62       	ori	r24, 0x20	; 32

00004190 <islower>:
    4190:	91 11       	cpse	r25, r1
    4192:	0c 94 86 24 	jmp	0x490c	; 0x490c <__ctype_isfalse>
    4196:	81 56       	subi	r24, 0x61	; 97
    4198:	8a 51       	subi	r24, 0x1A	; 26
    419a:	d8 f7       	brcc	.-10     	; 0x4192 <islower+0x2>
    419c:	08 95       	ret

0000419e <isspace>:
    419e:	91 11       	cpse	r25, r1
    41a0:	0c 94 86 24 	jmp	0x490c	; 0x490c <__ctype_isfalse>
    41a4:	80 32       	cpi	r24, 0x20	; 32
    41a6:	19 f0       	breq	.+6      	; 0x41ae <isspace+0x10>
    41a8:	89 50       	subi	r24, 0x09	; 9
    41aa:	85 50       	subi	r24, 0x05	; 5
    41ac:	c8 f7       	brcc	.-14     	; 0x41a0 <isspace+0x2>
    41ae:	08 95       	ret

000041b0 <toupper>:
    41b0:	91 11       	cpse	r25, r1
    41b2:	08 95       	ret
    41b4:	81 56       	subi	r24, 0x61	; 97
    41b6:	8a 51       	subi	r24, 0x1A	; 26
    41b8:	08 f4       	brcc	.+2      	; 0x41bc <toupper+0xc>
    41ba:	80 52       	subi	r24, 0x20	; 32
    41bc:	85 58       	subi	r24, 0x85	; 133
    41be:	08 95       	ret

000041c0 <strcat>:
    41c0:	fb 01       	movw	r30, r22
    41c2:	dc 01       	movw	r26, r24
    41c4:	0d 90       	ld	r0, X+
    41c6:	00 20       	and	r0, r0
    41c8:	e9 f7       	brne	.-6      	; 0x41c4 <strcat+0x4>
    41ca:	11 97       	sbiw	r26, 0x01	; 1
    41cc:	01 90       	ld	r0, Z+
    41ce:	0d 92       	st	X+, r0
    41d0:	00 20       	and	r0, r0
    41d2:	e1 f7       	brne	.-8      	; 0x41cc <strcat+0xc>
    41d4:	08 95       	ret

000041d6 <strchr>:
    41d6:	fc 01       	movw	r30, r24
    41d8:	81 91       	ld	r24, Z+
    41da:	86 17       	cp	r24, r22
    41dc:	21 f0       	breq	.+8      	; 0x41e6 <strchr+0x10>
    41de:	88 23       	and	r24, r24
    41e0:	d9 f7       	brne	.-10     	; 0x41d8 <strchr+0x2>
    41e2:	99 27       	eor	r25, r25
    41e4:	08 95       	ret
    41e6:	31 97       	sbiw	r30, 0x01	; 1
    41e8:	cf 01       	movw	r24, r30
    41ea:	08 95       	ret

000041ec <strcmp>:
    41ec:	fb 01       	movw	r30, r22
    41ee:	dc 01       	movw	r26, r24
    41f0:	8d 91       	ld	r24, X+
    41f2:	01 90       	ld	r0, Z+
    41f4:	80 19       	sub	r24, r0
    41f6:	01 10       	cpse	r0, r1
    41f8:	d9 f3       	breq	.-10     	; 0x41f0 <strcmp+0x4>
    41fa:	99 0b       	sbc	r25, r25
    41fc:	08 95       	ret

000041fe <strcpy>:
    41fe:	fb 01       	movw	r30, r22
    4200:	dc 01       	movw	r26, r24
    4202:	01 90       	ld	r0, Z+
    4204:	0d 92       	st	X+, r0
    4206:	00 20       	and	r0, r0
    4208:	e1 f7       	brne	.-8      	; 0x4202 <strcpy+0x4>
    420a:	08 95       	ret

0000420c <dtoa_prf>:
    420c:	a9 e0       	ldi	r26, 0x09	; 9
    420e:	b0 e0       	ldi	r27, 0x00	; 0
    4210:	ec e0       	ldi	r30, 0x0C	; 12
    4212:	f1 e2       	ldi	r31, 0x21	; 33
    4214:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__prologue_saves__+0xc>
    4218:	6a 01       	movw	r12, r20
    421a:	12 2f       	mov	r17, r18
    421c:	b0 2e       	mov	r11, r16
    421e:	2b e3       	ldi	r18, 0x3B	; 59
    4220:	20 17       	cp	r18, r16
    4222:	20 f0       	brcs	.+8      	; 0x422c <dtoa_prf+0x20>
    4224:	ff 24       	eor	r15, r15
    4226:	f3 94       	inc	r15
    4228:	f0 0e       	add	r15, r16
    422a:	02 c0       	rjmp	.+4      	; 0x4230 <dtoa_prf+0x24>
    422c:	2c e3       	ldi	r18, 0x3C	; 60
    422e:	f2 2e       	mov	r15, r18
    4230:	0f 2d       	mov	r16, r15
    4232:	27 e0       	ldi	r18, 0x07	; 7
    4234:	ae 01       	movw	r20, r28
    4236:	4f 5f       	subi	r20, 0xFF	; 255
    4238:	5f 4f       	sbci	r21, 0xFF	; 255
    423a:	0e 94 ae 23 	call	0x475c	; 0x475c <__ftoa_engine>
    423e:	bc 01       	movw	r22, r24
    4240:	49 81       	ldd	r20, Y+1	; 0x01
    4242:	84 2f       	mov	r24, r20
    4244:	89 70       	andi	r24, 0x09	; 9
    4246:	81 30       	cpi	r24, 0x01	; 1
    4248:	31 f0       	breq	.+12     	; 0x4256 <dtoa_prf+0x4a>
    424a:	e1 fc       	sbrc	r14, 1
    424c:	06 c0       	rjmp	.+12     	; 0x425a <dtoa_prf+0x4e>
    424e:	e0 fe       	sbrs	r14, 0
    4250:	06 c0       	rjmp	.+12     	; 0x425e <dtoa_prf+0x52>
    4252:	90 e2       	ldi	r25, 0x20	; 32
    4254:	05 c0       	rjmp	.+10     	; 0x4260 <dtoa_prf+0x54>
    4256:	9d e2       	ldi	r25, 0x2D	; 45
    4258:	03 c0       	rjmp	.+6      	; 0x4260 <dtoa_prf+0x54>
    425a:	9b e2       	ldi	r25, 0x2B	; 43
    425c:	01 c0       	rjmp	.+2      	; 0x4260 <dtoa_prf+0x54>
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	5e 2d       	mov	r21, r14
    4262:	50 71       	andi	r21, 0x10	; 16
    4264:	43 ff       	sbrs	r20, 3
    4266:	3c c0       	rjmp	.+120    	; 0x42e0 <dtoa_prf+0xd4>
    4268:	91 11       	cpse	r25, r1
    426a:	02 c0       	rjmp	.+4      	; 0x4270 <dtoa_prf+0x64>
    426c:	83 e0       	ldi	r24, 0x03	; 3
    426e:	01 c0       	rjmp	.+2      	; 0x4272 <dtoa_prf+0x66>
    4270:	84 e0       	ldi	r24, 0x04	; 4
    4272:	81 17       	cp	r24, r17
    4274:	18 f4       	brcc	.+6      	; 0x427c <dtoa_prf+0x70>
    4276:	21 2f       	mov	r18, r17
    4278:	28 1b       	sub	r18, r24
    427a:	01 c0       	rjmp	.+2      	; 0x427e <dtoa_prf+0x72>
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	51 11       	cpse	r21, r1
    4280:	0b c0       	rjmp	.+22     	; 0x4298 <dtoa_prf+0x8c>
    4282:	f6 01       	movw	r30, r12
    4284:	82 2f       	mov	r24, r18
    4286:	30 e2       	ldi	r19, 0x20	; 32
    4288:	88 23       	and	r24, r24
    428a:	19 f0       	breq	.+6      	; 0x4292 <dtoa_prf+0x86>
    428c:	31 93       	st	Z+, r19
    428e:	81 50       	subi	r24, 0x01	; 1
    4290:	fb cf       	rjmp	.-10     	; 0x4288 <dtoa_prf+0x7c>
    4292:	c2 0e       	add	r12, r18
    4294:	d1 1c       	adc	r13, r1
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	99 23       	and	r25, r25
    429a:	29 f0       	breq	.+10     	; 0x42a6 <dtoa_prf+0x9a>
    429c:	d6 01       	movw	r26, r12
    429e:	9c 93       	st	X, r25
    42a0:	f6 01       	movw	r30, r12
    42a2:	31 96       	adiw	r30, 0x01	; 1
    42a4:	6f 01       	movw	r12, r30
    42a6:	c6 01       	movw	r24, r12
    42a8:	03 96       	adiw	r24, 0x03	; 3
    42aa:	e2 fe       	sbrs	r14, 2
    42ac:	0a c0       	rjmp	.+20     	; 0x42c2 <dtoa_prf+0xb6>
    42ae:	3e e4       	ldi	r19, 0x4E	; 78
    42b0:	d6 01       	movw	r26, r12
    42b2:	3c 93       	st	X, r19
    42b4:	41 e4       	ldi	r20, 0x41	; 65
    42b6:	11 96       	adiw	r26, 0x01	; 1
    42b8:	4c 93       	st	X, r20
    42ba:	11 97       	sbiw	r26, 0x01	; 1
    42bc:	12 96       	adiw	r26, 0x02	; 2
    42be:	3c 93       	st	X, r19
    42c0:	06 c0       	rjmp	.+12     	; 0x42ce <dtoa_prf+0xc2>
    42c2:	3e e6       	ldi	r19, 0x6E	; 110
    42c4:	f6 01       	movw	r30, r12
    42c6:	30 83       	st	Z, r19
    42c8:	41 e6       	ldi	r20, 0x61	; 97
    42ca:	41 83       	std	Z+1, r20	; 0x01
    42cc:	32 83       	std	Z+2, r19	; 0x02
    42ce:	fc 01       	movw	r30, r24
    42d0:	32 2f       	mov	r19, r18
    42d2:	40 e2       	ldi	r20, 0x20	; 32
    42d4:	33 23       	and	r19, r19
    42d6:	09 f4       	brne	.+2      	; 0x42da <dtoa_prf+0xce>
    42d8:	42 c0       	rjmp	.+132    	; 0x435e <dtoa_prf+0x152>
    42da:	41 93       	st	Z+, r20
    42dc:	31 50       	subi	r19, 0x01	; 1
    42de:	fa cf       	rjmp	.-12     	; 0x42d4 <dtoa_prf+0xc8>
    42e0:	42 ff       	sbrs	r20, 2
    42e2:	44 c0       	rjmp	.+136    	; 0x436c <dtoa_prf+0x160>
    42e4:	91 11       	cpse	r25, r1
    42e6:	02 c0       	rjmp	.+4      	; 0x42ec <dtoa_prf+0xe0>
    42e8:	83 e0       	ldi	r24, 0x03	; 3
    42ea:	01 c0       	rjmp	.+2      	; 0x42ee <dtoa_prf+0xe2>
    42ec:	84 e0       	ldi	r24, 0x04	; 4
    42ee:	81 17       	cp	r24, r17
    42f0:	18 f4       	brcc	.+6      	; 0x42f8 <dtoa_prf+0xec>
    42f2:	21 2f       	mov	r18, r17
    42f4:	28 1b       	sub	r18, r24
    42f6:	01 c0       	rjmp	.+2      	; 0x42fa <dtoa_prf+0xee>
    42f8:	20 e0       	ldi	r18, 0x00	; 0
    42fa:	51 11       	cpse	r21, r1
    42fc:	0b c0       	rjmp	.+22     	; 0x4314 <dtoa_prf+0x108>
    42fe:	f6 01       	movw	r30, r12
    4300:	82 2f       	mov	r24, r18
    4302:	30 e2       	ldi	r19, 0x20	; 32
    4304:	88 23       	and	r24, r24
    4306:	19 f0       	breq	.+6      	; 0x430e <dtoa_prf+0x102>
    4308:	31 93       	st	Z+, r19
    430a:	81 50       	subi	r24, 0x01	; 1
    430c:	fb cf       	rjmp	.-10     	; 0x4304 <dtoa_prf+0xf8>
    430e:	c2 0e       	add	r12, r18
    4310:	d1 1c       	adc	r13, r1
    4312:	20 e0       	ldi	r18, 0x00	; 0
    4314:	99 23       	and	r25, r25
    4316:	29 f0       	breq	.+10     	; 0x4322 <dtoa_prf+0x116>
    4318:	d6 01       	movw	r26, r12
    431a:	9c 93       	st	X, r25
    431c:	f6 01       	movw	r30, r12
    431e:	31 96       	adiw	r30, 0x01	; 1
    4320:	6f 01       	movw	r12, r30
    4322:	c6 01       	movw	r24, r12
    4324:	03 96       	adiw	r24, 0x03	; 3
    4326:	e2 fe       	sbrs	r14, 2
    4328:	0b c0       	rjmp	.+22     	; 0x4340 <dtoa_prf+0x134>
    432a:	39 e4       	ldi	r19, 0x49	; 73
    432c:	d6 01       	movw	r26, r12
    432e:	3c 93       	st	X, r19
    4330:	3e e4       	ldi	r19, 0x4E	; 78
    4332:	11 96       	adiw	r26, 0x01	; 1
    4334:	3c 93       	st	X, r19
    4336:	11 97       	sbiw	r26, 0x01	; 1
    4338:	36 e4       	ldi	r19, 0x46	; 70
    433a:	12 96       	adiw	r26, 0x02	; 2
    433c:	3c 93       	st	X, r19
    433e:	07 c0       	rjmp	.+14     	; 0x434e <dtoa_prf+0x142>
    4340:	39 e6       	ldi	r19, 0x69	; 105
    4342:	f6 01       	movw	r30, r12
    4344:	30 83       	st	Z, r19
    4346:	3e e6       	ldi	r19, 0x6E	; 110
    4348:	31 83       	std	Z+1, r19	; 0x01
    434a:	36 e6       	ldi	r19, 0x66	; 102
    434c:	32 83       	std	Z+2, r19	; 0x02
    434e:	fc 01       	movw	r30, r24
    4350:	32 2f       	mov	r19, r18
    4352:	40 e2       	ldi	r20, 0x20	; 32
    4354:	33 23       	and	r19, r19
    4356:	19 f0       	breq	.+6      	; 0x435e <dtoa_prf+0x152>
    4358:	41 93       	st	Z+, r20
    435a:	31 50       	subi	r19, 0x01	; 1
    435c:	fb cf       	rjmp	.-10     	; 0x4354 <dtoa_prf+0x148>
    435e:	fc 01       	movw	r30, r24
    4360:	e2 0f       	add	r30, r18
    4362:	f1 1d       	adc	r31, r1
    4364:	10 82       	st	Z, r1
    4366:	8e ef       	ldi	r24, 0xFE	; 254
    4368:	9f ef       	ldi	r25, 0xFF	; 255
    436a:	a6 c0       	rjmp	.+332    	; 0x44b8 <dtoa_prf+0x2ac>
    436c:	21 e0       	ldi	r18, 0x01	; 1
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	91 11       	cpse	r25, r1
    4372:	02 c0       	rjmp	.+4      	; 0x4378 <dtoa_prf+0x16c>
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	16 16       	cp	r1, r22
    437a:	17 06       	cpc	r1, r23
    437c:	1c f4       	brge	.+6      	; 0x4384 <dtoa_prf+0x178>
    437e:	fb 01       	movw	r30, r22
    4380:	31 96       	adiw	r30, 0x01	; 1
    4382:	02 c0       	rjmp	.+4      	; 0x4388 <dtoa_prf+0x17c>
    4384:	e1 e0       	ldi	r30, 0x01	; 1
    4386:	f0 e0       	ldi	r31, 0x00	; 0
    4388:	2e 0f       	add	r18, r30
    438a:	3f 1f       	adc	r19, r31
    438c:	bb 20       	and	r11, r11
    438e:	21 f0       	breq	.+8      	; 0x4398 <dtoa_prf+0x18c>
    4390:	eb 2d       	mov	r30, r11
    4392:	f0 e0       	ldi	r31, 0x00	; 0
    4394:	31 96       	adiw	r30, 0x01	; 1
    4396:	02 c0       	rjmp	.+4      	; 0x439c <dtoa_prf+0x190>
    4398:	e0 e0       	ldi	r30, 0x00	; 0
    439a:	f0 e0       	ldi	r31, 0x00	; 0
    439c:	2e 0f       	add	r18, r30
    439e:	3f 1f       	adc	r19, r31
    43a0:	e1 2f       	mov	r30, r17
    43a2:	f0 e0       	ldi	r31, 0x00	; 0
    43a4:	2e 17       	cp	r18, r30
    43a6:	3f 07       	cpc	r19, r31
    43a8:	1c f4       	brge	.+6      	; 0x43b0 <dtoa_prf+0x1a4>
    43aa:	12 1b       	sub	r17, r18
    43ac:	21 2f       	mov	r18, r17
    43ae:	01 c0       	rjmp	.+2      	; 0x43b2 <dtoa_prf+0x1a6>
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	8e 2d       	mov	r24, r14
    43b4:	88 71       	andi	r24, 0x18	; 24
    43b6:	59 f4       	brne	.+22     	; 0x43ce <dtoa_prf+0x1c2>
    43b8:	f6 01       	movw	r30, r12
    43ba:	82 2f       	mov	r24, r18
    43bc:	30 e2       	ldi	r19, 0x20	; 32
    43be:	88 23       	and	r24, r24
    43c0:	19 f0       	breq	.+6      	; 0x43c8 <dtoa_prf+0x1bc>
    43c2:	31 93       	st	Z+, r19
    43c4:	81 50       	subi	r24, 0x01	; 1
    43c6:	fb cf       	rjmp	.-10     	; 0x43be <dtoa_prf+0x1b2>
    43c8:	c2 0e       	add	r12, r18
    43ca:	d1 1c       	adc	r13, r1
    43cc:	20 e0       	ldi	r18, 0x00	; 0
    43ce:	99 23       	and	r25, r25
    43d0:	29 f0       	breq	.+10     	; 0x43dc <dtoa_prf+0x1d0>
    43d2:	d6 01       	movw	r26, r12
    43d4:	9c 93       	st	X, r25
    43d6:	f6 01       	movw	r30, r12
    43d8:	31 96       	adiw	r30, 0x01	; 1
    43da:	6f 01       	movw	r12, r30
    43dc:	51 11       	cpse	r21, r1
    43de:	0b c0       	rjmp	.+22     	; 0x43f6 <dtoa_prf+0x1ea>
    43e0:	f6 01       	movw	r30, r12
    43e2:	82 2f       	mov	r24, r18
    43e4:	90 e3       	ldi	r25, 0x30	; 48
    43e6:	88 23       	and	r24, r24
    43e8:	19 f0       	breq	.+6      	; 0x43f0 <dtoa_prf+0x1e4>
    43ea:	91 93       	st	Z+, r25
    43ec:	81 50       	subi	r24, 0x01	; 1
    43ee:	fb cf       	rjmp	.-10     	; 0x43e6 <dtoa_prf+0x1da>
    43f0:	c2 0e       	add	r12, r18
    43f2:	d1 1c       	adc	r13, r1
    43f4:	20 e0       	ldi	r18, 0x00	; 0
    43f6:	0f 2d       	mov	r16, r15
    43f8:	06 0f       	add	r16, r22
    43fa:	9a 81       	ldd	r25, Y+2	; 0x02
    43fc:	34 2f       	mov	r19, r20
    43fe:	30 71       	andi	r19, 0x10	; 16
    4400:	44 ff       	sbrs	r20, 4
    4402:	03 c0       	rjmp	.+6      	; 0x440a <dtoa_prf+0x1fe>
    4404:	91 33       	cpi	r25, 0x31	; 49
    4406:	09 f4       	brne	.+2      	; 0x440a <dtoa_prf+0x1fe>
    4408:	01 50       	subi	r16, 0x01	; 1
    440a:	10 16       	cp	r1, r16
    440c:	24 f4       	brge	.+8      	; 0x4416 <dtoa_prf+0x20a>
    440e:	09 30       	cpi	r16, 0x09	; 9
    4410:	18 f0       	brcs	.+6      	; 0x4418 <dtoa_prf+0x20c>
    4412:	08 e0       	ldi	r16, 0x08	; 8
    4414:	01 c0       	rjmp	.+2      	; 0x4418 <dtoa_prf+0x20c>
    4416:	01 e0       	ldi	r16, 0x01	; 1
    4418:	ab 01       	movw	r20, r22
    441a:	77 ff       	sbrs	r23, 7
    441c:	02 c0       	rjmp	.+4      	; 0x4422 <dtoa_prf+0x216>
    441e:	40 e0       	ldi	r20, 0x00	; 0
    4420:	50 e0       	ldi	r21, 0x00	; 0
    4422:	fb 01       	movw	r30, r22
    4424:	e4 1b       	sub	r30, r20
    4426:	f5 0b       	sbc	r31, r21
    4428:	a1 e0       	ldi	r26, 0x01	; 1
    442a:	b0 e0       	ldi	r27, 0x00	; 0
    442c:	ac 0f       	add	r26, r28
    442e:	bd 1f       	adc	r27, r29
    4430:	ea 0f       	add	r30, r26
    4432:	fb 1f       	adc	r31, r27
    4434:	8e e2       	ldi	r24, 0x2E	; 46
    4436:	a8 2e       	mov	r10, r24
    4438:	4b 01       	movw	r8, r22
    443a:	80 1a       	sub	r8, r16
    443c:	91 08       	sbc	r9, r1
    443e:	0b 2d       	mov	r16, r11
    4440:	10 e0       	ldi	r17, 0x00	; 0
    4442:	11 95       	neg	r17
    4444:	01 95       	neg	r16
    4446:	11 09       	sbc	r17, r1
    4448:	4f 3f       	cpi	r20, 0xFF	; 255
    444a:	bf ef       	ldi	r27, 0xFF	; 255
    444c:	5b 07       	cpc	r21, r27
    444e:	21 f4       	brne	.+8      	; 0x4458 <dtoa_prf+0x24c>
    4450:	d6 01       	movw	r26, r12
    4452:	ac 92       	st	X, r10
    4454:	11 96       	adiw	r26, 0x01	; 1
    4456:	6d 01       	movw	r12, r26
    4458:	64 17       	cp	r22, r20
    445a:	75 07       	cpc	r23, r21
    445c:	2c f0       	brlt	.+10     	; 0x4468 <dtoa_prf+0x25c>
    445e:	84 16       	cp	r8, r20
    4460:	95 06       	cpc	r9, r21
    4462:	14 f4       	brge	.+4      	; 0x4468 <dtoa_prf+0x25c>
    4464:	81 81       	ldd	r24, Z+1	; 0x01
    4466:	01 c0       	rjmp	.+2      	; 0x446a <dtoa_prf+0x25e>
    4468:	80 e3       	ldi	r24, 0x30	; 48
    446a:	41 50       	subi	r20, 0x01	; 1
    446c:	51 09       	sbc	r21, r1
    446e:	31 96       	adiw	r30, 0x01	; 1
    4470:	d6 01       	movw	r26, r12
    4472:	11 96       	adiw	r26, 0x01	; 1
    4474:	7d 01       	movw	r14, r26
    4476:	40 17       	cp	r20, r16
    4478:	51 07       	cpc	r21, r17
    447a:	24 f0       	brlt	.+8      	; 0x4484 <dtoa_prf+0x278>
    447c:	d6 01       	movw	r26, r12
    447e:	8c 93       	st	X, r24
    4480:	67 01       	movw	r12, r14
    4482:	e2 cf       	rjmp	.-60     	; 0x4448 <dtoa_prf+0x23c>
    4484:	64 17       	cp	r22, r20
    4486:	75 07       	cpc	r23, r21
    4488:	39 f4       	brne	.+14     	; 0x4498 <dtoa_prf+0x28c>
    448a:	96 33       	cpi	r25, 0x36	; 54
    448c:	20 f4       	brcc	.+8      	; 0x4496 <dtoa_prf+0x28a>
    448e:	95 33       	cpi	r25, 0x35	; 53
    4490:	19 f4       	brne	.+6      	; 0x4498 <dtoa_prf+0x28c>
    4492:	31 11       	cpse	r19, r1
    4494:	01 c0       	rjmp	.+2      	; 0x4498 <dtoa_prf+0x28c>
    4496:	81 e3       	ldi	r24, 0x31	; 49
    4498:	f6 01       	movw	r30, r12
    449a:	80 83       	st	Z, r24
    449c:	f7 01       	movw	r30, r14
    449e:	82 2f       	mov	r24, r18
    44a0:	90 e2       	ldi	r25, 0x20	; 32
    44a2:	88 23       	and	r24, r24
    44a4:	19 f0       	breq	.+6      	; 0x44ac <dtoa_prf+0x2a0>
    44a6:	91 93       	st	Z+, r25
    44a8:	81 50       	subi	r24, 0x01	; 1
    44aa:	fb cf       	rjmp	.-10     	; 0x44a2 <dtoa_prf+0x296>
    44ac:	f7 01       	movw	r30, r14
    44ae:	e2 0f       	add	r30, r18
    44b0:	f1 1d       	adc	r31, r1
    44b2:	10 82       	st	Z, r1
    44b4:	80 e0       	ldi	r24, 0x00	; 0
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	29 96       	adiw	r28, 0x09	; 9
    44ba:	ec e0       	ldi	r30, 0x0C	; 12
    44bc:	0c 94 ce 24 	jmp	0x499c	; 0x499c <__epilogue_restores__+0xc>

000044c0 <strtod>:
    44c0:	a0 e0       	ldi	r26, 0x00	; 0
    44c2:	b0 e0       	ldi	r27, 0x00	; 0
    44c4:	e6 e6       	ldi	r30, 0x66	; 102
    44c6:	f2 e2       	ldi	r31, 0x22	; 34
    44c8:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__prologue_saves__+0xc>
    44cc:	ec 01       	movw	r28, r24
    44ce:	6b 01       	movw	r12, r22
    44d0:	61 15       	cp	r22, r1
    44d2:	71 05       	cpc	r23, r1
    44d4:	19 f0       	breq	.+6      	; 0x44dc <strtod+0x1c>
    44d6:	fb 01       	movw	r30, r22
    44d8:	91 83       	std	Z+1, r25	; 0x01
    44da:	80 83       	st	Z, r24
    44dc:	7e 01       	movw	r14, r28
    44de:	ff ef       	ldi	r31, 0xFF	; 255
    44e0:	ef 1a       	sub	r14, r31
    44e2:	ff 0a       	sbc	r15, r31
    44e4:	08 81       	ld	r16, Y
    44e6:	80 2f       	mov	r24, r16
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	0e 94 cf 20 	call	0x419e	; 0x419e <isspace>
    44ee:	89 2b       	or	r24, r25
    44f0:	11 f0       	breq	.+4      	; 0x44f6 <strtod+0x36>
    44f2:	e7 01       	movw	r28, r14
    44f4:	f3 cf       	rjmp	.-26     	; 0x44dc <strtod+0x1c>
    44f6:	0d 32       	cpi	r16, 0x2D	; 45
    44f8:	39 f4       	brne	.+14     	; 0x4508 <strtod+0x48>
    44fa:	7e 01       	movw	r14, r28
    44fc:	82 e0       	ldi	r24, 0x02	; 2
    44fe:	e8 0e       	add	r14, r24
    4500:	f1 1c       	adc	r15, r1
    4502:	09 81       	ldd	r16, Y+1	; 0x01
    4504:	11 e0       	ldi	r17, 0x01	; 1
    4506:	08 c0       	rjmp	.+16     	; 0x4518 <strtod+0x58>
    4508:	0b 32       	cpi	r16, 0x2B	; 43
    450a:	29 f4       	brne	.+10     	; 0x4516 <strtod+0x56>
    450c:	7e 01       	movw	r14, r28
    450e:	92 e0       	ldi	r25, 0x02	; 2
    4510:	e9 0e       	add	r14, r25
    4512:	f1 1c       	adc	r15, r1
    4514:	09 81       	ldd	r16, Y+1	; 0x01
    4516:	10 e0       	ldi	r17, 0x00	; 0
    4518:	e7 01       	movw	r28, r14
    451a:	21 97       	sbiw	r28, 0x01	; 1
    451c:	43 e0       	ldi	r20, 0x03	; 3
    451e:	50 e0       	ldi	r21, 0x00	; 0
    4520:	6c e5       	ldi	r22, 0x5C	; 92
    4522:	71 e0       	ldi	r23, 0x01	; 1
    4524:	ce 01       	movw	r24, r28
    4526:	0e 94 89 24 	call	0x4912	; 0x4912 <strncasecmp_P>
    452a:	89 2b       	or	r24, r25
    452c:	c1 f4       	brne	.+48     	; 0x455e <strtod+0x9e>
    452e:	23 96       	adiw	r28, 0x03	; 3
    4530:	45 e0       	ldi	r20, 0x05	; 5
    4532:	50 e0       	ldi	r21, 0x00	; 0
    4534:	67 e5       	ldi	r22, 0x57	; 87
    4536:	71 e0       	ldi	r23, 0x01	; 1
    4538:	ce 01       	movw	r24, r28
    453a:	0e 94 89 24 	call	0x4912	; 0x4912 <strncasecmp_P>
    453e:	89 2b       	or	r24, r25
    4540:	09 f4       	brne	.+2      	; 0x4544 <strtod+0x84>
    4542:	25 96       	adiw	r28, 0x05	; 5
    4544:	c1 14       	cp	r12, r1
    4546:	d1 04       	cpc	r13, r1
    4548:	19 f0       	breq	.+6      	; 0x4550 <strtod+0x90>
    454a:	f6 01       	movw	r30, r12
    454c:	d1 83       	std	Z+1, r29	; 0x01
    454e:	c0 83       	st	Z, r28
    4550:	11 11       	cpse	r17, r1
    4552:	f6 c0       	rjmp	.+492    	; 0x4740 <strtod+0x280>
    4554:	60 e0       	ldi	r22, 0x00	; 0
    4556:	70 e0       	ldi	r23, 0x00	; 0
    4558:	80 e8       	ldi	r24, 0x80	; 128
    455a:	9f e7       	ldi	r25, 0x7F	; 127
    455c:	fa c0       	rjmp	.+500    	; 0x4752 <strtod+0x292>
    455e:	43 e0       	ldi	r20, 0x03	; 3
    4560:	50 e0       	ldi	r21, 0x00	; 0
    4562:	64 e5       	ldi	r22, 0x54	; 84
    4564:	71 e0       	ldi	r23, 0x01	; 1
    4566:	ce 01       	movw	r24, r28
    4568:	0e 94 89 24 	call	0x4912	; 0x4912 <strncasecmp_P>
    456c:	89 2b       	or	r24, r25
    456e:	59 f4       	brne	.+22     	; 0x4586 <strtod+0xc6>
    4570:	c1 14       	cp	r12, r1
    4572:	d1 04       	cpc	r13, r1
    4574:	09 f4       	brne	.+2      	; 0x4578 <strtod+0xb8>
    4576:	e9 c0       	rjmp	.+466    	; 0x474a <strtod+0x28a>
    4578:	f2 e0       	ldi	r31, 0x02	; 2
    457a:	ef 0e       	add	r14, r31
    457c:	f1 1c       	adc	r15, r1
    457e:	f6 01       	movw	r30, r12
    4580:	f1 82       	std	Z+1, r15	; 0x01
    4582:	e0 82       	st	Z, r14
    4584:	e2 c0       	rjmp	.+452    	; 0x474a <strtod+0x28a>
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	30 e0       	ldi	r19, 0x00	; 0
    458a:	a9 01       	movw	r20, r18
    458c:	c0 e0       	ldi	r28, 0x00	; 0
    458e:	d0 e0       	ldi	r29, 0x00	; 0
    4590:	f7 01       	movw	r30, r14
    4592:	80 ed       	ldi	r24, 0xD0	; 208
    4594:	a8 2e       	mov	r10, r24
    4596:	a0 0e       	add	r10, r16
    4598:	89 e0       	ldi	r24, 0x09	; 9
    459a:	8a 15       	cp	r24, r10
    459c:	30 f1       	brcs	.+76     	; 0x45ea <strtod+0x12a>
    459e:	91 2f       	mov	r25, r17
    45a0:	92 60       	ori	r25, 0x02	; 2
    45a2:	b9 2e       	mov	r11, r25
    45a4:	81 2f       	mov	r24, r17
    45a6:	88 70       	andi	r24, 0x08	; 8
    45a8:	12 ff       	sbrs	r17, 2
    45aa:	04 c0       	rjmp	.+8      	; 0x45b4 <strtod+0xf4>
    45ac:	81 11       	cpse	r24, r1
    45ae:	24 c0       	rjmp	.+72     	; 0x45f8 <strtod+0x138>
    45b0:	21 96       	adiw	r28, 0x01	; 1
    45b2:	22 c0       	rjmp	.+68     	; 0x45f8 <strtod+0x138>
    45b4:	81 11       	cpse	r24, r1
    45b6:	21 97       	sbiw	r28, 0x01	; 1
    45b8:	a5 e0       	ldi	r26, 0x05	; 5
    45ba:	b0 e0       	ldi	r27, 0x00	; 0
    45bc:	0e 94 a1 24 	call	0x4942	; 0x4942 <__muluhisi3>
    45c0:	dc 01       	movw	r26, r24
    45c2:	cb 01       	movw	r24, r22
    45c4:	88 0f       	add	r24, r24
    45c6:	99 1f       	adc	r25, r25
    45c8:	aa 1f       	adc	r26, r26
    45ca:	bb 1f       	adc	r27, r27
    45cc:	9c 01       	movw	r18, r24
    45ce:	ad 01       	movw	r20, r26
    45d0:	2a 0d       	add	r18, r10
    45d2:	31 1d       	adc	r19, r1
    45d4:	41 1d       	adc	r20, r1
    45d6:	51 1d       	adc	r21, r1
    45d8:	28 39       	cpi	r18, 0x98	; 152
    45da:	89 e9       	ldi	r24, 0x99	; 153
    45dc:	38 07       	cpc	r19, r24
    45de:	48 07       	cpc	r20, r24
    45e0:	89 e1       	ldi	r24, 0x19	; 25
    45e2:	58 07       	cpc	r21, r24
    45e4:	48 f0       	brcs	.+18     	; 0x45f8 <strtod+0x138>
    45e6:	16 60       	ori	r17, 0x06	; 6
    45e8:	06 c0       	rjmp	.+12     	; 0x45f6 <strtod+0x136>
    45ea:	9e ef       	ldi	r25, 0xFE	; 254
    45ec:	a9 12       	cpse	r10, r25
    45ee:	0a c0       	rjmp	.+20     	; 0x4604 <strtod+0x144>
    45f0:	13 fd       	sbrc	r17, 3
    45f2:	40 c0       	rjmp	.+128    	; 0x4674 <strtod+0x1b4>
    45f4:	18 60       	ori	r17, 0x08	; 8
    45f6:	b1 2e       	mov	r11, r17
    45f8:	8f ef       	ldi	r24, 0xFF	; 255
    45fa:	e8 1a       	sub	r14, r24
    45fc:	f8 0a       	sbc	r15, r24
    45fe:	00 81       	ld	r16, Z
    4600:	1b 2d       	mov	r17, r11
    4602:	c6 cf       	rjmp	.-116    	; 0x4590 <strtod+0xd0>
    4604:	80 2f       	mov	r24, r16
    4606:	8f 7d       	andi	r24, 0xDF	; 223
    4608:	85 34       	cpi	r24, 0x45	; 69
    460a:	a1 f5       	brne	.+104    	; 0x4674 <strtod+0x1b4>
    460c:	80 81       	ld	r24, Z
    460e:	8d 32       	cpi	r24, 0x2D	; 45
    4610:	11 f4       	brne	.+4      	; 0x4616 <strtod+0x156>
    4612:	10 61       	ori	r17, 0x10	; 16
    4614:	06 c0       	rjmp	.+12     	; 0x4622 <strtod+0x162>
    4616:	8b 32       	cpi	r24, 0x2B	; 43
    4618:	21 f0       	breq	.+8      	; 0x4622 <strtod+0x162>
    461a:	31 96       	adiw	r30, 0x01	; 1
    461c:	61 e0       	ldi	r22, 0x01	; 1
    461e:	70 e0       	ldi	r23, 0x00	; 0
    4620:	04 c0       	rjmp	.+8      	; 0x462a <strtod+0x16a>
    4622:	81 81       	ldd	r24, Z+1	; 0x01
    4624:	32 96       	adiw	r30, 0x02	; 2
    4626:	62 e0       	ldi	r22, 0x02	; 2
    4628:	70 e0       	ldi	r23, 0x00	; 0
    462a:	80 53       	subi	r24, 0x30	; 48
    462c:	8a 30       	cpi	r24, 0x0A	; 10
    462e:	18 f0       	brcs	.+6      	; 0x4636 <strtod+0x176>
    4630:	e6 1b       	sub	r30, r22
    4632:	f7 0b       	sbc	r31, r23
    4634:	1f c0       	rjmp	.+62     	; 0x4674 <strtod+0x1b4>
    4636:	60 e0       	ldi	r22, 0x00	; 0
    4638:	70 e0       	ldi	r23, 0x00	; 0
    463a:	60 38       	cpi	r22, 0x80	; 128
    463c:	9c e0       	ldi	r25, 0x0C	; 12
    463e:	79 07       	cpc	r23, r25
    4640:	5c f4       	brge	.+22     	; 0x4658 <strtod+0x198>
    4642:	db 01       	movw	r26, r22
    4644:	aa 0f       	add	r26, r26
    4646:	bb 1f       	adc	r27, r27
    4648:	aa 0f       	add	r26, r26
    464a:	bb 1f       	adc	r27, r27
    464c:	6a 0f       	add	r22, r26
    464e:	7b 1f       	adc	r23, r27
    4650:	66 0f       	add	r22, r22
    4652:	77 1f       	adc	r23, r23
    4654:	68 0f       	add	r22, r24
    4656:	71 1d       	adc	r23, r1
    4658:	31 96       	adiw	r30, 0x01	; 1
    465a:	df 01       	movw	r26, r30
    465c:	11 97       	sbiw	r26, 0x01	; 1
    465e:	8c 91       	ld	r24, X
    4660:	80 53       	subi	r24, 0x30	; 48
    4662:	8a 30       	cpi	r24, 0x0A	; 10
    4664:	50 f3       	brcs	.-44     	; 0x463a <strtod+0x17a>
    4666:	14 ff       	sbrs	r17, 4
    4668:	03 c0       	rjmp	.+6      	; 0x4670 <strtod+0x1b0>
    466a:	71 95       	neg	r23
    466c:	61 95       	neg	r22
    466e:	71 09       	sbc	r23, r1
    4670:	c6 0f       	add	r28, r22
    4672:	d7 1f       	adc	r29, r23
    4674:	11 ff       	sbrs	r17, 1
    4676:	08 c0       	rjmp	.+16     	; 0x4688 <strtod+0x1c8>
    4678:	c1 14       	cp	r12, r1
    467a:	d1 04       	cpc	r13, r1
    467c:	29 f0       	breq	.+10     	; 0x4688 <strtod+0x1c8>
    467e:	cf 01       	movw	r24, r30
    4680:	01 97       	sbiw	r24, 0x01	; 1
    4682:	f6 01       	movw	r30, r12
    4684:	91 83       	std	Z+1, r25	; 0x01
    4686:	80 83       	st	Z, r24
    4688:	ca 01       	movw	r24, r20
    468a:	b9 01       	movw	r22, r18
    468c:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <__floatunsisf>
    4690:	21 2f       	mov	r18, r17
    4692:	23 70       	andi	r18, 0x03	; 3
    4694:	23 30       	cpi	r18, 0x03	; 3
    4696:	19 f0       	breq	.+6      	; 0x469e <strtod+0x1de>
    4698:	4b 01       	movw	r8, r22
    469a:	5c 01       	movw	r10, r24
    469c:	06 c0       	rjmp	.+12     	; 0x46aa <strtod+0x1ea>
    469e:	4b 01       	movw	r8, r22
    46a0:	5c 01       	movw	r10, r24
    46a2:	b7 fa       	bst	r11, 7
    46a4:	b0 94       	com	r11
    46a6:	b7 f8       	bld	r11, 7
    46a8:	b0 94       	com	r11
    46aa:	20 e0       	ldi	r18, 0x00	; 0
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	a9 01       	movw	r20, r18
    46b0:	c5 01       	movw	r24, r10
    46b2:	b4 01       	movw	r22, r8
    46b4:	0e 94 0b 1c 	call	0x3816	; 0x3816 <__cmpsf2>
    46b8:	88 23       	and	r24, r24
    46ba:	09 f4       	brne	.+2      	; 0x46be <strtod+0x1fe>
    46bc:	3e c0       	rjmp	.+124    	; 0x473a <strtod+0x27a>
    46be:	d7 ff       	sbrs	r29, 7
    46c0:	06 c0       	rjmp	.+12     	; 0x46ce <strtod+0x20e>
    46c2:	d1 95       	neg	r29
    46c4:	c1 95       	neg	r28
    46c6:	d1 09       	sbc	r29, r1
    46c8:	03 e7       	ldi	r16, 0x73	; 115
    46ca:	11 e0       	ldi	r17, 0x01	; 1
    46cc:	02 c0       	rjmp	.+4      	; 0x46d2 <strtod+0x212>
    46ce:	0b e8       	ldi	r16, 0x8B	; 139
    46d0:	11 e0       	ldi	r17, 0x01	; 1
    46d2:	68 01       	movw	r12, r16
    46d4:	f8 e1       	ldi	r31, 0x18	; 24
    46d6:	cf 1a       	sub	r12, r31
    46d8:	d1 08       	sbc	r13, r1
    46da:	90 e2       	ldi	r25, 0x20	; 32
    46dc:	e9 2e       	mov	r14, r25
    46de:	f1 2c       	mov	r15, r1
    46e0:	ce 15       	cp	r28, r14
    46e2:	df 05       	cpc	r29, r15
    46e4:	74 f0       	brlt	.+28     	; 0x4702 <strtod+0x242>
    46e6:	f8 01       	movw	r30, r16
    46e8:	25 91       	lpm	r18, Z+
    46ea:	35 91       	lpm	r19, Z+
    46ec:	45 91       	lpm	r20, Z+
    46ee:	54 91       	lpm	r21, Z
    46f0:	c5 01       	movw	r24, r10
    46f2:	b4 01       	movw	r22, r8
    46f4:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__mulsf3>
    46f8:	4b 01       	movw	r8, r22
    46fa:	5c 01       	movw	r10, r24
    46fc:	ce 19       	sub	r28, r14
    46fe:	df 09       	sbc	r29, r15
    4700:	ef cf       	rjmp	.-34     	; 0x46e0 <strtod+0x220>
    4702:	04 50       	subi	r16, 0x04	; 4
    4704:	11 09       	sbc	r17, r1
    4706:	f5 94       	asr	r15
    4708:	e7 94       	ror	r14
    470a:	0c 15       	cp	r16, r12
    470c:	1d 05       	cpc	r17, r13
    470e:	41 f7       	brne	.-48     	; 0x46e0 <strtod+0x220>
    4710:	8a 2d       	mov	r24, r10
    4712:	88 0f       	add	r24, r24
    4714:	8b 2d       	mov	r24, r11
    4716:	88 1f       	adc	r24, r24
    4718:	8f 3f       	cpi	r24, 0xFF	; 255
    471a:	49 f0       	breq	.+18     	; 0x472e <strtod+0x26e>
    471c:	20 e0       	ldi	r18, 0x00	; 0
    471e:	30 e0       	ldi	r19, 0x00	; 0
    4720:	a9 01       	movw	r20, r18
    4722:	c5 01       	movw	r24, r10
    4724:	b4 01       	movw	r22, r8
    4726:	0e 94 0b 1c 	call	0x3816	; 0x3816 <__cmpsf2>
    472a:	81 11       	cpse	r24, r1
    472c:	06 c0       	rjmp	.+12     	; 0x473a <strtod+0x27a>
    472e:	82 e2       	ldi	r24, 0x22	; 34
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <errno+0x1>
    4736:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <errno>
    473a:	c5 01       	movw	r24, r10
    473c:	b4 01       	movw	r22, r8
    473e:	09 c0       	rjmp	.+18     	; 0x4752 <strtod+0x292>
    4740:	60 e0       	ldi	r22, 0x00	; 0
    4742:	70 e0       	ldi	r23, 0x00	; 0
    4744:	80 e8       	ldi	r24, 0x80	; 128
    4746:	9f ef       	ldi	r25, 0xFF	; 255
    4748:	04 c0       	rjmp	.+8      	; 0x4752 <strtod+0x292>
    474a:	60 e0       	ldi	r22, 0x00	; 0
    474c:	70 e0       	ldi	r23, 0x00	; 0
    474e:	80 ec       	ldi	r24, 0xC0	; 192
    4750:	9f e7       	ldi	r25, 0x7F	; 127
    4752:	cd b7       	in	r28, 0x3d	; 61
    4754:	de b7       	in	r29, 0x3e	; 62
    4756:	ec e0       	ldi	r30, 0x0C	; 12
    4758:	0c 94 ce 24 	jmp	0x499c	; 0x499c <__epilogue_restores__+0xc>

0000475c <__ftoa_engine>:
    475c:	28 30       	cpi	r18, 0x08	; 8
    475e:	08 f0       	brcs	.+2      	; 0x4762 <__ftoa_engine+0x6>
    4760:	27 e0       	ldi	r18, 0x07	; 7
    4762:	33 27       	eor	r19, r19
    4764:	da 01       	movw	r26, r20
    4766:	99 0f       	add	r25, r25
    4768:	31 1d       	adc	r19, r1
    476a:	87 fd       	sbrc	r24, 7
    476c:	91 60       	ori	r25, 0x01	; 1
    476e:	00 96       	adiw	r24, 0x00	; 0
    4770:	61 05       	cpc	r22, r1
    4772:	71 05       	cpc	r23, r1
    4774:	39 f4       	brne	.+14     	; 0x4784 <__ftoa_engine+0x28>
    4776:	32 60       	ori	r19, 0x02	; 2
    4778:	2e 5f       	subi	r18, 0xFE	; 254
    477a:	3d 93       	st	X+, r19
    477c:	30 e3       	ldi	r19, 0x30	; 48
    477e:	2a 95       	dec	r18
    4780:	e1 f7       	brne	.-8      	; 0x477a <__ftoa_engine+0x1e>
    4782:	08 95       	ret
    4784:	9f 3f       	cpi	r25, 0xFF	; 255
    4786:	30 f0       	brcs	.+12     	; 0x4794 <__ftoa_engine+0x38>
    4788:	80 38       	cpi	r24, 0x80	; 128
    478a:	71 05       	cpc	r23, r1
    478c:	61 05       	cpc	r22, r1
    478e:	09 f0       	breq	.+2      	; 0x4792 <__ftoa_engine+0x36>
    4790:	3c 5f       	subi	r19, 0xFC	; 252
    4792:	3c 5f       	subi	r19, 0xFC	; 252
    4794:	3d 93       	st	X+, r19
    4796:	91 30       	cpi	r25, 0x01	; 1
    4798:	08 f0       	brcs	.+2      	; 0x479c <__ftoa_engine+0x40>
    479a:	80 68       	ori	r24, 0x80	; 128
    479c:	91 1d       	adc	r25, r1
    479e:	df 93       	push	r29
    47a0:	cf 93       	push	r28
    47a2:	1f 93       	push	r17
    47a4:	0f 93       	push	r16
    47a6:	ff 92       	push	r15
    47a8:	ef 92       	push	r14
    47aa:	19 2f       	mov	r17, r25
    47ac:	98 7f       	andi	r25, 0xF8	; 248
    47ae:	96 95       	lsr	r25
    47b0:	e9 2f       	mov	r30, r25
    47b2:	96 95       	lsr	r25
    47b4:	96 95       	lsr	r25
    47b6:	e9 0f       	add	r30, r25
    47b8:	ff 27       	eor	r31, r31
    47ba:	e7 51       	subi	r30, 0x17	; 23
    47bc:	fe 4f       	sbci	r31, 0xFE	; 254
    47be:	99 27       	eor	r25, r25
    47c0:	33 27       	eor	r19, r19
    47c2:	ee 24       	eor	r14, r14
    47c4:	ff 24       	eor	r15, r15
    47c6:	a7 01       	movw	r20, r14
    47c8:	e7 01       	movw	r28, r14
    47ca:	05 90       	lpm	r0, Z+
    47cc:	08 94       	sec
    47ce:	07 94       	ror	r0
    47d0:	28 f4       	brcc	.+10     	; 0x47dc <__ftoa_engine+0x80>
    47d2:	36 0f       	add	r19, r22
    47d4:	e7 1e       	adc	r14, r23
    47d6:	f8 1e       	adc	r15, r24
    47d8:	49 1f       	adc	r20, r25
    47da:	51 1d       	adc	r21, r1
    47dc:	66 0f       	add	r22, r22
    47de:	77 1f       	adc	r23, r23
    47e0:	88 1f       	adc	r24, r24
    47e2:	99 1f       	adc	r25, r25
    47e4:	06 94       	lsr	r0
    47e6:	a1 f7       	brne	.-24     	; 0x47d0 <__ftoa_engine+0x74>
    47e8:	05 90       	lpm	r0, Z+
    47ea:	07 94       	ror	r0
    47ec:	28 f4       	brcc	.+10     	; 0x47f8 <__ftoa_engine+0x9c>
    47ee:	e7 0e       	add	r14, r23
    47f0:	f8 1e       	adc	r15, r24
    47f2:	49 1f       	adc	r20, r25
    47f4:	56 1f       	adc	r21, r22
    47f6:	c1 1d       	adc	r28, r1
    47f8:	77 0f       	add	r23, r23
    47fa:	88 1f       	adc	r24, r24
    47fc:	99 1f       	adc	r25, r25
    47fe:	66 1f       	adc	r22, r22
    4800:	06 94       	lsr	r0
    4802:	a1 f7       	brne	.-24     	; 0x47ec <__ftoa_engine+0x90>
    4804:	05 90       	lpm	r0, Z+
    4806:	07 94       	ror	r0
    4808:	28 f4       	brcc	.+10     	; 0x4814 <__ftoa_engine+0xb8>
    480a:	f8 0e       	add	r15, r24
    480c:	49 1f       	adc	r20, r25
    480e:	56 1f       	adc	r21, r22
    4810:	c7 1f       	adc	r28, r23
    4812:	d1 1d       	adc	r29, r1
    4814:	88 0f       	add	r24, r24
    4816:	99 1f       	adc	r25, r25
    4818:	66 1f       	adc	r22, r22
    481a:	77 1f       	adc	r23, r23
    481c:	06 94       	lsr	r0
    481e:	a1 f7       	brne	.-24     	; 0x4808 <__ftoa_engine+0xac>
    4820:	05 90       	lpm	r0, Z+
    4822:	07 94       	ror	r0
    4824:	20 f4       	brcc	.+8      	; 0x482e <__ftoa_engine+0xd2>
    4826:	49 0f       	add	r20, r25
    4828:	56 1f       	adc	r21, r22
    482a:	c7 1f       	adc	r28, r23
    482c:	d8 1f       	adc	r29, r24
    482e:	99 0f       	add	r25, r25
    4830:	66 1f       	adc	r22, r22
    4832:	77 1f       	adc	r23, r23
    4834:	88 1f       	adc	r24, r24
    4836:	06 94       	lsr	r0
    4838:	a9 f7       	brne	.-22     	; 0x4824 <__ftoa_engine+0xc8>
    483a:	84 91       	lpm	r24, Z
    483c:	10 95       	com	r17
    483e:	17 70       	andi	r17, 0x07	; 7
    4840:	41 f0       	breq	.+16     	; 0x4852 <__ftoa_engine+0xf6>
    4842:	d6 95       	lsr	r29
    4844:	c7 95       	ror	r28
    4846:	57 95       	ror	r21
    4848:	47 95       	ror	r20
    484a:	f7 94       	ror	r15
    484c:	e7 94       	ror	r14
    484e:	1a 95       	dec	r17
    4850:	c1 f7       	brne	.-16     	; 0x4842 <__ftoa_engine+0xe6>
    4852:	ef e8       	ldi	r30, 0x8F	; 143
    4854:	f1 e0       	ldi	r31, 0x01	; 1
    4856:	68 94       	set
    4858:	15 90       	lpm	r1, Z+
    485a:	15 91       	lpm	r17, Z+
    485c:	35 91       	lpm	r19, Z+
    485e:	65 91       	lpm	r22, Z+
    4860:	95 91       	lpm	r25, Z+
    4862:	05 90       	lpm	r0, Z+
    4864:	7f e2       	ldi	r23, 0x2F	; 47
    4866:	73 95       	inc	r23
    4868:	e1 18       	sub	r14, r1
    486a:	f1 0a       	sbc	r15, r17
    486c:	43 0b       	sbc	r20, r19
    486e:	56 0b       	sbc	r21, r22
    4870:	c9 0b       	sbc	r28, r25
    4872:	d0 09       	sbc	r29, r0
    4874:	c0 f7       	brcc	.-16     	; 0x4866 <__ftoa_engine+0x10a>
    4876:	e1 0c       	add	r14, r1
    4878:	f1 1e       	adc	r15, r17
    487a:	43 1f       	adc	r20, r19
    487c:	56 1f       	adc	r21, r22
    487e:	c9 1f       	adc	r28, r25
    4880:	d0 1d       	adc	r29, r0
    4882:	7e f4       	brtc	.+30     	; 0x48a2 <__ftoa_engine+0x146>
    4884:	70 33       	cpi	r23, 0x30	; 48
    4886:	11 f4       	brne	.+4      	; 0x488c <__ftoa_engine+0x130>
    4888:	8a 95       	dec	r24
    488a:	e6 cf       	rjmp	.-52     	; 0x4858 <__ftoa_engine+0xfc>
    488c:	e8 94       	clt
    488e:	01 50       	subi	r16, 0x01	; 1
    4890:	30 f0       	brcs	.+12     	; 0x489e <__ftoa_engine+0x142>
    4892:	08 0f       	add	r16, r24
    4894:	0a f4       	brpl	.+2      	; 0x4898 <__ftoa_engine+0x13c>
    4896:	00 27       	eor	r16, r16
    4898:	02 17       	cp	r16, r18
    489a:	08 f4       	brcc	.+2      	; 0x489e <__ftoa_engine+0x142>
    489c:	20 2f       	mov	r18, r16
    489e:	23 95       	inc	r18
    48a0:	02 2f       	mov	r16, r18
    48a2:	7a 33       	cpi	r23, 0x3A	; 58
    48a4:	28 f0       	brcs	.+10     	; 0x48b0 <__ftoa_engine+0x154>
    48a6:	79 e3       	ldi	r23, 0x39	; 57
    48a8:	7d 93       	st	X+, r23
    48aa:	2a 95       	dec	r18
    48ac:	e9 f7       	brne	.-6      	; 0x48a8 <__ftoa_engine+0x14c>
    48ae:	10 c0       	rjmp	.+32     	; 0x48d0 <__ftoa_engine+0x174>
    48b0:	7d 93       	st	X+, r23
    48b2:	2a 95       	dec	r18
    48b4:	89 f6       	brne	.-94     	; 0x4858 <__ftoa_engine+0xfc>
    48b6:	06 94       	lsr	r0
    48b8:	97 95       	ror	r25
    48ba:	67 95       	ror	r22
    48bc:	37 95       	ror	r19
    48be:	17 95       	ror	r17
    48c0:	17 94       	ror	r1
    48c2:	e1 18       	sub	r14, r1
    48c4:	f1 0a       	sbc	r15, r17
    48c6:	43 0b       	sbc	r20, r19
    48c8:	56 0b       	sbc	r21, r22
    48ca:	c9 0b       	sbc	r28, r25
    48cc:	d0 09       	sbc	r29, r0
    48ce:	98 f0       	brcs	.+38     	; 0x48f6 <__ftoa_engine+0x19a>
    48d0:	23 95       	inc	r18
    48d2:	7e 91       	ld	r23, -X
    48d4:	73 95       	inc	r23
    48d6:	7a 33       	cpi	r23, 0x3A	; 58
    48d8:	08 f0       	brcs	.+2      	; 0x48dc <__ftoa_engine+0x180>
    48da:	70 e3       	ldi	r23, 0x30	; 48
    48dc:	7c 93       	st	X, r23
    48de:	20 13       	cpse	r18, r16
    48e0:	b8 f7       	brcc	.-18     	; 0x48d0 <__ftoa_engine+0x174>
    48e2:	7e 91       	ld	r23, -X
    48e4:	70 61       	ori	r23, 0x10	; 16
    48e6:	7d 93       	st	X+, r23
    48e8:	30 f0       	brcs	.+12     	; 0x48f6 <__ftoa_engine+0x19a>
    48ea:	83 95       	inc	r24
    48ec:	71 e3       	ldi	r23, 0x31	; 49
    48ee:	7d 93       	st	X+, r23
    48f0:	70 e3       	ldi	r23, 0x30	; 48
    48f2:	2a 95       	dec	r18
    48f4:	e1 f7       	brne	.-8      	; 0x48ee <__ftoa_engine+0x192>
    48f6:	11 24       	eor	r1, r1
    48f8:	ef 90       	pop	r14
    48fa:	ff 90       	pop	r15
    48fc:	0f 91       	pop	r16
    48fe:	1f 91       	pop	r17
    4900:	cf 91       	pop	r28
    4902:	df 91       	pop	r29
    4904:	99 27       	eor	r25, r25
    4906:	87 fd       	sbrc	r24, 7
    4908:	90 95       	com	r25
    490a:	08 95       	ret

0000490c <__ctype_isfalse>:
    490c:	99 27       	eor	r25, r25
    490e:	88 27       	eor	r24, r24

00004910 <__ctype_istrue>:
    4910:	08 95       	ret

00004912 <strncasecmp_P>:
    4912:	fb 01       	movw	r30, r22
    4914:	dc 01       	movw	r26, r24
    4916:	41 50       	subi	r20, 0x01	; 1
    4918:	50 40       	sbci	r21, 0x00	; 0
    491a:	88 f0       	brcs	.+34     	; 0x493e <strncasecmp_P+0x2c>
    491c:	8d 91       	ld	r24, X+
    491e:	81 34       	cpi	r24, 0x41	; 65
    4920:	1c f0       	brlt	.+6      	; 0x4928 <strncasecmp_P+0x16>
    4922:	8b 35       	cpi	r24, 0x5B	; 91
    4924:	0c f4       	brge	.+2      	; 0x4928 <strncasecmp_P+0x16>
    4926:	80 5e       	subi	r24, 0xE0	; 224
    4928:	65 91       	lpm	r22, Z+
    492a:	61 34       	cpi	r22, 0x41	; 65
    492c:	1c f0       	brlt	.+6      	; 0x4934 <strncasecmp_P+0x22>
    492e:	6b 35       	cpi	r22, 0x5B	; 91
    4930:	0c f4       	brge	.+2      	; 0x4934 <strncasecmp_P+0x22>
    4932:	60 5e       	subi	r22, 0xE0	; 224
    4934:	86 1b       	sub	r24, r22
    4936:	61 11       	cpse	r22, r1
    4938:	71 f3       	breq	.-36     	; 0x4916 <strncasecmp_P+0x4>
    493a:	99 0b       	sbc	r25, r25
    493c:	08 95       	ret
    493e:	88 1b       	sub	r24, r24
    4940:	fc cf       	rjmp	.-8      	; 0x493a <strncasecmp_P+0x28>

00004942 <__muluhisi3>:
    4942:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__umulhisi3>
    4946:	a5 9f       	mul	r26, r21
    4948:	90 0d       	add	r25, r0
    494a:	b4 9f       	mul	r27, r20
    494c:	90 0d       	add	r25, r0
    494e:	a4 9f       	mul	r26, r20
    4950:	80 0d       	add	r24, r0
    4952:	91 1d       	adc	r25, r1
    4954:	11 24       	eor	r1, r1
    4956:	08 95       	ret

00004958 <__prologue_saves__>:
    4958:	2f 92       	push	r2
    495a:	3f 92       	push	r3
    495c:	4f 92       	push	r4
    495e:	5f 92       	push	r5
    4960:	6f 92       	push	r6
    4962:	7f 92       	push	r7
    4964:	8f 92       	push	r8
    4966:	9f 92       	push	r9
    4968:	af 92       	push	r10
    496a:	bf 92       	push	r11
    496c:	cf 92       	push	r12
    496e:	df 92       	push	r13
    4970:	ef 92       	push	r14
    4972:	ff 92       	push	r15
    4974:	0f 93       	push	r16
    4976:	1f 93       	push	r17
    4978:	cf 93       	push	r28
    497a:	df 93       	push	r29
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
    4980:	ca 1b       	sub	r28, r26
    4982:	db 0b       	sbc	r29, r27
    4984:	0f b6       	in	r0, 0x3f	; 63
    4986:	f8 94       	cli
    4988:	de bf       	out	0x3e, r29	; 62
    498a:	0f be       	out	0x3f, r0	; 63
    498c:	cd bf       	out	0x3d, r28	; 61
    498e:	09 94       	ijmp

00004990 <__epilogue_restores__>:
    4990:	2a 88       	ldd	r2, Y+18	; 0x12
    4992:	39 88       	ldd	r3, Y+17	; 0x11
    4994:	48 88       	ldd	r4, Y+16	; 0x10
    4996:	5f 84       	ldd	r5, Y+15	; 0x0f
    4998:	6e 84       	ldd	r6, Y+14	; 0x0e
    499a:	7d 84       	ldd	r7, Y+13	; 0x0d
    499c:	8c 84       	ldd	r8, Y+12	; 0x0c
    499e:	9b 84       	ldd	r9, Y+11	; 0x0b
    49a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    49a2:	b9 84       	ldd	r11, Y+9	; 0x09
    49a4:	c8 84       	ldd	r12, Y+8	; 0x08
    49a6:	df 80       	ldd	r13, Y+7	; 0x07
    49a8:	ee 80       	ldd	r14, Y+6	; 0x06
    49aa:	fd 80       	ldd	r15, Y+5	; 0x05
    49ac:	0c 81       	ldd	r16, Y+4	; 0x04
    49ae:	1b 81       	ldd	r17, Y+3	; 0x03
    49b0:	aa 81       	ldd	r26, Y+2	; 0x02
    49b2:	b9 81       	ldd	r27, Y+1	; 0x01
    49b4:	ce 0f       	add	r28, r30
    49b6:	d1 1d       	adc	r29, r1
    49b8:	0f b6       	in	r0, 0x3f	; 63
    49ba:	f8 94       	cli
    49bc:	de bf       	out	0x3e, r29	; 62
    49be:	0f be       	out	0x3f, r0	; 63
    49c0:	cd bf       	out	0x3d, r28	; 61
    49c2:	ed 01       	movw	r28, r26
    49c4:	08 95       	ret

000049c6 <__umulhisi3>:
    49c6:	a2 9f       	mul	r26, r18
    49c8:	b0 01       	movw	r22, r0
    49ca:	b3 9f       	mul	r27, r19
    49cc:	c0 01       	movw	r24, r0
    49ce:	a3 9f       	mul	r26, r19
    49d0:	70 0d       	add	r23, r0
    49d2:	81 1d       	adc	r24, r1
    49d4:	11 24       	eor	r1, r1
    49d6:	91 1d       	adc	r25, r1
    49d8:	b2 9f       	mul	r27, r18
    49da:	70 0d       	add	r23, r0
    49dc:	81 1d       	adc	r24, r1
    49de:	11 24       	eor	r1, r1
    49e0:	91 1d       	adc	r25, r1
    49e2:	08 95       	ret

000049e4 <_exit>:
    49e4:	f8 94       	cli

000049e6 <__stop_program>:
    49e6:	ff cf       	rjmp	.-2      	; 0x49e6 <__stop_program>
