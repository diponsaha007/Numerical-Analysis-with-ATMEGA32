
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000051ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002a2  00800060  000051ec  00005280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000486  00800302  00800302  00005522  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000055bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046dd  00000000  00000000  0000571c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f6  00000000  00000000  00009df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e62  00000000  00000000  0000a7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009bc  00000000  00000000  0000c654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a09  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004e9a  00000000  00000000  0000da19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  000128b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__ctors_end>
       4:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
       8:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
       c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      10:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      14:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      18:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      1c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      20:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      24:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      28:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      2c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      30:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      34:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      38:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      3c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      40:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      44:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      48:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      4c:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      50:	0c 94 83 02 	jmp	0x506	; 0x506 <__bad_interrupt>
      54:	03 6e       	ori	r16, 0xE3	; 227
      56:	db 36       	cpi	r29, 0x6B	; 107
      58:	3d 9a       	sbi	0x07, 5	; 7
      5a:	99 99       	sbic	0x13, 1	; 19
      5c:	99 3d       	cpi	r25, 0xD9	; 217
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	3e 00       	.word	0x003e	; ????
      64:	00 00       	nop
      66:	80 3f       	cpi	r24, 0xF0	; 240
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	63 42       	sbci	r22, 0x23	; 35
      98:	36 b7       	in	r19, 0x36	; 54
      9a:	9b d8       	rcall	.-3786   	; 0xfffff1d2 <__eeprom_end+0xff7ef1d2>
      9c:	a7 1a       	sub	r10, r23
      9e:	39 68       	ori	r19, 0x89	; 137
      a0:	56 18       	sub	r5, r6
      a2:	ae ba       	out	0x1e, r10	; 30
      a4:	ab 55       	subi	r26, 0x5B	; 91
      a6:	8c 1d       	adc	r24, r12
      a8:	3c b7       	in	r19, 0x3c	; 60
      aa:	cc 57       	subi	r28, 0x7C	; 124
      ac:	63 bd       	out	0x23, r22	; 35
      ae:	6d ed       	ldi	r22, 0xDD	; 221
      b0:	fd 75       	andi	r31, 0x5D	; 93
      b2:	3e f6       	brtc	.-114    	; 0x42 <__SREG__+0x3>
      b4:	17 72       	andi	r17, 0x27	; 39
      b6:	31 bf       	out	0x31, r19	; 49
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 07       	cpc	r19, r31
      be:	2c 7a       	andi	r18, 0xAC	; 172
      c0:	a5 ba       	out	0x15, r10	; 21
      c2:	6c c5       	rjmp	.+2776   	; 0xb9c <_ZN6parser9eval_exp6ERd+0x80>
      c4:	90 da       	rcall	.-2784   	; 0xfffff5e6 <__eeprom_end+0xff7ef5e6>
      c6:	3b 93       	.word	0x933b	; ????
      c8:	65 fc       	sbrc	r6, 5
      ca:	8b bc       	out	0x2b, r8	; 43
      cc:	53 f8       	bld	r5, 3
      ce:	10 fd       	sbrc	r17, 0
      d0:	3c 56       	subi	r19, 0x6C	; 108
      d2:	92 83       	std	Z+2, r25	; 0x02
      d4:	4d bd       	out	0x2d, r20	; 45
      d6:	87 9d       	mul	r24, r7
      d8:	3a b6       	in	r3, 0x3a	; 58
      da:	3d cb       	rjmp	.-2438   	; 0xfffff756 <__eeprom_end+0xff7ef756>
      dc:	c9 bf       	out	0x39, r28	; 57
      de:	5b be       	out	0x3b, r5	; 59
      e0:	73 da       	rcall	.-2842   	; 0xfffff5c8 <__eeprom_end+0xff7ef5c8>
      e2:	0f c9       	rjmp	.-3554   	; 0xfffff302 <__eeprom_end+0xff7ef302>
      e4:	3f 05       	cpc	r19, r15
      e6:	a8 4c       	sbci	r26, 0xC8	; 200
      e8:	cd b2       	in	r12, 0x1d	; 29
      ea:	d4 4e       	sbci	r29, 0xE4	; 228
      ec:	b9 38       	cpi	r27, 0x89	; 137
      ee:	36 a9       	ldd	r19, Z+54	; 0x36
      f0:	02 0c       	add	r0, r2
      f2:	50 b9       	out	0x00, r21	; 0
      f4:	91 86       	std	Z+9, r9	; 0x09
      f6:	88 08       	sbc	r8, r8
      f8:	3c a6       	std	Y+44, r3	; 0x2c
      fa:	aa aa       	std	Y+50, r10	; 0x32
      fc:	2a be       	out	0x3a, r2	; 58
      fe:	00 00       	nop
     100:	00 80       	ld	r0, Z
     102:	3f 08       	sbc	r3, r15
     104:	00 00       	nop
     106:	00 be       	out	0x30, r0	; 48
     108:	92 24       	eor	r9, r2
     10a:	49 12       	cpse	r4, r25
     10c:	3e ab       	std	Y+54, r19	; 0x36
     10e:	aa aa       	std	Y+50, r10	; 0x32
     110:	2a be       	out	0x3a, r2	; 58
     112:	cd cc       	rjmp	.-1638   	; 0xfffffaae <__eeprom_end+0xff7efaae>
     114:	cc 4c       	sbci	r28, 0xCC	; 204
     116:	3e 00       	.word	0x003e	; ????
     118:	00 00       	nop
     11a:	80 be       	out	0x30, r8	; 48
     11c:	ab aa       	std	Y+51, r10	; 0x33
     11e:	aa aa       	std	Y+50, r10	; 0x32
     120:	3e 00       	.word	0x003e	; ????
     122:	00 00       	nop
     124:	00 bf       	out	0x30, r16	; 48
     126:	00 00       	nop
     128:	00 80       	ld	r0, Z
     12a:	3f 00       	.word	0x003f	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	08 41       	sbci	r16, 0x18	; 24
     132:	78 d3       	rcall	.+1776   	; 0x824 <_Z11DisplayCharhhc+0x34>
     134:	bb 43       	sbci	r27, 0x3B	; 59
     136:	87 d1       	rcall	.+782    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     138:	13 3d       	cpi	r17, 0xD3	; 211
     13a:	19 0e       	add	r1, r25
     13c:	3c c3       	rjmp	.+1656   	; 0x7b6 <_Z4lineccccc+0xae>
     13e:	bd 42       	sbci	r27, 0x2D	; 45
     140:	82 ad       	ldd	r24, Z+58	; 0x3a
     142:	2b 3e       	cpi	r18, 0xEB	; 235
     144:	68 ec       	ldi	r22, 0xC8	; 200
     146:	82 76       	andi	r24, 0x62	; 98
     148:	be d9       	rcall	.-3204   	; 0xfffff4c6 <__eeprom_end+0xff7ef4c6>
     14a:	8f e1       	ldi	r24, 0x1F	; 31
     14c:	a9 3e       	cpi	r26, 0xE9	; 233
     14e:	4c 80       	ldd	r4, Y+4	; 0x04
     150:	ef ff       	.word	0xffef	; ????
     152:	be 01       	movw	r22, r28
     154:	c4 ff       	sbrs	r28, 4
     156:	7f 3f       	cpi	r23, 0xFF	; 255
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	00 02       	muls	r16, r16
     15e:	89 88       	ldd	r8, Y+17	; 0x11
     160:	08 3c       	cpi	r16, 0xC8	; 200
     162:	ab aa       	std	Y+51, r10	; 0x33
     164:	aa 2a       	or	r10, r26
     166:	3e 00       	.word	0x003e	; ????
     168:	00 00       	nop
     16a:	80 3f       	cpi	r24, 0xF0	; 240
     16c:	02 89       	ldd	r16, Z+18	; 0x12
     16e:	88 08       	sbc	r8, r8
     170:	3e ab       	std	Y+54, r19	; 0x36
     172:	aa aa       	std	Y+50, r10	; 0x32
     174:	aa be       	out	0x3a, r10	; 58
     176:	00 00       	nop
     178:	00 80       	ld	r0, Z
     17a:	3f 06       	cpc	r3, r31
     17c:	64 ec       	ldi	r22, 0xC4	; 196
     17e:	1b 3c       	cpi	r17, 0xCB	; 203
     180:	04 bc       	out	0x24, r0	; 36
     182:	16 3e       	cpi	r17, 0xE6	; 230
     184:	3b e5       	ldi	r19, 0x5B	; 91
     186:	b9 3c       	cpi	r27, 0xC9	; 201
     188:	c9 3c       	cpi	r28, 0xC9	; 201
     18a:	37 c2       	rjmp	.+1134   	; 0x5fa <_Z8PutPixelhhc+0x74>
     18c:	9e 5a       	subi	r25, 0xAE	; 174
     18e:	3d 66       	ori	r19, 0x6D	; 109
     190:	04 98       	cbi	0x00, 4	; 0
     192:	08 3e       	cpi	r16, 0xE8	; 232
     194:	ea 69       	ori	r30, 0x9A	; 154
     196:	aa aa       	std	Y+50, r10	; 0x32
     198:	3e 00       	.word	0x003e	; ????
     19a:	00 00       	nop
     19c:	80 3f       	cpi	r24, 0xF0	; 240

0000019e <__trampolines_end>:
     19e:	4e 41       	sbci	r20, 0x1E	; 30
     1a0:	4e 49       	Address 0x000001a0 is out of bounds.
.word	0xffff	; ????

000001a1 <pstr_inity>:
     1a1:	49 4e 49 54 59                                      INITY

000001a6 <pstr_inf>:
     1a6:	49 4e 46                                            INF

000001a9 <pwr_m10>:
     1a9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     1b9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001c1 <pwr_p10>:
     1c1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1d1:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     1e1:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     1f1:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     201:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     211:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     221:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     231:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     241:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     251:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     261:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     271:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     281:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     291:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     2a1:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     2b1:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     2c1:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     2d1:	3d 27                                               ='

000002d3 <_ZL10FontLookup>:
     2d3:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     2e3:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     2f3:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     303:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     313:	00 08 08 08 08 08 00 30 30 00 00 20 10 08 04 02     .......00.. ....
     323:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     333:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     343:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     353:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     363:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     373:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     383:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     393:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     3a3:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     3b3:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     3c3:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     3d3:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     3e3:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     3f3:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     403:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     413:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     423:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     433:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     443:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     453:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     463:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     473:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     483:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     493:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     4a3:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..
	...

000004b4 <__ctors_start>:
     4b4:	7b 1d       	adc	r23, r11

000004b6 <__ctors_end>:
     4b6:	11 24       	eor	r1, r1
     4b8:	1f be       	out	0x3f, r1	; 63
     4ba:	cf e5       	ldi	r28, 0x5F	; 95
     4bc:	d8 e0       	ldi	r29, 0x08	; 8
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	cd bf       	out	0x3d, r28	; 61

000004c2 <__do_copy_data>:
     4c2:	13 e0       	ldi	r17, 0x03	; 3
     4c4:	a0 e6       	ldi	r26, 0x60	; 96
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	ec ee       	ldi	r30, 0xEC	; 236
     4ca:	f1 e5       	ldi	r31, 0x51	; 81
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__do_copy_data+0x10>
     4ce:	05 90       	lpm	r0, Z+
     4d0:	0d 92       	st	X+, r0
     4d2:	a2 30       	cpi	r26, 0x02	; 2
     4d4:	b1 07       	cpc	r27, r17
     4d6:	d9 f7       	brne	.-10     	; 0x4ce <__do_copy_data+0xc>

000004d8 <__do_clear_bss>:
     4d8:	27 e0       	ldi	r18, 0x07	; 7
     4da:	a2 e0       	ldi	r26, 0x02	; 2
     4dc:	b3 e0       	ldi	r27, 0x03	; 3
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <.do_clear_bss_start>

000004e0 <.do_clear_bss_loop>:
     4e0:	1d 92       	st	X+, r1

000004e2 <.do_clear_bss_start>:
     4e2:	a8 38       	cpi	r26, 0x88	; 136
     4e4:	b2 07       	cpc	r27, r18
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <.do_clear_bss_loop>

000004e8 <__do_global_ctors>:
     4e8:	12 e0       	ldi	r17, 0x02	; 2
     4ea:	cb e5       	ldi	r28, 0x5B	; 91
     4ec:	d2 e0       	ldi	r29, 0x02	; 2
     4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <__do_global_ctors+0x10>
     4f0:	21 97       	sbiw	r28, 0x01	; 1
     4f2:	fe 01       	movw	r30, r28
     4f4:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <__tablejump2__>
     4f8:	ca 35       	cpi	r28, 0x5A	; 90
     4fa:	d1 07       	cpc	r29, r17
     4fc:	c9 f7       	brne	.-14     	; 0x4f0 <__do_global_ctors+0x8>
     4fe:	0e 94 56 1d 	call	0x3aac	; 0x3aac <main>
     502:	0c 94 f4 28 	jmp	0x51e8	; 0x51e8 <_exit>

00000506 <__bad_interrupt>:
     506:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000050a <_Z6Epulsev>:
  {
   PutPixel(x+r,y+c1,((0x01) & (pgm_read_byte(&FontLookup1[d][r]) >> (c+3))));
   c1=c1-1;
  }
 }
}
     50a:	ac 9a       	sbi	0x15, 4	; 21
     50c:	ac 98       	cbi	0x15, 4	; 21
     50e:	08 95       	ret

00000510 <_Z7InitLCDv>:
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	81 bb       	out	0x11, r24	; 17
     514:	a0 9a       	sbi	0x14, 0	; 20
     516:	a4 9a       	sbi	0x14, 4	; 20
     518:	a3 9a       	sbi	0x14, 3	; 20
     51a:	a2 9a       	sbi	0x14, 2	; 20
     51c:	a1 9a       	sbi	0x14, 1	; 20
     51e:	a9 98       	cbi	0x15, 1	; 21
     520:	2f e7       	ldi	r18, 0x7F	; 127
     522:	88 e3       	ldi	r24, 0x38	; 56
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	21 50       	subi	r18, 0x01	; 1
     528:	80 40       	sbci	r24, 0x00	; 0
     52a:	90 40       	sbci	r25, 0x00	; 0
     52c:	e1 f7       	brne	.-8      	; 0x526 <_Z7InitLCDv+0x16>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <_Z7InitLCDv+0x20>
     530:	00 00       	nop
     532:	a9 9a       	sbi	0x15, 1	; 21
     534:	2f e7       	ldi	r18, 0x7F	; 127
     536:	88 e3       	ldi	r24, 0x38	; 56
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	21 50       	subi	r18, 0x01	; 1
     53c:	80 40       	sbci	r24, 0x00	; 0
     53e:	90 40       	sbci	r25, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <_Z7InitLCDv+0x2a>
     542:	00 c0       	rjmp	.+0      	; 0x544 <_Z7InitLCDv+0x34>
     544:	00 00       	nop
     546:	a8 98       	cbi	0x15, 0	; 21
     548:	ab 9a       	sbi	0x15, 3	; 21
     54a:	aa 9a       	sbi	0x15, 2	; 21
     54c:	8f e3       	ldi	r24, 0x3F	; 63
     54e:	82 bb       	out	0x12, r24	; 18
     550:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     554:	80 ec       	ldi	r24, 0xC0	; 192
     556:	82 bb       	out	0x12, r24	; 18
     558:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     55c:	2f e7       	ldi	r18, 0x7F	; 127
     55e:	88 e3       	ldi	r24, 0x38	; 56
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	21 50       	subi	r18, 0x01	; 1
     564:	80 40       	sbci	r24, 0x00	; 0
     566:	90 40       	sbci	r25, 0x00	; 0
     568:	e1 f7       	brne	.-8      	; 0x562 <_Z7InitLCDv+0x52>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <_Z7InitLCDv+0x5c>
     56c:	00 00       	nop
     56e:	2f e7       	ldi	r18, 0x7F	; 127
     570:	88 e3       	ldi	r24, 0x38	; 56
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	21 50       	subi	r18, 0x01	; 1
     576:	80 40       	sbci	r24, 0x00	; 0
     578:	90 40       	sbci	r25, 0x00	; 0
     57a:	e1 f7       	brne	.-8      	; 0x574 <_Z7InitLCDv+0x64>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <_Z7InitLCDv+0x6e>
     57e:	00 00       	nop
     580:	ab 98       	cbi	0x15, 3	; 21
     582:	aa 98       	cbi	0x15, 2	; 21
     584:	08 95       	ret

00000586 <_Z8PutPixelhhc>:
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	c8 2f       	mov	r28, r24
     590:	04 2f       	mov	r16, r20
     592:	68 30       	cpi	r22, 0x08	; 8
     594:	68 f0       	brcs	.+26     	; 0x5b0 <_Z8PutPixelhhc+0x2a>
     596:	86 2f       	mov	r24, r22
     598:	88 50       	subi	r24, 0x08	; 8
     59a:	88 30       	cpi	r24, 0x08	; 8
     59c:	e8 f7       	brcc	.-6      	; 0x598 <_Z8PutPixelhhc+0x12>
     59e:	16 2f       	mov	r17, r22
     5a0:	17 70       	andi	r17, 0x07	; 7
     5a2:	d8 ef       	ldi	r29, 0xF8	; 248
     5a4:	d6 0f       	add	r29, r22
     5a6:	d6 95       	lsr	r29
     5a8:	d6 95       	lsr	r29
     5aa:	d6 95       	lsr	r29
     5ac:	df 5f       	subi	r29, 0xFF	; 255
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <_Z8PutPixelhhc+0x2e>
     5b0:	16 2f       	mov	r17, r22
     5b2:	d0 e0       	ldi	r29, 0x00	; 0
     5b4:	c0 34       	cpi	r28, 0x40	; 64
     5b6:	80 f4       	brcc	.+32     	; 0x5d8 <_Z8PutPixelhhc+0x52>
     5b8:	a8 98       	cbi	0x15, 0	; 21
     5ba:	ab 9a       	sbi	0x15, 3	; 21
     5bc:	aa 98       	cbi	0x15, 2	; 21
     5be:	d7 70       	andi	r29, 0x07	; 7
     5c0:	8d 2f       	mov	r24, r29
     5c2:	88 6b       	ori	r24, 0xB8	; 184
     5c4:	82 bb       	out	0x12, r24	; 18
     5c6:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     5ca:	cf 73       	andi	r28, 0x3F	; 63
     5cc:	8c 2f       	mov	r24, r28
     5ce:	80 64       	ori	r24, 0x40	; 64
     5d0:	82 bb       	out	0x12, r24	; 18
     5d2:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     5d6:	11 c0       	rjmp	.+34     	; 0x5fa <_Z8PutPixelhhc+0x74>
     5d8:	c0 54       	subi	r28, 0x40	; 64
     5da:	a8 98       	cbi	0x15, 0	; 21
     5dc:	ab 98       	cbi	0x15, 3	; 21
     5de:	aa 9a       	sbi	0x15, 2	; 21
     5e0:	d7 70       	andi	r29, 0x07	; 7
     5e2:	8d 2f       	mov	r24, r29
     5e4:	88 6b       	ori	r24, 0xB8	; 184
     5e6:	82 bb       	out	0x12, r24	; 18
     5e8:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     5ec:	cf 73       	andi	r28, 0x3F	; 63
     5ee:	8c 2f       	mov	r24, r28
     5f0:	80 64       	ori	r24, 0x40	; 64
     5f2:	82 bb       	out	0x12, r24	; 18
     5f4:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     5f8:	c0 5c       	subi	r28, 0xC0	; 192
     5fa:	a8 9a       	sbi	0x15, 0	; 21
     5fc:	01 30       	cpi	r16, 0x01	; 1
     5fe:	d1 f4       	brne	.+52     	; 0x634 <_Z8PutPixelhhc+0xae>
     600:	ec 2f       	mov	r30, r28
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	ee 57       	subi	r30, 0x7E	; 126
     612:	fc 4f       	sbci	r31, 0xFC	; 252
     614:	ed 0f       	add	r30, r29
     616:	f1 1d       	adc	r31, r1
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	02 c0       	rjmp	.+4      	; 0x622 <_Z8PutPixelhhc+0x9c>
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	1a 95       	dec	r17
     624:	e2 f7       	brpl	.-8      	; 0x61e <_Z8PutPixelhhc+0x98>
     626:	90 81       	ld	r25, Z
     628:	89 2b       	or	r24, r25
     62a:	80 83       	st	Z, r24
     62c:	82 bb       	out	0x12, r24	; 18
     62e:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     632:	1a c0       	rjmp	.+52     	; 0x668 <_Z8PutPixelhhc+0xe2>
     634:	ec 2f       	mov	r30, r28
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	02 c0       	rjmp	.+4      	; 0x642 <_Z8PutPixelhhc+0xbc>
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	1a 95       	dec	r17
     644:	e2 f7       	brpl	.-8      	; 0x63e <_Z8PutPixelhhc+0xb8>
     646:	80 95       	com	r24
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	ee 0f       	add	r30, r30
     64e:	ff 1f       	adc	r31, r31
     650:	ee 0f       	add	r30, r30
     652:	ff 1f       	adc	r31, r31
     654:	ee 57       	subi	r30, 0x7E	; 126
     656:	fc 4f       	sbci	r31, 0xFC	; 252
     658:	ed 0f       	add	r30, r29
     65a:	f1 1d       	adc	r31, r1
     65c:	90 81       	ld	r25, Z
     65e:	89 23       	and	r24, r25
     660:	80 83       	st	Z, r24
     662:	82 bb       	out	0x12, r24	; 18
     664:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	08 95       	ret

00000672 <_Z9LCD_Clearv>:
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	00 e0       	ldi	r16, 0x00	; 0
     67e:	10 e0       	ldi	r17, 0x00	; 0
     680:	f1 2c       	mov	r15, r1
     682:	d0 2f       	mov	r29, r16
     684:	cf 2d       	mov	r28, r15
     686:	ec 2f       	mov	r30, r28
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	ee 0f       	add	r30, r30
     690:	ff 1f       	adc	r31, r31
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	ee 57       	subi	r30, 0x7E	; 126
     698:	fc 4f       	sbci	r31, 0xFC	; 252
     69a:	e0 0f       	add	r30, r16
     69c:	f1 1f       	adc	r31, r17
     69e:	10 82       	st	Z, r1
     6a0:	c0 34       	cpi	r28, 0x40	; 64
     6a2:	80 f4       	brcc	.+32     	; 0x6c4 <_Z9LCD_Clearv+0x52>
     6a4:	a8 98       	cbi	0x15, 0	; 21
     6a6:	ab 9a       	sbi	0x15, 3	; 21
     6a8:	aa 98       	cbi	0x15, 2	; 21
     6aa:	d7 70       	andi	r29, 0x07	; 7
     6ac:	8d 2f       	mov	r24, r29
     6ae:	88 6b       	ori	r24, 0xB8	; 184
     6b0:	82 bb       	out	0x12, r24	; 18
     6b2:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6b6:	cf 73       	andi	r28, 0x3F	; 63
     6b8:	8c 2f       	mov	r24, r28
     6ba:	80 64       	ori	r24, 0x40	; 64
     6bc:	82 bb       	out	0x12, r24	; 18
     6be:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <_Z9LCD_Clearv+0x74>
     6c4:	c0 54       	subi	r28, 0x40	; 64
     6c6:	a8 98       	cbi	0x15, 0	; 21
     6c8:	ab 98       	cbi	0x15, 3	; 21
     6ca:	aa 9a       	sbi	0x15, 2	; 21
     6cc:	d7 70       	andi	r29, 0x07	; 7
     6ce:	8d 2f       	mov	r24, r29
     6d0:	88 6b       	ori	r24, 0xB8	; 184
     6d2:	82 bb       	out	0x12, r24	; 18
     6d4:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6d8:	cf 73       	andi	r28, 0x3F	; 63
     6da:	8c 2f       	mov	r24, r28
     6dc:	80 64       	ori	r24, 0x40	; 64
     6de:	82 bb       	out	0x12, r24	; 18
     6e0:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6e4:	c0 5c       	subi	r28, 0xC0	; 192
     6e6:	a8 9a       	sbi	0x15, 0	; 21
     6e8:	12 ba       	out	0x12, r1	; 18
     6ea:	0e 94 85 02 	call	0x50a	; 0x50a <_Z6Epulsev>
     6ee:	cf 5f       	subi	r28, 0xFF	; 255
     6f0:	52 f6       	brpl	.-108    	; 0x686 <_Z9LCD_Clearv+0x14>
     6f2:	0f 5f       	subi	r16, 0xFF	; 255
     6f4:	1f 4f       	sbci	r17, 0xFF	; 255
     6f6:	08 30       	cpi	r16, 0x08	; 8
     6f8:	11 05       	cpc	r17, r1
     6fa:	19 f6       	brne	.-122    	; 0x682 <_Z9LCD_Clearv+0x10>
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	08 95       	ret

00000708 <_Z4lineccccc>:
     708:	7f 92       	push	r7
     70a:	8f 92       	push	r8
     70c:	9f 92       	push	r9
     70e:	af 92       	push	r10
     710:	bf 92       	push	r11
     712:	cf 92       	push	r12
     714:	df 92       	push	r13
     716:	ef 92       	push	r14
     718:	ff 92       	push	r15
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	d8 2f       	mov	r29, r24
     724:	c6 2f       	mov	r28, r22
     726:	74 2e       	mov	r7, r20
     728:	82 2e       	mov	r8, r18
     72a:	a2 2e       	mov	r10, r18
     72c:	b1 2c       	mov	r11, r1
     72e:	a6 1a       	sub	r10, r22
     730:	b1 08       	sbc	r11, r1
     732:	c4 2e       	mov	r12, r20
     734:	d1 2c       	mov	r13, r1
     736:	c8 1a       	sub	r12, r24
     738:	d1 08       	sbc	r13, r1
     73a:	bb 20       	and	r11, r11
     73c:	34 f4       	brge	.+12     	; 0x74a <_Z4lineccccc+0x42>
     73e:	b1 94       	neg	r11
     740:	a1 94       	neg	r10
     742:	b1 08       	sbc	r11, r1
     744:	99 24       	eor	r9, r9
     746:	9a 94       	dec	r9
     748:	02 c0       	rjmp	.+4      	; 0x74e <_Z4lineccccc+0x46>
     74a:	99 24       	eor	r9, r9
     74c:	93 94       	inc	r9
     74e:	dd 20       	and	r13, r13
     750:	2c f4       	brge	.+10     	; 0x75c <_Z4lineccccc+0x54>
     752:	d1 94       	neg	r13
     754:	c1 94       	neg	r12
     756:	d1 08       	sbc	r13, r1
     758:	1f ef       	ldi	r17, 0xFF	; 255
     75a:	01 c0       	rjmp	.+2      	; 0x75e <_Z4lineccccc+0x56>
     75c:	11 e0       	ldi	r17, 0x01	; 1
     75e:	aa 0c       	add	r10, r10
     760:	bb 1c       	adc	r11, r11
     762:	cc 0c       	add	r12, r12
     764:	dd 1c       	adc	r13, r13
     766:	40 2f       	mov	r20, r16
     768:	6c 2f       	mov	r22, r28
     76a:	8d 2f       	mov	r24, r29
     76c:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
     770:	ac 14       	cp	r10, r12
     772:	bd 04       	cpc	r11, r13
     774:	c4 f4       	brge	.+48     	; 0x7a6 <_Z4lineccccc+0x9e>
     776:	c6 01       	movw	r24, r12
     778:	95 95       	asr	r25
     77a:	87 95       	ror	r24
     77c:	75 01       	movw	r14, r10
     77e:	e8 1a       	sub	r14, r24
     780:	f9 0a       	sbc	r15, r25
     782:	7d 16       	cp	r7, r29
     784:	39 f1       	breq	.+78     	; 0x7d4 <_Z4lineccccc+0xcc>
     786:	ff 20       	and	r15, r15
     788:	1c f0       	brlt	.+6      	; 0x790 <_Z4lineccccc+0x88>
     78a:	c9 0d       	add	r28, r9
     78c:	ec 18       	sub	r14, r12
     78e:	fd 08       	sbc	r15, r13
     790:	d1 0f       	add	r29, r17
     792:	ea 0c       	add	r14, r10
     794:	fb 1c       	adc	r15, r11
     796:	40 2f       	mov	r20, r16
     798:	6c 2f       	mov	r22, r28
     79a:	8d 2f       	mov	r24, r29
     79c:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
     7a0:	d7 11       	cpse	r29, r7
     7a2:	f1 cf       	rjmp	.-30     	; 0x786 <_Z4lineccccc+0x7e>
     7a4:	17 c0       	rjmp	.+46     	; 0x7d4 <_Z4lineccccc+0xcc>
     7a6:	c5 01       	movw	r24, r10
     7a8:	95 95       	asr	r25
     7aa:	87 95       	ror	r24
     7ac:	76 01       	movw	r14, r12
     7ae:	e8 1a       	sub	r14, r24
     7b0:	f9 0a       	sbc	r15, r25
     7b2:	8c 16       	cp	r8, r28
     7b4:	79 f0       	breq	.+30     	; 0x7d4 <_Z4lineccccc+0xcc>
     7b6:	ff 20       	and	r15, r15
     7b8:	1c f0       	brlt	.+6      	; 0x7c0 <_Z4lineccccc+0xb8>
     7ba:	d1 0f       	add	r29, r17
     7bc:	ea 18       	sub	r14, r10
     7be:	fb 08       	sbc	r15, r11
     7c0:	c9 0d       	add	r28, r9
     7c2:	ec 0c       	add	r14, r12
     7c4:	fd 1c       	adc	r15, r13
     7c6:	40 2f       	mov	r20, r16
     7c8:	6c 2f       	mov	r22, r28
     7ca:	8d 2f       	mov	r24, r29
     7cc:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
     7d0:	c8 11       	cpse	r28, r8
     7d2:	f1 cf       	rjmp	.-30     	; 0x7b6 <_Z4lineccccc+0xae>
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	9f 90       	pop	r9
     7ea:	8f 90       	pop	r8
     7ec:	7f 90       	pop	r7
     7ee:	08 95       	ret

000007f0 <_Z11DisplayCharhhc>:
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	d6 2e       	mov	r13, r22
     802:	40 52       	subi	r20, 0x20	; 32
     804:	24 2f       	mov	r18, r20
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	89 01       	movw	r16, r18
     80a:	00 0f       	add	r16, r16
     80c:	11 1f       	adc	r17, r17
     80e:	00 0f       	add	r16, r16
     810:	11 1f       	adc	r17, r17
     812:	02 0f       	add	r16, r18
     814:	13 1f       	adc	r17, r19
     816:	0d 52       	subi	r16, 0x2D	; 45
     818:	1d 4f       	sbci	r17, 0xFD	; 253
     81a:	0f 2e       	mov	r0, r31
     81c:	f5 e0       	ldi	r31, 0x05	; 5
     81e:	cf 2e       	mov	r12, r31
     820:	f0 2d       	mov	r31, r0
     822:	c8 0e       	add	r12, r24
     824:	e8 2e       	mov	r14, r24
     826:	fd 2c       	mov	r15, r13
     828:	c0 e0       	ldi	r28, 0x00	; 0
     82a:	d0 e0       	ldi	r29, 0x00	; 0
     82c:	f8 01       	movw	r30, r16
     82e:	44 91       	lpm	r20, Z
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	0c 2e       	mov	r0, r28
     834:	02 c0       	rjmp	.+4      	; 0x83a <_Z11DisplayCharhhc+0x4a>
     836:	55 95       	asr	r21
     838:	47 95       	ror	r20
     83a:	0a 94       	dec	r0
     83c:	e2 f7       	brpl	.-8      	; 0x836 <_Z11DisplayCharhhc+0x46>
     83e:	41 70       	andi	r20, 0x01	; 1
     840:	6f 2d       	mov	r22, r15
     842:	8e 2d       	mov	r24, r14
     844:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
     848:	21 96       	adiw	r28, 0x01	; 1
     84a:	f3 94       	inc	r15
     84c:	c8 30       	cpi	r28, 0x08	; 8
     84e:	d1 05       	cpc	r29, r1
     850:	69 f7       	brne	.-38     	; 0x82c <_Z11DisplayCharhhc+0x3c>
     852:	0f 5f       	subi	r16, 0xFF	; 255
     854:	1f 4f       	sbci	r17, 0xFF	; 255
     856:	e3 94       	inc	r14
     858:	ce 10       	cpse	r12, r14
     85a:	e5 cf       	rjmp	.-54     	; 0x826 <_Z11DisplayCharhhc+0x36>
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	08 95       	ret

0000086e <_Z11DisplayTexthhPc>:

/*********************************************************************************/
/*         Display Text (5x7)                       */
/*********************************************************************************/
void DisplayText(unsigned char x, unsigned char y, char d[21])
{
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
int i;
int j;
j=strlen(d);
     87a:	fa 01       	movw	r30, r20
     87c:	01 90       	ld	r0, Z+
     87e:	00 20       	and	r0, r0
     880:	e9 f7       	brne	.-6      	; 0x87c <_Z11DisplayTexthhPc+0xe>
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	e4 1b       	sub	r30, r20
     886:	f5 0b       	sbc	r31, r21
 for (i=0;i<j;i++)
     888:	1e 16       	cp	r1, r30
     88a:	1f 06       	cpc	r1, r31
     88c:	8c f4       	brge	.+34     	; 0x8b0 <_Z11DisplayTexthhPc+0x42>
     88e:	d6 2f       	mov	r29, r22
     890:	8a 01       	movw	r16, r20
     892:	7a 01       	movw	r14, r20
     894:	ee 0e       	add	r14, r30
     896:	ff 1e       	adc	r15, r31
     898:	c8 2f       	mov	r28, r24
 {
  DisplayChar((i*6)+x,y,d[i]);
     89a:	f8 01       	movw	r30, r16
     89c:	41 91       	ld	r20, Z+
     89e:	8f 01       	movw	r16, r30
     8a0:	6d 2f       	mov	r22, r29
     8a2:	8c 2f       	mov	r24, r28
     8a4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z11DisplayCharhhc>
     8a8:	ca 5f       	subi	r28, 0xFA	; 250
void DisplayText(unsigned char x, unsigned char y, char d[21])
{
int i;
int j;
j=strlen(d);
 for (i=0;i<j;i++)
     8aa:	0e 15       	cp	r16, r14
     8ac:	1f 05       	cpc	r17, r15
     8ae:	a9 f7       	brne	.-22     	; 0x89a <_Z11DisplayTexthhPc+0x2c>
 {
  DisplayChar((i*6)+x,y,d[i]);
 } 
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	08 95       	ret

000008be <_ZN6parserC1Ev>:
};
// Parser constructor.
parser::parser()
{
    int i;
    exp_ptr = NULL;
     8be:	fc 01       	movw	r30, r24
     8c0:	11 82       	std	Z+1, r1	; 0x01
     8c2:	10 82       	st	Z, r1
     8c4:	72 96       	adiw	r30, 0x12	; 18
     8c6:	9c 01       	movw	r18, r24
     8c8:	26 5c       	subi	r18, 0xC6	; 198
     8ca:	3f 4f       	sbci	r19, 0xFF	; 255
    for (i = 0; i < NUMVARS; i++)
        vars[i] = 0.0;
     8cc:	11 92       	st	Z+, r1
     8ce:	11 92       	st	Z+, r1
     8d0:	11 92       	st	Z+, r1
     8d2:	11 92       	st	Z+, r1
// Parser constructor.
parser::parser()
{
    int i;
    exp_ptr = NULL;
    for (i = 0; i < NUMVARS; i++)
     8d4:	e2 17       	cp	r30, r18
     8d6:	f3 07       	cpc	r31, r19
     8d8:	c9 f7       	brne	.-14     	; 0x8cc <_ZN6parserC1Ev+0xe>
        vars[i] = 0.0;
    errormsg[0] = '\0';
     8da:	fc 01       	movw	r30, r24
     8dc:	12 ae       	std	Z+58, r1	; 0x3a
     8de:	08 95       	ret

000008e0 <_ZN6parser9get_tokenEv>:
            strcpy(errormsg, "Syntax Error");
        }
}
// Obtain the next token.
void parser::get_token()
{
     8e0:	af 92       	push	r10
     8e2:	bf 92       	push	r11
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	6c 01       	movw	r12, r24
    char *temp;
    tok_type = 0;
     8f6:	dc 01       	movw	r26, r24
     8f8:	51 96       	adiw	r26, 0x11	; 17
     8fa:	1c 92       	st	X, r1
     8fc:	51 97       	sbiw	r26, 0x11	; 17
    temp = token;
    *temp = '\0';
     8fe:	12 96       	adiw	r26, 0x02	; 2
     900:	1c 92       	st	X, r1
     902:	12 97       	sbiw	r26, 0x02	; 2
    if (!*exp_ptr)  // at end of expression
     904:	ed 91       	ld	r30, X+
     906:	fc 91       	ld	r31, X
     908:	80 81       	ld	r24, Z
     90a:	88 23       	and	r24, r24
     90c:	09 f4       	brne	.+2      	; 0x910 <_ZN6parser9get_tokenEv+0x30>
     90e:	a8 c0       	rjmp	.+336    	; 0xa60 <_ZN6parser9get_tokenEv+0x180>
        return;
    while (isspace(*exp_ptr))  // skip over white space
     910:	f6 01       	movw	r30, r12
     912:	c0 81       	ld	r28, Z
     914:	d1 81       	ldd	r29, Z+1	; 0x01
     916:	f8 80       	ld	r15, Y
     918:	0f 2d       	mov	r16, r15
     91a:	10 e0       	ldi	r17, 0x00	; 0
     91c:	c8 01       	movw	r24, r16
     91e:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <isspace>
     922:	89 2b       	or	r24, r25
     924:	29 f0       	breq	.+10     	; 0x930 <_ZN6parser9get_tokenEv+0x50>
        ++exp_ptr;
     926:	21 96       	adiw	r28, 0x01	; 1
     928:	d6 01       	movw	r26, r12
     92a:	cd 93       	st	X+, r28
     92c:	dc 93       	st	X, r29
    tok_type = 0;
    temp = token;
    *temp = '\0';
    if (!*exp_ptr)  // at end of expression
        return;
    while (isspace(*exp_ptr))  // skip over white space
     92e:	f0 cf       	rjmp	.-32     	; 0x910 <_ZN6parser9get_tokenEv+0x30>
        ++exp_ptr;
    if (strchr("+-*/%^=()", *exp_ptr))
     930:	b8 01       	movw	r22, r16
     932:	8e e0       	ldi	r24, 0x0E	; 14
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 ed 24 	call	0x49da	; 0x49da <strchr>
     93a:	89 2b       	or	r24, r25
     93c:	89 f0       	breq	.+34     	; 0x960 <_ZN6parser9get_tokenEv+0x80>
    {
        tok_type = DELIMITER;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	f6 01       	movw	r30, r12
     942:	81 8b       	std	Z+17, r24	; 0x11
        *temp++ = *exp_ptr++;  // advance to next char
     944:	56 01       	movw	r10, r12
     946:	f3 e0       	ldi	r31, 0x03	; 3
     948:	af 0e       	add	r10, r31
     94a:	b1 1c       	adc	r11, r1
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	d6 01       	movw	r26, r12
     952:	11 96       	adiw	r26, 0x01	; 1
     954:	9c 93       	st	X, r25
     956:	8e 93       	st	-X, r24
     958:	88 81       	ld	r24, Y
     95a:	12 96       	adiw	r26, 0x02	; 2
     95c:	8c 93       	st	X, r24
     95e:	6b c0       	rjmp	.+214    	; 0xa36 <_ZN6parser9get_tokenEv+0x156>
// Obtain the next token.
void parser::get_token()
{
    char *temp;
    tok_type = 0;
    temp = token;
     960:	56 01       	movw	r10, r12
     962:	b2 e0       	ldi	r27, 0x02	; 2
     964:	ab 0e       	add	r10, r27
     966:	b1 1c       	adc	r11, r1
    if (strchr("+-*/%^=()", *exp_ptr))
    {
        tok_type = DELIMITER;
        *temp++ = *exp_ptr++;  // advance to next char
    }
    else if (isalpha(*exp_ptr))
     968:	c8 01       	movw	r24, r16
     96a:	0e 94 c9 24 	call	0x4992	; 0x4992 <isalpha>
     96e:	89 2b       	or	r24, r25
     970:	b9 f1       	breq	.+110    	; 0x9e0 <_ZN6parser9get_tokenEv+0x100>
     972:	75 01       	movw	r14, r10
     974:	57 01       	movw	r10, r14
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     976:	f6 01       	movw	r30, r12
     978:	c0 81       	ld	r28, Z
     97a:	d1 81       	ldd	r29, Z+1	; 0x01
     97c:	18 81       	ld	r17, Y
     97e:	61 2f       	mov	r22, r17
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	88 e1       	ldi	r24, 0x18	; 24
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 ed 24 	call	0x49da	; 0x49da <strchr>
     98a:	89 2b       	or	r24, r25
     98c:	89 f4       	brne	.+34     	; 0x9b0 <_ZN6parser9get_tokenEv+0xd0>
     98e:	11 23       	and	r17, r17
     990:	79 f0       	breq	.+30     	; 0x9b0 <_ZN6parser9get_tokenEv+0xd0>
            *temp++ = toupper(*exp_ptr++);
     992:	ce 01       	movw	r24, r28
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	d6 01       	movw	r26, r12
     998:	8d 93       	st	X+, r24
     99a:	9c 93       	st	X, r25
     99c:	88 81       	ld	r24, Y
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 da 24 	call	0x49b4	; 0x49b4 <toupper>
     9a4:	f7 01       	movw	r30, r14
     9a6:	80 83       	st	Z, r24
     9a8:	ff ef       	ldi	r31, 0xFF	; 255
     9aa:	ef 1a       	sub	r14, r31
     9ac:	ff 0a       	sbc	r15, r31
        tok_type = DELIMITER;
        *temp++ = *exp_ptr++;  // advance to next char
    }
    else if (isalpha(*exp_ptr))
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     9ae:	e2 cf       	rjmp	.-60     	; 0x974 <_ZN6parser9get_tokenEv+0x94>
            *temp++ = toupper(*exp_ptr++);
        while (isspace(*exp_ptr))  // skip over white space
     9b0:	d6 01       	movw	r26, r12
     9b2:	cd 91       	ld	r28, X+
     9b4:	dc 91       	ld	r29, X
     9b6:	18 81       	ld	r17, Y
     9b8:	81 2f       	mov	r24, r17
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <isspace>
     9c0:	89 2b       	or	r24, r25
     9c2:	29 f0       	breq	.+10     	; 0x9ce <_ZN6parser9get_tokenEv+0xee>
            ++exp_ptr;
     9c4:	21 96       	adiw	r28, 0x01	; 1
     9c6:	f6 01       	movw	r30, r12
     9c8:	d1 83       	std	Z+1, r29	; 0x01
     9ca:	c0 83       	st	Z, r28
    }
    else if (isalpha(*exp_ptr))
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
            *temp++ = toupper(*exp_ptr++);
        while (isspace(*exp_ptr))  // skip over white space
     9cc:	f1 cf       	rjmp	.-30     	; 0x9b0 <_ZN6parser9get_tokenEv+0xd0>
            ++exp_ptr;
        tok_type = (*exp_ptr == '(') ? FUNCTION : VARIABLE;
     9ce:	18 32       	cpi	r17, 0x28	; 40
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <_ZN6parser9get_tokenEv+0xf6>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <_ZN6parser9get_tokenEv+0xf8>
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	d6 01       	movw	r26, r12
     9da:	51 96       	adiw	r26, 0x11	; 17
     9dc:	8c 93       	st	X, r24
     9de:	2b c0       	rjmp	.+86     	; 0xa36 <_ZN6parser9get_tokenEv+0x156>
    }
    else if (isdigit(*exp_ptr) || *exp_ptr == '.')
     9e0:	8f 2d       	mov	r24, r15
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	c0 97       	sbiw	r24, 0x30	; 48
     9e6:	0a 97       	sbiw	r24, 0x0a	; 10
     9e8:	18 f0       	brcs	.+6      	; 0x9f0 <_ZN6parser9get_tokenEv+0x110>
     9ea:	be e2       	ldi	r27, 0x2E	; 46
     9ec:	fb 12       	cpse	r15, r27
     9ee:	23 c0       	rjmp	.+70     	; 0xa36 <_ZN6parser9get_tokenEv+0x156>
     9f0:	75 01       	movw	r14, r10
     9f2:	57 01       	movw	r10, r14
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     9f4:	f6 01       	movw	r30, r12
     9f6:	c0 81       	ld	r28, Z
     9f8:	d1 81       	ldd	r29, Z+1	; 0x01
     9fa:	18 81       	ld	r17, Y
     9fc:	61 2f       	mov	r22, r17
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	88 e1       	ldi	r24, 0x18	; 24
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e 94 ed 24 	call	0x49da	; 0x49da <strchr>
     a08:	89 2b       	or	r24, r25
     a0a:	89 f4       	brne	.+34     	; 0xa2e <_ZN6parser9get_tokenEv+0x14e>
     a0c:	11 23       	and	r17, r17
     a0e:	79 f0       	breq	.+30     	; 0xa2e <_ZN6parser9get_tokenEv+0x14e>
            *temp++ = toupper(*exp_ptr++);
     a10:	ce 01       	movw	r24, r28
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	d6 01       	movw	r26, r12
     a16:	8d 93       	st	X+, r24
     a18:	9c 93       	st	X, r25
     a1a:	88 81       	ld	r24, Y
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 da 24 	call	0x49b4	; 0x49b4 <toupper>
     a22:	f7 01       	movw	r30, r14
     a24:	80 83       	st	Z, r24
     a26:	ff ef       	ldi	r31, 0xFF	; 255
     a28:	ef 1a       	sub	r14, r31
     a2a:	ff 0a       	sbc	r15, r31
            ++exp_ptr;
        tok_type = (*exp_ptr == '(') ? FUNCTION : VARIABLE;
    }
    else if (isdigit(*exp_ptr) || *exp_ptr == '.')
    {
        while (!strchr(" +-/*%^=()\t\r", *exp_ptr) && (*exp_ptr))
     a2c:	e2 cf       	rjmp	.-60     	; 0x9f2 <_ZN6parser9get_tokenEv+0x112>
            *temp++ = toupper(*exp_ptr++);
        tok_type = NUMBER;
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	d6 01       	movw	r26, r12
     a32:	51 96       	adiw	r26, 0x11	; 17
     a34:	8c 93       	st	X, r24
    }
    *temp = '\0';
     a36:	f5 01       	movw	r30, r10
     a38:	10 82       	st	Z, r1
    if ((tok_type == VARIABLE) && (token[1]))
     a3a:	d6 01       	movw	r26, r12
     a3c:	51 96       	adiw	r26, 0x11	; 17
     a3e:	8c 91       	ld	r24, X
     a40:	51 97       	sbiw	r26, 0x11	; 17
     a42:	82 30       	cpi	r24, 0x02	; 2
     a44:	69 f4       	brne	.+26     	; 0xa60 <_ZN6parser9get_tokenEv+0x180>
     a46:	13 96       	adiw	r26, 0x03	; 3
     a48:	8c 91       	ld	r24, X
     a4a:	13 97       	sbiw	r26, 0x03	; 3
     a4c:	88 23       	and	r24, r24
     a4e:	41 f0       	breq	.+16     	; 0xa60 <_ZN6parser9get_tokenEv+0x180>
        strcpy(errormsg, "Only first letter of variables is considered");
     a50:	da 96       	adiw	r26, 0x3a	; 58
     a52:	8d e2       	ldi	r24, 0x2D	; 45
     a54:	e5 e2       	ldi	r30, 0x25	; 37
     a56:	f1 e0       	ldi	r31, 0x01	; 1
     a58:	01 90       	ld	r0, Z+
     a5a:	0d 92       	st	X+, r0
     a5c:	8a 95       	dec	r24
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <_ZN6parser9get_tokenEv+0x178>
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	08 95       	ret

00000a76 <_ZN6parser9eval_exp2ERd>:
    }
    eval_exp2(result);
}
// Add or subtract two terms.
void parser::eval_exp2(double &result)
{
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	00 d0       	rcall	.+0      	; 0xa84 <_ZN6parser9eval_exp2ERd+0xe>
     a84:	00 d0       	rcall	.+0      	; 0xa86 <_ZN6parser9eval_exp2ERd+0x10>
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	8c 01       	movw	r16, r24
     a8c:	7b 01       	movw	r14, r22
    char op;
    double temp;
    eval_exp3(result);
     a8e:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN6parser9eval_exp3ERd>
    while ((op = *token) == '+' || op == '-')
     a92:	f8 01       	movw	r30, r16
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	8b 32       	cpi	r24, 0x2B	; 43
     a98:	e1 f0       	breq	.+56     	; 0xad2 <_ZN6parser9eval_exp2ERd+0x5c>
     a9a:	8d 32       	cpi	r24, 0x2D	; 45
     a9c:	a1 f5       	brne	.+104    	; 0xb06 <_ZN6parser9eval_exp2ERd+0x90>
    {
        get_token();
     a9e:	c8 01       	movw	r24, r16
     aa0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp3(temp);
     aa4:	be 01       	movw	r22, r28
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	c8 01       	movw	r24, r16
     aac:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN6parser9eval_exp3ERd>
        switch (op)
        {
        case '-':
            result = result - temp;
     ab0:	29 81       	ldd	r18, Y+1	; 0x01
     ab2:	3a 81       	ldd	r19, Y+2	; 0x02
     ab4:	4b 81       	ldd	r20, Y+3	; 0x03
     ab6:	5c 81       	ldd	r21, Y+4	; 0x04
     ab8:	f7 01       	movw	r30, r14
     aba:	60 81       	ld	r22, Z
     abc:	71 81       	ldd	r23, Z+1	; 0x01
     abe:	82 81       	ldd	r24, Z+2	; 0x02
     ac0:	93 81       	ldd	r25, Z+3	; 0x03
     ac2:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
     ac6:	f7 01       	movw	r30, r14
     ac8:	60 83       	st	Z, r22
     aca:	71 83       	std	Z+1, r23	; 0x01
     acc:	82 83       	std	Z+2, r24	; 0x02
     ace:	93 83       	std	Z+3, r25	; 0x03
            break;
     ad0:	e0 cf       	rjmp	.-64     	; 0xa92 <_ZN6parser9eval_exp2ERd+0x1c>
    char op;
    double temp;
    eval_exp3(result);
    while ((op = *token) == '+' || op == '-')
    {
        get_token();
     ad2:	c8 01       	movw	r24, r16
     ad4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp3(temp);
     ad8:	be 01       	movw	r22, r28
     ada:	6f 5f       	subi	r22, 0xFF	; 255
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	c8 01       	movw	r24, r16
     ae0:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN6parser9eval_exp3ERd>
        {
        case '-':
            result = result - temp;
            break;
        case '+':
            result = result + temp;
     ae4:	29 81       	ldd	r18, Y+1	; 0x01
     ae6:	3a 81       	ldd	r19, Y+2	; 0x02
     ae8:	4b 81       	ldd	r20, Y+3	; 0x03
     aea:	5c 81       	ldd	r21, Y+4	; 0x04
     aec:	f7 01       	movw	r30, r14
     aee:	60 81       	ld	r22, Z
     af0:	71 81       	ldd	r23, Z+1	; 0x01
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
     afa:	f7 01       	movw	r30, r14
     afc:	60 83       	st	Z, r22
     afe:	71 83       	std	Z+1, r23	; 0x01
     b00:	82 83       	std	Z+2, r24	; 0x02
     b02:	93 83       	std	Z+3, r25	; 0x03
            break;
     b04:	c6 cf       	rjmp	.-116    	; 0xa92 <_ZN6parser9eval_exp2ERd+0x1c>
        }
    }
}
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	08 95       	ret

00000b1c <_ZN6parser9eval_exp6ERd>:
    if (op == '-')
        result = -result;
}
// Process a function, a parenthesized expression, a value or a variable
void parser::eval_exp6(double &result)
{
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	2f 97       	sbiw	r28, 0x0f	; 15
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	8c 01       	movw	r16, r24
     b3c:	7b 01       	movw	r14, r22
    bool isfunc = (tok_type == FUNCTION);
     b3e:	dc 01       	movw	r26, r24
     b40:	51 96       	adiw	r26, 0x11	; 17
     b42:	dc 90       	ld	r13, X
    char temp_token[15];
    if (isfunc)
     b44:	b4 e0       	ldi	r27, 0x04	; 4
     b46:	db 12       	cpse	r13, r27
     b48:	0a c0       	rjmp	.+20     	; 0xb5e <_ZN6parser9eval_exp6ERd+0x42>
    {
        strcpy(temp_token, token);
     b4a:	bc 01       	movw	r22, r24
     b4c:	6e 5f       	subi	r22, 0xFE	; 254
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 01 25 	call	0x4a02	; 0x4a02 <strcpy>
        get_token();
     b58:	c8 01       	movw	r24, r16
     b5a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
    }
    if ((*token == '('))
     b5e:	d8 01       	movw	r26, r16
     b60:	12 96       	adiw	r26, 0x02	; 2
     b62:	ec 91       	ld	r30, X
     b64:	e8 32       	cpi	r30, 0x28	; 40
     b66:	09 f0       	breq	.+2      	; 0xb6a <_ZN6parser9eval_exp6ERd+0x4e>
     b68:	b5 c1       	rjmp	.+874    	; 0xed4 <_ZN6parser9eval_exp6ERd+0x3b8>
    {
        get_token();
     b6a:	c8 01       	movw	r24, r16
     b6c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp2(result);
     b70:	b7 01       	movw	r22, r14
     b72:	c8 01       	movw	r24, r16
     b74:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN6parser9eval_exp2ERd>
        if (*token != ')')
     b78:	f8 01       	movw	r30, r16
     b7a:	82 81       	ldd	r24, Z+2	; 0x02
     b7c:	89 32       	cpi	r24, 0x29	; 41
     b7e:	49 f0       	breq	.+18     	; 0xb92 <_ZN6parser9eval_exp6ERd+0x76>
            strcpy(errormsg, "Unbalanced Parentheses");
     b80:	87 e1       	ldi	r24, 0x17	; 23
     b82:	e2 e5       	ldi	r30, 0x52	; 82
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	d8 01       	movw	r26, r16
     b88:	da 96       	adiw	r26, 0x3a	; 58
     b8a:	01 90       	ld	r0, Z+
     b8c:	0d 92       	st	X+, r0
     b8e:	8a 95       	dec	r24
     b90:	e1 f7       	brne	.-8      	; 0xb8a <_ZN6parser9eval_exp6ERd+0x6e>
        if (isfunc)
     b92:	f4 e0       	ldi	r31, 0x04	; 4
     b94:	df 12       	cpse	r13, r31
     b96:	9a c1       	rjmp	.+820    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
        {
            if (!strcmp(temp_token, "SIN"))
     b98:	6a e6       	ldi	r22, 0x6A	; 106
     b9a:	71 e0       	ldi	r23, 0x01	; 1
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     ba4:	89 2b       	or	r24, r25
     ba6:	69 f4       	brne	.+26     	; 0xbc2 <_ZN6parser9eval_exp6ERd+0xa6>
                result = sin(result);
     ba8:	d7 01       	movw	r26, r14
     baa:	6d 91       	ld	r22, X+
     bac:	7d 91       	ld	r23, X+
     bae:	8d 91       	ld	r24, X+
     bb0:	9c 91       	ld	r25, X
     bb2:	0e 94 c9 22 	call	0x4592	; 0x4592 <sin>
     bb6:	f7 01       	movw	r30, r14
     bb8:	60 83       	st	Z, r22
     bba:	71 83       	std	Z+1, r23	; 0x01
     bbc:	82 83       	std	Z+2, r24	; 0x02
     bbe:	93 83       	std	Z+3, r25	; 0x03
     bc0:	85 c1       	rjmp	.+778    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "COS"))
     bc2:	6f e6       	ldi	r22, 0x6F	; 111
     bc4:	71 e0       	ldi	r23, 0x01	; 1
     bc6:	ce 01       	movw	r24, r28
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     bce:	89 2b       	or	r24, r25
     bd0:	69 f4       	brne	.+26     	; 0xbec <_ZN6parser9eval_exp6ERd+0xd0>
                result = cos(result);
     bd2:	d7 01       	movw	r26, r14
     bd4:	6d 91       	ld	r22, X+
     bd6:	7d 91       	ld	r23, X+
     bd8:	8d 91       	ld	r24, X+
     bda:	9c 91       	ld	r25, X
     bdc:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <cos>
     be0:	f7 01       	movw	r30, r14
     be2:	60 83       	st	Z, r22
     be4:	71 83       	std	Z+1, r23	; 0x01
     be6:	82 83       	std	Z+2, r24	; 0x02
     be8:	93 83       	std	Z+3, r25	; 0x03
     bea:	70 c1       	rjmp	.+736    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "TAN"))
     bec:	64 e7       	ldi	r22, 0x74	; 116
     bee:	71 e0       	ldi	r23, 0x01	; 1
     bf0:	ce 01       	movw	r24, r28
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     bf8:	89 2b       	or	r24, r25
     bfa:	69 f4       	brne	.+26     	; 0xc16 <_ZN6parser9eval_exp6ERd+0xfa>
                result = tan(result);
     bfc:	d7 01       	movw	r26, r14
     bfe:	6d 91       	ld	r22, X+
     c00:	7d 91       	ld	r23, X+
     c02:	8d 91       	ld	r24, X+
     c04:	9c 91       	ld	r25, X
     c06:	0e 94 4f 23 	call	0x469e	; 0x469e <tan>
     c0a:	f7 01       	movw	r30, r14
     c0c:	60 83       	st	Z, r22
     c0e:	71 83       	std	Z+1, r23	; 0x01
     c10:	82 83       	std	Z+2, r24	; 0x02
     c12:	93 83       	std	Z+3, r25	; 0x03
     c14:	5b c1       	rjmp	.+694    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ASIN"))
     c16:	69 e6       	ldi	r22, 0x69	; 105
     c18:	71 e0       	ldi	r23, 0x01	; 1
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     c22:	89 2b       	or	r24, r25
     c24:	69 f4       	brne	.+26     	; 0xc40 <_ZN6parser9eval_exp6ERd+0x124>
                result = asin(result);
     c26:	d7 01       	movw	r26, r14
     c28:	6d 91       	ld	r22, X+
     c2a:	7d 91       	ld	r23, X+
     c2c:	8d 91       	ld	r24, X+
     c2e:	9c 91       	ld	r25, X
     c30:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <asin>
     c34:	f7 01       	movw	r30, r14
     c36:	60 83       	st	Z, r22
     c38:	71 83       	std	Z+1, r23	; 0x01
     c3a:	82 83       	std	Z+2, r24	; 0x02
     c3c:	93 83       	std	Z+3, r25	; 0x03
     c3e:	46 c1       	rjmp	.+652    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ACOS"))
     c40:	6e e6       	ldi	r22, 0x6E	; 110
     c42:	71 e0       	ldi	r23, 0x01	; 1
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     c4c:	89 2b       	or	r24, r25
     c4e:	69 f4       	brne	.+26     	; 0xc6a <_ZN6parser9eval_exp6ERd+0x14e>
                result = acos(result);
     c50:	d7 01       	movw	r26, r14
     c52:	6d 91       	ld	r22, X+
     c54:	7d 91       	ld	r23, X+
     c56:	8d 91       	ld	r24, X+
     c58:	9c 91       	ld	r25, X
     c5a:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <acos>
     c5e:	f7 01       	movw	r30, r14
     c60:	60 83       	st	Z, r22
     c62:	71 83       	std	Z+1, r23	; 0x01
     c64:	82 83       	std	Z+2, r24	; 0x02
     c66:	93 83       	std	Z+3, r25	; 0x03
     c68:	31 c1       	rjmp	.+610    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ATAN"))
     c6a:	63 e7       	ldi	r22, 0x73	; 115
     c6c:	71 e0       	ldi	r23, 0x01	; 1
     c6e:	ce 01       	movw	r24, r28
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     c76:	89 2b       	or	r24, r25
     c78:	69 f4       	brne	.+26     	; 0xc94 <_ZN6parser9eval_exp6ERd+0x178>
                result = atan(result);
     c7a:	d7 01       	movw	r26, r14
     c7c:	6d 91       	ld	r22, X+
     c7e:	7d 91       	ld	r23, X+
     c80:	8d 91       	ld	r24, X+
     c82:	9c 91       	ld	r25, X
     c84:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <atan>
     c88:	f7 01       	movw	r30, r14
     c8a:	60 83       	st	Z, r22
     c8c:	71 83       	std	Z+1, r23	; 0x01
     c8e:	82 83       	std	Z+2, r24	; 0x02
     c90:	93 83       	std	Z+3, r25	; 0x03
     c92:	1c c1       	rjmp	.+568    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "SINH"))
     c94:	69 e7       	ldi	r22, 0x79	; 121
     c96:	71 e0       	ldi	r23, 0x01	; 1
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     ca0:	89 2b       	or	r24, r25
     ca2:	69 f4       	brne	.+26     	; 0xcbe <_ZN6parser9eval_exp6ERd+0x1a2>
                result = sinh(result);
     ca4:	d7 01       	movw	r26, r14
     ca6:	6d 91       	ld	r22, X+
     ca8:	7d 91       	ld	r23, X+
     caa:	8d 91       	ld	r24, X+
     cac:	9c 91       	ld	r25, X
     cae:	0e 94 a3 22 	call	0x4546	; 0x4546 <sinh>
     cb2:	f7 01       	movw	r30, r14
     cb4:	60 83       	st	Z, r22
     cb6:	71 83       	std	Z+1, r23	; 0x01
     cb8:	82 83       	std	Z+2, r24	; 0x02
     cba:	93 83       	std	Z+3, r25	; 0x03
     cbc:	07 c1       	rjmp	.+526    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "COSH"))
     cbe:	6f e7       	ldi	r22, 0x7F	; 127
     cc0:	71 e0       	ldi	r23, 0x01	; 1
     cc2:	ce 01       	movw	r24, r28
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     cca:	89 2b       	or	r24, r25
     ccc:	69 f4       	brne	.+26     	; 0xce8 <_ZN6parser9eval_exp6ERd+0x1cc>
                result = cosh(result);
     cce:	d7 01       	movw	r26, r14
     cd0:	6d 91       	ld	r22, X+
     cd2:	7d 91       	ld	r23, X+
     cd4:	8d 91       	ld	r24, X+
     cd6:	9c 91       	ld	r25, X
     cd8:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <cosh>
     cdc:	f7 01       	movw	r30, r14
     cde:	60 83       	st	Z, r22
     ce0:	71 83       	std	Z+1, r23	; 0x01
     ce2:	82 83       	std	Z+2, r24	; 0x02
     ce4:	93 83       	std	Z+3, r25	; 0x03
     ce6:	f2 c0       	rjmp	.+484    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "TANH"))
     ce8:	65 e8       	ldi	r22, 0x85	; 133
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     cf4:	89 2b       	or	r24, r25
     cf6:	69 f4       	brne	.+26     	; 0xd12 <_ZN6parser9eval_exp6ERd+0x1f6>
                result = tanh(result);
     cf8:	d7 01       	movw	r26, r14
     cfa:	6d 91       	ld	r22, X+
     cfc:	7d 91       	ld	r23, X+
     cfe:	8d 91       	ld	r24, X+
     d00:	9c 91       	ld	r25, X
     d02:	0e 94 1b 23 	call	0x4636	; 0x4636 <tanh>
     d06:	f7 01       	movw	r30, r14
     d08:	60 83       	st	Z, r22
     d0a:	71 83       	std	Z+1, r23	; 0x01
     d0c:	82 83       	std	Z+2, r24	; 0x02
     d0e:	93 83       	std	Z+3, r25	; 0x03
     d10:	dd c0       	rjmp	.+442    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ASINH"))
     d12:	68 e7       	ldi	r22, 0x78	; 120
     d14:	71 e0       	ldi	r23, 0x01	; 1
     d16:	ce 01       	movw	r24, r28
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     d1e:	89 2b       	or	r24, r25
     d20:	69 f4       	brne	.+26     	; 0xd3c <_ZN6parser9eval_exp6ERd+0x220>
                result = asin(result);
     d22:	d7 01       	movw	r26, r14
     d24:	6d 91       	ld	r22, X+
     d26:	7d 91       	ld	r23, X+
     d28:	8d 91       	ld	r24, X+
     d2a:	9c 91       	ld	r25, X
     d2c:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <asin>
     d30:	f7 01       	movw	r30, r14
     d32:	60 83       	st	Z, r22
     d34:	71 83       	std	Z+1, r23	; 0x01
     d36:	82 83       	std	Z+2, r24	; 0x02
     d38:	93 83       	std	Z+3, r25	; 0x03
     d3a:	c8 c0       	rjmp	.+400    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ACOSH"))
     d3c:	6e e7       	ldi	r22, 0x7E	; 126
     d3e:	71 e0       	ldi	r23, 0x01	; 1
     d40:	ce 01       	movw	r24, r28
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     d48:	89 2b       	or	r24, r25
     d4a:	69 f4       	brne	.+26     	; 0xd66 <_ZN6parser9eval_exp6ERd+0x24a>
                result = acos(result);
     d4c:	d7 01       	movw	r26, r14
     d4e:	6d 91       	ld	r22, X+
     d50:	7d 91       	ld	r23, X+
     d52:	8d 91       	ld	r24, X+
     d54:	9c 91       	ld	r25, X
     d56:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <acos>
     d5a:	f7 01       	movw	r30, r14
     d5c:	60 83       	st	Z, r22
     d5e:	71 83       	std	Z+1, r23	; 0x01
     d60:	82 83       	std	Z+2, r24	; 0x02
     d62:	93 83       	std	Z+3, r25	; 0x03
     d64:	b3 c0       	rjmp	.+358    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ATANH"))
     d66:	64 e8       	ldi	r22, 0x84	; 132
     d68:	71 e0       	ldi	r23, 0x01	; 1
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     d72:	89 2b       	or	r24, r25
     d74:	69 f4       	brne	.+26     	; 0xd90 <_ZN6parser9eval_exp6ERd+0x274>
                result = atan(result);
     d76:	d7 01       	movw	r26, r14
     d78:	6d 91       	ld	r22, X+
     d7a:	7d 91       	ld	r23, X+
     d7c:	8d 91       	ld	r24, X+
     d7e:	9c 91       	ld	r25, X
     d80:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <atan>
     d84:	f7 01       	movw	r30, r14
     d86:	60 83       	st	Z, r22
     d88:	71 83       	std	Z+1, r23	; 0x01
     d8a:	82 83       	std	Z+2, r24	; 0x02
     d8c:	93 83       	std	Z+3, r25	; 0x03
     d8e:	9e c0       	rjmp	.+316    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "LN"))
     d90:	6a e8       	ldi	r22, 0x8A	; 138
     d92:	71 e0       	ldi	r23, 0x01	; 1
     d94:	ce 01       	movw	r24, r28
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     d9c:	89 2b       	or	r24, r25
     d9e:	69 f4       	brne	.+26     	; 0xdba <_ZN6parser9eval_exp6ERd+0x29e>
                result = log(result);
     da0:	d7 01       	movw	r26, r14
     da2:	6d 91       	ld	r22, X+
     da4:	7d 91       	ld	r23, X+
     da6:	8d 91       	ld	r24, X+
     da8:	9c 91       	ld	r25, X
     daa:	0e 94 46 21 	call	0x428c	; 0x428c <log>
     dae:	f7 01       	movw	r30, r14
     db0:	60 83       	st	Z, r22
     db2:	71 83       	std	Z+1, r23	; 0x01
     db4:	82 83       	std	Z+2, r24	; 0x02
     db6:	93 83       	std	Z+3, r25	; 0x03
     db8:	89 c0       	rjmp	.+274    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "LOG"))
     dba:	6d e8       	ldi	r22, 0x8D	; 141
     dbc:	71 e0       	ldi	r23, 0x01	; 1
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     dc6:	89 2b       	or	r24, r25
     dc8:	69 f4       	brne	.+26     	; 0xde4 <_ZN6parser9eval_exp6ERd+0x2c8>
                result = log10(result);
     dca:	d7 01       	movw	r26, r14
     dcc:	6d 91       	ld	r22, X+
     dce:	7d 91       	ld	r23, X+
     dd0:	8d 91       	ld	r24, X+
     dd2:	9c 91       	ld	r25, X
     dd4:	0e 94 36 21 	call	0x426c	; 0x426c <log10>
     dd8:	f7 01       	movw	r30, r14
     dda:	60 83       	st	Z, r22
     ddc:	71 83       	std	Z+1, r23	; 0x01
     dde:	82 83       	std	Z+2, r24	; 0x02
     de0:	93 83       	std	Z+3, r25	; 0x03
     de2:	74 c0       	rjmp	.+232    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "EXP"))
     de4:	61 e9       	ldi	r22, 0x91	; 145
     de6:	71 e0       	ldi	r23, 0x01	; 1
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     df0:	89 2b       	or	r24, r25
     df2:	69 f4       	brne	.+26     	; 0xe0e <_ZN6parser9eval_exp6ERd+0x2f2>
                result = exp(result);
     df4:	d7 01       	movw	r26, r14
     df6:	6d 91       	ld	r22, X+
     df8:	7d 91       	ld	r23, X+
     dfa:	8d 91       	ld	r24, X+
     dfc:	9c 91       	ld	r25, X
     dfe:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <exp>
     e02:	f7 01       	movw	r30, r14
     e04:	60 83       	st	Z, r22
     e06:	71 83       	std	Z+1, r23	; 0x01
     e08:	82 83       	std	Z+2, r24	; 0x02
     e0a:	93 83       	std	Z+3, r25	; 0x03
     e0c:	5f c0       	rjmp	.+190    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "SQRT"))
     e0e:	65 e9       	ldi	r22, 0x95	; 149
     e10:	71 e0       	ldi	r23, 0x01	; 1
     e12:	ce 01       	movw	r24, r28
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     e1a:	89 2b       	or	r24, r25
     e1c:	69 f4       	brne	.+26     	; 0xe38 <_ZN6parser9eval_exp6ERd+0x31c>
                result = sqrt(result);
     e1e:	d7 01       	movw	r26, r14
     e20:	6d 91       	ld	r22, X+
     e22:	7d 91       	ld	r23, X+
     e24:	8d 91       	ld	r24, X+
     e26:	9c 91       	ld	r25, X
     e28:	0e 94 d7 22 	call	0x45ae	; 0x45ae <sqrt>
     e2c:	f7 01       	movw	r30, r14
     e2e:	60 83       	st	Z, r22
     e30:	71 83       	std	Z+1, r23	; 0x01
     e32:	82 83       	std	Z+2, r24	; 0x02
     e34:	93 83       	std	Z+3, r25	; 0x03
     e36:	4a c0       	rjmp	.+148    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "SQR"))
     e38:	6a e9       	ldi	r22, 0x9A	; 154
     e3a:	71 e0       	ldi	r23, 0x01	; 1
     e3c:	ce 01       	movw	r24, r28
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     e44:	89 2b       	or	r24, r25
     e46:	79 f4       	brne	.+30     	; 0xe66 <_ZN6parser9eval_exp6ERd+0x34a>
                result = result*result;
     e48:	d7 01       	movw	r26, r14
     e4a:	6d 91       	ld	r22, X+
     e4c:	7d 91       	ld	r23, X+
     e4e:	8d 91       	ld	r24, X+
     e50:	9c 91       	ld	r25, X
     e52:	9b 01       	movw	r18, r22
     e54:	ac 01       	movw	r20, r24
     e56:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
     e5a:	f7 01       	movw	r30, r14
     e5c:	60 83       	st	Z, r22
     e5e:	71 83       	std	Z+1, r23	; 0x01
     e60:	82 83       	std	Z+2, r24	; 0x02
     e62:	93 83       	std	Z+3, r25	; 0x03
     e64:	33 c0       	rjmp	.+102    	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "ROUND"))
     e66:	6e e9       	ldi	r22, 0x9E	; 158
     e68:	71 e0       	ldi	r23, 0x01	; 1
     e6a:	ce 01       	movw	r24, r28
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     e72:	89 2b       	or	r24, r25
     e74:	69 f4       	brne	.+26     	; 0xe90 <_ZN6parser9eval_exp6ERd+0x374>
                result = round(result);
     e76:	d7 01       	movw	r26, r14
     e78:	6d 91       	ld	r22, X+
     e7a:	7d 91       	ld	r23, X+
     e7c:	8d 91       	ld	r24, X+
     e7e:	9c 91       	ld	r25, X
     e80:	0e 94 7f 22 	call	0x44fe	; 0x44fe <round>
     e84:	f7 01       	movw	r30, r14
     e86:	60 83       	st	Z, r22
     e88:	71 83       	std	Z+1, r23	; 0x01
     e8a:	82 83       	std	Z+2, r24	; 0x02
     e8c:	93 83       	std	Z+3, r25	; 0x03
     e8e:	1e c0       	rjmp	.+60     	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else if (!strcmp(temp_token, "INT"))
     e90:	64 ea       	ldi	r22, 0xA4	; 164
     e92:	71 e0       	ldi	r23, 0x01	; 1
     e94:	ce 01       	movw	r24, r28
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <strcmp>
     e9c:	89 2b       	or	r24, r25
     e9e:	69 f4       	brne	.+26     	; 0xeba <_ZN6parser9eval_exp6ERd+0x39e>
                result = floor(result);
     ea0:	d7 01       	movw	r26, r14
     ea2:	6d 91       	ld	r22, X+
     ea4:	7d 91       	ld	r23, X+
     ea6:	8d 91       	ld	r24, X+
     ea8:	9c 91       	ld	r25, X
     eaa:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <floor>
     eae:	f7 01       	movw	r30, r14
     eb0:	60 83       	st	Z, r22
     eb2:	71 83       	std	Z+1, r23	; 0x01
     eb4:	82 83       	std	Z+2, r24	; 0x02
     eb6:	93 83       	std	Z+3, r25	; 0x03
     eb8:	09 c0       	rjmp	.+18     	; 0xecc <_ZN6parser9eval_exp6ERd+0x3b0>
            else
                strcpy(errormsg, "Unknown Function");
     eba:	81 e1       	ldi	r24, 0x11	; 17
     ebc:	e8 ea       	ldi	r30, 0xA8	; 168
     ebe:	f1 e0       	ldi	r31, 0x01	; 1
     ec0:	d8 01       	movw	r26, r16
     ec2:	da 96       	adiw	r26, 0x3a	; 58
     ec4:	01 90       	ld	r0, Z+
     ec6:	0d 92       	st	X+, r0
     ec8:	8a 95       	dec	r24
     eca:	e1 f7       	brne	.-8      	; 0xec4 <_ZN6parser9eval_exp6ERd+0x3a8>
        }
        get_token();
     ecc:	c8 01       	movw	r24, r16
     ece:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
     ed2:	35 c0       	rjmp	.+106    	; 0xf3e <_ZN6parser9eval_exp6ERd+0x422>
    }
    else
        switch (tok_type)
     ed4:	d8 01       	movw	r26, r16
     ed6:	51 96       	adiw	r26, 0x11	; 17
     ed8:	8c 91       	ld	r24, X
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	19 f0       	breq	.+6      	; 0xee4 <_ZN6parser9eval_exp6ERd+0x3c8>
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	b9 f0       	breq	.+46     	; 0xf10 <_ZN6parser9eval_exp6ERd+0x3f4>
     ee2:	24 c0       	rjmp	.+72     	; 0xf2c <_ZN6parser9eval_exp6ERd+0x410>
        {
        case VARIABLE:
            result = vars[*token - 'A'];
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	e1 54       	subi	r30, 0x41	; 65
     ee8:	f1 09       	sbc	r31, r1
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	e0 0f       	add	r30, r16
     ef4:	f1 1f       	adc	r31, r17
     ef6:	82 89       	ldd	r24, Z+18	; 0x12
     ef8:	93 89       	ldd	r25, Z+19	; 0x13
     efa:	a4 89       	ldd	r26, Z+20	; 0x14
     efc:	b5 89       	ldd	r27, Z+21	; 0x15
     efe:	f7 01       	movw	r30, r14
     f00:	80 83       	st	Z, r24
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	a2 83       	std	Z+2, r26	; 0x02
     f06:	b3 83       	std	Z+3, r27	; 0x03
            get_token();
     f08:	c8 01       	movw	r24, r16
     f0a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
            return;
     f0e:	17 c0       	rjmp	.+46     	; 0xf3e <_ZN6parser9eval_exp6ERd+0x422>
        case NUMBER:
            result = atof(token);
     f10:	c8 01       	movw	r24, r16
     f12:	02 96       	adiw	r24, 0x02	; 2
     f14:	0e 94 c2 24 	call	0x4984	; 0x4984 <atof>
     f18:	d7 01       	movw	r26, r14
     f1a:	6d 93       	st	X+, r22
     f1c:	7d 93       	st	X+, r23
     f1e:	8d 93       	st	X+, r24
     f20:	9c 93       	st	X, r25
     f22:	13 97       	sbiw	r26, 0x03	; 3
            get_token();
     f24:	c8 01       	movw	r24, r16
     f26:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
            return;
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <_ZN6parser9eval_exp6ERd+0x422>
        default:
            strcpy(errormsg, "Syntax Error");
     f2c:	d8 01       	movw	r26, r16
     f2e:	da 96       	adiw	r26, 0x3a	; 58
     f30:	8d e0       	ldi	r24, 0x0D	; 13
     f32:	e9 eb       	ldi	r30, 0xB9	; 185
     f34:	f1 e0       	ldi	r31, 0x01	; 1
     f36:	01 90       	ld	r0, Z+
     f38:	0d 92       	st	X+, r0
     f3a:	8a 95       	dec	r24
     f3c:	e1 f7       	brne	.-8      	; 0xf36 <_ZN6parser9eval_exp6ERd+0x41a>
        }
}
     f3e:	2f 96       	adiw	r28, 0x0f	; 15
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	08 95       	ret

00000f5a <_ZN6parser9eval_exp5ERd>:
        result = pow(result, temp);
    }
}
// Evaluate a unary + or -.
void parser::eval_exp5(double &result)
{
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	ec 01       	movw	r28, r24
     f64:	8b 01       	movw	r16, r22
    char op;
    op = 0;
    if ((tok_type == DELIMITER) && *token == '+' || *token == '-')
     f66:	89 89       	ldd	r24, Y+17	; 0x11
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	19 f4       	brne	.+6      	; 0xf72 <_ZN6parser9eval_exp5ERd+0x18>
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	8b 32       	cpi	r24, 0x2B	; 43
     f70:	41 f0       	breq	.+16     	; 0xf82 <_ZN6parser9eval_exp5ERd+0x28>
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	8d 32       	cpi	r24, 0x2D	; 45
     f76:	69 f0       	breq	.+26     	; 0xf92 <_ZN6parser9eval_exp5ERd+0x38>
    {
        op = *token;
        get_token();
    }
    eval_exp6(result);
     f78:	b8 01       	movw	r22, r16
     f7a:	ce 01       	movw	r24, r28
     f7c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN6parser9eval_exp6ERd>
     f80:	19 c0       	rjmp	.+50     	; 0xfb4 <_ZN6parser9eval_exp5ERd+0x5a>
    char op;
    op = 0;
    if ((tok_type == DELIMITER) && *token == '+' || *token == '-')
    {
        op = *token;
        get_token();
     f82:	ce 01       	movw	r24, r28
     f84:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
    }
    eval_exp6(result);
     f88:	b8 01       	movw	r22, r16
     f8a:	ce 01       	movw	r24, r28
     f8c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN6parser9eval_exp6ERd>
     f90:	11 c0       	rjmp	.+34     	; 0xfb4 <_ZN6parser9eval_exp5ERd+0x5a>
    char op;
    op = 0;
    if ((tok_type == DELIMITER) && *token == '+' || *token == '-')
    {
        op = *token;
        get_token();
     f92:	ce 01       	movw	r24, r28
     f94:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
    }
    eval_exp6(result);
     f98:	b8 01       	movw	r22, r16
     f9a:	ce 01       	movw	r24, r28
     f9c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN6parser9eval_exp6ERd>
    if (op == '-')
        result = -result;
     fa0:	f8 01       	movw	r30, r16
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	a2 81       	ldd	r26, Z+2	; 0x02
     fa8:	b3 81       	ldd	r27, Z+3	; 0x03
     faa:	b0 58       	subi	r27, 0x80	; 128
     fac:	80 83       	st	Z, r24
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	a2 83       	std	Z+2, r26	; 0x02
     fb2:	b3 83       	std	Z+3, r27	; 0x03
}
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <_ZN6parser9eval_exp4ERd>:
        }
    }
}
// Process an exponent.
void parser::eval_exp4(double &result)
{
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	00 d0       	rcall	.+0      	; 0xfcc <_ZN6parser9eval_exp4ERd+0xe>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <_ZN6parser9eval_exp4ERd+0x10>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	8c 01       	movw	r16, r24
     fd4:	7b 01       	movw	r14, r22
    double temp;
    eval_exp5(result);
     fd6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN6parser9eval_exp5ERd>
    while (*token == '^')
     fda:	f8 01       	movw	r30, r16
     fdc:	82 81       	ldd	r24, Z+2	; 0x02
     fde:	8e 35       	cpi	r24, 0x5E	; 94
     fe0:	e9 f4       	brne	.+58     	; 0x101c <_ZN6parser9eval_exp4ERd+0x5e>
    {
        get_token();
     fe2:	c8 01       	movw	r24, r16
     fe4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp5(temp);
     fe8:	be 01       	movw	r22, r28
     fea:	6f 5f       	subi	r22, 0xFF	; 255
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	c8 01       	movw	r24, r16
     ff0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN6parser9eval_exp5ERd>
        result = pow(result, temp);
     ff4:	29 81       	ldd	r18, Y+1	; 0x01
     ff6:	3a 81       	ldd	r19, Y+2	; 0x02
     ff8:	4b 81       	ldd	r20, Y+3	; 0x03
     ffa:	5c 81       	ldd	r21, Y+4	; 0x04
     ffc:	f7 01       	movw	r30, r14
     ffe:	60 81       	ld	r22, Z
    1000:	71 81       	ldd	r23, Z+1	; 0x01
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	93 81       	ldd	r25, Z+3	; 0x03
    1006:	0e 94 2f 22 	call	0x445e	; 0x445e <pow>
    100a:	f7 01       	movw	r30, r14
    100c:	60 83       	st	Z, r22
    100e:	71 83       	std	Z+1, r23	; 0x01
    1010:	82 83       	std	Z+2, r24	; 0x02
    1012:	93 83       	std	Z+3, r25	; 0x03
// Process an exponent.
void parser::eval_exp4(double &result)
{
    double temp;
    eval_exp5(result);
    while (*token == '^')
    1014:	f8 01       	movw	r30, r16
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	8e 35       	cpi	r24, 0x5E	; 94
    101a:	19 f3       	breq	.-58     	; 0xfe2 <_ZN6parser9eval_exp4ERd+0x24>
    {
        get_token();
        eval_exp5(temp);
        result = pow(result, temp);
    }
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	08 95       	ret

00001032 <_ZN6parser9eval_exp3ERd>:
        }
    }
}
// Multiply or divide two factors.
void parser::eval_exp3(double &result)
{
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	00 d0       	rcall	.+0      	; 0x1040 <_ZN6parser9eval_exp3ERd+0xe>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <_ZN6parser9eval_exp3ERd+0x10>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	8c 01       	movw	r16, r24
    1048:	7b 01       	movw	r14, r22
    char op;
    double temp;
    eval_exp4(result);
    104a:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN6parser9eval_exp4ERd>
    while ((op = *token) == '*' || op == '/')
    104e:	f8 01       	movw	r30, r16
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	8a 32       	cpi	r24, 0x2A	; 42
    1054:	19 f0       	breq	.+6      	; 0x105c <_ZN6parser9eval_exp3ERd+0x2a>
    1056:	8f 32       	cpi	r24, 0x2F	; 47
    1058:	d9 f0       	breq	.+54     	; 0x1090 <_ZN6parser9eval_exp3ERd+0x5e>
    105a:	34 c0       	rjmp	.+104    	; 0x10c4 <_ZN6parser9eval_exp3ERd+0x92>
    {
        get_token();
    105c:	c8 01       	movw	r24, r16
    105e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp4(temp);
    1062:	be 01       	movw	r22, r28
    1064:	6f 5f       	subi	r22, 0xFF	; 255
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	c8 01       	movw	r24, r16
    106a:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN6parser9eval_exp4ERd>
        switch (op)
        {
        case '*':
            result = result * temp;
    106e:	29 81       	ldd	r18, Y+1	; 0x01
    1070:	3a 81       	ldd	r19, Y+2	; 0x02
    1072:	4b 81       	ldd	r20, Y+3	; 0x03
    1074:	5c 81       	ldd	r21, Y+4	; 0x04
    1076:	f7 01       	movw	r30, r14
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	82 81       	ldd	r24, Z+2	; 0x02
    107e:	93 81       	ldd	r25, Z+3	; 0x03
    1080:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    1084:	f7 01       	movw	r30, r14
    1086:	60 83       	st	Z, r22
    1088:	71 83       	std	Z+1, r23	; 0x01
    108a:	82 83       	std	Z+2, r24	; 0x02
    108c:	93 83       	std	Z+3, r25	; 0x03
            break;
    108e:	df cf       	rjmp	.-66     	; 0x104e <_ZN6parser9eval_exp3ERd+0x1c>
    char op;
    double temp;
    eval_exp4(result);
    while ((op = *token) == '*' || op == '/')
    {
        get_token();
    1090:	c8 01       	movw	r24, r16
    1092:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        eval_exp4(temp);
    1096:	be 01       	movw	r22, r28
    1098:	6f 5f       	subi	r22, 0xFF	; 255
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	c8 01       	movw	r24, r16
    109e:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN6parser9eval_exp4ERd>
        {
        case '*':
            result = result * temp;
            break;
        case '/':
            result = result / temp;
    10a2:	29 81       	ldd	r18, Y+1	; 0x01
    10a4:	3a 81       	ldd	r19, Y+2	; 0x02
    10a6:	4b 81       	ldd	r20, Y+3	; 0x03
    10a8:	5c 81       	ldd	r21, Y+4	; 0x04
    10aa:	f7 01       	movw	r30, r14
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    10b8:	f7 01       	movw	r30, r14
    10ba:	60 83       	st	Z, r22
    10bc:	71 83       	std	Z+1, r23	; 0x01
    10be:	82 83       	std	Z+2, r24	; 0x02
    10c0:	93 83       	std	Z+3, r25	; 0x03
            break;
    10c2:	c5 cf       	rjmp	.-118    	; 0x104e <_ZN6parser9eval_exp3ERd+0x1c>
        }
    }
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	08 95       	ret

000010da <_ZN6parser9eval_exp1ERd>:
        strcpy(errormsg, "Syntax Error");
    return result;
}
// Process an assignment.
void parser::eval_exp1(double &result)
{
    10da:	8f 92       	push	r8
    10dc:	9f 92       	push	r9
    10de:	bf 92       	push	r11
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	2f 97       	sbiw	r28, 0x0f	; 15
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	8c 01       	movw	r16, r24
    1102:	7b 01       	movw	r14, r22
    int slot;
    char temp_token[15];
    if (tok_type == VARIABLE)
    1104:	fc 01       	movw	r30, r24
    1106:	81 89       	ldd	r24, Z+17	; 0x11
    1108:	82 30       	cpi	r24, 0x02	; 2
    110a:	c9 f5       	brne	.+114    	; 0x117e <_ZN6parser9eval_exp1ERd+0xa4>
    {
        // save old token
        char *t_ptr = exp_ptr;
    110c:	81 90       	ld	r8, Z+
    110e:	91 90       	ld	r9, Z+
    1110:	6f 01       	movw	r12, r30
        strcpy(temp_token, token);
    1112:	bf 01       	movw	r22, r30
    1114:	ce 01       	movw	r24, r28
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	0e 94 01 25 	call	0x4a02	; 0x4a02 <strcpy>
        // compute the index of the variable
        slot = *token - 'A';
    111c:	f8 01       	movw	r30, r16
    111e:	b2 80       	ldd	r11, Z+2	; 0x02
        get_token();
    1120:	c8 01       	movw	r24, r16
    1122:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
        if (*token != '=')
    1126:	f8 01       	movw	r30, r16
    1128:	82 81       	ldd	r24, Z+2	; 0x02
    112a:	8d 33       	cpi	r24, 0x3D	; 61
    112c:	61 f0       	breq	.+24     	; 0x1146 <_ZN6parser9eval_exp1ERd+0x6c>
        {
            exp_ptr = t_ptr; // return current token
    112e:	91 82       	std	Z+1, r9	; 0x01
    1130:	80 82       	st	Z, r8
            strcpy(token, temp_token); // restore old token
    1132:	be 01       	movw	r22, r28
    1134:	6f 5f       	subi	r22, 0xFF	; 255
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	c6 01       	movw	r24, r12
    113a:	0e 94 01 25 	call	0x4a02	; 0x4a02 <strcpy>
            tok_type = VARIABLE;
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	f8 01       	movw	r30, r16
    1142:	81 8b       	std	Z+17, r24	; 0x11
    1144:	1c c0       	rjmp	.+56     	; 0x117e <_ZN6parser9eval_exp1ERd+0xa4>
        }
        else {
            get_token(); // get next part of exp
    1146:	c8 01       	movw	r24, r16
    1148:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
            eval_exp2(result);
    114c:	b7 01       	movw	r22, r14
    114e:	c8 01       	movw	r24, r16
    1150:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN6parser9eval_exp2ERd>
            vars[slot] = result;
    1154:	f7 01       	movw	r30, r14
    1156:	40 81       	ld	r20, Z
    1158:	51 81       	ldd	r21, Z+1	; 0x01
    115a:	62 81       	ldd	r22, Z+2	; 0x02
    115c:	73 81       	ldd	r23, Z+3	; 0x03
    115e:	8b 2d       	mov	r24, r11
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	81 54       	subi	r24, 0x41	; 65
    1164:	91 09       	sbc	r25, r1
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	f8 01       	movw	r30, r16
    1170:	e8 0f       	add	r30, r24
    1172:	f9 1f       	adc	r31, r25
    1174:	42 8b       	std	Z+18, r20	; 0x12
    1176:	53 8b       	std	Z+19, r21	; 0x13
    1178:	64 8b       	std	Z+20, r22	; 0x14
    117a:	75 8b       	std	Z+21, r23	; 0x15
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <_ZN6parser9eval_exp1ERd+0xac>
            return;
        }
    }
    eval_exp2(result);
    117e:	b7 01       	movw	r22, r14
    1180:	c8 01       	movw	r24, r16
    1182:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN6parser9eval_exp2ERd>
}
    1186:	2f 96       	adiw	r28, 0x0f	; 15
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	bf 90       	pop	r11
    11a4:	9f 90       	pop	r9
    11a6:	8f 90       	pop	r8
    11a8:	08 95       	ret

000011aa <_ZN6parser8eval_expEPc>:
        vars[i] = 0.0;
    errormsg[0] = '\0';
}
// Parser entry point.
double parser::eval_exp(char *exp)
{
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <_ZN6parser8eval_expEPc+0xa>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <_ZN6parser8eval_expEPc+0xc>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	8c 01       	movw	r16, r24
    errormsg[0] = '\0';
    11bc:	fc 01       	movw	r30, r24
    11be:	12 ae       	std	Z+58, r1	; 0x3a
    double result;
    exp_ptr = exp;
    11c0:	71 83       	std	Z+1, r23	; 0x01
    11c2:	60 83       	st	Z, r22
    get_token();
    11c4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6parser9get_tokenEv>
    if (!*token)
    11c8:	f8 01       	movw	r30, r16
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	81 11       	cpse	r24, r1
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <_ZN6parser8eval_expEPc+0x40>
    {
        strcpy(errormsg, "No Expression Present"); // no expression present
    11d0:	d8 01       	movw	r26, r16
    11d2:	da 96       	adiw	r26, 0x3a	; 58
    11d4:	86 e1       	ldi	r24, 0x16	; 22
    11d6:	e6 ec       	ldi	r30, 0xC6	; 198
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	01 90       	ld	r0, Z+
    11dc:	0d 92       	st	X+, r0
    11de:	8a 95       	dec	r24
    11e0:	e1 f7       	brne	.-8      	; 0x11da <_ZN6parser8eval_expEPc+0x30>
        return (double)0;
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	cb 01       	movw	r24, r22
    11e8:	17 c0       	rjmp	.+46     	; 0x1218 <_ZN6parser8eval_expEPc+0x6e>
    }
    eval_exp1(result);
    11ea:	be 01       	movw	r22, r28
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	c8 01       	movw	r24, r16
    11f2:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN6parser9eval_exp1ERd>
    if (*token) // last token must be null
    11f6:	f8 01       	movw	r30, r16
    11f8:	82 81       	ldd	r24, Z+2	; 0x02
    11fa:	88 23       	and	r24, r24
    11fc:	49 f0       	breq	.+18     	; 0x1210 <_ZN6parser8eval_expEPc+0x66>
        strcpy(errormsg, "Syntax Error");
    11fe:	d8 01       	movw	r26, r16
    1200:	da 96       	adiw	r26, 0x3a	; 58
    1202:	8d e0       	ldi	r24, 0x0D	; 13
    1204:	e9 eb       	ldi	r30, 0xB9	; 185
    1206:	f1 e0       	ldi	r31, 0x01	; 1
    1208:	01 90       	ld	r0, Z+
    120a:	0d 92       	st	X+, r0
    120c:	8a 95       	dec	r24
    120e:	e1 f7       	brne	.-8      	; 0x1208 <_ZN6parser8eval_expEPc+0x5e>
    return result;
    1210:	69 81       	ldd	r22, Y+1	; 0x01
    1212:	7a 81       	ldd	r23, Y+2	; 0x02
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	08 95       	ret

0000122a <_Z6appendPciS_>:
char mat[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};
char mat2[4][4][6]={{"sin(","cos(","tan(","sqrt("},{"^","x","y","<-"},{",",".","(",")"},{"C","C","C","C"}};
	
void append(char s[] , int len , char s2[])
{
    122a:	9c 01       	movw	r18, r24
	for(int i=0;s2[i]!=0;i++)
    122c:	fa 01       	movw	r30, r20
    122e:	90 81       	ld	r25, Z
    1230:	99 23       	and	r25, r25
    1232:	51 f0       	breq	.+20     	; 0x1248 <_Z6appendPciS_+0x1e>
    1234:	d9 01       	movw	r26, r18
    1236:	a6 0f       	add	r26, r22
    1238:	b7 1f       	adc	r27, r23
    123a:	31 96       	adiw	r30, 0x01	; 1
	{
		s[len] = s2[i];
    123c:	9d 93       	st	X+, r25
		len++;
    123e:	6f 5f       	subi	r22, 0xFF	; 255
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
char mat[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};
char mat2[4][4][6]={{"sin(","cos(","tan(","sqrt("},{"^","x","y","<-"},{",",".","(",")"},{"C","C","C","C"}};
	
void append(char s[] , int len , char s2[])
{
	for(int i=0;s2[i]!=0;i++)
    1242:	91 91       	ld	r25, Z+
    1244:	91 11       	cpse	r25, r1
    1246:	fa cf       	rjmp	.-12     	; 0x123c <_Z6appendPciS_+0x12>
	{
		s[len] = s2[i];
		len++;
	}
	s[len] = 0;
    1248:	f9 01       	movw	r30, r18
    124a:	e6 0f       	add	r30, r22
    124c:	f7 1f       	adc	r31, r23
    124e:	10 82       	st	Z, r1
    1250:	08 95       	ret

00001252 <_Z17evaluate_functionPcd>:

char s[40];
char tmp[15];
parser ob;
double evaluate_function(char str[], double a)
{
    1252:	8f 92       	push	r8
    1254:	9f 92       	push	r9
    1256:	af 92       	push	r10
    1258:	bf 92       	push	r11
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	fc 01       	movw	r30, r24
    1268:	4a 01       	movw	r8, r20
    126a:	5b 01       	movw	r10, r22
	
	int idx = 0;
	for(int i=0;str[i]!=0;i++)
    126c:	90 81       	ld	r25, Z
    126e:	99 23       	and	r25, r25
    1270:	51 f1       	breq	.+84     	; 0x12c6 <_Z17evaluate_functionPcd+0x74>
    1272:	7f 01       	movw	r14, r30
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	e8 1a       	sub	r14, r24
    1278:	f8 0a       	sbc	r15, r24
    127a:	c0 e0       	ldi	r28, 0x00	; 0
    127c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(str[i]=='x')
    127e:	98 37       	cpi	r25, 0x78	; 120
    1280:	b9 f4       	brne	.+46     	; 0x12b0 <_Z17evaluate_functionPcd+0x5e>
		{
			dtostrf(a,1,8,tmp);
    1282:	0b e4       	ldi	r16, 0x4B	; 75
    1284:	13 e0       	ldi	r17, 0x03	; 3
    1286:	28 e0       	ldi	r18, 0x08	; 8
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	c5 01       	movw	r24, r10
    128c:	b4 01       	movw	r22, r8
    128e:	0e 94 81 23 	call	0x4702	; 0x4702 <dtostrf>
			for(int j=0;tmp[j]!=0;j++)
    1292:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <tmp>
    1296:	99 23       	and	r25, r25
    1298:	81 f0       	breq	.+32     	; 0x12ba <_Z17evaluate_functionPcd+0x68>
    129a:	de 01       	movw	r26, r28
    129c:	a6 5a       	subi	r26, 0xA6	; 166
    129e:	bc 4f       	sbci	r27, 0xFC	; 252
    12a0:	ec e4       	ldi	r30, 0x4C	; 76
    12a2:	f3 e0       	ldi	r31, 0x03	; 3
			{
				s[idx] = tmp[j];
    12a4:	9d 93       	st	X+, r25
				idx++;
    12a6:	21 96       	adiw	r28, 0x01	; 1
	for(int i=0;str[i]!=0;i++)
	{
		if(str[i]=='x')
		{
			dtostrf(a,1,8,tmp);
			for(int j=0;tmp[j]!=0;j++)
    12a8:	91 91       	ld	r25, Z+
    12aa:	91 11       	cpse	r25, r1
    12ac:	fb cf       	rjmp	.-10     	; 0x12a4 <_Z17evaluate_functionPcd+0x52>
    12ae:	05 c0       	rjmp	.+10     	; 0x12ba <_Z17evaluate_functionPcd+0x68>
				s[idx] = tmp[j];
				idx++;
			}
		}
		else{
			s[idx] = str[i];
    12b0:	fe 01       	movw	r30, r28
    12b2:	e6 5a       	subi	r30, 0xA6	; 166
    12b4:	fc 4f       	sbci	r31, 0xFC	; 252
    12b6:	90 83       	st	Z, r25
			idx++;
    12b8:	21 96       	adiw	r28, 0x01	; 1
parser ob;
double evaluate_function(char str[], double a)
{
	
	int idx = 0;
	for(int i=0;str[i]!=0;i++)
    12ba:	f7 01       	movw	r30, r14
    12bc:	91 91       	ld	r25, Z+
    12be:	7f 01       	movw	r14, r30
    12c0:	91 11       	cpse	r25, r1
    12c2:	dd cf       	rjmp	.-70     	; 0x127e <_Z17evaluate_functionPcd+0x2c>
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <_Z17evaluate_functionPcd+0x78>
char tmp[15];
parser ob;
double evaluate_function(char str[], double a)
{
	
	int idx = 0;
    12c6:	c0 e0       	ldi	r28, 0x00	; 0
    12c8:	d0 e0       	ldi	r29, 0x00	; 0
		else{
			s[idx] = str[i];
			idx++;
		}
	}
	s[idx] = 0;
    12ca:	c6 5a       	subi	r28, 0xA6	; 166
    12cc:	dc 4f       	sbci	r29, 0xFC	; 252
    12ce:	18 82       	st	Y, r1
	
	double ans=ob.eval_exp(s);
    12d0:	6a e5       	ldi	r22, 0x5A	; 90
    12d2:	73 e0       	ldi	r23, 0x03	; 3
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	93 e0       	ldi	r25, 0x03	; 3
    12d8:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN6parser8eval_expEPc>
	return ans;
}
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ff 90       	pop	r15
    12e6:	ef 90       	pop	r14
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	9f 90       	pop	r9
    12ee:	8f 90       	pop	r8
    12f0:	08 95       	ret

000012f2 <_Z16int_number_inputi>:

//helper functions and gauss
int int_number_input(int pos)
{
    12f2:	df 92       	push	r13
    12f4:	ef 92       	push	r14
    12f6:	ff 92       	push	r15
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	00 d0       	rcall	.+0      	; 0x1302 <_Z16int_number_inputi+0x10>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	//pos is position where u want to show the text
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    1306:	a1 e0       	ldi	r26, 0x01	; 1
    1308:	b0 e0       	ldi	r27, 0x00	; 0
int int_number_input(int pos)
{
	//pos is position where u want to show the text
	while (1)
	{
		for(int c=4;c<8;c++)
    130a:	44 e0       	ldi	r20, 0x04	; 4
    130c:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB=1<<c;
    130e:	9d 01       	movw	r18, r26
    1310:	04 2e       	mov	r0, r20
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <_Z16int_number_inputi+0x26>
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <_Z16int_number_inputi+0x22>
    131c:	28 bb       	out	0x18, r18	; 24
    131e:	9a 01       	movw	r18, r20
    1320:	24 50       	subi	r18, 0x04	; 4
    1322:	31 09       	sbc	r19, r1
    1324:	f9 01       	movw	r30, r18
    1326:	ea 53       	subi	r30, 0x3A	; 58
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    132a:	00 e0       	ldi	r16, 0x00	; 0
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	d2 2e       	mov	r13, r18
    1330:	73 2f       	mov	r23, r19
			{
				if(PINB&(1<<r))
    1332:	26 b3       	in	r18, 0x16	; 22
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	00 2e       	mov	r0, r16
    1338:	02 c0       	rjmp	.+4      	; 0x133e <_Z16int_number_inputi+0x4c>
    133a:	35 95       	asr	r19
    133c:	27 95       	ror	r18
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <_Z16int_number_inputi+0x48>
    1342:	20 ff       	sbrs	r18, 0
    1344:	2f c0       	rjmp	.+94     	; 0x13a4 <_Z16int_number_inputi+0xb2>
    1346:	ed 2c       	mov	r14, r13
    1348:	f7 2e       	mov	r15, r23
				{
					if(mat[r][c-4]>='1' && mat[r][c-4]<='7')
    134a:	90 81       	ld	r25, Z
    134c:	2f ec       	ldi	r18, 0xCF	; 207
    134e:	29 0f       	add	r18, r25
    1350:	27 30       	cpi	r18, 0x07	; 7
    1352:	f8 f4       	brcc	.+62     	; 0x1392 <_Z16int_number_inputi+0xa0>
					{
						char tmp[2];
						tmp[0] = mat[r][c-4];
    1354:	99 83       	std	Y+1, r25	; 0x01
						tmp[1] = 0;
    1356:	1a 82       	std	Y+2, r1	; 0x02
						DisplayText(1,pos,tmp);
    1358:	ae 01       	movw	r20, r28
    135a:	4f 5f       	subi	r20, 0xFF	; 255
    135c:	5f 4f       	sbci	r21, 0xFF	; 255
    135e:	68 2f       	mov	r22, r24
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1366:	2f ef       	ldi	r18, 0xFF	; 255
    1368:	34 e3       	ldi	r19, 0x34	; 52
    136a:	8c e0       	ldi	r24, 0x0C	; 12
    136c:	21 50       	subi	r18, 0x01	; 1
    136e:	30 40       	sbci	r19, 0x00	; 0
    1370:	80 40       	sbci	r24, 0x00	; 0
    1372:	e1 f7       	brne	.-8      	; 0x136c <_Z16int_number_inputi+0x7a>
    1374:	00 c0       	rjmp	.+0      	; 0x1376 <_Z16int_number_inputi+0x84>
    1376:	00 00       	nop
						_delay_ms(500);
						return mat[r][c-4]-'0';
    1378:	00 0f       	add	r16, r16
    137a:	11 1f       	adc	r17, r17
    137c:	00 0f       	add	r16, r16
    137e:	11 1f       	adc	r17, r17
    1380:	0a 53       	subi	r16, 0x3A	; 58
    1382:	1f 4f       	sbci	r17, 0xFF	; 255
    1384:	f8 01       	movw	r30, r16
    1386:	ee 0d       	add	r30, r14
    1388:	ff 1d       	adc	r31, r15
    138a:	80 81       	ld	r24, Z
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	c0 97       	sbiw	r24, 0x30	; 48
    1390:	1c c0       	rjmp	.+56     	; 0x13ca <_Z16int_number_inputi+0xd8>
    1392:	9f ef       	ldi	r25, 0xFF	; 255
    1394:	24 e3       	ldi	r18, 0x34	; 52
    1396:	3c e0       	ldi	r19, 0x0C	; 12
    1398:	91 50       	subi	r25, 0x01	; 1
    139a:	20 40       	sbci	r18, 0x00	; 0
    139c:	30 40       	sbci	r19, 0x00	; 0
    139e:	e1 f7       	brne	.-8      	; 0x1398 <_Z16int_number_inputi+0xa6>
    13a0:	00 c0       	rjmp	.+0      	; 0x13a2 <_Z16int_number_inputi+0xb0>
    13a2:	00 00       	nop
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    13a4:	0f 5f       	subi	r16, 0xFF	; 255
    13a6:	1f 4f       	sbci	r17, 0xFF	; 255
    13a8:	34 96       	adiw	r30, 0x04	; 4
    13aa:	04 30       	cpi	r16, 0x04	; 4
    13ac:	11 05       	cpc	r17, r1
    13ae:	09 f6       	brne	.-126    	; 0x1332 <_Z16int_number_inputi+0x40>
    13b0:	ef e1       	ldi	r30, 0x1F	; 31
    13b2:	fe e4       	ldi	r31, 0x4E	; 78
    13b4:	31 97       	sbiw	r30, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <_Z16int_number_inputi+0xc2>
    13b8:	00 c0       	rjmp	.+0      	; 0x13ba <_Z16int_number_inputi+0xc8>
    13ba:	00 00       	nop
int int_number_input(int pos)
{
	//pos is position where u want to show the text
	while (1)
	{
		for(int c=4;c<8;c++)
    13bc:	4f 5f       	subi	r20, 0xFF	; 255
    13be:	5f 4f       	sbci	r21, 0xFF	; 255
    13c0:	48 30       	cpi	r20, 0x08	; 8
    13c2:	51 05       	cpc	r21, r1
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <_Z16int_number_inputi+0xd6>
    13c6:	a3 cf       	rjmp	.-186    	; 0x130e <_Z16int_number_inputi+0x1c>
    13c8:	a0 cf       	rjmp	.-192    	; 0x130a <_Z16int_number_inputi+0x18>
				}
			}
			_delay_ms(10);
		}
	}
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	08 95       	ret

000013de <_Z16string_to_doublePci>:

double string_to_double(char s[], int id)
{
    13de:	6f 92       	push	r6
    13e0:	7f 92       	push	r7
    13e2:	8f 92       	push	r8
    13e4:	9f 92       	push	r9
    13e6:	af 92       	push	r10
    13e8:	bf 92       	push	r11
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
	double d = 0;
	bool flag = 0;
	int koto = 1;
	bool minus = 0;
	for(int i=0;i<id;i++)
    13fa:	16 16       	cp	r1, r22
    13fc:	17 06       	cpc	r1, r23
    13fe:	0c f0       	brlt	.+2      	; 0x1402 <_Z16string_to_doublePci+0x24>
    1400:	52 c0       	rjmp	.+164    	; 0x14a6 <_Z16string_to_doublePci+0xc8>
    1402:	7c 01       	movw	r14, r24
    1404:	ec 01       	movw	r28, r24
    1406:	e6 0e       	add	r14, r22
    1408:	f7 1e       	adc	r15, r23
    140a:	71 2c       	mov	r7, r1
    140c:	01 e0       	ldi	r16, 0x01	; 1
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	d1 2c       	mov	r13, r1
    1412:	81 2c       	mov	r8, r1
    1414:	91 2c       	mov	r9, r1
    1416:	54 01       	movw	r10, r8
	{
		if(s[i]=='-')
		{
			minus = 1;
    1418:	cc 24       	eor	r12, r12
    141a:	c3 94       	inc	r12
	bool flag = 0;
	int koto = 1;
	bool minus = 0;
	for(int i=0;i<id;i++)
	{
		if(s[i]=='-')
    141c:	69 90       	ld	r6, Y+
    141e:	8d e2       	ldi	r24, 0x2D	; 45
    1420:	68 16       	cp	r6, r24
    1422:	59 f1       	breq	.+86     	; 0x147a <_Z16string_to_doublePci+0x9c>
		{
			minus = 1;
			continue;
		}
		if(s[i]=='.')
    1424:	8e e2       	ldi	r24, 0x2E	; 46
    1426:	68 16       	cp	r6, r24
    1428:	51 f1       	breq	.+84     	; 0x147e <_Z16string_to_doublePci+0xa0>
		{
			flag = 1;
			continue;
		}
		int now = (int)(s[i]-'0');
		d = d*10.0 + (double)now;
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	c5 01       	movw	r24, r10
    1434:	b4 01       	movw	r22, r8
    1436:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    143a:	4b 01       	movw	r8, r22
    143c:	5c 01       	movw	r10, r24
    143e:	66 2d       	mov	r22, r6
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	60 53       	subi	r22, 0x30	; 48
    1444:	71 09       	sbc	r23, r1
    1446:	07 2e       	mov	r0, r23
    1448:	00 0c       	add	r0, r0
    144a:	88 0b       	sbc	r24, r24
    144c:	99 0b       	sbc	r25, r25
    144e:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__floatsisf>
    1452:	a5 01       	movw	r20, r10
    1454:	94 01       	movw	r18, r8
    1456:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    145a:	4b 01       	movw	r8, r22
    145c:	5c 01       	movw	r10, r24
		if(flag)
    145e:	dd 20       	and	r13, r13
    1460:	79 f0       	breq	.+30     	; 0x1480 <_Z16string_to_doublePci+0xa2>
		{
			koto*=10;
    1462:	c8 01       	movw	r24, r16
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	00 0f       	add	r16, r16
    146a:	11 1f       	adc	r17, r17
    146c:	00 0f       	add	r16, r16
    146e:	11 1f       	adc	r17, r17
    1470:	00 0f       	add	r16, r16
    1472:	11 1f       	adc	r17, r17
    1474:	08 0f       	add	r16, r24
    1476:	19 1f       	adc	r17, r25
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <_Z16string_to_doublePci+0xa2>
	bool minus = 0;
	for(int i=0;i<id;i++)
	{
		if(s[i]=='-')
		{
			minus = 1;
    147a:	7c 2c       	mov	r7, r12
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <_Z16string_to_doublePci+0xa2>
			continue;
		}
		if(s[i]=='.')
		{
			flag = 1;
    147e:	dc 2c       	mov	r13, r12
{
	double d = 0;
	bool flag = 0;
	int koto = 1;
	bool minus = 0;
	for(int i=0;i<id;i++)
    1480:	ec 16       	cp	r14, r28
    1482:	fd 06       	cpc	r15, r29
    1484:	59 f6       	brne	.-106    	; 0x141c <_Z16string_to_doublePci+0x3e>
		if(flag)
		{
			koto*=10;
		}
	}
	d/= (double)koto;
    1486:	b8 01       	movw	r22, r16
    1488:	11 0f       	add	r17, r17
    148a:	88 0b       	sbc	r24, r24
    148c:	99 0b       	sbc	r25, r25
    148e:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__floatsisf>
    1492:	9b 01       	movw	r18, r22
    1494:	ac 01       	movw	r20, r24
    1496:	c5 01       	movw	r24, r10
    1498:	b4 01       	movw	r22, r8
    149a:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
	if(minus)
    149e:	77 20       	and	r7, r7
    14a0:	29 f0       	breq	.+10     	; 0x14ac <_Z16string_to_doublePci+0xce>
	d= -d;
    14a2:	90 58       	subi	r25, 0x80	; 128
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <_Z16string_to_doublePci+0xce>
		if(flag)
		{
			koto*=10;
		}
	}
	d/= (double)koto;
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	cb 01       	movw	r24, r22
	if(minus)
	d= -d;
	return d;
}
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	df 90       	pop	r13
    14ba:	cf 90       	pop	r12
    14bc:	bf 90       	pop	r11
    14be:	af 90       	pop	r10
    14c0:	9f 90       	pop	r9
    14c2:	8f 90       	pop	r8
    14c4:	7f 90       	pop	r7
    14c6:	6f 90       	pop	r6
    14c8:	08 95       	ret

000014ca <_Z16double_num_inputi>:

double double_num_input(int pos)
{
    14ca:	2f 92       	push	r2
    14cc:	3f 92       	push	r3
    14ce:	4f 92       	push	r4
    14d0:	5f 92       	push	r5
    14d2:	6f 92       	push	r6
    14d4:	7f 92       	push	r7
    14d6:	8f 92       	push	r8
    14d8:	9f 92       	push	r9
    14da:	af 92       	push	r10
    14dc:	bf 92       	push	r11
    14de:	cf 92       	push	r12
    14e0:	df 92       	push	r13
    14e2:	ef 92       	push	r14
    14e4:	ff 92       	push	r15
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	60 97       	sbiw	r28, 0x10	; 16
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	8b 87       	std	Y+11, r24	; 0x0b
	//pos is position where u want to show the text
	char s[10];
	int id = 0;
	bool dot = 0;
    1500:	18 8a       	std	Y+16, r1	; 0x10

double double_num_input(int pos)
{
	//pos is position where u want to show the text
	char s[10];
	int id = 0;
    1502:	a1 2c       	mov	r10, r1
    1504:	b1 2c       	mov	r11, r1
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    1506:	88 24       	eor	r8, r8
    1508:	83 94       	inc	r8
    150a:	91 2c       	mov	r9, r1
						
					}
					else if(mat2[r][c-4][0]=='.' && dot==0)
					{
						dot = 1;
						s[id] = mat2[r][c-4][0];
    150c:	ce 01       	movw	r24, r28
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	2c 01       	movw	r4, r24
    1512:	8c 87       	std	Y+12, r24	; 0x0c
    1514:	5d 86       	std	Y+13, r5	; 0x0d
    1516:	0f 2e       	mov	r0, r31
    1518:	f6 e6       	ldi	r31, 0x66	; 102
    151a:	2f 2e       	mov	r2, r31
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	3f 2e       	mov	r3, r31
    1520:	f0 2d       	mov	r31, r0
	int id = 0;
	bool dot = 0;
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    1522:	68 94       	set
    1524:	66 24       	eor	r6, r6
    1526:	62 f8       	bld	r6, 2
    1528:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    152a:	c4 01       	movw	r24, r8
    152c:	06 2c       	mov	r0, r6
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <_Z16double_num_inputi+0x6a>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <_Z16double_num_inputi+0x66>
    1538:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    153a:	8b bb       	out	0x1b, r24	; 27
    153c:	f3 01       	movw	r30, r6
    153e:	ee 53       	subi	r30, 0x3E	; 62
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	7f 01       	movw	r14, r30
    1544:	61 01       	movw	r12, r2
			for(int r=0;r<4;r++)
    1546:	00 e0       	ldi	r16, 0x00	; 0
    1548:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    154a:	86 b3       	in	r24, 0x16	; 22
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	00 2e       	mov	r0, r16
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <_Z16double_num_inputi+0x8c>
    1552:	95 95       	asr	r25
    1554:	87 95       	ror	r24
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <_Z16double_num_inputi+0x88>
    155a:	80 ff       	sbrs	r24, 0
    155c:	36 c0       	rjmp	.+108    	; 0x15ca <_Z16double_num_inputi+0x100>
				{
					if(mat[r][c-4]>='0' && mat[r][c-4]<='9')
    155e:	f7 01       	movw	r30, r14
    1560:	80 81       	ld	r24, Z
    1562:	90 ed       	ldi	r25, 0xD0	; 208
    1564:	98 0f       	add	r25, r24
    1566:	9a 30       	cpi	r25, 0x0A	; 10
    1568:	90 f4       	brcc	.+36     	; 0x158e <_Z16double_num_inputi+0xc4>
					{
						s[id] = mat[r][c-4];
    156a:	f2 01       	movw	r30, r4
    156c:	ea 0d       	add	r30, r10
    156e:	fb 1d       	adc	r31, r11
    1570:	80 83       	st	Z, r24
						id++;
    1572:	ff ef       	ldi	r31, 0xFF	; 255
    1574:	af 1a       	sub	r10, r31
    1576:	bf 0a       	sbc	r11, r31
						s[id] = 0;
    1578:	f2 01       	movw	r30, r4
    157a:	ea 0d       	add	r30, r10
    157c:	fb 1d       	adc	r31, r11
    157e:	10 82       	st	Z, r1
						DisplayText(1,pos , s);
    1580:	4c 85       	ldd	r20, Y+12	; 0x0c
    1582:	5d 85       	ldd	r21, Y+13	; 0x0d
    1584:	6b 85       	ldd	r22, Y+11	; 0x0b
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
    158c:	14 c0       	rjmp	.+40     	; 0x15b6 <_Z16double_num_inputi+0xec>
					}
					else if(mat[r][c-4]=='=')
    158e:	8d 33       	cpi	r24, 0x3D	; 61
    1590:	09 f4       	brne	.+2      	; 0x1594 <_Z16double_num_inputi+0xca>
    1592:	8e c0       	rjmp	.+284    	; 0x16b0 <_Z16double_num_inputi+0x1e6>
					{
						done = 1;
						break;
					}
					else if(id==0 && mat[r][c-4]=='-')
    1594:	a1 14       	cp	r10, r1
    1596:	b1 04       	cpc	r11, r1
    1598:	71 f4       	brne	.+28     	; 0x15b6 <_Z16double_num_inputi+0xec>
    159a:	8d 32       	cpi	r24, 0x2D	; 45
    159c:	61 f4       	brne	.+24     	; 0x15b6 <_Z16double_num_inputi+0xec>
					{
						s[id] = mat[r][c-4];
    159e:	2d e2       	ldi	r18, 0x2D	; 45
    15a0:	29 83       	std	Y+1, r18	; 0x01
						id++;
						s[id] = 0;
    15a2:	1a 82       	std	Y+2, r1	; 0x02
						DisplayText(1,pos , s);
    15a4:	4c 85       	ldd	r20, Y+12	; 0x0c
    15a6:	5d 85       	ldd	r21, Y+13	; 0x0d
    15a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						break;
					}
					else if(id==0 && mat[r][c-4]=='-')
					{
						s[id] = mat[r][c-4];
						id++;
    15b0:	aa 24       	eor	r10, r10
    15b2:	a3 94       	inc	r10
    15b4:	b1 2c       	mov	r11, r1
    15b6:	8f ef       	ldi	r24, 0xFF	; 255
    15b8:	94 e3       	ldi	r25, 0x34	; 52
    15ba:	ec e0       	ldi	r30, 0x0C	; 12
    15bc:	81 50       	subi	r24, 0x01	; 1
    15be:	90 40       	sbci	r25, 0x00	; 0
    15c0:	e0 40       	sbci	r30, 0x00	; 0
    15c2:	e1 f7       	brne	.-8      	; 0x15bc <_Z16double_num_inputi+0xf2>
    15c4:	00 c0       	rjmp	.+0      	; 0x15c6 <_Z16double_num_inputi+0xfc>
    15c6:	00 00       	nop
    15c8:	51 c0       	rjmp	.+162    	; 0x166c <_Z16double_num_inputi+0x1a2>
						s[id] = 0;
						DisplayText(1,pos , s);
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    15ca:	89 b3       	in	r24, 0x19	; 25
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	00 2e       	mov	r0, r16
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <_Z16double_num_inputi+0x10c>
    15d2:	95 95       	asr	r25
    15d4:	87 95       	ror	r24
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <_Z16double_num_inputi+0x108>
    15da:	80 ff       	sbrs	r24, 0
    15dc:	47 c0       	rjmp	.+142    	; 0x166c <_Z16double_num_inputi+0x1a2>
				{
					if(mat2[r][c-4][0]=='<')
    15de:	f6 01       	movw	r30, r12
    15e0:	80 81       	ld	r24, Z
    15e2:	8c 33       	cpi	r24, 0x3C	; 60
    15e4:	09 f5       	brne	.+66     	; 0x1628 <_Z16double_num_inputi+0x15e>
					{
						if(id==0){
    15e6:	a1 14       	cp	r10, r1
    15e8:	b1 04       	cpc	r11, r1
    15ea:	51 f4       	brne	.+20     	; 0x1600 <_Z16double_num_inputi+0x136>
    15ec:	ff ef       	ldi	r31, 0xFF	; 255
    15ee:	24 e3       	ldi	r18, 0x34	; 52
    15f0:	8c e0       	ldi	r24, 0x0C	; 12
    15f2:	f1 50       	subi	r31, 0x01	; 1
    15f4:	20 40       	sbci	r18, 0x00	; 0
    15f6:	80 40       	sbci	r24, 0x00	; 0
    15f8:	e1 f7       	brne	.-8      	; 0x15f2 <_Z16double_num_inputi+0x128>
    15fa:	00 c0       	rjmp	.+0      	; 0x15fc <_Z16double_num_inputi+0x132>
    15fc:	00 00       	nop
    15fe:	3a c0       	rjmp	.+116    	; 0x1674 <_Z16double_num_inputi+0x1aa>
							_delay_ms(500);
							continue;
						}
						s[id-1]=' ';
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	a9 1a       	sub	r10, r25
    1604:	b1 08       	sbc	r11, r1
    1606:	f2 01       	movw	r30, r4
    1608:	ea 0d       	add	r30, r10
    160a:	fb 1d       	adc	r31, r11
    160c:	ff 87       	std	Y+15, r31	; 0x0f
    160e:	ee 87       	std	Y+14, r30	; 0x0e
    1610:	20 e2       	ldi	r18, 0x20	; 32
    1612:	20 83       	st	Z, r18
						DisplayText(1,pos,s);
    1614:	4c 85       	ldd	r20, Y+12	; 0x0c
    1616:	5d 85       	ldd	r21, Y+13	; 0x0d
    1618:	6b 85       	ldd	r22, Y+11	; 0x0b
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						id--;
						s[id]=0;
    1620:	ee 85       	ldd	r30, Y+14	; 0x0e
    1622:	ff 85       	ldd	r31, Y+15	; 0x0f
    1624:	10 82       	st	Z, r1
    1626:	19 c0       	rjmp	.+50     	; 0x165a <_Z16double_num_inputi+0x190>
						
					}
					else if(mat2[r][c-4][0]=='.' && dot==0)
    1628:	8e 32       	cpi	r24, 0x2E	; 46
    162a:	b9 f4       	brne	.+46     	; 0x165a <_Z16double_num_inputi+0x190>
    162c:	f8 89       	ldd	r31, Y+16	; 0x10
    162e:	f1 11       	cpse	r31, r1
    1630:	14 c0       	rjmp	.+40     	; 0x165a <_Z16double_num_inputi+0x190>
					{
						dot = 1;
						s[id] = mat2[r][c-4][0];
    1632:	f2 01       	movw	r30, r4
    1634:	ea 0d       	add	r30, r10
    1636:	fb 1d       	adc	r31, r11
    1638:	2e e2       	ldi	r18, 0x2E	; 46
    163a:	20 83       	st	Z, r18
						id++;
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	a8 1a       	sub	r10, r24
    1640:	b8 0a       	sbc	r11, r24
						s[id] = 0;
    1642:	f2 01       	movw	r30, r4
    1644:	ea 0d       	add	r30, r10
    1646:	fb 1d       	adc	r31, r11
    1648:	10 82       	st	Z, r1
						DisplayText(1,pos , s);
    164a:	4c 85       	ldd	r20, Y+12	; 0x0c
    164c:	5d 85       	ldd	r21, Y+13	; 0x0d
    164e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						s[id]=0;
						
					}
					else if(mat2[r][c-4][0]=='.' && dot==0)
					{
						dot = 1;
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	98 8b       	std	Y+16, r25	; 0x10
    165a:	ef ef       	ldi	r30, 0xFF	; 255
    165c:	f4 e3       	ldi	r31, 0x34	; 52
    165e:	2c e0       	ldi	r18, 0x0C	; 12
    1660:	e1 50       	subi	r30, 0x01	; 1
    1662:	f0 40       	sbci	r31, 0x00	; 0
    1664:	20 40       	sbci	r18, 0x00	; 0
    1666:	e1 f7       	brne	.-8      	; 0x1660 <_Z16double_num_inputi+0x196>
    1668:	00 c0       	rjmp	.+0      	; 0x166a <_Z16double_num_inputi+0x1a0>
    166a:	00 00       	nop
						s[id] = 0;
						DisplayText(1,pos , s);
					}
					_delay_ms(500);
				}
				if (id==9)
    166c:	89 e0       	ldi	r24, 0x09	; 9
    166e:	a8 16       	cp	r10, r24
    1670:	b1 04       	cpc	r11, r1
    1672:	f1 f0       	breq	.+60     	; 0x16b0 <_Z16double_num_inputi+0x1e6>
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    1674:	0f 5f       	subi	r16, 0xFF	; 255
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	98 e1       	ldi	r25, 0x18	; 24
    167a:	c9 0e       	add	r12, r25
    167c:	d1 1c       	adc	r13, r1
    167e:	e4 e0       	ldi	r30, 0x04	; 4
    1680:	ee 0e       	add	r14, r30
    1682:	f1 1c       	adc	r15, r1
    1684:	04 30       	cpi	r16, 0x04	; 4
    1686:	11 05       	cpc	r17, r1
    1688:	09 f0       	breq	.+2      	; 0x168c <_Z16double_num_inputi+0x1c2>
    168a:	5f cf       	rjmp	.-322    	; 0x154a <_Z16double_num_inputi+0x80>
    168c:	8f e1       	ldi	r24, 0x1F	; 31
    168e:	9e e4       	ldi	r25, 0x4E	; 78
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <_Z16double_num_inputi+0x1c6>
    1694:	00 c0       	rjmp	.+0      	; 0x1696 <_Z16double_num_inputi+0x1cc>
    1696:	00 00       	nop
	int id = 0;
	bool dot = 0;
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    1698:	9f ef       	ldi	r25, 0xFF	; 255
    169a:	69 1a       	sub	r6, r25
    169c:	79 0a       	sbc	r7, r25
    169e:	e6 e0       	ldi	r30, 0x06	; 6
    16a0:	2e 0e       	add	r2, r30
    16a2:	31 1c       	adc	r3, r1
    16a4:	f8 e0       	ldi	r31, 0x08	; 8
    16a6:	6f 16       	cp	r6, r31
    16a8:	71 04       	cpc	r7, r1
    16aa:	09 f0       	breq	.+2      	; 0x16ae <_Z16double_num_inputi+0x1e4>
    16ac:	3e cf       	rjmp	.-388    	; 0x152a <_Z16double_num_inputi+0x60>
    16ae:	33 cf       	rjmp	.-410    	; 0x1516 <_Z16double_num_inputi+0x4c>
    16b0:	8f e1       	ldi	r24, 0x1F	; 31
    16b2:	9e e4       	ldi	r25, 0x4E	; 78
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <_Z16double_num_inputi+0x1ea>
    16b8:	00 c0       	rjmp	.+0      	; 0x16ba <_Z16double_num_inputi+0x1f0>
    16ba:	00 00       	nop
		{
			break;
		}
	}
	
	return string_to_double(s,id);
    16bc:	b5 01       	movw	r22, r10
    16be:	ce 01       	movw	r24, r28
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z16string_to_doublePci>
}
    16c6:	60 96       	adiw	r28, 0x10	; 16
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	9f 90       	pop	r9
    16e8:	8f 90       	pop	r8
    16ea:	7f 90       	pop	r7
    16ec:	6f 90       	pop	r6
    16ee:	5f 90       	pop	r5
    16f0:	4f 90       	pop	r4
    16f2:	3f 90       	pop	r3
    16f4:	2f 90       	pop	r2
    16f6:	08 95       	ret

000016f8 <_Z9show_textPci>:
void show_text(char txt[], int pos1)
{
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	65 97       	sbiw	r28, 0x15	; 21
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	6c 01       	movw	r12, r24
    171a:	7b 01       	movw	r14, r22
	if(pos1==1){
    171c:	61 30       	cpi	r22, 0x01	; 1
    171e:	71 05       	cpc	r23, r1
    1720:	11 f4       	brne	.+4      	; 0x1726 <_Z9show_textPci+0x2e>
		LCD_Clear();
    1722:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	}
	int len = strlen(txt);
    1726:	f6 01       	movw	r30, r12
    1728:	01 90       	ld	r0, Z+
    172a:	00 20       	and	r0, r0
    172c:	e9 f7       	brne	.-6      	; 0x1728 <_Z9show_textPci+0x30>
    172e:	31 97       	sbiw	r30, 0x01	; 1
    1730:	ec 19       	sub	r30, r12
    1732:	fd 09       	sbc	r31, r13
	char s[21];
	int cnt = pos1;
	int id  = 0;
	for(int i=0;i<len;i++)
    1734:	1e 16       	cp	r1, r30
    1736:	1f 06       	cpc	r1, r31
    1738:	94 f1       	brlt	.+100    	; 0x179e <_Z9show_textPci+0xa6>
    173a:	3a c0       	rjmp	.+116    	; 0x17b0 <_Z9show_textPci+0xb8>
	{
		s[id] = txt[i];
    173c:	d8 01       	movw	r26, r16
    173e:	9d 91       	ld	r25, X+
    1740:	8d 01       	movw	r16, r26
    1742:	e1 e0       	ldi	r30, 0x01	; 1
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	ec 0f       	add	r30, r28
    1748:	fd 1f       	adc	r31, r29
    174a:	e2 0f       	add	r30, r18
    174c:	f3 1f       	adc	r31, r19
    174e:	90 83       	st	Z, r25
		id++;
    1750:	2f 5f       	subi	r18, 0xFF	; 255
    1752:	3f 4f       	sbci	r19, 0xFF	; 255
		if(id==20)
    1754:	24 31       	cpi	r18, 0x14	; 20
    1756:	31 05       	cpc	r19, r1
    1758:	69 f4       	brne	.+26     	; 0x1774 <_Z9show_textPci+0x7c>
		{
			s[id] = 0;
    175a:	1d 8a       	std	Y+21, r1	; 0x15
			DisplayText(1,cnt,s);
    175c:	ae 01       	movw	r20, r28
    175e:	4f 5f       	subi	r20, 0xFF	; 255
    1760:	5f 4f       	sbci	r21, 0xFF	; 255
    1762:	6e 2d       	mov	r22, r14
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
			id = 0;
			cnt += 12;
    176a:	bc e0       	ldi	r27, 0x0C	; 12
    176c:	eb 0e       	add	r14, r27
    176e:	f1 1c       	adc	r15, r1
		id++;
		if(id==20)
		{
			s[id] = 0;
			DisplayText(1,cnt,s);
			id = 0;
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
	}
	int len = strlen(txt);
	char s[21];
	int cnt = pos1;
	int id  = 0;
	for(int i=0;i<len;i++)
    1774:	c0 16       	cp	r12, r16
    1776:	d1 06       	cpc	r13, r17
    1778:	09 f7       	brne	.-62     	; 0x173c <_Z9show_textPci+0x44>
			id = 0;
			cnt += 12;
		}
		
	}
	if(id)
    177a:	21 15       	cp	r18, r1
    177c:	31 05       	cpc	r19, r1
    177e:	c1 f0       	breq	.+48     	; 0x17b0 <_Z9show_textPci+0xb8>
	{
		s[id] = 0;
    1780:	e1 e0       	ldi	r30, 0x01	; 1
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	ec 0f       	add	r30, r28
    1786:	fd 1f       	adc	r31, r29
    1788:	e2 0f       	add	r30, r18
    178a:	f3 1f       	adc	r31, r19
    178c:	10 82       	st	Z, r1
		DisplayText(1,cnt,s);
    178e:	ae 01       	movw	r20, r28
    1790:	4f 5f       	subi	r20, 0xFF	; 255
    1792:	5f 4f       	sbci	r21, 0xFF	; 255
    1794:	6e 2d       	mov	r22, r14
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	}

    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <_Z9show_textPci+0xb8>
	char s[21];
	int cnt = pos1;
	int id  = 0;
	for(int i=0;i<len;i++)
	{
		s[id] = txt[i];
    179e:	d6 01       	movw	r26, r12
    17a0:	8d 91       	ld	r24, X+
    17a2:	8d 01       	movw	r16, r26
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	ce 0e       	add	r12, r30
    17a8:	df 1e       	adc	r13, r31
		id++;
    17aa:	21 e0       	ldi	r18, 0x01	; 1
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	e2 cf       	rjmp	.-60     	; 0x1774 <_Z9show_textPci+0x7c>
	{
		s[id] = 0;
		DisplayText(1,cnt,s);
	}

    17b0:	65 96       	adiw	r28, 0x15	; 21
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	08 95       	ret

000017ce <_Z10gauss_algoiiPdPS_>:
int gauss_algo (int n, int m, double *ans , double **a)
{
    17ce:	2f 92       	push	r2
    17d0:	3f 92       	push	r3
    17d2:	4f 92       	push	r4
    17d4:	5f 92       	push	r5
    17d6:	6f 92       	push	r6
    17d8:	7f 92       	push	r7
    17da:	8f 92       	push	r8
    17dc:	9f 92       	push	r9
    17de:	af 92       	push	r10
    17e0:	bf 92       	push	r11
    17e2:	cf 92       	push	r12
    17e4:	df 92       	push	r13
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	64 97       	sbiw	r28, 0x14	; 20
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	9a 87       	std	Y+10, r25	; 0x0a
    1804:	89 87       	std	Y+9, r24	; 0x09
    1806:	1b 01       	movw	r2, r22
    1808:	58 8b       	std	Y+16, r21	; 0x10
    180a:	4f 87       	std	Y+15, r20	; 0x0f
    180c:	29 01       	movw	r4, r18
	//returns 1 if a single solution
	//returns 2 if infinite solution
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-7;
	int *where = (int*)malloc(m * sizeof(int));
    180e:	9b 01       	movw	r18, r22
    1810:	22 0f       	add	r18, r18
    1812:	33 1f       	adc	r19, r19
    1814:	3a 83       	std	Y+2, r19	; 0x02
    1816:	29 83       	std	Y+1, r18	; 0x01
    1818:	c9 01       	movw	r24, r18
    181a:	0e 94 a1 23 	call	0x4742	; 0x4742 <malloc>
    181e:	9a 8b       	std	Y+18, r25	; 0x12
    1820:	89 8b       	std	Y+17, r24	; 0x11
	for(int i=0; i<m; i++)
    1822:	12 14       	cp	r1, r2
    1824:	13 04       	cpc	r1, r3
    1826:	0c f0       	brlt	.+2      	; 0x182a <_Z10gauss_algoiiPdPS_+0x5c>
    1828:	56 c1       	rjmp	.+684    	; 0x1ad6 <_Z10gauss_algoiiPdPS_+0x308>
    182a:	9e 87       	std	Y+14, r25	; 0x0e
    182c:	8d 87       	std	Y+13, r24	; 0x0d
    182e:	69 81       	ldd	r22, Y+1	; 0x01
    1830:	7a 81       	ldd	r23, Y+2	; 0x02
    1832:	68 0f       	add	r22, r24
    1834:	79 1f       	adc	r23, r25
    1836:	fc 01       	movw	r30, r24
		where[i] = -1;
    1838:	8f ef       	ldi	r24, 0xFF	; 255
    183a:	9f ef       	ldi	r25, 0xFF	; 255
    183c:	7a 83       	std	Y+2, r23	; 0x02
    183e:	69 83       	std	Y+1, r22	; 0x01
    1840:	81 93       	st	Z+, r24
    1842:	91 93       	st	Z+, r25
	//returns 2 if infinite solution
	//returns 0 if no solution
	//returns a solution if there is at least one solution
	const double EPS = 1e-7;
	int *where = (int*)malloc(m * sizeof(int));
	for(int i=0; i<m; i++)
    1844:	a9 81       	ldd	r26, Y+1	; 0x01
    1846:	ba 81       	ldd	r27, Y+2	; 0x02
    1848:	ae 17       	cp	r26, r30
    184a:	bf 07       	cpc	r27, r31
    184c:	c9 f7       	brne	.-14     	; 0x1840 <_Z10gauss_algoiiPdPS_+0x72>
    184e:	2e c2       	rjmp	.+1116   	; 0x1cac <_Z10gauss_algoiiPdPS_+0x4de>
    1850:	b4 e0       	ldi	r27, 0x04	; 4
    1852:	6b 0e       	add	r6, r27
    1854:	71 1c       	adc	r7, r1
    1856:	ed 85       	ldd	r30, Y+13	; 0x0d
    1858:	fe 85       	ldd	r31, Y+14	; 0x0e
    185a:	32 96       	adiw	r30, 0x02	; 2
    185c:	fe 87       	std	Y+14, r31	; 0x0e
    185e:	ed 87       	std	Y+13, r30	; 0x0d
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
    1860:	29 85       	ldd	r18, Y+9	; 0x09
    1862:	3a 85       	ldd	r19, Y+10	; 0x0a
    1864:	a2 16       	cp	r10, r18
    1866:	b3 06       	cpc	r11, r19
    1868:	0c f0       	brlt	.+2      	; 0x186c <_Z10gauss_algoiiPdPS_+0x9e>
    186a:	26 c2       	rjmp	.+1100   	; 0x1cb8 <_Z10gauss_algoiiPdPS_+0x4ea>
    186c:	bc 86       	std	Y+12, r11	; 0x0c
    186e:	ab 86       	std	Y+11, r10	; 0x0b
    1870:	c5 01       	movw	r24, r10
    1872:	0a c0       	rjmp	.+20     	; 0x1888 <_Z10gauss_algoiiPdPS_+0xba>
    1874:	61 2c       	mov	r6, r1
    1876:	71 2c       	mov	r7, r1
    1878:	1c 86       	std	Y+12, r1	; 0x0c
    187a:	1b 86       	std	Y+11, r1	; 0x0b
    187c:	18 86       	std	Y+8, r1	; 0x08
    187e:	1f 82       	std	Y+7, r1	; 0x07
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a1 2c       	mov	r10, r1
    1886:	b1 2c       	mov	r11, r1
	{
		int sel = row;
		for (int i=row; i<n; ++i)
    1888:	69 85       	ldd	r22, Y+9	; 0x09
    188a:	7a 85       	ldd	r23, Y+10	; 0x0a
    188c:	86 17       	cp	r24, r22
    188e:	97 07       	cpc	r25, r23
    1890:	0c f0       	brlt	.+2      	; 0x1894 <_Z10gauss_algoiiPdPS_+0xc6>
    1892:	41 c0       	rjmp	.+130    	; 0x1916 <_Z10gauss_algoiiPdPS_+0x148>
    1894:	75 01       	movw	r14, r10
    1896:	ee 0c       	add	r14, r14
    1898:	ff 1c       	adc	r15, r15
    189a:	e4 0c       	add	r14, r4
    189c:	f5 1c       	adc	r15, r5
    189e:	ba 82       	std	Y+2, r11	; 0x02
    18a0:	a9 82       	std	Y+1, r10	; 0x01
    18a2:	65 01       	movw	r12, r10
    18a4:	4b 01       	movw	r8, r22
		if (abs (a[i][col]) > abs (a[sel][col]))
    18a6:	d7 01       	movw	r26, r14
    18a8:	ed 91       	ld	r30, X+
    18aa:	fd 91       	ld	r31, X+
    18ac:	7d 01       	movw	r14, r26
    18ae:	e6 0d       	add	r30, r6
    18b0:	f7 1d       	adc	r31, r7
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__fixsfsi>
    18be:	8b 01       	movw	r16, r22
    18c0:	77 23       	and	r23, r23
    18c2:	24 f4       	brge	.+8      	; 0x18cc <_Z10gauss_algoiiPdPS_+0xfe>
    18c4:	00 27       	eor	r16, r16
    18c6:	11 27       	eor	r17, r17
    18c8:	06 1b       	sub	r16, r22
    18ca:	17 0b       	sbc	r17, r23
    18cc:	f6 01       	movw	r30, r12
    18ce:	ee 0f       	add	r30, r30
    18d0:	ff 1f       	adc	r31, r31
    18d2:	e4 0d       	add	r30, r4
    18d4:	f5 1d       	adc	r31, r5
    18d6:	01 90       	ld	r0, Z+
    18d8:	f0 81       	ld	r31, Z
    18da:	e0 2d       	mov	r30, r0
    18dc:	e6 0d       	add	r30, r6
    18de:	f7 1d       	adc	r31, r7
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__fixsfsi>
    18ec:	9b 01       	movw	r18, r22
    18ee:	77 23       	and	r23, r23
    18f0:	24 f4       	brge	.+8      	; 0x18fa <_Z10gauss_algoiiPdPS_+0x12c>
    18f2:	22 27       	eor	r18, r18
    18f4:	33 27       	eor	r19, r19
    18f6:	26 1b       	sub	r18, r22
    18f8:	37 0b       	sbc	r19, r23
    18fa:	20 17       	cp	r18, r16
    18fc:	31 07       	cpc	r19, r17
    18fe:	14 f4       	brge	.+4      	; 0x1904 <_Z10gauss_algoiiPdPS_+0x136>
    1900:	c9 80       	ldd	r12, Y+1	; 0x01
    1902:	da 80       	ldd	r13, Y+2	; 0x02
	for(int i=0; i<m; i++)
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
	{
		int sel = row;
		for (int i=row; i<n; ++i)
    1904:	e9 81       	ldd	r30, Y+1	; 0x01
    1906:	fa 81       	ldd	r31, Y+2	; 0x02
    1908:	31 96       	adiw	r30, 0x01	; 1
    190a:	fa 83       	std	Y+2, r31	; 0x02
    190c:	e9 83       	std	Y+1, r30	; 0x01
    190e:	e8 15       	cp	r30, r8
    1910:	f9 05       	cpc	r31, r9
    1912:	4c f2       	brlt	.-110    	; 0x18a6 <_Z10gauss_algoiiPdPS_+0xd8>
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <_Z10gauss_algoiiPdPS_+0x14a>
    1916:	65 01       	movw	r12, r10
		if (abs (a[i][col]) > abs (a[sel][col]))
		sel = i;
		if (abs (a[sel][col]) < EPS)
    1918:	cc 0c       	add	r12, r12
    191a:	dd 1c       	adc	r13, r13
    191c:	92 01       	movw	r18, r4
    191e:	2c 0d       	add	r18, r12
    1920:	3d 1d       	adc	r19, r13
    1922:	3a 83       	std	Y+2, r19	; 0x02
    1924:	29 83       	std	Y+1, r18	; 0x01
    1926:	d9 01       	movw	r26, r18
    1928:	ed 91       	ld	r30, X+
    192a:	fc 91       	ld	r31, X
    192c:	e6 0d       	add	r30, r6
    192e:	f7 1d       	adc	r31, r7
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__fixsfsi>
    193c:	9b 01       	movw	r18, r22
    193e:	77 23       	and	r23, r23
    1940:	24 f4       	brge	.+8      	; 0x194a <_Z10gauss_algoiiPdPS_+0x17c>
    1942:	22 27       	eor	r18, r18
    1944:	33 27       	eor	r19, r19
    1946:	26 1b       	sub	r18, r22
    1948:	37 0b       	sbc	r19, r23
    194a:	b9 01       	movw	r22, r18
    194c:	33 0f       	add	r19, r19
    194e:	88 0b       	sbc	r24, r24
    1950:	99 0b       	sbc	r25, r25
    1952:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__floatsisf>
    1956:	25 e9       	ldi	r18, 0x95	; 149
    1958:	3f eb       	ldi	r19, 0xBF	; 191
    195a:	46 ed       	ldi	r20, 0xD6	; 214
    195c:	53 e3       	ldi	r21, 0x33	; 51
    195e:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__cmpsf2>
    1962:	88 23       	and	r24, r24
    1964:	0c f4       	brge	.+2      	; 0x1968 <_Z10gauss_algoiiPdPS_+0x19a>
    1966:	a4 c0       	rjmp	.+328    	; 0x1ab0 <_Z10gauss_algoiiPdPS_+0x2e2>
		continue;
		for (int i=col; i<=m; ++i)
    1968:	ef 81       	ldd	r30, Y+7	; 0x07
    196a:	f8 85       	ldd	r31, Y+8	; 0x08
    196c:	2e 16       	cp	r2, r30
    196e:	3f 06       	cpc	r3, r31
    1970:	0c f4       	brge	.+2      	; 0x1974 <_Z10gauss_algoiiPdPS_+0x1a6>
    1972:	a8 c1       	rjmp	.+848    	; 0x1cc4 <_Z10gauss_algoiiPdPS_+0x4f6>
		{
			double tmp = a[sel][i];
			a[sel][i] = a[row][i];
    1974:	4b 85       	ldd	r20, Y+11	; 0x0b
    1976:	5c 85       	ldd	r21, Y+12	; 0x0c
    1978:	44 0f       	add	r20, r20
    197a:	55 1f       	adc	r21, r21
    197c:	44 0d       	add	r20, r4
    197e:	55 1d       	adc	r21, r5
    1980:	c3 01       	movw	r24, r6
    1982:	9f 01       	movw	r18, r30
    1984:	09 81       	ldd	r16, Y+1	; 0x01
    1986:	1a 81       	ldd	r17, Y+2	; 0x02
		sel = i;
		if (abs (a[sel][col]) < EPS)
		continue;
		for (int i=col; i<=m; ++i)
		{
			double tmp = a[sel][i];
    1988:	d8 01       	movw	r26, r16
    198a:	ed 91       	ld	r30, X+
    198c:	fc 91       	ld	r31, X
    198e:	e8 0f       	add	r30, r24
    1990:	f9 1f       	adc	r31, r25
    1992:	c0 80       	ld	r12, Z
    1994:	d1 80       	ldd	r13, Z+1	; 0x01
    1996:	e2 80       	ldd	r14, Z+2	; 0x02
    1998:	f3 80       	ldd	r15, Z+3	; 0x03
			a[sel][i] = a[row][i];
    199a:	da 01       	movw	r26, r20
    199c:	6d 91       	ld	r22, X+
    199e:	7c 91       	ld	r23, X
    19a0:	db 01       	movw	r26, r22
    19a2:	a8 0f       	add	r26, r24
    19a4:	b9 1f       	adc	r27, r25
    19a6:	8d 90       	ld	r8, X+
    19a8:	9d 90       	ld	r9, X+
    19aa:	ad 90       	ld	r10, X+
    19ac:	bc 90       	ld	r11, X
    19ae:	80 82       	st	Z, r8
    19b0:	91 82       	std	Z+1, r9	; 0x01
    19b2:	a2 82       	std	Z+2, r10	; 0x02
    19b4:	b3 82       	std	Z+3, r11	; 0x03
			a[row][i] = tmp;
    19b6:	da 01       	movw	r26, r20
    19b8:	ed 91       	ld	r30, X+
    19ba:	fc 91       	ld	r31, X
    19bc:	e8 0f       	add	r30, r24
    19be:	f9 1f       	adc	r31, r25
    19c0:	c0 82       	st	Z, r12
    19c2:	d1 82       	std	Z+1, r13	; 0x01
    19c4:	e2 82       	std	Z+2, r14	; 0x02
    19c6:	f3 82       	std	Z+3, r15	; 0x03
		for (int i=row; i<n; ++i)
		if (abs (a[i][col]) > abs (a[sel][col]))
		sel = i;
		if (abs (a[sel][col]) < EPS)
		continue;
		for (int i=col; i<=m; ++i)
    19c8:	2f 5f       	subi	r18, 0xFF	; 255
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	04 96       	adiw	r24, 0x04	; 4
    19ce:	22 16       	cp	r2, r18
    19d0:	33 06       	cpc	r3, r19
    19d2:	d4 f6       	brge	.-76     	; 0x1988 <_Z10gauss_algoiiPdPS_+0x1ba>
    19d4:	77 c1       	rjmp	.+750    	; 0x1cc4 <_Z10gauss_algoiiPdPS_+0x4f6>
			a[sel][i] = a[row][i];
			a[row][i] = tmp;
		}
		where[col] = row;
		for (int i=0; i<n; ++i)
		if (i != row)
    19d6:	eb 85       	ldd	r30, Y+11	; 0x0b
    19d8:	fc 85       	ldd	r31, Y+12	; 0x0c
    19da:	ea 15       	cp	r30, r10
    19dc:	fb 05       	cpc	r31, r11
    19de:	09 f4       	brne	.+2      	; 0x19e2 <_Z10gauss_algoiiPdPS_+0x214>
    19e0:	53 c0       	rjmp	.+166    	; 0x1a88 <_Z10gauss_algoiiPdPS_+0x2ba>
    19e2:	cd 80       	ldd	r12, Y+5	; 0x05
    19e4:	de 80       	ldd	r13, Y+6	; 0x06
		{
			double c = a[i][col] / a[row][col];
    19e6:	d6 01       	movw	r26, r12
    19e8:	ed 91       	ld	r30, X+
    19ea:	fc 91       	ld	r31, X
    19ec:	cf 01       	movw	r24, r30
    19ee:	86 0d       	add	r24, r6
    19f0:	97 1d       	adc	r25, r7
    19f2:	f4 01       	movw	r30, r8
    19f4:	a0 81       	ld	r26, Z
    19f6:	b1 81       	ldd	r27, Z+1	; 0x01
    19f8:	a6 0d       	add	r26, r6
    19fa:	b7 1d       	adc	r27, r7
    19fc:	2d 91       	ld	r18, X+
    19fe:	3d 91       	ld	r19, X+
    1a00:	4d 91       	ld	r20, X+
    1a02:	5c 91       	ld	r21, X
    1a04:	dc 01       	movw	r26, r24
    1a06:	6d 91       	ld	r22, X+
    1a08:	7d 91       	ld	r23, X+
    1a0a:	8d 91       	ld	r24, X+
    1a0c:	9c 91       	ld	r25, X
    1a0e:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    1a12:	69 83       	std	Y+1, r22	; 0x01
    1a14:	7a 83       	std	Y+2, r23	; 0x02
    1a16:	8b 83       	std	Y+3, r24	; 0x03
    1a18:	9c 83       	std	Y+4, r25	; 0x04
			for (int j=col; j<=m; ++j)
    1a1a:	ef 81       	ldd	r30, Y+7	; 0x07
    1a1c:	f8 85       	ldd	r31, Y+8	; 0x08
    1a1e:	2e 16       	cp	r2, r30
    1a20:	3f 06       	cpc	r3, r31
    1a22:	94 f1       	brlt	.+100    	; 0x1a88 <_Z10gauss_algoiiPdPS_+0x2ba>
    1a24:	83 01       	movw	r16, r6
    1a26:	7f 01       	movw	r14, r30
			a[i][j] -= a[row][j] * c;
    1a28:	d6 01       	movw	r26, r12
    1a2a:	0d 90       	ld	r0, X+
    1a2c:	bc 91       	ld	r27, X
    1a2e:	a0 2d       	mov	r26, r0
    1a30:	a0 0f       	add	r26, r16
    1a32:	b1 1f       	adc	r27, r17
    1a34:	bc 8b       	std	Y+20, r27	; 0x14
    1a36:	ab 8b       	std	Y+19, r26	; 0x13
    1a38:	d4 01       	movw	r26, r8
    1a3a:	ed 91       	ld	r30, X+
    1a3c:	fc 91       	ld	r31, X
    1a3e:	e0 0f       	add	r30, r16
    1a40:	f1 1f       	adc	r31, r17
    1a42:	20 81       	ld	r18, Z
    1a44:	31 81       	ldd	r19, Z+1	; 0x01
    1a46:	42 81       	ldd	r20, Z+2	; 0x02
    1a48:	53 81       	ldd	r21, Z+3	; 0x03
    1a4a:	69 81       	ldd	r22, Y+1	; 0x01
    1a4c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    1a56:	9b 01       	movw	r18, r22
    1a58:	ac 01       	movw	r20, r24
    1a5a:	eb 89       	ldd	r30, Y+19	; 0x13
    1a5c:	fc 89       	ldd	r31, Y+20	; 0x14
    1a5e:	60 81       	ld	r22, Z
    1a60:	71 81       	ldd	r23, Z+1	; 0x01
    1a62:	82 81       	ldd	r24, Z+2	; 0x02
    1a64:	93 81       	ldd	r25, Z+3	; 0x03
    1a66:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    1a6a:	ab 89       	ldd	r26, Y+19	; 0x13
    1a6c:	bc 89       	ldd	r27, Y+20	; 0x14
    1a6e:	6d 93       	st	X+, r22
    1a70:	7d 93       	st	X+, r23
    1a72:	8d 93       	st	X+, r24
    1a74:	9c 93       	st	X, r25
    1a76:	13 97       	sbiw	r26, 0x03	; 3
		where[col] = row;
		for (int i=0; i<n; ++i)
		if (i != row)
		{
			double c = a[i][col] / a[row][col];
			for (int j=col; j<=m; ++j)
    1a78:	bf ef       	ldi	r27, 0xFF	; 255
    1a7a:	eb 1a       	sub	r14, r27
    1a7c:	fb 0a       	sbc	r15, r27
    1a7e:	0c 5f       	subi	r16, 0xFC	; 252
    1a80:	1f 4f       	sbci	r17, 0xFF	; 255
    1a82:	2e 14       	cp	r2, r14
    1a84:	3f 04       	cpc	r3, r15
    1a86:	84 f6       	brge	.-96     	; 0x1a28 <_Z10gauss_algoiiPdPS_+0x25a>
			double tmp = a[sel][i];
			a[sel][i] = a[row][i];
			a[row][i] = tmp;
		}
		where[col] = row;
		for (int i=0; i<n; ++i)
    1a88:	ef ef       	ldi	r30, 0xFF	; 255
    1a8a:	ae 1a       	sub	r10, r30
    1a8c:	be 0a       	sbc	r11, r30
    1a8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a90:	3e 81       	ldd	r19, Y+6	; 0x06
    1a92:	2e 5f       	subi	r18, 0xFE	; 254
    1a94:	3f 4f       	sbci	r19, 0xFF	; 255
    1a96:	3e 83       	std	Y+6, r19	; 0x06
    1a98:	2d 83       	std	Y+5, r18	; 0x05
    1a9a:	69 85       	ldd	r22, Y+9	; 0x09
    1a9c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a9e:	6a 15       	cp	r22, r10
    1aa0:	7b 05       	cpc	r23, r11
    1aa2:	09 f0       	breq	.+2      	; 0x1aa6 <_Z10gauss_algoiiPdPS_+0x2d8>
    1aa4:	98 cf       	rjmp	.-208    	; 0x19d6 <_Z10gauss_algoiiPdPS_+0x208>
		{
			double c = a[i][col] / a[row][col];
			for (int j=col; j<=m; ++j)
			a[i][j] -= a[row][j] * c;
		}
		++row;
    1aa6:	ab 84       	ldd	r10, Y+11	; 0x0b
    1aa8:	bc 84       	ldd	r11, Y+12	; 0x0c
    1aaa:	7f ef       	ldi	r23, 0xFF	; 255
    1aac:	a7 1a       	sub	r10, r23
    1aae:	b7 0a       	sbc	r11, r23
	//returns a solution if there is at least one solution
	const double EPS = 1e-7;
	int *where = (int*)malloc(m * sizeof(int));
	for(int i=0; i<m; i++)
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
    1ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab2:	98 85       	ldd	r25, Y+8	; 0x08
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	98 87       	std	Y+8, r25	; 0x08
    1ab8:	8f 83       	std	Y+7, r24	; 0x07
    1aba:	28 16       	cp	r2, r24
    1abc:	39 06       	cpc	r3, r25
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <_Z10gauss_algoiiPdPS_+0x2f4>
    1ac0:	c7 ce       	rjmp	.-626    	; 0x1850 <_Z10gauss_algoiiPdPS_+0x82>
    1ac2:	fa c0       	rjmp	.+500    	; 0x1cb8 <_Z10gauss_algoiiPdPS_+0x4ea>
		}
		++row;
	}

	for(int i=0; i<m; i++)
	ans[i] =0;
    1ac4:	11 92       	st	Z+, r1
    1ac6:	11 92       	st	Z+, r1
    1ac8:	11 92       	st	Z+, r1
    1aca:	11 92       	st	Z+, r1
			a[i][j] -= a[row][j] * c;
		}
		++row;
	}

	for(int i=0; i<m; i++)
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	82 15       	cp	r24, r2
    1ad0:	93 05       	cpc	r25, r3
    1ad2:	c4 f3       	brlt	.-16     	; 0x1ac4 <_Z10gauss_algoiiPdPS_+0x2f6>
    1ad4:	07 c0       	rjmp	.+14     	; 0x1ae4 <_Z10gauss_algoiiPdPS_+0x316>
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
    1ad6:	a9 85       	ldd	r26, Y+9	; 0x09
    1ad8:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ada:	1a 16       	cp	r1, r26
    1adc:	1b 06       	cpc	r1, r27
    1ade:	0c f4       	brge	.+2      	; 0x1ae2 <_Z10gauss_algoiiPdPS_+0x314>
    1ae0:	43 c0       	rjmp	.+134    	; 0x1b68 <_Z10gauss_algoiiPdPS_+0x39a>
    1ae2:	da c0       	rjmp	.+436    	; 0x1c98 <_Z10gauss_algoiiPdPS_+0x4ca>

	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
    1ae4:	61 01       	movw	r12, r2
    1ae6:	cc 0c       	add	r12, r12
    1ae8:	dd 1c       	adc	r13, r13
    1aea:	cc 0c       	add	r12, r12
    1aec:	dd 1c       	adc	r13, r13
    1aee:	a9 88       	ldd	r10, Y+17	; 0x11
    1af0:	ba 88       	ldd	r11, Y+18	; 0x12
    1af2:	ef 85       	ldd	r30, Y+15	; 0x0f
    1af4:	f8 89       	ldd	r31, Y+16	; 0x10
    1af6:	00 e0       	ldi	r16, 0x00	; 0
    1af8:	10 e0       	ldi	r17, 0x00	; 0
    1afa:	fa 83       	std	Y+2, r31	; 0x02
    1afc:	e9 83       	std	Y+1, r30	; 0x01
	}

	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
    1afe:	d5 01       	movw	r26, r10
    1b00:	8d 91       	ld	r24, X+
    1b02:	9d 91       	ld	r25, X+
    1b04:	5d 01       	movw	r10, r26
    1b06:	8f 3f       	cpi	r24, 0xFF	; 255
    1b08:	bf ef       	ldi	r27, 0xFF	; 255
    1b0a:	9b 07       	cpc	r25, r27
    1b0c:	09 f1       	breq	.+66     	; 0x1b50 <_Z10gauss_algoiiPdPS_+0x382>
	ans[i] = a[where[i]][m] / a[where[i]][i];
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	f2 01       	movw	r30, r4
    1b14:	e8 0f       	add	r30, r24
    1b16:	f9 1f       	adc	r31, r25
    1b18:	01 90       	ld	r0, Z+
    1b1a:	f0 81       	ld	r31, Z
    1b1c:	e0 2d       	mov	r30, r0
    1b1e:	df 01       	movw	r26, r30
    1b20:	ac 0d       	add	r26, r12
    1b22:	bd 1d       	adc	r27, r13
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	8e 19       	sub	r24, r14
    1b2a:	9f 09       	sbc	r25, r15
    1b2c:	e8 0f       	add	r30, r24
    1b2e:	f9 1f       	adc	r31, r25
    1b30:	20 81       	ld	r18, Z
    1b32:	31 81       	ldd	r19, Z+1	; 0x01
    1b34:	42 81       	ldd	r20, Z+2	; 0x02
    1b36:	53 81       	ldd	r21, Z+3	; 0x03
    1b38:	6d 91       	ld	r22, X+
    1b3a:	7d 91       	ld	r23, X+
    1b3c:	8d 91       	ld	r24, X+
    1b3e:	9c 91       	ld	r25, X
    1b40:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    1b44:	e9 81       	ldd	r30, Y+1	; 0x01
    1b46:	fa 81       	ldd	r31, Y+2	; 0x02
    1b48:	60 83       	st	Z, r22
    1b4a:	71 83       	std	Z+1, r23	; 0x01
    1b4c:	82 83       	std	Z+2, r24	; 0x02
    1b4e:	93 83       	std	Z+3, r25	; 0x03
		++row;
	}

	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
    1b50:	0f 5f       	subi	r16, 0xFF	; 255
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	29 81       	ldd	r18, Y+1	; 0x01
    1b56:	3a 81       	ldd	r19, Y+2	; 0x02
    1b58:	2c 5f       	subi	r18, 0xFC	; 252
    1b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5c:	3a 83       	std	Y+2, r19	; 0x02
    1b5e:	29 83       	std	Y+1, r18	; 0x01
    1b60:	02 15       	cp	r16, r2
    1b62:	13 05       	cpc	r17, r3
    1b64:	64 f2       	brlt	.-104    	; 0x1afe <_Z10gauss_algoiiPdPS_+0x330>
    1b66:	bf c0       	rjmp	.+382    	; 0x1ce6 <_Z10gauss_algoiiPdPS_+0x518>
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
    1b68:	b1 01       	movw	r22, r2
    1b6a:	66 0f       	add	r22, r22
    1b6c:	77 1f       	adc	r23, r23
    1b6e:	66 0f       	add	r22, r22
    1b70:	77 1f       	adc	r23, r23
    1b72:	7a 83       	std	Y+2, r23	; 0x02
    1b74:	69 83       	std	Y+1, r22	; 0x01
    1b76:	42 01       	movw	r8, r4
    1b78:	af 84       	ldd	r10, Y+15	; 0x0f
    1b7a:	b8 88       	ldd	r11, Y+16	; 0x10
    1b7c:	a6 0e       	add	r10, r22
    1b7e:	b7 1e       	adc	r11, r23
    1b80:	61 2c       	mov	r6, r1
    1b82:	71 2c       	mov	r7, r1
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
    1b84:	41 2c       	mov	r4, r1
    1b86:	51 2c       	mov	r5, r1
    1b88:	12 14       	cp	r1, r2
    1b8a:	13 04       	cpc	r1, r3
    1b8c:	34 f0       	brlt	.+12     	; 0x1b9a <_Z10gauss_algoiiPdPS_+0x3cc>
    1b8e:	31 c0       	rjmp	.+98     	; 0x1bf2 <_Z10gauss_algoiiPdPS_+0x424>
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
    1b90:	12 14       	cp	r1, r2
    1b92:	13 04       	cpc	r1, r3
    1b94:	0c f4       	brge	.+2      	; 0x1b98 <_Z10gauss_algoiiPdPS_+0x3ca>
    1b96:	64 c0       	rjmp	.+200    	; 0x1c60 <_Z10gauss_algoiiPdPS_+0x492>
    1b98:	7f c0       	rjmp	.+254    	; 0x1c98 <_Z10gauss_algoiiPdPS_+0x4ca>
    1b9a:	0f 85       	ldd	r16, Y+15	; 0x0f
    1b9c:	18 89       	ldd	r17, Y+16	; 0x10
    1b9e:	d4 01       	movw	r26, r8
    1ba0:	0d 90       	ld	r0, X+
    1ba2:	bc 91       	ld	r27, X
    1ba4:	a0 2d       	mov	r26, r0
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
		sum += ans[j] * a[i][j];
    1ba6:	e1 2c       	mov	r14, r1
    1ba8:	f1 2c       	mov	r15, r1
    1baa:	c4 2c       	mov	r12, r4
    1bac:	d5 2c       	mov	r13, r5
    1bae:	be 83       	std	Y+6, r27	; 0x06
    1bb0:	ad 83       	std	Y+5, r26	; 0x05
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	61 91       	ld	r22, Z+
    1bb6:	71 91       	ld	r23, Z+
    1bb8:	81 91       	ld	r24, Z+
    1bba:	91 91       	ld	r25, Z+
    1bbc:	8f 01       	movw	r16, r30
    1bbe:	ad 81       	ldd	r26, Y+5	; 0x05
    1bc0:	be 81       	ldd	r27, Y+6	; 0x06
    1bc2:	2d 91       	ld	r18, X+
    1bc4:	3d 91       	ld	r19, X+
    1bc6:	4d 91       	ld	r20, X+
    1bc8:	5d 91       	ld	r21, X+
    1bca:	be 83       	std	Y+6, r27	; 0x06
    1bcc:	ad 83       	std	Y+5, r26	; 0x05
    1bce:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    1bd2:	9b 01       	movw	r18, r22
    1bd4:	ac 01       	movw	r20, r24
    1bd6:	6e 2d       	mov	r22, r14
    1bd8:	7f 2d       	mov	r23, r15
    1bda:	8c 2d       	mov	r24, r12
    1bdc:	9d 2d       	mov	r25, r13
    1bde:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    1be2:	e6 2e       	mov	r14, r22
    1be4:	f7 2e       	mov	r15, r23
    1be6:	c8 2e       	mov	r12, r24
    1be8:	d9 2e       	mov	r13, r25
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
    1bea:	a0 16       	cp	r10, r16
    1bec:	b1 06       	cpc	r11, r17
    1bee:	09 f7       	brne	.-62     	; 0x1bb2 <_Z10gauss_algoiiPdPS_+0x3e4>
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <_Z10gauss_algoiiPdPS_+0x42c>
    1bf2:	e1 2c       	mov	r14, r1
    1bf4:	f1 2c       	mov	r15, r1
    1bf6:	c4 2c       	mov	r12, r4
    1bf8:	d5 2c       	mov	r13, r5
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
    1bfa:	d4 01       	movw	r26, r8
    1bfc:	ed 91       	ld	r30, X+
    1bfe:	fd 91       	ld	r31, X+
    1c00:	4d 01       	movw	r8, r26
    1c02:	29 81       	ldd	r18, Y+1	; 0x01
    1c04:	3a 81       	ldd	r19, Y+2	; 0x02
    1c06:	e2 0f       	add	r30, r18
    1c08:	f3 1f       	adc	r31, r19
    1c0a:	20 81       	ld	r18, Z
    1c0c:	31 81       	ldd	r19, Z+1	; 0x01
    1c0e:	42 81       	ldd	r20, Z+2	; 0x02
    1c10:	53 81       	ldd	r21, Z+3	; 0x03
    1c12:	6e 2d       	mov	r22, r14
    1c14:	7f 2d       	mov	r23, r15
    1c16:	8c 2d       	mov	r24, r12
    1c18:	9d 2d       	mov	r25, r13
    1c1a:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    1c1e:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__fixsfsi>
    1c22:	9b 01       	movw	r18, r22
    1c24:	77 23       	and	r23, r23
    1c26:	24 f4       	brge	.+8      	; 0x1c30 <_Z10gauss_algoiiPdPS_+0x462>
    1c28:	22 27       	eor	r18, r18
    1c2a:	33 27       	eor	r19, r19
    1c2c:	26 1b       	sub	r18, r22
    1c2e:	37 0b       	sbc	r19, r23
    1c30:	b9 01       	movw	r22, r18
    1c32:	33 0f       	add	r19, r19
    1c34:	88 0b       	sbc	r24, r24
    1c36:	99 0b       	sbc	r25, r25
    1c38:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__floatsisf>
    1c3c:	25 e9       	ldi	r18, 0x95	; 149
    1c3e:	3f eb       	ldi	r19, 0xBF	; 191
    1c40:	46 ed       	ldi	r20, 0xD6	; 214
    1c42:	53 e3       	ldi	r21, 0x33	; 51
    1c44:	0e 94 ef 20 	call	0x41de	; 0x41de <__gesf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	6c f1       	brlt	.+90     	; 0x1ca6 <_Z10gauss_algoiiPdPS_+0x4d8>
	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	63 1a       	sub	r6, r19
    1c50:	73 0a       	sbc	r7, r19
    1c52:	69 85       	ldd	r22, Y+9	; 0x09
    1c54:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c56:	66 16       	cp	r6, r22
    1c58:	77 06       	cpc	r7, r23
    1c5a:	0c f4       	brge	.+2      	; 0x1c5e <_Z10gauss_algoiiPdPS_+0x490>
    1c5c:	95 cf       	rjmp	.-214    	; 0x1b88 <_Z10gauss_algoiiPdPS_+0x3ba>
    1c5e:	98 cf       	rjmp	.-208    	; 0x1b90 <_Z10gauss_algoiiPdPS_+0x3c2>
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
		if (where[i] == -1){
    1c60:	a9 89       	ldd	r26, Y+17	; 0x11
    1c62:	ba 89       	ldd	r27, Y+18	; 0x12
    1c64:	8d 91       	ld	r24, X+
    1c66:	9c 91       	ld	r25, X
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	69 f4       	brne	.+26     	; 0x1c86 <_Z10gauss_algoiiPdPS_+0x4b8>
    1c6c:	05 c0       	rjmp	.+10     	; 0x1c78 <_Z10gauss_algoiiPdPS_+0x4aa>
    1c6e:	21 91       	ld	r18, Z+
    1c70:	31 91       	ld	r19, Z+
    1c72:	2f 3f       	cpi	r18, 0xFF	; 255
    1c74:	3f 4f       	sbci	r19, 0xFF	; 255
    1c76:	61 f4       	brne	.+24     	; 0x1c90 <_Z10gauss_algoiiPdPS_+0x4c2>
			free(where);
    1c78:	89 89       	ldd	r24, Y+17	; 0x11
    1c7a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c7c:	0e 94 39 24 	call	0x4872	; 0x4872 <free>
			return 2;
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	37 c0       	rjmp	.+110    	; 0x1cf4 <_Z10gauss_algoiiPdPS_+0x526>
    1c86:	e9 89       	ldd	r30, Y+17	; 0x11
    1c88:	fa 89       	ldd	r31, Y+18	; 0x12
    1c8a:	32 96       	adiw	r30, 0x02	; 2
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
		if (where[i] == -1){
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
		return 0;
	}

	for (int i=0; i<m; ++i){
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	82 15       	cp	r24, r2
    1c94:	93 05       	cpc	r25, r3
    1c96:	5c f3       	brlt	.-42     	; 0x1c6e <_Z10gauss_algoiiPdPS_+0x4a0>
		if (where[i] == -1){
			free(where);
			return 2;
		}
	}
	free(where);
    1c98:	89 89       	ldd	r24, Y+17	; 0x11
    1c9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c9c:	0e 94 39 24 	call	0x4872	; 0x4872 <free>
	return 1;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	27 c0       	rjmp	.+78     	; 0x1cf4 <_Z10gauss_algoiiPdPS_+0x526>
	{
		double sum = 0;
		for (int j=0; j<m; ++j)
		sum += ans[j] * a[i][j];
		if (abs (sum - a[i][m]) > EPS)
		return 0;
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	24 c0       	rjmp	.+72     	; 0x1cf4 <_Z10gauss_algoiiPdPS_+0x526>
	//returns a solution if there is at least one solution
	const double EPS = 1e-7;
	int *where = (int*)malloc(m * sizeof(int));
	for(int i=0; i<m; i++)
		where[i] = -1;
	for (int col=0, row=0; col<m && row<n; ++col)
    1cac:	69 85       	ldd	r22, Y+9	; 0x09
    1cae:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cb0:	16 16       	cp	r1, r22
    1cb2:	17 06       	cpc	r1, r23
    1cb4:	0c f4       	brge	.+2      	; 0x1cb8 <_Z10gauss_algoiiPdPS_+0x4ea>
    1cb6:	de cd       	rjmp	.-1092   	; 0x1874 <_Z10gauss_algoiiPdPS_+0xa6>
    1cb8:	ef 84       	ldd	r14, Y+15	; 0x0f
    1cba:	f8 88       	ldd	r15, Y+16	; 0x10
		where[col] = row;
		for (int i=0; i<n; ++i)
		if (i != row)
		{
			double c = a[i][col] / a[row][col];
			for (int j=col; j<=m; ++j)
    1cbc:	f7 01       	movw	r30, r14
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	00 cf       	rjmp	.-512    	; 0x1ac4 <_Z10gauss_algoiiPdPS_+0x2f6>
		{
			double tmp = a[sel][i];
			a[sel][i] = a[row][i];
			a[row][i] = tmp;
		}
		where[col] = row;
    1cc4:	eb 85       	ldd	r30, Y+11	; 0x0b
    1cc6:	fc 85       	ldd	r31, Y+12	; 0x0c
    1cc8:	ad 85       	ldd	r26, Y+13	; 0x0d
    1cca:	be 85       	ldd	r27, Y+14	; 0x0e
    1ccc:	ed 93       	st	X+, r30
    1cce:	fc 93       	st	X, r31
		for (int i=0; i<n; ++i)
		if (i != row)
		{
			double c = a[i][col] / a[row][col];
    1cd0:	cf 01       	movw	r24, r30
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	42 01       	movw	r8, r4
    1cd8:	88 0e       	add	r8, r24
    1cda:	99 1e       	adc	r9, r25
    1cdc:	5e 82       	std	Y+6, r5	; 0x06
    1cde:	4d 82       	std	Y+5, r4	; 0x05
    1ce0:	a1 2c       	mov	r10, r1
    1ce2:	b1 2c       	mov	r11, r1
    1ce4:	78 ce       	rjmp	.-784    	; 0x19d6 <_Z10gauss_algoiiPdPS_+0x208>
	for(int i=0; i<m; i++)
	ans[i] =0;
	for (int i=0; i<m; ++i)
	if (where[i] != -1)
	ans[i] = a[where[i]][m] / a[where[i]][i];
	for (int i=0; i<n; ++i)
    1ce6:	29 85       	ldd	r18, Y+9	; 0x09
    1ce8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cea:	12 16       	cp	r1, r18
    1cec:	13 06       	cpc	r1, r19
    1cee:	0c f4       	brge	.+2      	; 0x1cf2 <_Z10gauss_algoiiPdPS_+0x524>
    1cf0:	3b cf       	rjmp	.-394    	; 0x1b68 <_Z10gauss_algoiiPdPS_+0x39a>
    1cf2:	b6 cf       	rjmp	.-148    	; 0x1c60 <_Z10gauss_algoiiPdPS_+0x492>
			return 2;
		}
	}
	free(where);
	return 1;
}
    1cf4:	64 96       	adiw	r28, 0x14	; 20
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	9f 90       	pop	r9
    1d16:	8f 90       	pop	r8
    1d18:	7f 90       	pop	r7
    1d1a:	6f 90       	pop	r6
    1d1c:	5f 90       	pop	r5
    1d1e:	4f 90       	pop	r4
    1d20:	3f 90       	pop	r3
    1d22:	2f 90       	pop	r2
    1d24:	08 95       	ret

00001d26 <_Z5gaussv>:
void gauss()
{
    1d26:	2f 92       	push	r2
    1d28:	3f 92       	push	r3
    1d2a:	4f 92       	push	r4
    1d2c:	5f 92       	push	r5
    1d2e:	6f 92       	push	r6
    1d30:	7f 92       	push	r7
    1d32:	8f 92       	push	r8
    1d34:	9f 92       	push	r9
    1d36:	af 92       	push	r10
    1d38:	bf 92       	push	r11
    1d3a:	cf 92       	push	r12
    1d3c:	df 92       	push	r13
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	cd 56       	subi	r28, 0x6D	; 109
    1d50:	d1 09       	sbc	r29, r1
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
	char text1[] = "Number of Variables (1-7)?";
    1d5c:	8b e1       	ldi	r24, 0x1B	; 27
    1d5e:	ec ef       	ldi	r30, 0xFC	; 252
    1d60:	f1 e0       	ldi	r31, 0x01	; 1
    1d62:	de 01       	movw	r26, r28
    1d64:	11 96       	adiw	r26, 0x01	; 1
    1d66:	01 90       	ld	r0, Z+
    1d68:	0d 92       	st	X+, r0
    1d6a:	8a 95       	dec	r24
    1d6c:	e1 f7       	brne	.-8      	; 0x1d66 <_Z5gaussv+0x40>
	show_text(text1,1);
    1d6e:	61 e0       	ldi	r22, 0x01	; 1
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	ce 01       	movw	r24, r28
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	int m = int_number_input(24);
    1d7a:	88 e1       	ldi	r24, 0x18	; 24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_Z16int_number_inputi>
    1d82:	2c 01       	movw	r4, r24
	strcpy(text1,"Number of equations (1-7)?");
    1d84:	8b e1       	ldi	r24, 0x1B	; 27
    1d86:	e7 e1       	ldi	r30, 0x17	; 23
    1d88:	f2 e0       	ldi	r31, 0x02	; 2
    1d8a:	de 01       	movw	r26, r28
    1d8c:	11 96       	adiw	r26, 0x01	; 1
    1d8e:	01 90       	ld	r0, Z+
    1d90:	0d 92       	st	X+, r0
    1d92:	8a 95       	dec	r24
    1d94:	e1 f7       	brne	.-8      	; 0x1d8e <_Z5gaussv+0x68>
	show_text(text1,1);
    1d96:	61 e0       	ldi	r22, 0x01	; 1
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	int n = int_number_input(24);
    1da2:	88 e1       	ldi	r24, 0x18	; 24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_Z16int_number_inputi>
    1daa:	aa 96       	adiw	r28, 0x2a	; 42
    1dac:	9f af       	std	Y+63, r25	; 0x3f
    1dae:	8e af       	std	Y+62, r24	; 0x3e
    1db0:	aa 97       	sbiw	r28, 0x2a	; 42
	
	double *ans = (double*)malloc(m * sizeof(double));
    1db2:	92 01       	movw	r18, r4
    1db4:	22 0f       	add	r18, r18
    1db6:	33 1f       	adc	r19, r19
    1db8:	22 0f       	add	r18, r18
    1dba:	33 1f       	adc	r19, r19
    1dbc:	a4 96       	adiw	r28, 0x24	; 36
    1dbe:	3f af       	std	Y+63, r19	; 0x3f
    1dc0:	2e af       	std	Y+62, r18	; 0x3e
    1dc2:	a4 97       	sbiw	r28, 0x24	; 36
    1dc4:	c9 01       	movw	r24, r18
    1dc6:	0e 94 a1 23 	call	0x4742	; 0x4742 <malloc>
    1dca:	ad 96       	adiw	r28, 0x2d	; 45
    1dcc:	8f af       	std	Y+63, r24	; 0x3f
    1dce:	ad 97       	sbiw	r28, 0x2d	; 45
    1dd0:	ae 96       	adiw	r28, 0x2e	; 46
    1dd2:	9f af       	std	Y+63, r25	; 0x3f
    1dd4:	ae 97       	sbiw	r28, 0x2e	; 46
	double ** a = (double**)malloc(n*sizeof(double *));
    1dd6:	aa 96       	adiw	r28, 0x2a	; 42
    1dd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1dda:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ddc:	aa 97       	sbiw	r28, 0x2a	; 42
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	ac 96       	adiw	r28, 0x2c	; 44
    1de4:	9f af       	std	Y+63, r25	; 0x3f
    1de6:	8e af       	std	Y+62, r24	; 0x3e
    1de8:	ac 97       	sbiw	r28, 0x2c	; 44
    1dea:	0e 94 a1 23 	call	0x4742	; 0x4742 <malloc>
    1dee:	a8 96       	adiw	r28, 0x28	; 40
    1df0:	9f af       	std	Y+63, r25	; 0x3f
    1df2:	8e af       	std	Y+62, r24	; 0x3e
    1df4:	a8 97       	sbiw	r28, 0x28	; 40
	for(int i=0; i< n; i++)
    1df6:	aa 96       	adiw	r28, 0x2a	; 42
    1df8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1dfa:	ff ad       	ldd	r31, Y+63	; 0x3f
    1dfc:	aa 97       	sbiw	r28, 0x2a	; 42
    1dfe:	1e 16       	cp	r1, r30
    1e00:	1f 06       	cpc	r1, r31
    1e02:	0c f0       	brlt	.+2      	; 0x1e06 <_Z5gaussv+0xe0>
    1e04:	f7 c0       	rjmp	.+494    	; 0x1ff4 <_Z5gaussv+0x2ce>
	a[i] = (double*) malloc((m+1)*sizeof(double));
    1e06:	a4 96       	adiw	r28, 0x24	; 36
    1e08:	ee ac       	ldd	r14, Y+62	; 0x3e
    1e0a:	ff ac       	ldd	r15, Y+63	; 0x3f
    1e0c:	a4 97       	sbiw	r28, 0x24	; 36
    1e0e:	f4 e0       	ldi	r31, 0x04	; 4
    1e10:	ef 0e       	add	r14, r31
    1e12:	f1 1c       	adc	r15, r1
    1e14:	a2 96       	adiw	r28, 0x22	; 34
    1e16:	9f af       	std	Y+63, r25	; 0x3f
    1e18:	8e af       	std	Y+62, r24	; 0x3e
    1e1a:	a2 97       	sbiw	r28, 0x22	; 34
    1e1c:	9c 01       	movw	r18, r24
    1e1e:	ac 96       	adiw	r28, 0x2c	; 44
    1e20:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e22:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e24:	ac 97       	sbiw	r28, 0x2c	; 44
    1e26:	28 0f       	add	r18, r24
    1e28:	39 1f       	adc	r19, r25
    1e2a:	a6 96       	adiw	r28, 0x26	; 38
    1e2c:	3f af       	std	Y+63, r19	; 0x3f
    1e2e:	2e af       	std	Y+62, r18	; 0x3e
    1e30:	a6 97       	sbiw	r28, 0x26	; 38
    1e32:	a8 96       	adiw	r28, 0x28	; 40
    1e34:	0e ad       	ldd	r16, Y+62	; 0x3e
    1e36:	1f ad       	ldd	r17, Y+63	; 0x3f
    1e38:	a8 97       	sbiw	r28, 0x28	; 40
    1e3a:	69 01       	movw	r12, r18
    1e3c:	c7 01       	movw	r24, r14
    1e3e:	0e 94 a1 23 	call	0x4742	; 0x4742 <malloc>
    1e42:	f8 01       	movw	r30, r16
    1e44:	81 93       	st	Z+, r24
    1e46:	91 93       	st	Z+, r25
    1e48:	8f 01       	movw	r16, r30
	show_text(text1,1);
	int n = int_number_input(24);
	
	double *ans = (double*)malloc(m * sizeof(double));
	double ** a = (double**)malloc(n*sizeof(double *));
	for(int i=0; i< n; i++)
    1e4a:	ce 16       	cp	r12, r30
    1e4c:	df 06       	cpc	r13, r31
    1e4e:	b1 f7       	brne	.-20     	; 0x1e3c <_Z5gaussv+0x116>
    1e50:	0f 2e       	mov	r0, r31
    1e52:	f0 e3       	ldi	r31, 0x30	; 48
    1e54:	6f 2e       	mov	r6, r31
    1e56:	f0 2d       	mov	r31, r0
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			char text[14] = "Input a[";
    1e58:	9e 01       	movw	r18, r28
    1e5a:	2b 5d       	subi	r18, 0xDB	; 219
    1e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5e:	a0 96       	adiw	r28, 0x20	; 32
    1e60:	3f af       	std	Y+63, r19	; 0x3f
    1e62:	2e af       	std	Y+62, r18	; 0x3e
    1e64:	a0 97       	sbiw	r28, 0x20	; 32
			char ek[2];
			ek[0] = (char)(i+'0');
    1e66:	8e 01       	movw	r16, r28
    1e68:	02 5b       	subi	r16, 0xB2	; 178
    1e6a:	1f 4f       	sbci	r17, 0xFF	; 255
			ek[1] = 0;
			strcat(text , ek);
			ek[0] = ']';
    1e6c:	0f 2e       	mov	r0, r31
    1e6e:	fd e5       	ldi	r31, 0x5D	; 93
    1e70:	7f 2e       	mov	r7, r31
    1e72:	f0 2d       	mov	r31, r0
			strcat(text , ek);
			ek[0] = '[';
    1e74:	0f 2e       	mov	r0, r31
    1e76:	fb e5       	ldi	r31, 0x5B	; 91
    1e78:	2f 2e       	mov	r2, r31
    1e7a:	f0 2d       	mov	r31, r0
	{
		for(int j=0;j<m;j++)
		{
			char text[14] = "Input a[";
			char ek[2];
			ek[0] = (char)(i+'0');
    1e7c:	e0 2e       	mov	r14, r16
    1e7e:	f1 2e       	mov	r15, r17

	
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
    1e80:	14 14       	cp	r1, r4
    1e82:	15 04       	cpc	r1, r5
    1e84:	0c f0       	brlt	.+2      	; 0x1e88 <_Z5gaussv+0x162>
    1e86:	6e c0       	rjmp	.+220    	; 0x1f64 <_Z5gaussv+0x23e>
    1e88:	81 2c       	mov	r8, r1
    1e8a:	91 2c       	mov	r9, r1
    1e8c:	0f 2e       	mov	r0, r31
    1e8e:	f0 e3       	ldi	r31, 0x30	; 48
    1e90:	3f 2e       	mov	r3, r31
    1e92:	f0 2d       	mov	r31, r0
    1e94:	a1 2c       	mov	r10, r1
    1e96:	b1 2c       	mov	r11, r1
    1e98:	8e 2d       	mov	r24, r14
    1e9a:	e3 2c       	mov	r14, r3
    1e9c:	9f 2d       	mov	r25, r15
    1e9e:	f6 2c       	mov	r15, r6
    1ea0:	69 2e       	mov	r6, r25
    1ea2:	38 2e       	mov	r3, r24
		{
			char text[14] = "Input a[";
    1ea4:	89 e0       	ldi	r24, 0x09	; 9
    1ea6:	e6 ed       	ldi	r30, 0xD6	; 214
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	de 01       	movw	r26, r28
    1eac:	5c 96       	adiw	r26, 0x1c	; 28
    1eae:	01 90       	ld	r0, Z+
    1eb0:	0d 92       	st	X+, r0
    1eb2:	8a 95       	dec	r24
    1eb4:	e1 f7       	brne	.-8      	; 0x1eae <_Z5gaussv+0x188>
    1eb6:	a0 96       	adiw	r28, 0x20	; 32
    1eb8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1eba:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ebc:	a0 97       	sbiw	r28, 0x20	; 32
    1ebe:	25 e0       	ldi	r18, 0x05	; 5
    1ec0:	11 92       	st	Z+, r1
    1ec2:	2a 95       	dec	r18
    1ec4:	e9 f7       	brne	.-6      	; 0x1ec0 <_Z5gaussv+0x19a>
			char ek[2];
			ek[0] = (char)(i+'0');
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	f0 82       	st	Z, r15
			ek[1] = 0;
    1eca:	11 82       	std	Z+1, r1	; 0x01
			strcat(text , ek);
    1ecc:	63 2d       	mov	r22, r3
    1ece:	76 2d       	mov	r23, r6
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	4c 96       	adiw	r24, 0x1c	; 28
    1ed4:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <strcat>
			ek[0] = ']';
    1ed8:	f8 01       	movw	r30, r16
    1eda:	70 82       	st	Z, r7
			strcat(text , ek);
    1edc:	63 2d       	mov	r22, r3
    1ede:	76 2d       	mov	r23, r6
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	4c 96       	adiw	r24, 0x1c	; 28
    1ee4:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <strcat>
			ek[0] = '[';
    1ee8:	f8 01       	movw	r30, r16
    1eea:	20 82       	st	Z, r2
			strcat(text , ek);
    1eec:	63 2d       	mov	r22, r3
    1eee:	76 2d       	mov	r23, r6
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	4c 96       	adiw	r24, 0x1c	; 28
    1ef4:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <strcat>
			ek[0] = (char)(j+'0');
    1ef8:	f8 01       	movw	r30, r16
    1efa:	e0 82       	st	Z, r14
			strcat(text , ek);
    1efc:	63 2d       	mov	r22, r3
    1efe:	76 2d       	mov	r23, r6
    1f00:	ce 01       	movw	r24, r28
    1f02:	4c 96       	adiw	r24, 0x1c	; 28
    1f04:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <strcat>
			ek[0] = ']';
    1f08:	f8 01       	movw	r30, r16
    1f0a:	70 82       	st	Z, r7
			strcat(text , ek);
    1f0c:	63 2d       	mov	r22, r3
    1f0e:	76 2d       	mov	r23, r6
    1f10:	ce 01       	movw	r24, r28
    1f12:	4c 96       	adiw	r24, 0x1c	; 28
    1f14:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <strcat>
			show_text(text,1);
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	4c 96       	adiw	r24, 0x1c	; 28
    1f20:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
			a[i][j] = double_num_input(12);
    1f24:	a2 96       	adiw	r28, 0x22	; 34
    1f26:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f28:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f2a:	a2 97       	sbiw	r28, 0x22	; 34
    1f2c:	c0 80       	ld	r12, Z
    1f2e:	d1 80       	ldd	r13, Z+1	; 0x01
    1f30:	c8 0c       	add	r12, r8
    1f32:	d9 1c       	adc	r13, r9
    1f34:	8c e0       	ldi	r24, 0x0C	; 12
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_Z16double_num_inputi>
    1f3c:	f6 01       	movw	r30, r12
    1f3e:	60 83       	st	Z, r22
    1f40:	71 83       	std	Z+1, r23	; 0x01
    1f42:	82 83       	std	Z+2, r24	; 0x02
    1f44:	93 83       	std	Z+3, r25	; 0x03

	
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
    1f46:	ff ef       	ldi	r31, 0xFF	; 255
    1f48:	af 1a       	sub	r10, r31
    1f4a:	bf 0a       	sbc	r11, r31
    1f4c:	e3 94       	inc	r14
    1f4e:	24 e0       	ldi	r18, 0x04	; 4
    1f50:	82 0e       	add	r8, r18
    1f52:	91 1c       	adc	r9, r1
    1f54:	4a 14       	cp	r4, r10
    1f56:	5b 04       	cpc	r5, r11
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <_Z5gaussv+0x236>
    1f5a:	a4 cf       	rjmp	.-184    	; 0x1ea4 <_Z5gaussv+0x17e>
    1f5c:	e3 2c       	mov	r14, r3
    1f5e:	86 2d       	mov	r24, r6
    1f60:	6f 2c       	mov	r6, r15
    1f62:	f8 2e       	mov	r15, r24
			strcat(text , ek);
			show_text(text,1);
			a[i][j] = double_num_input(12);
		}
		{
			char text[18] = "Input column d[";
    1f64:	80 e1       	ldi	r24, 0x10	; 16
    1f66:	e4 ee       	ldi	r30, 0xE4	; 228
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	de 01       	movw	r26, r28
    1f6c:	5c 96       	adiw	r26, 0x1c	; 28
    1f6e:	01 90       	ld	r0, Z+
    1f70:	0d 92       	st	X+, r0
    1f72:	8a 95       	dec	r24
    1f74:	e1 f7       	brne	.-8      	; 0x1f6e <_Z5gaussv+0x248>
    1f76:	1d a6       	std	Y+45, r1	; 0x2d
    1f78:	1c a6       	std	Y+44, r1	; 0x2c
			char ek[2];
			ek[0] = (char)(i+'0');
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	60 82       	st	Z, r6
			ek[1] = 0;
    1f7e:	11 82       	std	Z+1, r1	; 0x01
			strcat(text , ek);
    1f80:	6e 2d       	mov	r22, r14
    1f82:	7f 2d       	mov	r23, r15
    1f84:	ce 01       	movw	r24, r28
    1f86:	4c 96       	adiw	r24, 0x1c	; 28
    1f88:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <strcat>
			ek[0] = ']';
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	70 82       	st	Z, r7
			strcat(text , ek);
    1f90:	6e 2d       	mov	r22, r14
    1f92:	7f 2d       	mov	r23, r15
    1f94:	ce 01       	movw	r24, r28
    1f96:	4c 96       	adiw	r24, 0x1c	; 28
    1f98:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <strcat>
			show_text(text,1);
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	4c 96       	adiw	r24, 0x1c	; 28
    1fa4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
			a[i][m] = double_num_input(12);
    1fa8:	a2 96       	adiw	r28, 0x22	; 34
    1faa:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fac:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fae:	a2 97       	sbiw	r28, 0x22	; 34
    1fb0:	c1 90       	ld	r12, Z+
    1fb2:	d1 90       	ld	r13, Z+
    1fb4:	a2 96       	adiw	r28, 0x22	; 34
    1fb6:	ff af       	std	Y+63, r31	; 0x3f
    1fb8:	ee af       	std	Y+62, r30	; 0x3e
    1fba:	a2 97       	sbiw	r28, 0x22	; 34
    1fbc:	a4 96       	adiw	r28, 0x24	; 36
    1fbe:	2e ad       	ldd	r18, Y+62	; 0x3e
    1fc0:	3f ad       	ldd	r19, Y+63	; 0x3f
    1fc2:	a4 97       	sbiw	r28, 0x24	; 36
    1fc4:	c2 0e       	add	r12, r18
    1fc6:	d3 1e       	adc	r13, r19
    1fc8:	8c e0       	ldi	r24, 0x0C	; 12
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_Z16double_num_inputi>
    1fd0:	f6 01       	movw	r30, r12
    1fd2:	60 83       	st	Z, r22
    1fd4:	71 83       	std	Z+1, r23	; 0x01
    1fd6:	82 83       	std	Z+2, r24	; 0x02
    1fd8:	93 83       	std	Z+3, r25	; 0x03
    1fda:	63 94       	inc	r6
	for(int i=0; i< n; i++)
	a[i] = (double*) malloc((m+1)*sizeof(double));

	
	
	for(int i=0;i<n;i++)
    1fdc:	a2 96       	adiw	r28, 0x22	; 34
    1fde:	2e ad       	ldd	r18, Y+62	; 0x3e
    1fe0:	3f ad       	ldd	r19, Y+63	; 0x3f
    1fe2:	a2 97       	sbiw	r28, 0x22	; 34
    1fe4:	a6 96       	adiw	r28, 0x26	; 38
    1fe6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fe8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fea:	a6 97       	sbiw	r28, 0x26	; 38
    1fec:	28 17       	cp	r18, r24
    1fee:	39 07       	cpc	r19, r25
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <_Z5gaussv+0x2ce>
    1ff2:	46 cf       	rjmp	.-372    	; 0x1e80 <_Z5gaussv+0x15a>
			strcat(text , ek);
			show_text(text,1);
			a[i][m] = double_num_input(12);
		}
	}
	int koto = gauss_algo(n,m,ans,a);
    1ff4:	a8 96       	adiw	r28, 0x28	; 40
    1ff6:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ff8:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ffa:	a8 97       	sbiw	r28, 0x28	; 40
    1ffc:	ad 96       	adiw	r28, 0x2d	; 45
    1ffe:	4f ad       	ldd	r20, Y+63	; 0x3f
    2000:	ad 97       	sbiw	r28, 0x2d	; 45
    2002:	ae 96       	adiw	r28, 0x2e	; 46
    2004:	5f ad       	ldd	r21, Y+63	; 0x3f
    2006:	ae 97       	sbiw	r28, 0x2e	; 46
    2008:	b2 01       	movw	r22, r4
    200a:	aa 96       	adiw	r28, 0x2a	; 42
    200c:	8e ad       	ldd	r24, Y+62	; 0x3e
    200e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2010:	aa 97       	sbiw	r28, 0x2a	; 42
    2012:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_Z10gauss_algoiiPdPS_>
	if(koto==0)
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	81 f4       	brne	.+32     	; 0x203a <_Z5gaussv+0x314>
	{
		strcpy(text1,"No Solution!");
    201a:	8d e0       	ldi	r24, 0x0D	; 13
    201c:	ec ed       	ldi	r30, 0xDC	; 220
    201e:	f1 e0       	ldi	r31, 0x01	; 1
    2020:	de 01       	movw	r26, r28
    2022:	11 96       	adiw	r26, 0x01	; 1
    2024:	01 90       	ld	r0, Z+
    2026:	0d 92       	st	X+, r0
    2028:	8a 95       	dec	r24
    202a:	e1 f7       	brne	.-8      	; 0x2024 <_Z5gaussv+0x2fe>
		show_text(text1,1);
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	ce 01       	movw	r24, r28
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
    2038:	f1 c0       	rjmp	.+482    	; 0x221c <_Z5gaussv+0x4f6>
		return;
	}
	else if(koto==1)
    203a:	81 30       	cpi	r24, 0x01	; 1
    203c:	91 05       	cpc	r25, r1
    203e:	69 f4       	brne	.+26     	; 0x205a <_Z5gaussv+0x334>
    2040:	9f ef       	ldi	r25, 0xFF	; 255
    2042:	ee e9       	ldi	r30, 0x9E	; 158
    2044:	f4 e2       	ldi	r31, 0x24	; 36
    2046:	91 50       	subi	r25, 0x01	; 1
    2048:	e0 40       	sbci	r30, 0x00	; 0
    204a:	f0 40       	sbci	r31, 0x00	; 0
    204c:	e1 f7       	brne	.-8      	; 0x2046 <_Z5gaussv+0x320>
    204e:	00 c0       	rjmp	.+0      	; 0x2050 <_Z5gaussv+0x32a>
    2050:	00 00       	nop
		strcpy(text1,"Infinite Solution!");
		show_text(text1,1);
		_delay_ms(1500);
	}
	
	for(int i=0;i<m;i++)
    2052:	14 14       	cp	r1, r4
    2054:	15 04       	cpc	r1, r5
    2056:	2c f1       	brlt	.+74     	; 0x20a2 <_Z5gaussv+0x37c>
    2058:	1b c0       	rjmp	.+54     	; 0x2090 <_Z5gaussv+0x36a>
	}
	else if(koto==1)
	{
		_delay_ms(1500);
	}
	else if(koto==2)
    205a:	02 97       	sbiw	r24, 0x02	; 2
    205c:	d1 f7       	brne	.-12     	; 0x2052 <_Z5gaussv+0x32c>
	{
		strcpy(text1,"Infinite Solution!");
    205e:	83 e1       	ldi	r24, 0x13	; 19
    2060:	e9 ee       	ldi	r30, 0xE9	; 233
    2062:	f1 e0       	ldi	r31, 0x01	; 1
    2064:	de 01       	movw	r26, r28
    2066:	11 96       	adiw	r26, 0x01	; 1
    2068:	01 90       	ld	r0, Z+
    206a:	0d 92       	st	X+, r0
    206c:	8a 95       	dec	r24
    206e:	e1 f7       	brne	.-8      	; 0x2068 <_Z5gaussv+0x342>
		show_text(text1,1);
    2070:	61 e0       	ldi	r22, 0x01	; 1
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	ce 01       	movw	r24, r28
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
    207c:	2f ef       	ldi	r18, 0xFF	; 255
    207e:	3e e9       	ldi	r19, 0x9E	; 158
    2080:	84 e2       	ldi	r24, 0x24	; 36
    2082:	21 50       	subi	r18, 0x01	; 1
    2084:	30 40       	sbci	r19, 0x00	; 0
    2086:	80 40       	sbci	r24, 0x00	; 0
    2088:	e1 f7       	brne	.-8      	; 0x2082 <_Z5gaussv+0x35c>
    208a:	00 c0       	rjmp	.+0      	; 0x208c <_Z5gaussv+0x366>
    208c:	00 00       	nop
    208e:	e1 cf       	rjmp	.-62     	; 0x2052 <_Z5gaussv+0x32c>
				break;
			}
		}
		_delay_ms(500);
	}
	for(int i = 0; i < n; i++)
    2090:	aa 96       	adiw	r28, 0x2a	; 42
    2092:	ee ad       	ldd	r30, Y+62	; 0x3e
    2094:	ff ad       	ldd	r31, Y+63	; 0x3f
    2096:	aa 97       	sbiw	r28, 0x2a	; 42
    2098:	1e 16       	cp	r1, r30
    209a:	1f 06       	cpc	r1, r31
    209c:	0c f4       	brge	.+2      	; 0x20a0 <_Z5gaussv+0x37a>
    209e:	9c c0       	rjmp	.+312    	; 0x21d8 <_Z5gaussv+0x4b2>
    20a0:	af c0       	rjmp	.+350    	; 0x2200 <_Z5gaussv+0x4da>
    20a2:	ad 96       	adiw	r28, 0x2d	; 45
    20a4:	af ac       	ldd	r10, Y+63	; 0x3f
    20a6:	ad 97       	sbiw	r28, 0x2d	; 45
    20a8:	ae 96       	adiw	r28, 0x2e	; 46
    20aa:	bf ac       	ldd	r11, Y+63	; 0x3f
    20ac:	ae 97       	sbiw	r28, 0x2e	; 46
		strcpy(text1,"Infinite Solution!");
		show_text(text1,1);
		_delay_ms(1500);
	}
	
	for(int i=0;i<m;i++)
    20ae:	0f 2e       	mov	r0, r31
    20b0:	f0 e3       	ldi	r31, 0x30	; 48
    20b2:	7f 2e       	mov	r7, r31
    20b4:	f0 2d       	mov	r31, r0
    20b6:	c1 2c       	mov	r12, r1
    20b8:	d1 2c       	mov	r13, r1
	{
		char text[14] = "Ans x[";
    20ba:	0f 2e       	mov	r0, r31
    20bc:	f7 e0       	ldi	r31, 0x07	; 7
    20be:	3f 2e       	mov	r3, r31
    20c0:	f0 2d       	mov	r31, r0
    20c2:	0f 2e       	mov	r0, r31
    20c4:	fe e4       	ldi	r31, 0x4E	; 78
    20c6:	8f 2e       	mov	r8, r31
    20c8:	91 2c       	mov	r9, r1
    20ca:	f0 2d       	mov	r31, r0
    20cc:	8c 0e       	add	r8, r28
    20ce:	9d 1e       	adc	r9, r29
    20d0:	f7 e0       	ldi	r31, 0x07	; 7
    20d2:	8f 0e       	add	r8, r31
    20d4:	91 1c       	adc	r9, r1
		char ek[2];
		ek[0] = (char)(i+'0');
		ek[1] = 0;
		strcat(text , ek);
		ek[0] = ']';
    20d6:	0f 2e       	mov	r0, r31
    20d8:	fd e5       	ldi	r31, 0x5D	; 93
    20da:	6f 2e       	mov	r6, r31
    20dc:	f0 2d       	mov	r31, r0
		strcat(text , ek);
		show_text(text,1);
    20de:	ee 24       	eor	r14, r14
    20e0:	e3 94       	inc	r14
    20e2:	f1 2c       	mov	r15, r1
		_delay_ms(1500);
	}
	
	for(int i=0;i<m;i++)
	{
		char text[14] = "Ans x[";
    20e4:	87 e0       	ldi	r24, 0x07	; 7
    20e6:	e6 ef       	ldi	r30, 0xF6	; 246
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	de 01       	movw	r26, r28
    20ec:	a2 5b       	subi	r26, 0xB2	; 178
    20ee:	bf 4f       	sbci	r27, 0xFF	; 255
    20f0:	01 90       	ld	r0, Z+
    20f2:	0d 92       	st	X+, r0
    20f4:	8a 95       	dec	r24
    20f6:	e1 f7       	brne	.-8      	; 0x20f0 <_Z5gaussv+0x3ca>
    20f8:	f4 01       	movw	r30, r8
    20fa:	23 2d       	mov	r18, r3
    20fc:	11 92       	st	Z+, r1
    20fe:	2a 95       	dec	r18
    2100:	e9 f7       	brne	.-6      	; 0x20fc <_Z5gaussv+0x3d6>
		char ek[2];
		ek[0] = (char)(i+'0');
    2102:	6d 96       	adiw	r28, 0x1d	; 29
    2104:	7f ae       	std	Y+63, r7	; 0x3f
    2106:	6d 97       	sbiw	r28, 0x1d	; 29
		ek[1] = 0;
    2108:	6e 96       	adiw	r28, 0x1e	; 30
    210a:	1f ae       	std	Y+63, r1	; 0x3f
    210c:	6e 97       	sbiw	r28, 0x1e	; 30
		strcat(text , ek);
    210e:	be 01       	movw	r22, r28
    2110:	64 5a       	subi	r22, 0xA4	; 164
    2112:	7f 4f       	sbci	r23, 0xFF	; 255
    2114:	ce 01       	movw	r24, r28
    2116:	82 5b       	subi	r24, 0xB2	; 178
    2118:	9f 4f       	sbci	r25, 0xFF	; 255
    211a:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <strcat>
		ek[0] = ']';
    211e:	6d 96       	adiw	r28, 0x1d	; 29
    2120:	6f ae       	std	Y+63, r6	; 0x3f
    2122:	6d 97       	sbiw	r28, 0x1d	; 29
		strcat(text , ek);
    2124:	be 01       	movw	r22, r28
    2126:	64 5a       	subi	r22, 0xA4	; 164
    2128:	7f 4f       	sbci	r23, 0xFF	; 255
    212a:	ce 01       	movw	r24, r28
    212c:	82 5b       	subi	r24, 0xB2	; 178
    212e:	9f 4f       	sbci	r25, 0xFF	; 255
    2130:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <strcat>
		show_text(text,1);
    2134:	b7 01       	movw	r22, r14
    2136:	ce 01       	movw	r24, r28
    2138:	82 5b       	subi	r24, 0xB2	; 178
    213a:	9f 4f       	sbci	r25, 0xFF	; 255
    213c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
		char s[50];
		dtostrf(ans[i],1,2,s);
    2140:	f5 01       	movw	r30, r10
    2142:	61 91       	ld	r22, Z+
    2144:	71 91       	ld	r23, Z+
    2146:	81 91       	ld	r24, Z+
    2148:	91 91       	ld	r25, Z+
    214a:	5f 01       	movw	r10, r30
    214c:	8e 01       	movw	r16, r28
    214e:	04 5e       	subi	r16, 0xE4	; 228
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	22 e0       	ldi	r18, 0x02	; 2
    2154:	41 e0       	ldi	r20, 0x01	; 1
    2156:	0e 94 81 23 	call	0x4702	; 0x4702 <dtostrf>
		show_text(s,12);
    215a:	6c e0       	ldi	r22, 0x0C	; 12
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	c8 01       	movw	r24, r16
    2160:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
		//wait for equal
		bool done = 0;
		while (1)
		{
			for(int c=4;c<8;c++)
    2164:	44 e0       	ldi	r20, 0x04	; 4
    2166:	50 e0       	ldi	r21, 0x00	; 0
			{
				PORTB=1<<c;
    2168:	c7 01       	movw	r24, r14
    216a:	04 2e       	mov	r0, r20
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <_Z5gaussv+0x44c>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <_Z5gaussv+0x448>
    2176:	88 bb       	out	0x18, r24	; 24
    2178:	fa 01       	movw	r30, r20
    217a:	ee 53       	subi	r30, 0x3E	; 62
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
				for(int r=0;r<4;r++)
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
				{
					if(PINB&(1<<r))
    2182:	86 b3       	in	r24, 0x16	; 22
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	02 2e       	mov	r0, r18
    2188:	02 c0       	rjmp	.+4      	; 0x218e <_Z5gaussv+0x468>
    218a:	95 95       	asr	r25
    218c:	87 95       	ror	r24
    218e:	0a 94       	dec	r0
    2190:	e2 f7       	brpl	.-8      	; 0x218a <_Z5gaussv+0x464>
    2192:	80 ff       	sbrs	r24, 0
    2194:	03 c0       	rjmp	.+6      	; 0x219c <_Z5gaussv+0x476>
					{
						if(mat[r][c-4]=='=')
    2196:	80 81       	ld	r24, Z
    2198:	8d 33       	cpi	r24, 0x3D	; 61
    219a:	61 f0       	breq	.+24     	; 0x21b4 <_Z5gaussv+0x48e>
		while (1)
		{
			for(int c=4;c<8;c++)
			{
				PORTB=1<<c;
				for(int r=0;r<4;r++)
    219c:	2f 5f       	subi	r18, 0xFF	; 255
    219e:	3f 4f       	sbci	r19, 0xFF	; 255
    21a0:	34 96       	adiw	r30, 0x04	; 4
    21a2:	24 30       	cpi	r18, 0x04	; 4
    21a4:	31 05       	cpc	r19, r1
    21a6:	69 f7       	brne	.-38     	; 0x2182 <_Z5gaussv+0x45c>
		show_text(s,12);
		//wait for equal
		bool done = 0;
		while (1)
		{
			for(int c=4;c<8;c++)
    21a8:	4f 5f       	subi	r20, 0xFF	; 255
    21aa:	5f 4f       	sbci	r21, 0xFF	; 255
    21ac:	48 30       	cpi	r20, 0x08	; 8
    21ae:	51 05       	cpc	r21, r1
    21b0:	d9 f6       	brne	.-74     	; 0x2168 <_Z5gaussv+0x442>
    21b2:	d8 cf       	rjmp	.-80     	; 0x2164 <_Z5gaussv+0x43e>
    21b4:	ff ef       	ldi	r31, 0xFF	; 255
    21b6:	24 e3       	ldi	r18, 0x34	; 52
    21b8:	3c e0       	ldi	r19, 0x0C	; 12
    21ba:	f1 50       	subi	r31, 0x01	; 1
    21bc:	20 40       	sbci	r18, 0x00	; 0
    21be:	30 40       	sbci	r19, 0x00	; 0
    21c0:	e1 f7       	brne	.-8      	; 0x21ba <_Z5gaussv+0x494>
    21c2:	00 c0       	rjmp	.+0      	; 0x21c4 <_Z5gaussv+0x49e>
    21c4:	00 00       	nop
		strcpy(text1,"Infinite Solution!");
		show_text(text1,1);
		_delay_ms(1500);
	}
	
	for(int i=0;i<m;i++)
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
    21c8:	c8 1a       	sub	r12, r24
    21ca:	d8 0a       	sbc	r13, r24
    21cc:	73 94       	inc	r7
    21ce:	4c 14       	cp	r4, r12
    21d0:	5d 04       	cpc	r5, r13
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <_Z5gaussv+0x4b0>
    21d4:	87 cf       	rjmp	.-242    	; 0x20e4 <_Z5gaussv+0x3be>
    21d6:	5c cf       	rjmp	.-328    	; 0x2090 <_Z5gaussv+0x36a>
    21d8:	a8 96       	adiw	r28, 0x28	; 40
    21da:	0e ad       	ldd	r16, Y+62	; 0x3e
    21dc:	1f ad       	ldd	r17, Y+63	; 0x3f
    21de:	a8 97       	sbiw	r28, 0x28	; 40
    21e0:	78 01       	movw	r14, r16
    21e2:	ac 96       	adiw	r28, 0x2c	; 44
    21e4:	ee ad       	ldd	r30, Y+62	; 0x3e
    21e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    21e8:	ac 97       	sbiw	r28, 0x2c	; 44
    21ea:	ee 0e       	add	r14, r30
    21ec:	ff 1e       	adc	r15, r31
			}
		}
		_delay_ms(500);
	}
	for(int i = 0; i < n; i++)
	free(a[i]);
    21ee:	f8 01       	movw	r30, r16
    21f0:	81 91       	ld	r24, Z+
    21f2:	91 91       	ld	r25, Z+
    21f4:	8f 01       	movw	r16, r30
    21f6:	0e 94 39 24 	call	0x4872	; 0x4872 <free>
				break;
			}
		}
		_delay_ms(500);
	}
	for(int i = 0; i < n; i++)
    21fa:	e0 16       	cp	r14, r16
    21fc:	f1 06       	cpc	r15, r17
    21fe:	b9 f7       	brne	.-18     	; 0x21ee <_Z5gaussv+0x4c8>
	free(a[i]);
	free(a);
    2200:	a8 96       	adiw	r28, 0x28	; 40
    2202:	8e ad       	ldd	r24, Y+62	; 0x3e
    2204:	9f ad       	ldd	r25, Y+63	; 0x3f
    2206:	a8 97       	sbiw	r28, 0x28	; 40
    2208:	0e 94 39 24 	call	0x4872	; 0x4872 <free>

	free(ans);
    220c:	ad 96       	adiw	r28, 0x2d	; 45
    220e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2210:	ad 97       	sbiw	r28, 0x2d	; 45
    2212:	ae 96       	adiw	r28, 0x2e	; 46
    2214:	9f ad       	ldd	r25, Y+63	; 0x3f
    2216:	ae 97       	sbiw	r28, 0x2e	; 46
    2218:	0e 94 39 24 	call	0x4872	; 0x4872 <free>
    221c:	c3 59       	subi	r28, 0x93	; 147
    221e:	df 4f       	sbci	r29, 0xFF	; 255
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	1f 91       	pop	r17
    2230:	0f 91       	pop	r16
    2232:	ff 90       	pop	r15
    2234:	ef 90       	pop	r14
    2236:	df 90       	pop	r13
    2238:	cf 90       	pop	r12
    223a:	bf 90       	pop	r11
    223c:	af 90       	pop	r10
    223e:	9f 90       	pop	r9
    2240:	8f 90       	pop	r8
    2242:	7f 90       	pop	r7
    2244:	6f 90       	pop	r6
    2246:	5f 90       	pop	r5
    2248:	4f 90       	pop	r4
    224a:	3f 90       	pop	r3
    224c:	2f 90       	pop	r2
    224e:	08 95       	ret

00002250 <_Z19simpson_integrationPcdd>:



double simpson_integration(char str[] , double a, double b){
    2250:	2f 92       	push	r2
    2252:	3f 92       	push	r3
    2254:	4f 92       	push	r4
    2256:	5f 92       	push	r5
    2258:	6f 92       	push	r6
    225a:	7f 92       	push	r7
    225c:	8f 92       	push	r8
    225e:	9f 92       	push	r9
    2260:	af 92       	push	r10
    2262:	bf 92       	push	r11
    2264:	cf 92       	push	r12
    2266:	df 92       	push	r13
    2268:	ef 92       	push	r14
    226a:	ff 92       	push	r15
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	28 97       	sbiw	r28, 0x08	; 8
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	7c 01       	movw	r14, r24
    2286:	2a 01       	movw	r4, r20
    2288:	3b 01       	movw	r6, r22
    228a:	48 01       	movw	r8, r16
    228c:	59 01       	movw	r10, r18
	const int N = 50;
	double h = (b - a) / N;
    228e:	9a 01       	movw	r18, r20
    2290:	ab 01       	movw	r20, r22
    2292:	c5 01       	movw	r24, r10
    2294:	b4 01       	movw	r22, r8
    2296:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	48 e4       	ldi	r20, 0x48	; 72
    22a0:	52 e4       	ldi	r21, 0x42	; 66
    22a2:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    22a6:	69 83       	std	Y+1, r22	; 0x01
    22a8:	7a 83       	std	Y+2, r23	; 0x02
    22aa:	8b 83       	std	Y+3, r24	; 0x03
    22ac:	9c 83       	std	Y+4, r25	; 0x04
	double s = evaluate_function(str, a) + evaluate_function(str , b);
    22ae:	b3 01       	movw	r22, r6
    22b0:	a2 01       	movw	r20, r4
    22b2:	c7 01       	movw	r24, r14
    22b4:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    22b8:	6d 83       	std	Y+5, r22	; 0x05
    22ba:	7e 83       	std	Y+6, r23	; 0x06
    22bc:	8f 83       	std	Y+7, r24	; 0x07
    22be:	98 87       	std	Y+8, r25	; 0x08
    22c0:	b5 01       	movw	r22, r10
    22c2:	a4 01       	movw	r20, r8
    22c4:	c7 01       	movw	r24, r14
    22c6:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    22ca:	9b 01       	movw	r18, r22
    22cc:	ac 01       	movw	r20, r24
    22ce:	6d 81       	ldd	r22, Y+5	; 0x05
    22d0:	7e 81       	ldd	r23, Y+6	; 0x06
    22d2:	8f 81       	ldd	r24, Y+7	; 0x07
    22d4:	98 85       	ldd	r25, Y+8	; 0x08
    22d6:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    22da:	4b 01       	movw	r8, r22
    22dc:	5c 01       	movw	r10, r24
	for (int i = 1; i <= N - 1; ++i) {
		double x = a + h * i;
		s += evaluate_function(str , x) * ((i & 1) ? 4 : 2);
    22de:	29 81       	ldd	r18, Y+1	; 0x01
    22e0:	3a 81       	ldd	r19, Y+2	; 0x02
    22e2:	4b 81       	ldd	r20, Y+3	; 0x03
    22e4:	5c 81       	ldd	r21, Y+4	; 0x04
    22e6:	c3 01       	movw	r24, r6
    22e8:	b2 01       	movw	r22, r4
    22ea:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    22ee:	ab 01       	movw	r20, r22
    22f0:	bc 01       	movw	r22, r24
    22f2:	c7 01       	movw	r24, r14
    22f4:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    22f8:	9b 01       	movw	r18, r22
    22fa:	ac 01       	movw	r20, r24

double simpson_integration(char str[] , double a, double b){
	const int N = 50;
	double h = (b - a) / N;
	double s = evaluate_function(str, a) + evaluate_function(str , b);
	for (int i = 1; i <= N - 1; ++i) {
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
		double x = a + h * i;
		s += evaluate_function(str , x) * ((i & 1) ? 4 : 2);
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	a0 e0       	ldi	r26, 0x00	; 0
    2304:	f0 e8       	ldi	r31, 0x80	; 128
    2306:	e0 e4       	ldi	r30, 0x40	; 64
    2308:	d1 2c       	mov	r13, r1
    230a:	00 e8       	ldi	r16, 0x80	; 128
    230c:	c1 2c       	mov	r12, r1
    230e:	31 2c       	mov	r3, r1
    2310:	21 2c       	mov	r2, r1
    2312:	10 e4       	ldi	r17, 0x40	; 64
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	25 c0       	rjmp	.+74     	; 0x2364 <_Z19simpson_integrationPcdd+0x114>
    231a:	2d 81       	ldd	r18, Y+5	; 0x05
    231c:	3e 81       	ldd	r19, Y+6	; 0x06
    231e:	b9 01       	movw	r22, r18
    2320:	33 0f       	add	r19, r19
    2322:	88 0b       	sbc	r24, r24
    2324:	99 0b       	sbc	r25, r25
    2326:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__floatsisf>
    232a:	29 81       	ldd	r18, Y+1	; 0x01
    232c:	3a 81       	ldd	r19, Y+2	; 0x02
    232e:	4b 81       	ldd	r20, Y+3	; 0x03
    2330:	5c 81       	ldd	r21, Y+4	; 0x04
    2332:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    2336:	a3 01       	movw	r20, r6
    2338:	92 01       	movw	r18, r4
    233a:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    233e:	ab 01       	movw	r20, r22
    2340:	bc 01       	movw	r22, r24
    2342:	c7 01       	movw	r24, r14
    2344:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    2348:	9b 01       	movw	r18, r22
    234a:	ac 01       	movw	r20, r24
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	80 fd       	sbrc	r24, 0
    2350:	05 c0       	rjmp	.+10     	; 0x235c <_Z19simpson_integrationPcdd+0x10c>
    2352:	bc 2d       	mov	r27, r12
    2354:	a3 2d       	mov	r26, r3
    2356:	f2 2d       	mov	r31, r2
    2358:	e1 2f       	mov	r30, r17
    235a:	04 c0       	rjmp	.+8      	; 0x2364 <_Z19simpson_integrationPcdd+0x114>
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	ad 2d       	mov	r26, r13
    2360:	f0 2f       	mov	r31, r16
    2362:	e0 e4       	ldi	r30, 0x40	; 64
    2364:	6b 2f       	mov	r22, r27
    2366:	7a 2f       	mov	r23, r26
    2368:	8f 2f       	mov	r24, r31
    236a:	9e 2f       	mov	r25, r30
    236c:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    2370:	9b 01       	movw	r18, r22
    2372:	ac 01       	movw	r20, r24
    2374:	c5 01       	movw	r24, r10
    2376:	b4 01       	movw	r22, r8
    2378:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    237c:	4b 01       	movw	r8, r22
    237e:	5c 01       	movw	r10, r24

double simpson_integration(char str[] , double a, double b){
	const int N = 50;
	double h = (b - a) / N;
	double s = evaluate_function(str, a) + evaluate_function(str , b);
	for (int i = 1; i <= N - 1; ++i) {
    2380:	2d 81       	ldd	r18, Y+5	; 0x05
    2382:	3e 81       	ldd	r19, Y+6	; 0x06
    2384:	2f 5f       	subi	r18, 0xFF	; 255
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	3e 83       	std	Y+6, r19	; 0x06
    238a:	2d 83       	std	Y+5, r18	; 0x05
    238c:	22 33       	cpi	r18, 0x32	; 50
    238e:	31 05       	cpc	r19, r1
    2390:	21 f6       	brne	.-120    	; 0x231a <_Z19simpson_integrationPcdd+0xca>
		double x = a + h * i;
		s += evaluate_function(str , x) * ((i & 1) ? 4 : 2);
	}
	s *= h / 3;
	return s;
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e4       	ldi	r20, 0x40	; 64
    2398:	50 e4       	ldi	r21, 0x40	; 64
    239a:	69 81       	ldd	r22, Y+1	; 0x01
    239c:	7a 81       	ldd	r23, Y+2	; 0x02
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    23a6:	a5 01       	movw	r20, r10
    23a8:	94 01       	movw	r18, r8
    23aa:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
}
    23ae:	28 96       	adiw	r28, 0x08	; 8
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	ff 90       	pop	r15
    23c4:	ef 90       	pop	r14
    23c6:	df 90       	pop	r13
    23c8:	cf 90       	pop	r12
    23ca:	bf 90       	pop	r11
    23cc:	af 90       	pop	r10
    23ce:	9f 90       	pop	r9
    23d0:	8f 90       	pop	r8
    23d2:	7f 90       	pop	r7
    23d4:	6f 90       	pop	r6
    23d6:	5f 90       	pop	r5
    23d8:	4f 90       	pop	r4
    23da:	3f 90       	pop	r3
    23dc:	2f 90       	pop	r2
    23de:	08 95       	ret

000023e0 <_Z7simpsonv>:
void simpson()
{
    23e0:	2f 92       	push	r2
    23e2:	3f 92       	push	r3
    23e4:	4f 92       	push	r4
    23e6:	5f 92       	push	r5
    23e8:	6f 92       	push	r6
    23ea:	7f 92       	push	r7
    23ec:	8f 92       	push	r8
    23ee:	9f 92       	push	r9
    23f0:	af 92       	push	r10
    23f2:	bf 92       	push	r11
    23f4:	cf 92       	push	r12
    23f6:	df 92       	push	r13
    23f8:	ef 92       	push	r14
    23fa:	ff 92       	push	r15
    23fc:	0f 93       	push	r16
    23fe:	1f 93       	push	r17
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	ca 55       	subi	r28, 0x5A	; 90
    240a:	d1 09       	sbc	r29, r1
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    2416:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	char text1[] = "Input Function of x:";
    241a:	85 e1       	ldi	r24, 0x15	; 21
    241c:	e2 e3       	ldi	r30, 0x32	; 50
    241e:	f2 e0       	ldi	r31, 0x02	; 2
    2420:	de 01       	movw	r26, r28
    2422:	11 96       	adiw	r26, 0x01	; 1
    2424:	01 90       	ld	r0, Z+
    2426:	0d 92       	st	X+, r0
    2428:	8a 95       	dec	r24
    242a:	e1 f7       	brne	.-8      	; 0x2424 <_Z7simpsonv+0x44>
	char text2[] = "Input lower limit:";
    242c:	83 e1       	ldi	r24, 0x13	; 19
    242e:	e7 e4       	ldi	r30, 0x47	; 71
    2430:	f2 e0       	ldi	r31, 0x02	; 2
    2432:	de 01       	movw	r26, r28
    2434:	56 96       	adiw	r26, 0x16	; 22
    2436:	01 90       	ld	r0, Z+
    2438:	0d 92       	st	X+, r0
    243a:	8a 95       	dec	r24
    243c:	e1 f7       	brne	.-8      	; 0x2436 <_Z7simpsonv+0x56>
	char text3[] = "Input upper limit:";
    243e:	83 e1       	ldi	r24, 0x13	; 19
    2440:	ea e5       	ldi	r30, 0x5A	; 90
    2442:	f2 e0       	ldi	r31, 0x02	; 2
    2444:	de 01       	movw	r26, r28
    2446:	99 96       	adiw	r26, 0x29	; 41
    2448:	01 90       	ld	r0, Z+
    244a:	0d 92       	st	X+, r0
    244c:	8a 95       	dec	r24
    244e:	e1 f7       	brne	.-8      	; 0x2448 <_Z7simpsonv+0x68>
	DisplayText(1,1,text1);
    2450:	ae 01       	movw	r20, r28
    2452:	4f 5f       	subi	r20, 0xFF	; 255
    2454:	5f 4f       	sbci	r21, 0xFF	; 255
    2456:	61 e0       	ldi	r22, 0x01	; 1
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	//input function
	char s[21];
	int len=0;
	int where=12;
    245e:	0f 2e       	mov	r0, r31
    2460:	fc e0       	ldi	r31, 0x0C	; 12
    2462:	8f 2e       	mov	r8, r31
    2464:	91 2c       	mov	r9, r1
    2466:	f0 2d       	mov	r31, r0
	char text2[] = "Input lower limit:";
	char text3[] = "Input upper limit:";
	DisplayText(1,1,text1);
	//input function
	char s[21];
	int len=0;
    2468:	e1 2c       	mov	r14, r1
    246a:	f1 2c       	mov	r15, r1
					else
					{
						append(s , len , mat2[r][c-4]);
						len = strlen(s);
					}
					DisplayText(1,where,s);
    246c:	2e 01       	movw	r4, r28
    246e:	2c e3       	ldi	r18, 0x3C	; 60
    2470:	42 0e       	add	r4, r18
    2472:	51 1c       	adc	r5, r1
    2474:	68 96       	adiw	r28, 0x18	; 24
    2476:	4f ae       	std	Y+63, r4	; 0x3f
    2478:	68 97       	sbiw	r28, 0x18	; 24
    247a:	69 96       	adiw	r28, 0x19	; 25
    247c:	5f ae       	std	Y+63, r5	; 0x3f
    247e:	69 97       	sbiw	r28, 0x19	; 25
    2480:	0f 2e       	mov	r0, r31
    2482:	f6 e6       	ldi	r31, 0x66	; 102
    2484:	2f 2e       	mov	r2, r31
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	3f 2e       	mov	r3, r31
    248a:	f0 2d       	mov	r31, r0
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    248c:	68 94       	set
    248e:	66 24       	eor	r6, r6
    2490:	62 f8       	bld	r6, 2
    2492:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	06 2c       	mov	r0, r6
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <_Z7simpsonv+0xc0>
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	0a 94       	dec	r0
    24a2:	e2 f7       	brpl	.-8      	; 0x249c <_Z7simpsonv+0xbc>
    24a4:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    24a6:	8b bb       	out	0x1b, r24	; 27
    24a8:	c3 01       	movw	r24, r6
    24aa:	8e 53       	subi	r24, 0x3E	; 62
    24ac:	9f 4f       	sbci	r25, 0xFF	; 255
    24ae:	6c 01       	movw	r12, r24
    24b0:	51 01       	movw	r10, r2
			for(int r=0;r<4;r++)
    24b2:	00 e0       	ldi	r16, 0x00	; 0
    24b4:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    24b6:	86 b3       	in	r24, 0x16	; 22
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	00 2e       	mov	r0, r16
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <_Z7simpsonv+0xe2>
    24be:	95 95       	asr	r25
    24c0:	87 95       	ror	r24
    24c2:	0a 94       	dec	r0
    24c4:	e2 f7       	brpl	.-8      	; 0x24be <_Z7simpsonv+0xde>
    24c6:	80 ff       	sbrs	r24, 0
    24c8:	43 c0       	rjmp	.+134    	; 0x2550 <_Z7simpsonv+0x170>
				{
					if(mat[r][c-4]=='C')
    24ca:	f6 01       	movw	r30, r12
    24cc:	80 81       	ld	r24, Z
    24ce:	83 34       	cpi	r24, 0x43	; 67
    24d0:	99 f4       	brne	.+38     	; 0x24f8 <_Z7simpsonv+0x118>
					{
						len=0;
						s[0]=0;
    24d2:	1c ae       	std	Y+60, r1	; 0x3c
						where=1;
						LCD_Clear();
    24d4:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    24d8:	68 96       	adiw	r28, 0x18	; 24
    24da:	4f ad       	ldd	r20, Y+63	; 0x3f
    24dc:	68 97       	sbiw	r28, 0x18	; 24
    24de:	69 96       	adiw	r28, 0x19	; 25
    24e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    24e2:	69 97       	sbiw	r28, 0x19	; 25
    24e4:	61 e0       	ldi	r22, 0x01	; 1
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    24ec:	88 24       	eor	r8, r8
    24ee:	83 94       	inc	r8
    24f0:	91 2c       	mov	r9, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    24f2:	e1 2c       	mov	r14, r1
    24f4:	f1 2c       	mov	r15, r1
    24f6:	22 c0       	rjmp	.+68     	; 0x253c <_Z7simpsonv+0x15c>
						where=1;
						LCD_Clear();
					}
					else
					{
						if(mat[r][c-4]=='=')
    24f8:	8d 33       	cpi	r24, 0x3D	; 61
    24fa:	09 f4       	brne	.+2      	; 0x24fe <_Z7simpsonv+0x11e>
    24fc:	df c0       	rjmp	.+446    	; 0x26bc <_Z7simpsonv+0x2dc>
						{
							done = 1;
							break;
						}
						s[len]=mat[r][c-4];
    24fe:	f2 01       	movw	r30, r4
    2500:	ee 0d       	add	r30, r14
    2502:	ff 1d       	adc	r31, r15
    2504:	80 83       	st	Z, r24
						len+=1;
    2506:	ff ef       	ldi	r31, 0xFF	; 255
    2508:	ef 1a       	sub	r14, r31
    250a:	ff 0a       	sbc	r15, r31
						s[len]=0;
    250c:	f2 01       	movw	r30, r4
    250e:	ee 0d       	add	r30, r14
    2510:	ff 1d       	adc	r31, r15
    2512:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    2514:	68 96       	adiw	r28, 0x18	; 24
    2516:	4f ad       	ldd	r20, Y+63	; 0x3f
    2518:	68 97       	sbiw	r28, 0x18	; 24
    251a:	69 96       	adiw	r28, 0x19	; 25
    251c:	5f ad       	ldd	r21, Y+63	; 0x3f
    251e:	69 97       	sbiw	r28, 0x19	; 25
    2520:	68 2d       	mov	r22, r8
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    2528:	24 e1       	ldi	r18, 0x14	; 20
    252a:	e2 16       	cp	r14, r18
    252c:	f1 04       	cpc	r15, r1
    252e:	31 f4       	brne	.+12     	; 0x253c <_Z7simpsonv+0x15c>
					{
						where+=12;
    2530:	8c e0       	ldi	r24, 0x0C	; 12
    2532:	88 0e       	add	r8, r24
    2534:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    2536:	1c ae       	std	Y+60, r1	; 0x3c
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    2538:	e1 2c       	mov	r14, r1
    253a:	f1 2c       	mov	r15, r1
    253c:	9f ef       	ldi	r25, 0xFF	; 255
    253e:	e4 e3       	ldi	r30, 0x34	; 52
    2540:	fc e0       	ldi	r31, 0x0C	; 12
    2542:	91 50       	subi	r25, 0x01	; 1
    2544:	e0 40       	sbci	r30, 0x00	; 0
    2546:	f0 40       	sbci	r31, 0x00	; 0
    2548:	e1 f7       	brne	.-8      	; 0x2542 <_Z7simpsonv+0x162>
    254a:	00 c0       	rjmp	.+0      	; 0x254c <_Z7simpsonv+0x16c>
    254c:	00 00       	nop
    254e:	66 c0       	rjmp	.+204    	; 0x261c <_Z7simpsonv+0x23c>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    2550:	89 b3       	in	r24, 0x19	; 25
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	00 2e       	mov	r0, r16
    2556:	02 c0       	rjmp	.+4      	; 0x255c <_Z7simpsonv+0x17c>
    2558:	95 95       	asr	r25
    255a:	87 95       	ror	r24
    255c:	0a 94       	dec	r0
    255e:	e2 f7       	brpl	.-8      	; 0x2558 <_Z7simpsonv+0x178>
    2560:	80 ff       	sbrs	r24, 0
    2562:	5c c0       	rjmp	.+184    	; 0x261c <_Z7simpsonv+0x23c>
				{
					if(mat2[r][c-4][0]=='<')
    2564:	f5 01       	movw	r30, r10
    2566:	80 81       	ld	r24, Z
    2568:	8c 33       	cpi	r24, 0x3C	; 60
    256a:	49 f5       	brne	.+82     	; 0x25be <_Z7simpsonv+0x1de>
					{
						if(len==0){
    256c:	e1 14       	cp	r14, r1
    256e:	f1 04       	cpc	r15, r1
    2570:	51 f4       	brne	.+20     	; 0x2586 <_Z7simpsonv+0x1a6>
    2572:	ff ef       	ldi	r31, 0xFF	; 255
    2574:	24 e3       	ldi	r18, 0x34	; 52
    2576:	8c e0       	ldi	r24, 0x0C	; 12
    2578:	f1 50       	subi	r31, 0x01	; 1
    257a:	20 40       	sbci	r18, 0x00	; 0
    257c:	80 40       	sbci	r24, 0x00	; 0
    257e:	e1 f7       	brne	.-8      	; 0x2578 <_Z7simpsonv+0x198>
    2580:	00 c0       	rjmp	.+0      	; 0x2582 <_Z7simpsonv+0x1a2>
    2582:	00 00       	nop
    2584:	4b c0       	rjmp	.+150    	; 0x261c <_Z7simpsonv+0x23c>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    2586:	91 e0       	ldi	r25, 0x01	; 1
    2588:	e9 1a       	sub	r14, r25
    258a:	f1 08       	sbc	r15, r1
    258c:	f2 01       	movw	r30, r4
    258e:	ee 0d       	add	r30, r14
    2590:	ff 1d       	adc	r31, r15
    2592:	6b 96       	adiw	r28, 0x1b	; 27
    2594:	ff af       	std	Y+63, r31	; 0x3f
    2596:	ee af       	std	Y+62, r30	; 0x3e
    2598:	6b 97       	sbiw	r28, 0x1b	; 27
    259a:	20 e2       	ldi	r18, 0x20	; 32
    259c:	20 83       	st	Z, r18
						DisplayText(1,where,s);
    259e:	68 96       	adiw	r28, 0x18	; 24
    25a0:	4f ad       	ldd	r20, Y+63	; 0x3f
    25a2:	68 97       	sbiw	r28, 0x18	; 24
    25a4:	69 96       	adiw	r28, 0x19	; 25
    25a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    25a8:	69 97       	sbiw	r28, 0x19	; 25
    25aa:	68 2d       	mov	r22, r8
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						len--;
						s[len]=0;
    25b2:	6b 96       	adiw	r28, 0x1b	; 27
    25b4:	ee ad       	ldd	r30, Y+62	; 0x3e
    25b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    25b8:	6b 97       	sbiw	r28, 0x1b	; 27
    25ba:	10 82       	st	Z, r1
    25bc:	12 c0       	rjmp	.+36     	; 0x25e2 <_Z7simpsonv+0x202>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    25be:	a5 01       	movw	r20, r10
    25c0:	b7 01       	movw	r22, r14
    25c2:	68 96       	adiw	r28, 0x18	; 24
    25c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    25c6:	68 97       	sbiw	r28, 0x18	; 24
    25c8:	69 96       	adiw	r28, 0x19	; 25
    25ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    25cc:	69 97       	sbiw	r28, 0x19	; 25
    25ce:	0e 94 15 09 	call	0x122a	; 0x122a <_Z6appendPciS_>
						len = strlen(s);
    25d2:	f2 01       	movw	r30, r4
    25d4:	01 90       	ld	r0, Z+
    25d6:	00 20       	and	r0, r0
    25d8:	e9 f7       	brne	.-6      	; 0x25d4 <_Z7simpsonv+0x1f4>
    25da:	31 97       	sbiw	r30, 0x01	; 1
    25dc:	7f 01       	movw	r14, r30
    25de:	e4 18       	sub	r14, r4
    25e0:	f5 08       	sbc	r15, r5
					}
					DisplayText(1,where,s);
    25e2:	68 96       	adiw	r28, 0x18	; 24
    25e4:	4f ad       	ldd	r20, Y+63	; 0x3f
    25e6:	68 97       	sbiw	r28, 0x18	; 24
    25e8:	69 96       	adiw	r28, 0x19	; 25
    25ea:	5f ad       	ldd	r21, Y+63	; 0x3f
    25ec:	69 97       	sbiw	r28, 0x19	; 25
    25ee:	68 2d       	mov	r22, r8
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    25f6:	f4 e1       	ldi	r31, 0x14	; 20
    25f8:	ef 16       	cp	r14, r31
    25fa:	f1 04       	cpc	r15, r1
    25fc:	31 f4       	brne	.+12     	; 0x260a <_Z7simpsonv+0x22a>
					{
						where+=12;
    25fe:	2c e0       	ldi	r18, 0x0C	; 12
    2600:	82 0e       	add	r8, r18
    2602:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    2604:	1c ae       	std	Y+60, r1	; 0x3c
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    2606:	e1 2c       	mov	r14, r1
    2608:	f1 2c       	mov	r15, r1
    260a:	8f ef       	ldi	r24, 0xFF	; 255
    260c:	94 e3       	ldi	r25, 0x34	; 52
    260e:	ec e0       	ldi	r30, 0x0C	; 12
    2610:	81 50       	subi	r24, 0x01	; 1
    2612:	90 40       	sbci	r25, 0x00	; 0
    2614:	e0 40       	sbci	r30, 0x00	; 0
    2616:	e1 f7       	brne	.-8      	; 0x2610 <_Z7simpsonv+0x230>
    2618:	00 c0       	rjmp	.+0      	; 0x261a <_Z7simpsonv+0x23a>
    261a:	00 00       	nop
		bool done = 0;
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    261c:	0f 5f       	subi	r16, 0xFF	; 255
    261e:	1f 4f       	sbci	r17, 0xFF	; 255
    2620:	f8 e1       	ldi	r31, 0x18	; 24
    2622:	af 0e       	add	r10, r31
    2624:	b1 1c       	adc	r11, r1
    2626:	24 e0       	ldi	r18, 0x04	; 4
    2628:	c2 0e       	add	r12, r18
    262a:	d1 1c       	adc	r13, r1
    262c:	04 30       	cpi	r16, 0x04	; 4
    262e:	11 05       	cpc	r17, r1
    2630:	09 f0       	breq	.+2      	; 0x2634 <_Z7simpsonv+0x254>
    2632:	41 cf       	rjmp	.-382    	; 0x24b6 <_Z7simpsonv+0xd6>
    2634:	8f e1       	ldi	r24, 0x1F	; 31
    2636:	9e e4       	ldi	r25, 0x4E	; 78
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <_Z7simpsonv+0x258>
    263c:	00 c0       	rjmp	.+0      	; 0x263e <_Z7simpsonv+0x25e>
    263e:	00 00       	nop
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    2640:	9f ef       	ldi	r25, 0xFF	; 255
    2642:	69 1a       	sub	r6, r25
    2644:	79 0a       	sbc	r7, r25
    2646:	e6 e0       	ldi	r30, 0x06	; 6
    2648:	2e 0e       	add	r2, r30
    264a:	31 1c       	adc	r3, r1
    264c:	f8 e0       	ldi	r31, 0x08	; 8
    264e:	6f 16       	cp	r6, r31
    2650:	71 04       	cpc	r7, r1
    2652:	09 f0       	breq	.+2      	; 0x2656 <_Z7simpsonv+0x276>
    2654:	1f cf       	rjmp	.-450    	; 0x2494 <_Z7simpsonv+0xb4>
    2656:	14 cf       	rjmp	.-472    	; 0x2480 <_Z7simpsonv+0xa0>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    2658:	44 e0       	ldi	r20, 0x04	; 4
    265a:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB=1<<c;
    265c:	cb 01       	movw	r24, r22
    265e:	04 2e       	mov	r0, r20
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <_Z7simpsonv+0x286>
    2662:	88 0f       	add	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	0a 94       	dec	r0
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <_Z7simpsonv+0x282>
    266a:	88 bb       	out	0x18, r24	; 24
    266c:	fa 01       	movw	r30, r20
    266e:	ee 53       	subi	r30, 0x3E	; 62
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
			{
				if(PINB&(1<<r))
    2676:	86 b3       	in	r24, 0x16	; 22
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	02 2e       	mov	r0, r18
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <_Z7simpsonv+0x2a2>
    267e:	95 95       	asr	r25
    2680:	87 95       	ror	r24
    2682:	0a 94       	dec	r0
    2684:	e2 f7       	brpl	.-8      	; 0x267e <_Z7simpsonv+0x29e>
    2686:	80 ff       	sbrs	r24, 0
    2688:	03 c0       	rjmp	.+6      	; 0x2690 <_Z7simpsonv+0x2b0>
				{
					if(mat[r][c-4]=='=')
    268a:	80 81       	ld	r24, Z
    268c:	8d 33       	cpi	r24, 0x3D	; 61
    268e:	61 f0       	breq	.+24     	; 0x26a8 <_Z7simpsonv+0x2c8>
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    2690:	2f 5f       	subi	r18, 0xFF	; 255
    2692:	3f 4f       	sbci	r19, 0xFF	; 255
    2694:	34 96       	adiw	r30, 0x04	; 4
    2696:	24 30       	cpi	r18, 0x04	; 4
    2698:	31 05       	cpc	r19, r1
    269a:	69 f7       	brne	.-38     	; 0x2676 <_Z7simpsonv+0x296>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    269c:	4f 5f       	subi	r20, 0xFF	; 255
    269e:	5f 4f       	sbci	r21, 0xFF	; 255
    26a0:	48 30       	cpi	r20, 0x08	; 8
    26a2:	51 05       	cpc	r21, r1
    26a4:	d9 f6       	brne	.-74     	; 0x265c <_Z7simpsonv+0x27c>
    26a6:	d8 cf       	rjmp	.-80     	; 0x2658 <_Z7simpsonv+0x278>
    26a8:	2f ef       	ldi	r18, 0xFF	; 255
    26aa:	84 e3       	ldi	r24, 0x34	; 52
    26ac:	9c e0       	ldi	r25, 0x0C	; 12
    26ae:	21 50       	subi	r18, 0x01	; 1
    26b0:	80 40       	sbci	r24, 0x00	; 0
    26b2:	90 40       	sbci	r25, 0x00	; 0
    26b4:	e1 f7       	brne	.-8      	; 0x26ae <_Z7simpsonv+0x2ce>
    26b6:	00 c0       	rjmp	.+0      	; 0x26b8 <_Z7simpsonv+0x2d8>
    26b8:	00 00       	nop
		{
			break;
		}
	}
	_delay_ms(500);
    26ba:	4e c0       	rjmp	.+156    	; 0x2758 <_Z7simpsonv+0x378>
    26bc:	ef e1       	ldi	r30, 0x1F	; 31
    26be:	fe e4       	ldi	r31, 0x4E	; 78
    26c0:	31 97       	sbiw	r30, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <_Z7simpsonv+0x2e0>
    26c4:	00 c0       	rjmp	.+0      	; 0x26c6 <_Z7simpsonv+0x2e6>
    26c6:	00 00       	nop
			break;
		}
		if(done)
		break;
	}
	LCD_Clear();
    26c8:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	double l , r;
	DisplayText(1,1,text2);
    26cc:	ae 01       	movw	r20, r28
    26ce:	4a 5e       	subi	r20, 0xEA	; 234
    26d0:	5f 4f       	sbci	r21, 0xFF	; 255
    26d2:	61 e0       	ldi	r22, 0x01	; 1
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	l = double_num_input(12);
    26da:	8c e0       	ldi	r24, 0x0C	; 12
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_Z16double_num_inputi>
    26e2:	6b 01       	movw	r12, r22
    26e4:	7c 01       	movw	r14, r24
	LCD_Clear();
    26e6:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	DisplayText(1,1,text3);
    26ea:	ae 01       	movw	r20, r28
    26ec:	47 5d       	subi	r20, 0xD7	; 215
    26ee:	5f 4f       	sbci	r21, 0xFF	; 255
    26f0:	61 e0       	ldi	r22, 0x01	; 1
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	r = double_num_input(12);
    26f8:	8c e0       	ldi	r24, 0x0C	; 12
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_Z16double_num_inputi>
    2700:	8b 01       	movw	r16, r22
    2702:	9c 01       	movw	r18, r24
	double ans = simpson_integration(s,l,r);
    2704:	b7 01       	movw	r22, r14
    2706:	a6 01       	movw	r20, r12
    2708:	ce 01       	movw	r24, r28
    270a:	cc 96       	adiw	r24, 0x3c	; 60
    270c:	0e 94 28 11 	call	0x2250	; 0x2250 <_Z19simpson_integrationPcdd>
    2710:	6b 01       	movw	r12, r22
    2712:	7c 01       	movw	r14, r24
	
	//printing ans
	char text[] = "Ans =";
    2714:	86 e0       	ldi	r24, 0x06	; 6
    2716:	ed e6       	ldi	r30, 0x6D	; 109
    2718:	f2 e0       	ldi	r31, 0x02	; 2
    271a:	de 01       	movw	r26, r28
    271c:	af 5a       	subi	r26, 0xAF	; 175
    271e:	bf 4f       	sbci	r27, 0xFF	; 255
    2720:	01 90       	ld	r0, Z+
    2722:	0d 92       	st	X+, r0
    2724:	8a 95       	dec	r24
    2726:	e1 f7       	brne	.-8      	; 0x2720 <_Z7simpsonv+0x340>
	show_text(text,1);
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	70 e0       	ldi	r23, 0x00	; 0
    272c:	ce 01       	movw	r24, r28
    272e:	8f 5a       	subi	r24, 0xAF	; 175
    2730:	9f 4f       	sbci	r25, 0xFF	; 255
    2732:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	dtostrf(ans,1,2,s);
    2736:	8e 01       	movw	r16, r28
    2738:	04 5c       	subi	r16, 0xC4	; 196
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	22 e0       	ldi	r18, 0x02	; 2
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	c7 01       	movw	r24, r14
    2742:	b6 01       	movw	r22, r12
    2744:	0e 94 81 23 	call	0x4702	; 0x4702 <dtostrf>
	show_text(s,12);
    2748:	6c e0       	ldi	r22, 0x0C	; 12
    274a:	70 e0       	ldi	r23, 0x00	; 0
    274c:	c8 01       	movw	r24, r16
    274e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    2752:	61 e0       	ldi	r22, 0x01	; 1
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	80 cf       	rjmp	.-256    	; 0x2658 <_Z7simpsonv+0x278>
		{
			break;
		}
	}
	_delay_ms(500);
    2758:	c6 5a       	subi	r28, 0xA6	; 166
    275a:	df 4f       	sbci	r29, 0xFF	; 255
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	1f 91       	pop	r17
    276c:	0f 91       	pop	r16
    276e:	ff 90       	pop	r15
    2770:	ef 90       	pop	r14
    2772:	df 90       	pop	r13
    2774:	cf 90       	pop	r12
    2776:	bf 90       	pop	r11
    2778:	af 90       	pop	r10
    277a:	9f 90       	pop	r9
    277c:	8f 90       	pop	r8
    277e:	7f 90       	pop	r7
    2780:	6f 90       	pop	r6
    2782:	5f 90       	pop	r5
    2784:	4f 90       	pop	r4
    2786:	3f 90       	pop	r3
    2788:	2f 90       	pop	r2
    278a:	08 95       	ret

0000278c <_Z12show_and_getPcS_>:
void show_and_get(char *F, char * s)
{
    278c:	2f 92       	push	r2
    278e:	3f 92       	push	r3
    2790:	4f 92       	push	r4
    2792:	5f 92       	push	r5
    2794:	6f 92       	push	r6
    2796:	7f 92       	push	r7
    2798:	8f 92       	push	r8
    279a:	9f 92       	push	r9
    279c:	af 92       	push	r10
    279e:	bf 92       	push	r11
    27a0:	cf 92       	push	r12
    27a2:	df 92       	push	r13
    27a4:	ef 92       	push	r14
    27a6:	ff 92       	push	r15
    27a8:	0f 93       	push	r16
    27aa:	1f 93       	push	r17
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	ec 01       	movw	r28, r24
    27b2:	6b 01       	movw	r12, r22
	LCD_Clear();
    27b4:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
    27b8:	2f ef       	ldi	r18, 0xFF	; 255
    27ba:	81 ee       	ldi	r24, 0xE1	; 225
    27bc:	94 e0       	ldi	r25, 0x04	; 4
    27be:	21 50       	subi	r18, 0x01	; 1
    27c0:	80 40       	sbci	r24, 0x00	; 0
    27c2:	90 40       	sbci	r25, 0x00	; 0
    27c4:	e1 f7       	brne	.-8      	; 0x27be <_Z12show_and_getPcS_+0x32>
    27c6:	00 c0       	rjmp	.+0      	; 0x27c8 <_Z12show_and_getPcS_+0x3c>
    27c8:	00 00       	nop
	_delay_ms(200);
	DisplayText(1,1,F);
    27ca:	ae 01       	movw	r20, r28
    27cc:	61 e0       	ldi	r22, 0x01	; 1
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
    27d4:	ef ef       	ldi	r30, 0xFF	; 255
    27d6:	f1 ee       	ldi	r31, 0xE1	; 225
    27d8:	24 e0       	ldi	r18, 0x04	; 4
    27da:	e1 50       	subi	r30, 0x01	; 1
    27dc:	f0 40       	sbci	r31, 0x00	; 0
    27de:	20 40       	sbci	r18, 0x00	; 0
    27e0:	e1 f7       	brne	.-8      	; 0x27da <_Z12show_and_getPcS_+0x4e>
    27e2:	00 c0       	rjmp	.+0      	; 0x27e4 <_Z12show_and_getPcS_+0x58>
    27e4:	00 00       	nop
	_delay_ms(200);
	
	int len=0;
	int where=12;
    27e6:	0f 2e       	mov	r0, r31
    27e8:	fc e0       	ldi	r31, 0x0C	; 12
    27ea:	4f 2e       	mov	r4, r31
    27ec:	51 2c       	mov	r5, r1
    27ee:	f0 2d       	mov	r31, r0
	LCD_Clear();
	_delay_ms(200);
	DisplayText(1,1,F);
	_delay_ms(200);
	
	int len=0;
    27f0:	00 e0       	ldi	r16, 0x00	; 0
    27f2:	10 e0       	ldi	r17, 0x00	; 0
	int where=12;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    27f4:	22 24       	eor	r2, r2
    27f6:	23 94       	inc	r2
    27f8:	31 2c       	mov	r3, r1
    27fa:	0f 2e       	mov	r0, r31
    27fc:	f6 e6       	ldi	r31, 0x66	; 102
    27fe:	6f 2e       	mov	r6, r31
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	7f 2e       	mov	r7, r31
    2804:	f0 2d       	mov	r31, r0
	
	int len=0;
	int where=12;
	while (1)
	{
		for(int c=4;c<8;c++)
    2806:	68 94       	set
    2808:	aa 24       	eor	r10, r10
    280a:	a2 f8       	bld	r10, 2
    280c:	b1 2c       	mov	r11, r1
		{
			PORTB=1<<c;
    280e:	c1 01       	movw	r24, r2
    2810:	0a 2c       	mov	r0, r10
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <_Z12show_and_getPcS_+0x8c>
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	0a 94       	dec	r0
    281a:	e2 f7       	brpl	.-8      	; 0x2814 <_Z12show_and_getPcS_+0x88>
    281c:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    281e:	8b bb       	out	0x1b, r24	; 27
    2820:	c5 01       	movw	r24, r10
    2822:	8e 53       	subi	r24, 0x3E	; 62
    2824:	9f 4f       	sbci	r25, 0xFF	; 255
    2826:	4c 01       	movw	r8, r24
    2828:	73 01       	movw	r14, r6
			for(int r=0;r<4;r++)
    282a:	c0 e0       	ldi	r28, 0x00	; 0
    282c:	d0 e0       	ldi	r29, 0x00	; 0
			{
				if(PINB&(1<<r))
    282e:	86 b3       	in	r24, 0x16	; 22
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0c 2e       	mov	r0, r28
    2834:	02 c0       	rjmp	.+4      	; 0x283a <_Z12show_and_getPcS_+0xae>
    2836:	95 95       	asr	r25
    2838:	87 95       	ror	r24
    283a:	0a 94       	dec	r0
    283c:	e2 f7       	brpl	.-8      	; 0x2836 <_Z12show_and_getPcS_+0xaa>
    283e:	80 ff       	sbrs	r24, 0
    2840:	39 c0       	rjmp	.+114    	; 0x28b4 <_Z12show_and_getPcS_+0x128>
				{
					if(mat[r][c-4]=='C')
    2842:	f4 01       	movw	r30, r8
    2844:	80 81       	ld	r24, Z
    2846:	83 34       	cpi	r24, 0x43	; 67
    2848:	79 f4       	brne	.+30     	; 0x2868 <_Z12show_and_getPcS_+0xdc>
					{
						len=0;
						s[0]=0;
    284a:	f6 01       	movw	r30, r12
    284c:	10 82       	st	Z, r1
						where=1;
						LCD_Clear();
    284e:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    2852:	a6 01       	movw	r20, r12
    2854:	61 e0       	ldi	r22, 0x01	; 1
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    285c:	44 24       	eor	r4, r4
    285e:	43 94       	inc	r4
    2860:	51 2c       	mov	r5, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    2862:	00 e0       	ldi	r16, 0x00	; 0
    2864:	10 e0       	ldi	r17, 0x00	; 0
    2866:	1c c0       	rjmp	.+56     	; 0x28a0 <_Z12show_and_getPcS_+0x114>
						where=1;
						LCD_Clear();
					}
					else
					{
						if(mat[r][c-4]=='=')
    2868:	8d 33       	cpi	r24, 0x3D	; 61
    286a:	09 f4       	brne	.+2      	; 0x286e <_Z12show_and_getPcS_+0xe2>
    286c:	92 c0       	rjmp	.+292    	; 0x2992 <_Z12show_and_getPcS_+0x206>
						{
							return;
						}
						s[len]=mat[r][c-4];
    286e:	f6 01       	movw	r30, r12
    2870:	e0 0f       	add	r30, r16
    2872:	f1 1f       	adc	r31, r17
    2874:	80 83       	st	Z, r24
						len+=1;
    2876:	0f 5f       	subi	r16, 0xFF	; 255
    2878:	1f 4f       	sbci	r17, 0xFF	; 255
						s[len]=0;
    287a:	f6 01       	movw	r30, r12
    287c:	e0 0f       	add	r30, r16
    287e:	f1 1f       	adc	r31, r17
    2880:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    2882:	a6 01       	movw	r20, r12
    2884:	64 2d       	mov	r22, r4
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    288c:	04 31       	cpi	r16, 0x14	; 20
    288e:	11 05       	cpc	r17, r1
    2890:	39 f4       	brne	.+14     	; 0x28a0 <_Z12show_and_getPcS_+0x114>
					{
						where+=12;
    2892:	fc e0       	ldi	r31, 0x0C	; 12
    2894:	4f 0e       	add	r4, r31
    2896:	51 1c       	adc	r5, r1
						len=0;
						s[0]=0;
    2898:	f6 01       	movw	r30, r12
    289a:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    289c:	00 e0       	ldi	r16, 0x00	; 0
    289e:	10 e0       	ldi	r17, 0x00	; 0
    28a0:	ff ef       	ldi	r31, 0xFF	; 255
    28a2:	24 e3       	ldi	r18, 0x34	; 52
    28a4:	8c e0       	ldi	r24, 0x0C	; 12
    28a6:	f1 50       	subi	r31, 0x01	; 1
    28a8:	20 40       	sbci	r18, 0x00	; 0
    28aa:	80 40       	sbci	r24, 0x00	; 0
    28ac:	e1 f7       	brne	.-8      	; 0x28a6 <_Z12show_and_getPcS_+0x11a>
    28ae:	00 c0       	rjmp	.+0      	; 0x28b0 <_Z12show_and_getPcS_+0x124>
    28b0:	00 00       	nop
    28b2:	52 c0       	rjmp	.+164    	; 0x2958 <_Z12show_and_getPcS_+0x1cc>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    28b4:	89 b3       	in	r24, 0x19	; 25
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	0c 2e       	mov	r0, r28
    28ba:	02 c0       	rjmp	.+4      	; 0x28c0 <_Z12show_and_getPcS_+0x134>
    28bc:	95 95       	asr	r25
    28be:	87 95       	ror	r24
    28c0:	0a 94       	dec	r0
    28c2:	e2 f7       	brpl	.-8      	; 0x28bc <_Z12show_and_getPcS_+0x130>
    28c4:	80 ff       	sbrs	r24, 0
    28c6:	48 c0       	rjmp	.+144    	; 0x2958 <_Z12show_and_getPcS_+0x1cc>
				{
					if(mat2[r][c-4][0]=='<')
    28c8:	f7 01       	movw	r30, r14
    28ca:	80 81       	ld	r24, Z
    28cc:	8c 33       	cpi	r24, 0x3C	; 60
    28ce:	f9 f4       	brne	.+62     	; 0x290e <_Z12show_and_getPcS_+0x182>
					{
						if(len==0){
    28d0:	01 15       	cp	r16, r1
    28d2:	11 05       	cpc	r17, r1
    28d4:	51 f4       	brne	.+20     	; 0x28ea <_Z12show_and_getPcS_+0x15e>
    28d6:	ff ef       	ldi	r31, 0xFF	; 255
    28d8:	24 e3       	ldi	r18, 0x34	; 52
    28da:	8c e0       	ldi	r24, 0x0C	; 12
    28dc:	f1 50       	subi	r31, 0x01	; 1
    28de:	20 40       	sbci	r18, 0x00	; 0
    28e0:	80 40       	sbci	r24, 0x00	; 0
    28e2:	e1 f7       	brne	.-8      	; 0x28dc <_Z12show_and_getPcS_+0x150>
    28e4:	00 c0       	rjmp	.+0      	; 0x28e6 <_Z12show_and_getPcS_+0x15a>
    28e6:	00 00       	nop
    28e8:	37 c0       	rjmp	.+110    	; 0x2958 <_Z12show_and_getPcS_+0x1cc>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    28ea:	f6 01       	movw	r30, r12
    28ec:	e0 0f       	add	r30, r16
    28ee:	f1 1f       	adc	r31, r17
    28f0:	31 97       	sbiw	r30, 0x01	; 1
    28f2:	90 e2       	ldi	r25, 0x20	; 32
    28f4:	90 83       	st	Z, r25
						DisplayText(1,where,s);
    28f6:	a6 01       	movw	r20, r12
    28f8:	64 2d       	mov	r22, r4
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						len--;
    2900:	01 50       	subi	r16, 0x01	; 1
    2902:	11 09       	sbc	r17, r1
						s[len]=0;
    2904:	f6 01       	movw	r30, r12
    2906:	e0 0f       	add	r30, r16
    2908:	f1 1f       	adc	r31, r17
    290a:	10 82       	st	Z, r1
    290c:	0d c0       	rjmp	.+26     	; 0x2928 <_Z12show_and_getPcS_+0x19c>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    290e:	a7 01       	movw	r20, r14
    2910:	b8 01       	movw	r22, r16
    2912:	c6 01       	movw	r24, r12
    2914:	0e 94 15 09 	call	0x122a	; 0x122a <_Z6appendPciS_>
						len = strlen(s);
    2918:	f6 01       	movw	r30, r12
    291a:	01 90       	ld	r0, Z+
    291c:	00 20       	and	r0, r0
    291e:	e9 f7       	brne	.-6      	; 0x291a <_Z12show_and_getPcS_+0x18e>
    2920:	31 97       	sbiw	r30, 0x01	; 1
    2922:	8f 01       	movw	r16, r30
    2924:	0c 19       	sub	r16, r12
    2926:	1d 09       	sbc	r17, r13
					}
					DisplayText(1,where,s);
    2928:	a6 01       	movw	r20, r12
    292a:	64 2d       	mov	r22, r4
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    2932:	04 31       	cpi	r16, 0x14	; 20
    2934:	11 05       	cpc	r17, r1
    2936:	39 f4       	brne	.+14     	; 0x2946 <_Z12show_and_getPcS_+0x1ba>
					{
						where+=12;
    2938:	ec e0       	ldi	r30, 0x0C	; 12
    293a:	4e 0e       	add	r4, r30
    293c:	51 1c       	adc	r5, r1
						len=0;
						s[0]=0;
    293e:	f6 01       	movw	r30, r12
    2940:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    2942:	00 e0       	ldi	r16, 0x00	; 0
    2944:	10 e0       	ldi	r17, 0x00	; 0
    2946:	ff ef       	ldi	r31, 0xFF	; 255
    2948:	24 e3       	ldi	r18, 0x34	; 52
    294a:	8c e0       	ldi	r24, 0x0C	; 12
    294c:	f1 50       	subi	r31, 0x01	; 1
    294e:	20 40       	sbci	r18, 0x00	; 0
    2950:	80 40       	sbci	r24, 0x00	; 0
    2952:	e1 f7       	brne	.-8      	; 0x294c <_Z12show_and_getPcS_+0x1c0>
    2954:	00 c0       	rjmp	.+0      	; 0x2956 <_Z12show_and_getPcS_+0x1ca>
    2956:	00 00       	nop
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    2958:	21 96       	adiw	r28, 0x01	; 1
    295a:	98 e1       	ldi	r25, 0x18	; 24
    295c:	e9 0e       	add	r14, r25
    295e:	f1 1c       	adc	r15, r1
    2960:	e4 e0       	ldi	r30, 0x04	; 4
    2962:	8e 0e       	add	r8, r30
    2964:	91 1c       	adc	r9, r1
    2966:	c4 30       	cpi	r28, 0x04	; 4
    2968:	d1 05       	cpc	r29, r1
    296a:	09 f0       	breq	.+2      	; 0x296e <_Z12show_and_getPcS_+0x1e2>
    296c:	60 cf       	rjmp	.-320    	; 0x282e <_Z12show_and_getPcS_+0xa2>
    296e:	8f e1       	ldi	r24, 0x1F	; 31
    2970:	9e e4       	ldi	r25, 0x4E	; 78
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <_Z12show_and_getPcS_+0x1e6>
    2976:	00 c0       	rjmp	.+0      	; 0x2978 <_Z12show_and_getPcS_+0x1ec>
    2978:	00 00       	nop
	
	int len=0;
	int where=12;
	while (1)
	{
		for(int c=4;c<8;c++)
    297a:	9f ef       	ldi	r25, 0xFF	; 255
    297c:	a9 1a       	sub	r10, r25
    297e:	b9 0a       	sbc	r11, r25
    2980:	e6 e0       	ldi	r30, 0x06	; 6
    2982:	6e 0e       	add	r6, r30
    2984:	71 1c       	adc	r7, r1
    2986:	f8 e0       	ldi	r31, 0x08	; 8
    2988:	af 16       	cp	r10, r31
    298a:	b1 04       	cpc	r11, r1
    298c:	09 f0       	breq	.+2      	; 0x2990 <_Z12show_and_getPcS_+0x204>
    298e:	3f cf       	rjmp	.-386    	; 0x280e <_Z12show_and_getPcS_+0x82>
    2990:	34 cf       	rjmp	.-408    	; 0x27fa <_Z12show_and_getPcS_+0x6e>
			}
			
			_delay_ms(10);
		}
	}
}
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	ff 90       	pop	r15
    299c:	ef 90       	pop	r14
    299e:	df 90       	pop	r13
    29a0:	cf 90       	pop	r12
    29a2:	bf 90       	pop	r11
    29a4:	af 90       	pop	r10
    29a6:	9f 90       	pop	r9
    29a8:	8f 90       	pop	r8
    29aa:	7f 90       	pop	r7
    29ac:	6f 90       	pop	r6
    29ae:	5f 90       	pop	r5
    29b0:	4f 90       	pop	r4
    29b2:	3f 90       	pop	r3
    29b4:	2f 90       	pop	r2
    29b6:	08 95       	ret

000029b8 <_Z10graph_plotv>:


void graph_plot()
{
    29b8:	2f 92       	push	r2
    29ba:	3f 92       	push	r3
    29bc:	4f 92       	push	r4
    29be:	5f 92       	push	r5
    29c0:	6f 92       	push	r6
    29c2:	7f 92       	push	r7
    29c4:	8f 92       	push	r8
    29c6:	9f 92       	push	r9
    29c8:	af 92       	push	r10
    29ca:	bf 92       	push	r11
    29cc:	cf 92       	push	r12
    29ce:	df 92       	push	r13
    29d0:	ef 92       	push	r14
    29d2:	ff 92       	push	r15
    29d4:	0f 93       	push	r16
    29d6:	1f 93       	push	r17
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	c7 5a       	subi	r28, 0xA7	; 167
    29e2:	d1 09       	sbc	r29, r1
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
	char F1[10]="F(x) = ";
    29ee:	88 e0       	ldi	r24, 0x08	; 8
    29f0:	e4 e0       	ldi	r30, 0x04	; 4
    29f2:	f1 e0       	ldi	r31, 0x01	; 1
    29f4:	de 01       	movw	r26, r28
    29f6:	11 96       	adiw	r26, 0x01	; 1
    29f8:	01 90       	ld	r0, Z+
    29fa:	0d 92       	st	X+, r0
    29fc:	8a 95       	dec	r24
    29fe:	e1 f7       	brne	.-8      	; 0x29f8 <_Z10graph_plotv+0x40>
    2a00:	1a 86       	std	Y+10, r1	; 0x0a
    2a02:	19 86       	std	Y+9, r1	; 0x09
	char s1[10];
	show_and_get(F1,s1);
    2a04:	be 01       	movw	r22, r28
    2a06:	65 5f       	subi	r22, 0xF5	; 245
    2a08:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0a:	ce 01       	movw	r24, r28
    2a0c:	01 96       	adiw	r24, 0x01	; 1
    2a0e:	0e 94 c6 13 	call	0x278c	; 0x278c <_Z12show_and_getPcS_>
	
	strcpy(F1,"minX = ");
    2a12:	88 e0       	ldi	r24, 0x08	; 8
    2a14:	e3 e7       	ldi	r30, 0x73	; 115
    2a16:	f2 e0       	ldi	r31, 0x02	; 2
    2a18:	de 01       	movw	r26, r28
    2a1a:	11 96       	adiw	r26, 0x01	; 1
    2a1c:	01 90       	ld	r0, Z+
    2a1e:	0d 92       	st	X+, r0
    2a20:	8a 95       	dec	r24
    2a22:	e1 f7       	brne	.-8      	; 0x2a1c <_Z10graph_plotv+0x64>
	char s2[10];
	show_and_get(F1,s2);
    2a24:	be 01       	movw	r22, r28
    2a26:	6b 5e       	subi	r22, 0xEB	; 235
    2a28:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	01 96       	adiw	r24, 0x01	; 1
    2a2e:	0e 94 c6 13 	call	0x278c	; 0x278c <_Z12show_and_getPcS_>
	double l=ob.eval_exp(s2);
    2a32:	be 01       	movw	r22, r28
    2a34:	6b 5e       	subi	r22, 0xEB	; 235
    2a36:	7f 4f       	sbci	r23, 0xFF	; 255
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	93 e0       	ldi	r25, 0x03	; 3
    2a3c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN6parser8eval_expEPc>
    2a40:	c9 57       	subi	r28, 0x79	; 121
    2a42:	df 4f       	sbci	r29, 0xFF	; 255
    2a44:	68 83       	st	Y, r22
    2a46:	c7 58       	subi	r28, 0x87	; 135
    2a48:	d0 40       	sbci	r29, 0x00	; 0
    2a4a:	c8 57       	subi	r28, 0x78	; 120
    2a4c:	df 4f       	sbci	r29, 0xFF	; 255
    2a4e:	78 83       	st	Y, r23
    2a50:	c8 58       	subi	r28, 0x88	; 136
    2a52:	d0 40       	sbci	r29, 0x00	; 0
    2a54:	c7 57       	subi	r28, 0x77	; 119
    2a56:	df 4f       	sbci	r29, 0xFF	; 255
    2a58:	88 83       	st	Y, r24
    2a5a:	c9 58       	subi	r28, 0x89	; 137
    2a5c:	d0 40       	sbci	r29, 0x00	; 0
    2a5e:	19 2f       	mov	r17, r25
	
	strcpy(F1,"maxX = ");
    2a60:	88 e0       	ldi	r24, 0x08	; 8
    2a62:	eb e7       	ldi	r30, 0x7B	; 123
    2a64:	f2 e0       	ldi	r31, 0x02	; 2
    2a66:	de 01       	movw	r26, r28
    2a68:	11 96       	adiw	r26, 0x01	; 1
    2a6a:	01 90       	ld	r0, Z+
    2a6c:	0d 92       	st	X+, r0
    2a6e:	8a 95       	dec	r24
    2a70:	e1 f7       	brne	.-8      	; 0x2a6a <_Z10graph_plotv+0xb2>
	show_and_get(F1,s2);
    2a72:	be 01       	movw	r22, r28
    2a74:	6b 5e       	subi	r22, 0xEB	; 235
    2a76:	7f 4f       	sbci	r23, 0xFF	; 255
    2a78:	ce 01       	movw	r24, r28
    2a7a:	01 96       	adiw	r24, 0x01	; 1
    2a7c:	0e 94 c6 13 	call	0x278c	; 0x278c <_Z12show_and_getPcS_>
	double r=ob.eval_exp(s2);
    2a80:	be 01       	movw	r22, r28
    2a82:	6b 5e       	subi	r22, 0xEB	; 235
    2a84:	7f 4f       	sbci	r23, 0xFF	; 255
    2a86:	82 e0       	ldi	r24, 0x02	; 2
    2a88:	93 e0       	ldi	r25, 0x03	; 3
    2a8a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN6parser8eval_expEPc>
    2a8e:	66 2e       	mov	r6, r22
    2a90:	77 2e       	mov	r7, r23
    2a92:	88 2e       	mov	r8, r24
    2a94:	99 2e       	mov	r9, r25
	
	const int T=25;

	if(l>r)
    2a96:	26 2f       	mov	r18, r22
    2a98:	37 2f       	mov	r19, r23
    2a9a:	48 2f       	mov	r20, r24
    2a9c:	59 2f       	mov	r21, r25
    2a9e:	c9 57       	subi	r28, 0x79	; 121
    2aa0:	df 4f       	sbci	r29, 0xFF	; 255
    2aa2:	68 81       	ld	r22, Y
    2aa4:	c7 58       	subi	r28, 0x87	; 135
    2aa6:	d0 40       	sbci	r29, 0x00	; 0
    2aa8:	c8 57       	subi	r28, 0x78	; 120
    2aaa:	df 4f       	sbci	r29, 0xFF	; 255
    2aac:	78 81       	ld	r23, Y
    2aae:	c8 58       	subi	r28, 0x88	; 136
    2ab0:	d0 40       	sbci	r29, 0x00	; 0
    2ab2:	c7 57       	subi	r28, 0x77	; 119
    2ab4:	df 4f       	sbci	r29, 0xFF	; 255
    2ab6:	88 81       	ld	r24, Y
    2ab8:	c9 58       	subi	r28, 0x89	; 137
    2aba:	d0 40       	sbci	r29, 0x00	; 0
    2abc:	91 2f       	mov	r25, r17
    2abe:	0e 94 ef 20 	call	0x41de	; 0x41de <__gesf2>
    2ac2:	18 16       	cp	r1, r24
    2ac4:	24 f5       	brge	.+72     	; 0x2b0e <_Z10graph_plotv+0x156>
    2ac6:	c9 57       	subi	r28, 0x79	; 121
    2ac8:	df 4f       	sbci	r29, 0xFF	; 255
    2aca:	38 81       	ld	r19, Y
    2acc:	c7 58       	subi	r28, 0x87	; 135
    2ace:	d0 40       	sbci	r29, 0x00	; 0
    2ad0:	c8 57       	subi	r28, 0x78	; 120
    2ad2:	df 4f       	sbci	r29, 0xFF	; 255
    2ad4:	28 81       	ld	r18, Y
    2ad6:	c8 58       	subi	r28, 0x88	; 136
    2ad8:	d0 40       	sbci	r29, 0x00	; 0
    2ada:	c7 57       	subi	r28, 0x77	; 119
    2adc:	df 4f       	sbci	r29, 0xFF	; 255
    2ade:	98 81       	ld	r25, Y
    2ae0:	c9 58       	subi	r28, 0x89	; 137
    2ae2:	d0 40       	sbci	r29, 0x00	; 0
    2ae4:	81 2f       	mov	r24, r17
	{
		double t=r;
		r=l;
		l=t;
    2ae6:	c9 57       	subi	r28, 0x79	; 121
    2ae8:	df 4f       	sbci	r29, 0xFF	; 255
    2aea:	68 82       	st	Y, r6
    2aec:	c7 58       	subi	r28, 0x87	; 135
    2aee:	d0 40       	sbci	r29, 0x00	; 0
    2af0:	c8 57       	subi	r28, 0x78	; 120
    2af2:	df 4f       	sbci	r29, 0xFF	; 255
    2af4:	78 82       	st	Y, r7
    2af6:	c8 58       	subi	r28, 0x88	; 136
    2af8:	d0 40       	sbci	r29, 0x00	; 0
    2afa:	c7 57       	subi	r28, 0x77	; 119
    2afc:	df 4f       	sbci	r29, 0xFF	; 255
    2afe:	88 82       	st	Y, r8
    2b00:	c9 58       	subi	r28, 0x89	; 137
    2b02:	d0 40       	sbci	r29, 0x00	; 0
    2b04:	19 2d       	mov	r17, r9
	const int T=25;

	if(l>r)
	{
		double t=r;
		r=l;
    2b06:	63 2e       	mov	r6, r19
    2b08:	72 2e       	mov	r7, r18
    2b0a:	89 2e       	mov	r8, r25
    2b0c:	98 2e       	mov	r9, r24
    2b0e:	2e 01       	movw	r4, r28
    2b10:	2f e1       	ldi	r18, 0x1F	; 31
    2b12:	42 0e       	add	r4, r18
    2b14:	51 1c       	adc	r5, r1
    2b16:	1e 01       	movw	r2, r28
    2b18:	83 e8       	ldi	r24, 0x83	; 131
    2b1a:	28 0e       	add	r2, r24
    2b1c:	31 1c       	adc	r3, r1
    2b1e:	72 01       	movw	r14, r4
	}
	
	double save_y[T];
	
	int w=0;
	for(double x=l;w<T;w++)
    2b20:	c9 57       	subi	r28, 0x79	; 121
    2b22:	df 4f       	sbci	r29, 0xFF	; 255
    2b24:	d8 80       	ld	r13, Y
    2b26:	c7 58       	subi	r28, 0x87	; 135
    2b28:	d0 40       	sbci	r29, 0x00	; 0
    2b2a:	c8 57       	subi	r28, 0x78	; 120
    2b2c:	df 4f       	sbci	r29, 0xFF	; 255
    2b2e:	c8 80       	ld	r12, Y
    2b30:	c8 58       	subi	r28, 0x88	; 136
    2b32:	d0 40       	sbci	r29, 0x00	; 0
    2b34:	c7 57       	subi	r28, 0x77	; 119
    2b36:	df 4f       	sbci	r29, 0xFF	; 255
    2b38:	b8 80       	ld	r11, Y
    2b3a:	c9 58       	subi	r28, 0x89	; 137
    2b3c:	d0 40       	sbci	r29, 0x00	; 0
    2b3e:	a1 2e       	mov	r10, r17
	{
		save_y[w]=evaluate_function(s1,x);
    2b40:	c6 56       	subi	r28, 0x66	; 102
    2b42:	df 4f       	sbci	r29, 0xFF	; 255
    2b44:	59 82       	std	Y+1, r5	; 0x01
    2b46:	48 82       	st	Y, r4
    2b48:	ca 59       	subi	r28, 0x9A	; 154
    2b4a:	d0 40       	sbci	r29, 0x00	; 0
    2b4c:	56 2c       	mov	r5, r6
    2b4e:	47 2c       	mov	r4, r7
    2b50:	71 2e       	mov	r7, r17
    2b52:	cd 57       	subi	r28, 0x7D	; 125
    2b54:	df 4f       	sbci	r29, 0xFF	; 255
    2b56:	88 82       	st	Y, r8
    2b58:	c3 58       	subi	r28, 0x83	; 131
    2b5a:	d0 40       	sbci	r29, 0x00	; 0
    2b5c:	69 2c       	mov	r6, r9
    2b5e:	1b 2d       	mov	r17, r11
    2b60:	0a 2d       	mov	r16, r10
    2b62:	4d 2d       	mov	r20, r13
    2b64:	5c 2d       	mov	r21, r12
    2b66:	61 2f       	mov	r22, r17
    2b68:	70 2f       	mov	r23, r16
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	0b 96       	adiw	r24, 0x0b	; 11
    2b6e:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    2b72:	f7 01       	movw	r30, r14
    2b74:	61 93       	st	Z+, r22
    2b76:	71 93       	st	Z+, r23
    2b78:	81 93       	st	Z+, r24
    2b7a:	91 93       	st	Z+, r25
    2b7c:	7f 01       	movw	r14, r30
		_delay_ms(500);
		dtostrf(save_y[w],1,2,t2);
		show_and_get(t2,t2);
		*/
		//_delay_ms(1000);
		x+=(r-l)/(T-1);
    2b7e:	c9 57       	subi	r28, 0x79	; 121
    2b80:	df 4f       	sbci	r29, 0xFF	; 255
    2b82:	28 81       	ld	r18, Y
    2b84:	c7 58       	subi	r28, 0x87	; 135
    2b86:	d0 40       	sbci	r29, 0x00	; 0
    2b88:	c8 57       	subi	r28, 0x78	; 120
    2b8a:	df 4f       	sbci	r29, 0xFF	; 255
    2b8c:	38 81       	ld	r19, Y
    2b8e:	c8 58       	subi	r28, 0x88	; 136
    2b90:	d0 40       	sbci	r29, 0x00	; 0
    2b92:	c7 57       	subi	r28, 0x77	; 119
    2b94:	df 4f       	sbci	r29, 0xFF	; 255
    2b96:	48 81       	ld	r20, Y
    2b98:	c9 58       	subi	r28, 0x89	; 137
    2b9a:	d0 40       	sbci	r29, 0x00	; 0
    2b9c:	57 2d       	mov	r21, r7
    2b9e:	65 2d       	mov	r22, r5
    2ba0:	74 2d       	mov	r23, r4
    2ba2:	cd 57       	subi	r28, 0x7D	; 125
    2ba4:	df 4f       	sbci	r29, 0xFF	; 255
    2ba6:	88 81       	ld	r24, Y
    2ba8:	c3 58       	subi	r28, 0x83	; 131
    2baa:	d0 40       	sbci	r29, 0x00	; 0
    2bac:	96 2d       	mov	r25, r6
    2bae:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    2bb2:	4b 01       	movw	r8, r22
    2bb4:	5c 01       	movw	r10, r24
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 ec       	ldi	r20, 0xC0	; 192
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    2bc2:	9b 01       	movw	r18, r22
    2bc4:	ac 01       	movw	r20, r24
    2bc6:	6d 2d       	mov	r22, r13
    2bc8:	7c 2d       	mov	r23, r12
    2bca:	81 2f       	mov	r24, r17
    2bcc:	90 2f       	mov	r25, r16
    2bce:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    2bd2:	d6 2e       	mov	r13, r22
    2bd4:	c7 2e       	mov	r12, r23
    2bd6:	18 2f       	mov	r17, r24
    2bd8:	09 2f       	mov	r16, r25
	}
	
	double save_y[T];
	
	int w=0;
	for(double x=l;w<T;w++)
    2bda:	2e 14       	cp	r2, r14
    2bdc:	3f 04       	cpc	r3, r15
    2bde:	09 f6       	brne	.-126    	; 0x2b62 <_Z10graph_plotv+0x1aa>
    2be0:	c6 56       	subi	r28, 0x66	; 102
    2be2:	df 4f       	sbci	r29, 0xFF	; 255
    2be4:	48 80       	ld	r4, Y
    2be6:	59 80       	ldd	r5, Y+1	; 0x01
    2be8:	ca 59       	subi	r28, 0x9A	; 154
    2bea:	d0 40       	sbci	r29, 0x00	; 0
    2bec:	c6 56       	subi	r28, 0x66	; 102
    2bee:	df 4f       	sbci	r29, 0xFF	; 255
    2bf0:	88 82       	st	Y, r8
    2bf2:	99 82       	std	Y+1, r9	; 0x01
    2bf4:	aa 82       	std	Y+2, r10	; 0x02
    2bf6:	bb 82       	std	Y+3, r11	; 0x03
    2bf8:	ca 59       	subi	r28, 0x9A	; 154
    2bfa:	d0 40       	sbci	r29, 0x00	; 0
    2bfc:	17 2d       	mov	r17, r7
    2bfe:	62 01       	movw	r12, r4
    2c00:	61 2c       	mov	r6, r1
    2c02:	71 2c       	mov	r7, r1
    2c04:	ce 56       	subi	r28, 0x6E	; 110
    2c06:	df 4f       	sbci	r29, 0xFF	; 255
    2c08:	18 82       	st	Y, r1
    2c0a:	c2 59       	subi	r28, 0x92	; 146
    2c0c:	d0 40       	sbci	r29, 0x00	; 0
    2c0e:	ca 56       	subi	r28, 0x6A	; 106
    2c10:	df 4f       	sbci	r29, 0xFF	; 255
    2c12:	18 82       	st	Y, r1
    2c14:	c6 59       	subi	r28, 0x96	; 150
    2c16:	d0 40       	sbci	r29, 0x00	; 0
    2c18:	c2 56       	subi	r28, 0x62	; 98
    2c1a:	df 4f       	sbci	r29, 0xFF	; 255
    2c1c:	18 82       	st	Y, r1
    2c1e:	ce 59       	subi	r28, 0x9E	; 158
    2c20:	d0 40       	sbci	r29, 0x00	; 0
    2c22:	c1 56       	subi	r28, 0x61	; 97
    2c24:	df 4f       	sbci	r29, 0xFF	; 255
    2c26:	18 82       	st	Y, r1
    2c28:	cf 59       	subi	r28, 0x9F	; 159
    2c2a:	d0 40       	sbci	r29, 0x00	; 0
    2c2c:	cd 57       	subi	r28, 0x7D	; 125
    2c2e:	df 4f       	sbci	r29, 0xFF	; 255
    2c30:	18 82       	st	Y, r1
    2c32:	19 82       	std	Y+1, r1	; 0x01
    2c34:	1a 82       	std	Y+2, r1	; 0x02
    2c36:	1b 82       	std	Y+3, r1	; 0x03
    2c38:	c3 58       	subi	r28, 0x83	; 131
    2c3a:	d0 40       	sbci	r29, 0x00	; 0
    2c3c:	c0 56       	subi	r28, 0x60	; 96
    2c3e:	df 4f       	sbci	r29, 0xFF	; 255
    2c40:	18 82       	st	Y, r1
    2c42:	c0 5a       	subi	r28, 0xA0	; 160
    2c44:	d0 40       	sbci	r29, 0x00	; 0
    2c46:	cf 55       	subi	r28, 0x5F	; 95
    2c48:	df 4f       	sbci	r29, 0xFF	; 255
    2c4a:	18 82       	st	Y, r1
    2c4c:	c1 5a       	subi	r28, 0xA1	; 161
    2c4e:	d0 40       	sbci	r29, 0x00	; 0
    2c50:	ce 55       	subi	r28, 0x5E	; 94
    2c52:	df 4f       	sbci	r29, 0xFF	; 255
    2c54:	18 82       	st	Y, r1
    2c56:	c2 5a       	subi	r28, 0xA2	; 162
    2c58:	d0 40       	sbci	r29, 0x00	; 0
    2c5a:	cd 55       	subi	r28, 0x5D	; 93
    2c5c:	df 4f       	sbci	r29, 0xFF	; 255
    2c5e:	18 82       	st	Y, r1
    2c60:	c3 5a       	subi	r28, 0xA3	; 163
    2c62:	d0 40       	sbci	r29, 0x00	; 0
    2c64:	00 e0       	ldi	r16, 0x00	; 0
    2c66:	91 2c       	mov	r9, r1
    2c68:	c6 57       	subi	r28, 0x76	; 118
    2c6a:	df 4f       	sbci	r29, 0xFF	; 255
    2c6c:	18 82       	st	Y, r1
    2c6e:	ca 58       	subi	r28, 0x8A	; 138
    2c70:	d0 40       	sbci	r29, 0x00	; 0
    2c72:	c2 57       	subi	r28, 0x72	; 114
    2c74:	df 4f       	sbci	r29, 0xFF	; 255
    2c76:	18 82       	st	Y, r1
    2c78:	ce 58       	subi	r28, 0x8E	; 142
    2c7a:	d0 40       	sbci	r29, 0x00	; 0
    2c7c:	cc 55       	subi	r28, 0x5C	; 92
    2c7e:	df 4f       	sbci	r29, 0xFF	; 255
    2c80:	59 82       	std	Y+1, r5	; 0x01
    2c82:	48 82       	st	Y, r4
    2c84:	c4 5a       	subi	r28, 0xA4	; 164
    2c86:	d0 40       	sbci	r29, 0x00	; 0
    2c88:	ca 55       	subi	r28, 0x5A	; 90
    2c8a:	df 4f       	sbci	r29, 0xFF	; 255
    2c8c:	39 82       	std	Y+1, r3	; 0x01
    2c8e:	28 82       	st	Y, r2
    2c90:	c6 5a       	subi	r28, 0xA6	; 166
    2c92:	d0 40       	sbci	r29, 0x00	; 0
    2c94:	41 2e       	mov	r4, r17
    2c96:	30 2e       	mov	r3, r16
    2c98:	59 2c       	mov	r5, r9

	
	double mxX=0,mxY=0,mnX=0,mnY=0;
	for(int i=0;i<T;i++)
	{
		if(l+i*(r-l)/(T-1)>mxX) mxX=l+i*(r-l)/(T-1);
    2c9a:	b3 01       	movw	r22, r6
    2c9c:	07 2c       	mov	r0, r7
    2c9e:	00 0c       	add	r0, r0
    2ca0:	88 0b       	sbc	r24, r24
    2ca2:	99 0b       	sbc	r25, r25
    2ca4:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__floatsisf>
    2ca8:	c6 56       	subi	r28, 0x66	; 102
    2caa:	df 4f       	sbci	r29, 0xFF	; 255
    2cac:	28 81       	ld	r18, Y
    2cae:	39 81       	ldd	r19, Y+1	; 0x01
    2cb0:	4a 81       	ldd	r20, Y+2	; 0x02
    2cb2:	5b 81       	ldd	r21, Y+3	; 0x03
    2cb4:	ca 59       	subi	r28, 0x9A	; 154
    2cb6:	d0 40       	sbci	r29, 0x00	; 0
    2cb8:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 ec       	ldi	r20, 0xC0	; 192
    2cc2:	51 e4       	ldi	r21, 0x41	; 65
    2cc4:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    2cc8:	c9 57       	subi	r28, 0x79	; 121
    2cca:	df 4f       	sbci	r29, 0xFF	; 255
    2ccc:	28 81       	ld	r18, Y
    2cce:	c7 58       	subi	r28, 0x87	; 135
    2cd0:	d0 40       	sbci	r29, 0x00	; 0
    2cd2:	c8 57       	subi	r28, 0x78	; 120
    2cd4:	df 4f       	sbci	r29, 0xFF	; 255
    2cd6:	38 81       	ld	r19, Y
    2cd8:	c8 58       	subi	r28, 0x88	; 136
    2cda:	d0 40       	sbci	r29, 0x00	; 0
    2cdc:	c7 57       	subi	r28, 0x77	; 119
    2cde:	df 4f       	sbci	r29, 0xFF	; 255
    2ce0:	48 81       	ld	r20, Y
    2ce2:	c9 58       	subi	r28, 0x89	; 137
    2ce4:	d0 40       	sbci	r29, 0x00	; 0
    2ce6:	54 2d       	mov	r21, r4
    2ce8:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    2cec:	06 2f       	mov	r16, r22
    2cee:	17 2f       	mov	r17, r23
    2cf0:	f8 2e       	mov	r15, r24
    2cf2:	e9 2e       	mov	r14, r25
    2cf4:	23 2d       	mov	r18, r3
    2cf6:	35 2d       	mov	r19, r5
    2cf8:	c6 57       	subi	r28, 0x76	; 118
    2cfa:	df 4f       	sbci	r29, 0xFF	; 255
    2cfc:	48 81       	ld	r20, Y
    2cfe:	ca 58       	subi	r28, 0x8A	; 138
    2d00:	d0 40       	sbci	r29, 0x00	; 0
    2d02:	c2 57       	subi	r28, 0x72	; 114
    2d04:	df 4f       	sbci	r29, 0xFF	; 255
    2d06:	58 81       	ld	r21, Y
    2d08:	ce 58       	subi	r28, 0x8E	; 142
    2d0a:	d0 40       	sbci	r29, 0x00	; 0
    2d0c:	0e 94 ef 20 	call	0x41de	; 0x41de <__gesf2>
    2d10:	18 16       	cp	r1, r24
    2d12:	64 f4       	brge	.+24     	; 0x2d2c <_Z10graph_plotv+0x374>
    2d14:	30 2e       	mov	r3, r16
    2d16:	51 2e       	mov	r5, r17
    2d18:	c6 57       	subi	r28, 0x76	; 118
    2d1a:	df 4f       	sbci	r29, 0xFF	; 255
    2d1c:	f8 82       	st	Y, r15
    2d1e:	ca 58       	subi	r28, 0x8A	; 138
    2d20:	d0 40       	sbci	r29, 0x00	; 0
    2d22:	c2 57       	subi	r28, 0x72	; 114
    2d24:	df 4f       	sbci	r29, 0xFF	; 255
    2d26:	e8 82       	st	Y, r14
    2d28:	ce 58       	subi	r28, 0x8E	; 142
    2d2a:	d0 40       	sbci	r29, 0x00	; 0
		if(save_y[i]>mxY) mxY=save_y[i];
    2d2c:	f6 01       	movw	r30, r12
    2d2e:	81 90       	ld	r8, Z+
    2d30:	91 90       	ld	r9, Z+
    2d32:	a1 90       	ld	r10, Z+
    2d34:	b1 90       	ld	r11, Z+
    2d36:	6f 01       	movw	r12, r30
    2d38:	c0 56       	subi	r28, 0x60	; 96
    2d3a:	df 4f       	sbci	r29, 0xFF	; 255
    2d3c:	28 81       	ld	r18, Y
    2d3e:	c0 5a       	subi	r28, 0xA0	; 160
    2d40:	d0 40       	sbci	r29, 0x00	; 0
    2d42:	cf 55       	subi	r28, 0x5F	; 95
    2d44:	df 4f       	sbci	r29, 0xFF	; 255
    2d46:	38 81       	ld	r19, Y
    2d48:	c1 5a       	subi	r28, 0xA1	; 161
    2d4a:	d0 40       	sbci	r29, 0x00	; 0
    2d4c:	ce 55       	subi	r28, 0x5E	; 94
    2d4e:	df 4f       	sbci	r29, 0xFF	; 255
    2d50:	48 81       	ld	r20, Y
    2d52:	c2 5a       	subi	r28, 0xA2	; 162
    2d54:	d0 40       	sbci	r29, 0x00	; 0
    2d56:	cd 55       	subi	r28, 0x5D	; 93
    2d58:	df 4f       	sbci	r29, 0xFF	; 255
    2d5a:	58 81       	ld	r21, Y
    2d5c:	c3 5a       	subi	r28, 0xA3	; 163
    2d5e:	d0 40       	sbci	r29, 0x00	; 0
    2d60:	c5 01       	movw	r24, r10
    2d62:	b4 01       	movw	r22, r8
    2d64:	0e 94 ef 20 	call	0x41de	; 0x41de <__gesf2>
    2d68:	18 16       	cp	r1, r24
    2d6a:	a4 f4       	brge	.+40     	; 0x2d94 <_Z10graph_plotv+0x3dc>
    2d6c:	c0 56       	subi	r28, 0x60	; 96
    2d6e:	df 4f       	sbci	r29, 0xFF	; 255
    2d70:	88 82       	st	Y, r8
    2d72:	c0 5a       	subi	r28, 0xA0	; 160
    2d74:	d0 40       	sbci	r29, 0x00	; 0
    2d76:	cf 55       	subi	r28, 0x5F	; 95
    2d78:	df 4f       	sbci	r29, 0xFF	; 255
    2d7a:	98 82       	st	Y, r9
    2d7c:	c1 5a       	subi	r28, 0xA1	; 161
    2d7e:	d0 40       	sbci	r29, 0x00	; 0
    2d80:	ce 55       	subi	r28, 0x5E	; 94
    2d82:	df 4f       	sbci	r29, 0xFF	; 255
    2d84:	a8 82       	st	Y, r10
    2d86:	c2 5a       	subi	r28, 0xA2	; 162
    2d88:	d0 40       	sbci	r29, 0x00	; 0
    2d8a:	cd 55       	subi	r28, 0x5D	; 93
    2d8c:	df 4f       	sbci	r29, 0xFF	; 255
    2d8e:	b8 82       	st	Y, r11
    2d90:	c3 5a       	subi	r28, 0xA3	; 163
    2d92:	d0 40       	sbci	r29, 0x00	; 0
		
		if(l+i*(r-l)/(T-1)<mnX) mnX=l+i*(r-l)/(T-1);
    2d94:	cd 57       	subi	r28, 0x7D	; 125
    2d96:	df 4f       	sbci	r29, 0xFF	; 255
    2d98:	28 81       	ld	r18, Y
    2d9a:	39 81       	ldd	r19, Y+1	; 0x01
    2d9c:	4a 81       	ldd	r20, Y+2	; 0x02
    2d9e:	5b 81       	ldd	r21, Y+3	; 0x03
    2da0:	c3 58       	subi	r28, 0x83	; 131
    2da2:	d0 40       	sbci	r29, 0x00	; 0
    2da4:	60 2f       	mov	r22, r16
    2da6:	71 2f       	mov	r23, r17
    2da8:	8f 2d       	mov	r24, r15
    2daa:	9e 2d       	mov	r25, r14
    2dac:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__cmpsf2>
    2db0:	88 23       	and	r24, r24
    2db2:	64 f4       	brge	.+24     	; 0x2dcc <_Z10graph_plotv+0x414>
    2db4:	80 2f       	mov	r24, r16
    2db6:	91 2f       	mov	r25, r17
    2db8:	af 2d       	mov	r26, r15
    2dba:	be 2d       	mov	r27, r14
    2dbc:	cd 57       	subi	r28, 0x7D	; 125
    2dbe:	df 4f       	sbci	r29, 0xFF	; 255
    2dc0:	88 83       	st	Y, r24
    2dc2:	99 83       	std	Y+1, r25	; 0x01
    2dc4:	aa 83       	std	Y+2, r26	; 0x02
    2dc6:	bb 83       	std	Y+3, r27	; 0x03
    2dc8:	c3 58       	subi	r28, 0x83	; 131
    2dca:	d0 40       	sbci	r29, 0x00	; 0
		if(save_y[i]<mnY) mnY=save_y[i];	
    2dcc:	ce 56       	subi	r28, 0x6E	; 110
    2dce:	df 4f       	sbci	r29, 0xFF	; 255
    2dd0:	28 81       	ld	r18, Y
    2dd2:	c2 59       	subi	r28, 0x92	; 146
    2dd4:	d0 40       	sbci	r29, 0x00	; 0
    2dd6:	ca 56       	subi	r28, 0x6A	; 106
    2dd8:	df 4f       	sbci	r29, 0xFF	; 255
    2dda:	38 81       	ld	r19, Y
    2ddc:	c6 59       	subi	r28, 0x96	; 150
    2dde:	d0 40       	sbci	r29, 0x00	; 0
    2de0:	c2 56       	subi	r28, 0x62	; 98
    2de2:	df 4f       	sbci	r29, 0xFF	; 255
    2de4:	48 81       	ld	r20, Y
    2de6:	ce 59       	subi	r28, 0x9E	; 158
    2de8:	d0 40       	sbci	r29, 0x00	; 0
    2dea:	c1 56       	subi	r28, 0x61	; 97
    2dec:	df 4f       	sbci	r29, 0xFF	; 255
    2dee:	58 81       	ld	r21, Y
    2df0:	cf 59       	subi	r28, 0x9F	; 159
    2df2:	d0 40       	sbci	r29, 0x00	; 0
    2df4:	c5 01       	movw	r24, r10
    2df6:	b4 01       	movw	r22, r8
    2df8:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__cmpsf2>
    2dfc:	88 23       	and	r24, r24
    2dfe:	a4 f4       	brge	.+40     	; 0x2e28 <_Z10graph_plotv+0x470>
    2e00:	ce 56       	subi	r28, 0x6E	; 110
    2e02:	df 4f       	sbci	r29, 0xFF	; 255
    2e04:	88 82       	st	Y, r8
    2e06:	c2 59       	subi	r28, 0x92	; 146
    2e08:	d0 40       	sbci	r29, 0x00	; 0
    2e0a:	ca 56       	subi	r28, 0x6A	; 106
    2e0c:	df 4f       	sbci	r29, 0xFF	; 255
    2e0e:	98 82       	st	Y, r9
    2e10:	c6 59       	subi	r28, 0x96	; 150
    2e12:	d0 40       	sbci	r29, 0x00	; 0
    2e14:	c2 56       	subi	r28, 0x62	; 98
    2e16:	df 4f       	sbci	r29, 0xFF	; 255
    2e18:	a8 82       	st	Y, r10
    2e1a:	ce 59       	subi	r28, 0x9E	; 158
    2e1c:	d0 40       	sbci	r29, 0x00	; 0
    2e1e:	c1 56       	subi	r28, 0x61	; 97
    2e20:	df 4f       	sbci	r29, 0xFF	; 255
    2e22:	b8 82       	st	Y, r11
    2e24:	cf 59       	subi	r28, 0x9F	; 159
    2e26:	d0 40       	sbci	r29, 0x00	; 0
	}
	//l+i*(r-l)/(T-1)

	
	double mxX=0,mxY=0,mnX=0,mnY=0;
	for(int i=0;i<T;i++)
    2e28:	ff ef       	ldi	r31, 0xFF	; 255
    2e2a:	6f 1a       	sub	r6, r31
    2e2c:	7f 0a       	sbc	r7, r31
    2e2e:	29 e1       	ldi	r18, 0x19	; 25
    2e30:	62 16       	cp	r6, r18
    2e32:	71 04       	cpc	r7, r1
    2e34:	09 f0       	breq	.+2      	; 0x2e38 <_Z10graph_plotv+0x480>
    2e36:	31 cf       	rjmp	.-414    	; 0x2c9a <_Z10graph_plotv+0x2e2>
    2e38:	14 2d       	mov	r17, r4
    2e3a:	03 2d       	mov	r16, r3
    2e3c:	ca 55       	subi	r28, 0x5A	; 90
    2e3e:	df 4f       	sbci	r29, 0xFF	; 255
    2e40:	28 80       	ld	r2, Y
    2e42:	39 80       	ldd	r3, Y+1	; 0x01
    2e44:	c6 5a       	subi	r28, 0xA6	; 166
    2e46:	d0 40       	sbci	r29, 0x00	; 0
    2e48:	95 2c       	mov	r9, r5
    2e4a:	cc 55       	subi	r28, 0x5C	; 92
    2e4c:	df 4f       	sbci	r29, 0xFF	; 255
    2e4e:	48 80       	ld	r4, Y
    2e50:	59 80       	ldd	r5, Y+1	; 0x01
    2e52:	c4 5a       	subi	r28, 0xA4	; 164
    2e54:	d0 40       	sbci	r29, 0x00	; 0
    2e56:	72 01       	movw	r14, r4
    2e58:	ce 56       	subi	r28, 0x6E	; 110
    2e5a:	df 4f       	sbci	r29, 0xFF	; 255
    2e5c:	d8 80       	ld	r13, Y
    2e5e:	c2 59       	subi	r28, 0x92	; 146
    2e60:	d0 40       	sbci	r29, 0x00	; 0
    2e62:	ca 56       	subi	r28, 0x6A	; 106
    2e64:	df 4f       	sbci	r29, 0xFF	; 255
    2e66:	c8 80       	ld	r12, Y
    2e68:	c6 59       	subi	r28, 0x96	; 150
    2e6a:	d0 40       	sbci	r29, 0x00	; 0
    2e6c:	c2 56       	subi	r28, 0x62	; 98
    2e6e:	df 4f       	sbci	r29, 0xFF	; 255
    2e70:	b8 80       	ld	r11, Y
    2e72:	ce 59       	subi	r28, 0x9E	; 158
    2e74:	d0 40       	sbci	r29, 0x00	; 0
    2e76:	c1 56       	subi	r28, 0x61	; 97
    2e78:	df 4f       	sbci	r29, 0xFF	; 255
    2e7a:	a8 80       	ld	r10, Y
    2e7c:	cf 59       	subi	r28, 0x9F	; 159
    2e7e:	d0 40       	sbci	r29, 0x00	; 0
		if(l+i*(r-l)/(T-1)<mnX) mnX=l+i*(r-l)/(T-1);
		if(save_y[i]<mnY) mnY=save_y[i];	
	}
	for(int i=0;i<T;i++)
	{
		save_y[i]-=mnY;
    2e80:	2d 2d       	mov	r18, r13
    2e82:	3c 2d       	mov	r19, r12
    2e84:	4b 2d       	mov	r20, r11
    2e86:	5a 2d       	mov	r21, r10
    2e88:	f7 01       	movw	r30, r14
    2e8a:	60 81       	ld	r22, Z
    2e8c:	71 81       	ldd	r23, Z+1	; 0x01
    2e8e:	82 81       	ldd	r24, Z+2	; 0x02
    2e90:	93 81       	ldd	r25, Z+3	; 0x03
    2e92:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    2e96:	f7 01       	movw	r30, r14
    2e98:	61 93       	st	Z+, r22
    2e9a:	71 93       	st	Z+, r23
    2e9c:	81 93       	st	Z+, r24
    2e9e:	91 93       	st	Z+, r25
    2ea0:	7f 01       	movw	r14, r30
		if(save_y[i]>mxY) mxY=save_y[i];
		
		if(l+i*(r-l)/(T-1)<mnX) mnX=l+i*(r-l)/(T-1);
		if(save_y[i]<mnY) mnY=save_y[i];	
	}
	for(int i=0;i<T;i++)
    2ea2:	2e 16       	cp	r2, r30
    2ea4:	3f 06       	cpc	r3, r31
    2ea6:	61 f7       	brne	.-40     	; 0x2e80 <_Z10graph_plotv+0x4c8>
	{
		save_y[i]-=mnY;
	}
	//((l+i*(r-l)/(T-1))-mnX)
	double scaleX=120/(mxX-mnX);
    2ea8:	cd 57       	subi	r28, 0x7D	; 125
    2eaa:	df 4f       	sbci	r29, 0xFF	; 255
    2eac:	28 81       	ld	r18, Y
    2eae:	39 81       	ldd	r19, Y+1	; 0x01
    2eb0:	4a 81       	ldd	r20, Y+2	; 0x02
    2eb2:	5b 81       	ldd	r21, Y+3	; 0x03
    2eb4:	c3 58       	subi	r28, 0x83	; 131
    2eb6:	d0 40       	sbci	r29, 0x00	; 0
    2eb8:	60 2f       	mov	r22, r16
    2eba:	79 2d       	mov	r23, r9
    2ebc:	c6 57       	subi	r28, 0x76	; 118
    2ebe:	df 4f       	sbci	r29, 0xFF	; 255
    2ec0:	88 81       	ld	r24, Y
    2ec2:	ca 58       	subi	r28, 0x8A	; 138
    2ec4:	d0 40       	sbci	r29, 0x00	; 0
    2ec6:	c2 57       	subi	r28, 0x72	; 114
    2ec8:	df 4f       	sbci	r29, 0xFF	; 255
    2eca:	98 81       	ld	r25, Y
    2ecc:	ce 58       	subi	r28, 0x8E	; 142
    2ece:	d0 40       	sbci	r29, 0x00	; 0
    2ed0:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    2ed4:	9b 01       	movw	r18, r22
    2ed6:	ac 01       	movw	r20, r24
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	70 e0       	ldi	r23, 0x00	; 0
    2edc:	80 ef       	ldi	r24, 0xF0	; 240
    2ede:	92 e4       	ldi	r25, 0x42	; 66
    2ee0:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    2ee4:	c6 57       	subi	r28, 0x76	; 118
    2ee6:	df 4f       	sbci	r29, 0xFF	; 255
    2ee8:	68 83       	st	Y, r22
    2eea:	79 83       	std	Y+1, r23	; 0x01
    2eec:	8a 83       	std	Y+2, r24	; 0x02
    2eee:	9b 83       	std	Y+3, r25	; 0x03
    2ef0:	ca 58       	subi	r28, 0x8A	; 138
    2ef2:	d0 40       	sbci	r29, 0x00	; 0
	double scaleY=60/(mxY-mnY);
    2ef4:	ce 56       	subi	r28, 0x6E	; 110
    2ef6:	df 4f       	sbci	r29, 0xFF	; 255
    2ef8:	28 81       	ld	r18, Y
    2efa:	c2 59       	subi	r28, 0x92	; 146
    2efc:	d0 40       	sbci	r29, 0x00	; 0
    2efe:	ca 56       	subi	r28, 0x6A	; 106
    2f00:	df 4f       	sbci	r29, 0xFF	; 255
    2f02:	38 81       	ld	r19, Y
    2f04:	c6 59       	subi	r28, 0x96	; 150
    2f06:	d0 40       	sbci	r29, 0x00	; 0
    2f08:	c2 56       	subi	r28, 0x62	; 98
    2f0a:	df 4f       	sbci	r29, 0xFF	; 255
    2f0c:	48 81       	ld	r20, Y
    2f0e:	ce 59       	subi	r28, 0x9E	; 158
    2f10:	d0 40       	sbci	r29, 0x00	; 0
    2f12:	c1 56       	subi	r28, 0x61	; 97
    2f14:	df 4f       	sbci	r29, 0xFF	; 255
    2f16:	58 81       	ld	r21, Y
    2f18:	cf 59       	subi	r28, 0x9F	; 159
    2f1a:	d0 40       	sbci	r29, 0x00	; 0
    2f1c:	c0 56       	subi	r28, 0x60	; 96
    2f1e:	df 4f       	sbci	r29, 0xFF	; 255
    2f20:	68 81       	ld	r22, Y
    2f22:	c0 5a       	subi	r28, 0xA0	; 160
    2f24:	d0 40       	sbci	r29, 0x00	; 0
    2f26:	cf 55       	subi	r28, 0x5F	; 95
    2f28:	df 4f       	sbci	r29, 0xFF	; 255
    2f2a:	78 81       	ld	r23, Y
    2f2c:	c1 5a       	subi	r28, 0xA1	; 161
    2f2e:	d0 40       	sbci	r29, 0x00	; 0
    2f30:	ce 55       	subi	r28, 0x5E	; 94
    2f32:	df 4f       	sbci	r29, 0xFF	; 255
    2f34:	88 81       	ld	r24, Y
    2f36:	c2 5a       	subi	r28, 0xA2	; 162
    2f38:	d0 40       	sbci	r29, 0x00	; 0
    2f3a:	cd 55       	subi	r28, 0x5D	; 93
    2f3c:	df 4f       	sbci	r29, 0xFF	; 255
    2f3e:	98 81       	ld	r25, Y
    2f40:	c3 5a       	subi	r28, 0xA3	; 163
    2f42:	d0 40       	sbci	r29, 0x00	; 0
    2f44:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    2f48:	9b 01       	movw	r18, r22
    2f4a:	ac 01       	movw	r20, r24
    2f4c:	60 e0       	ldi	r22, 0x00	; 0
    2f4e:	70 e0       	ldi	r23, 0x00	; 0
    2f50:	80 e7       	ldi	r24, 0x70	; 112
    2f52:	92 e4       	ldi	r25, 0x42	; 66
    2f54:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    2f58:	c2 57       	subi	r28, 0x72	; 114
    2f5a:	df 4f       	sbci	r29, 0xFF	; 255
    2f5c:	68 83       	st	Y, r22
    2f5e:	79 83       	std	Y+1, r23	; 0x01
    2f60:	8a 83       	std	Y+2, r24	; 0x02
    2f62:	9b 83       	std	Y+3, r25	; 0x03
    2f64:	ce 58       	subi	r28, 0x8E	; 142
    2f66:	d0 40       	sbci	r29, 0x00	; 0

	LCD_Clear();
    2f68:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
    2f6c:	ff ef       	ldi	r31, 0xFF	; 255
    2f6e:	24 e3       	ldi	r18, 0x34	; 52
    2f70:	8c e0       	ldi	r24, 0x0C	; 12
    2f72:	f1 50       	subi	r31, 0x01	; 1
    2f74:	20 40       	sbci	r18, 0x00	; 0
    2f76:	80 40       	sbci	r24, 0x00	; 0
    2f78:	e1 f7       	brne	.-8      	; 0x2f72 <_Z10graph_plotv+0x5ba>
    2f7a:	00 c0       	rjmp	.+0      	; 0x2f7c <_Z10graph_plotv+0x5c4>
    2f7c:	00 00       	nop
    2f7e:	89 e1       	ldi	r24, 0x19	; 25
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	01 97       	sbiw	r24, 0x01	; 1
	_delay_ms(500);
	
	
	for(int i=0;i<T;i++)
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <_Z10graph_plotv+0x5ca>
		//i_x[i]=round(save_x[i]*scaleX);
		//i_y[i]=63-round(save_y[i]*scaleY);
	}
	for(int y=0;y<64;y++)
	{
		int x=round((-mnX)*scaleX);
    2f86:	c6 57       	subi	r28, 0x76	; 118
    2f88:	df 4f       	sbci	r29, 0xFF	; 255
    2f8a:	28 81       	ld	r18, Y
    2f8c:	39 81       	ldd	r19, Y+1	; 0x01
    2f8e:	4a 81       	ldd	r20, Y+2	; 0x02
    2f90:	5b 81       	ldd	r21, Y+3	; 0x03
    2f92:	ca 58       	subi	r28, 0x8A	; 138
    2f94:	d0 40       	sbci	r29, 0x00	; 0
    2f96:	cd 57       	subi	r28, 0x7D	; 125
    2f98:	df 4f       	sbci	r29, 0xFF	; 255
    2f9a:	68 81       	ld	r22, Y
    2f9c:	79 81       	ldd	r23, Y+1	; 0x01
    2f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa2:	c3 58       	subi	r28, 0x83	; 131
    2fa4:	d0 40       	sbci	r29, 0x00	; 0
    2fa6:	90 58       	subi	r25, 0x80	; 128
    2fa8:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    2fac:	0e 94 7f 22 	call	0x44fe	; 0x44fe <round>
		PutPixel(x,y,1);
    2fb0:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__fixsfsi>
    2fb4:	f6 2e       	mov	r15, r22
    2fb6:	00 e0       	ldi	r16, 0x00	; 0
    2fb8:	41 e0       	ldi	r20, 0x01	; 1
    2fba:	60 2f       	mov	r22, r16
    2fbc:	8f 2d       	mov	r24, r15
    2fbe:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
    2fc2:	0f 5f       	subi	r16, 0xFF	; 255
	for(int i=0;i<T;i++)
	{
		//i_x[i]=round(save_x[i]*scaleX);
		//i_y[i]=63-round(save_y[i]*scaleY);
	}
	for(int y=0;y<64;y++)
    2fc4:	00 34       	cpi	r16, 0x40	; 64
    2fc6:	c1 f7       	brne	.-16     	; 0x2fb8 <_Z10graph_plotv+0x600>
		int x=round((-mnX)*scaleX);
		PutPixel(x,y,1);
	}
	for(int x=0;x<128;x++)
	{
		int y=63-round((-mnY)*scaleY);
    2fc8:	c2 57       	subi	r28, 0x72	; 114
    2fca:	df 4f       	sbci	r29, 0xFF	; 255
    2fcc:	28 81       	ld	r18, Y
    2fce:	39 81       	ldd	r19, Y+1	; 0x01
    2fd0:	4a 81       	ldd	r20, Y+2	; 0x02
    2fd2:	5b 81       	ldd	r21, Y+3	; 0x03
    2fd4:	ce 58       	subi	r28, 0x8E	; 142
    2fd6:	d0 40       	sbci	r29, 0x00	; 0
    2fd8:	ce 56       	subi	r28, 0x6E	; 110
    2fda:	df 4f       	sbci	r29, 0xFF	; 255
    2fdc:	68 81       	ld	r22, Y
    2fde:	c2 59       	subi	r28, 0x92	; 146
    2fe0:	d0 40       	sbci	r29, 0x00	; 0
    2fe2:	ca 56       	subi	r28, 0x6A	; 106
    2fe4:	df 4f       	sbci	r29, 0xFF	; 255
    2fe6:	78 81       	ld	r23, Y
    2fe8:	c6 59       	subi	r28, 0x96	; 150
    2fea:	d0 40       	sbci	r29, 0x00	; 0
    2fec:	c2 56       	subi	r28, 0x62	; 98
    2fee:	df 4f       	sbci	r29, 0xFF	; 255
    2ff0:	88 81       	ld	r24, Y
    2ff2:	ce 59       	subi	r28, 0x9E	; 158
    2ff4:	d0 40       	sbci	r29, 0x00	; 0
    2ff6:	c1 56       	subi	r28, 0x61	; 97
    2ff8:	df 4f       	sbci	r29, 0xFF	; 255
    2ffa:	98 81       	ld	r25, Y
    2ffc:	cf 59       	subi	r28, 0x9F	; 159
    2ffe:	d0 40       	sbci	r29, 0x00	; 0
    3000:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    3004:	0e 94 7f 22 	call	0x44fe	; 0x44fe <round>
		PutPixel(x,y,1);
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	4c e7       	ldi	r20, 0x7C	; 124
    300e:	52 e4       	ldi	r21, 0x42	; 66
    3010:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    3014:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__fixsfsi>
    3018:	f6 2e       	mov	r15, r22
    301a:	00 e0       	ldi	r16, 0x00	; 0
    301c:	41 e0       	ldi	r20, 0x01	; 1
    301e:	6f 2d       	mov	r22, r15
    3020:	80 2f       	mov	r24, r16
    3022:	0e 94 c3 02 	call	0x586	; 0x586 <_Z8PutPixelhhc>
    3026:	0f 5f       	subi	r16, 0xFF	; 255
	for(int y=0;y<64;y++)
	{
		int x=round((-mnX)*scaleX);
		PutPixel(x,y,1);
	}
	for(int x=0;x<128;x++)
    3028:	00 38       	cpi	r16, 0x80	; 128
    302a:	c1 f7       	brne	.-16     	; 0x301c <_Z10graph_plotv+0x664>
    302c:	22 24       	eor	r2, r2
    302e:	23 94       	inc	r2
    3030:	31 2c       	mov	r3, r1
    3032:	71 2e       	mov	r7, r17
	}
	
	for(int i=1;i<T;i++)
	{
		//PutPixel(i_x[i],i_y[i],1);
		line(round(((l+(i-1)*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i-1]*scaleY),round(((l+i*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i]*scaleY),1);
    3034:	f2 01       	movw	r30, r4
    3036:	24 81       	ldd	r18, Z+4	; 0x04
    3038:	35 81       	ldd	r19, Z+5	; 0x05
    303a:	46 81       	ldd	r20, Z+6	; 0x06
    303c:	57 81       	ldd	r21, Z+7	; 0x07
    303e:	c2 57       	subi	r28, 0x72	; 114
    3040:	df 4f       	sbci	r29, 0xFF	; 255
    3042:	68 81       	ld	r22, Y
    3044:	79 81       	ldd	r23, Y+1	; 0x01
    3046:	8a 81       	ldd	r24, Y+2	; 0x02
    3048:	9b 81       	ldd	r25, Y+3	; 0x03
    304a:	ce 58       	subi	r28, 0x8E	; 142
    304c:	d0 40       	sbci	r29, 0x00	; 0
    304e:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    3052:	0e 94 7f 22 	call	0x44fe	; 0x44fe <round>
    3056:	ce 56       	subi	r28, 0x6E	; 110
    3058:	df 4f       	sbci	r29, 0xFF	; 255
    305a:	68 83       	st	Y, r22
    305c:	79 83       	std	Y+1, r23	; 0x01
    305e:	8a 83       	std	Y+2, r24	; 0x02
    3060:	9b 83       	std	Y+3, r25	; 0x03
    3062:	c2 59       	subi	r28, 0x92	; 146
    3064:	d0 40       	sbci	r29, 0x00	; 0
    3066:	b1 01       	movw	r22, r2
    3068:	03 2c       	mov	r0, r3
    306a:	00 0c       	add	r0, r0
    306c:	88 0b       	sbc	r24, r24
    306e:	99 0b       	sbc	r25, r25
    3070:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__floatsisf>
    3074:	c6 56       	subi	r28, 0x66	; 102
    3076:	df 4f       	sbci	r29, 0xFF	; 255
    3078:	28 81       	ld	r18, Y
    307a:	39 81       	ldd	r19, Y+1	; 0x01
    307c:	4a 81       	ldd	r20, Y+2	; 0x02
    307e:	5b 81       	ldd	r21, Y+3	; 0x03
    3080:	ca 59       	subi	r28, 0x9A	; 154
    3082:	d0 40       	sbci	r29, 0x00	; 0
    3084:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 ec       	ldi	r20, 0xC0	; 192
    308e:	51 e4       	ldi	r21, 0x41	; 65
    3090:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    3094:	c9 57       	subi	r28, 0x79	; 121
    3096:	df 4f       	sbci	r29, 0xFF	; 255
    3098:	28 81       	ld	r18, Y
    309a:	c7 58       	subi	r28, 0x87	; 135
    309c:	d0 40       	sbci	r29, 0x00	; 0
    309e:	c8 57       	subi	r28, 0x78	; 120
    30a0:	df 4f       	sbci	r29, 0xFF	; 255
    30a2:	38 81       	ld	r19, Y
    30a4:	c8 58       	subi	r28, 0x88	; 136
    30a6:	d0 40       	sbci	r29, 0x00	; 0
    30a8:	c7 57       	subi	r28, 0x77	; 119
    30aa:	df 4f       	sbci	r29, 0xFF	; 255
    30ac:	48 81       	ld	r20, Y
    30ae:	c9 58       	subi	r28, 0x89	; 137
    30b0:	d0 40       	sbci	r29, 0x00	; 0
    30b2:	57 2d       	mov	r21, r7
    30b4:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    30b8:	cd 57       	subi	r28, 0x7D	; 125
    30ba:	df 4f       	sbci	r29, 0xFF	; 255
    30bc:	28 81       	ld	r18, Y
    30be:	39 81       	ldd	r19, Y+1	; 0x01
    30c0:	4a 81       	ldd	r20, Y+2	; 0x02
    30c2:	5b 81       	ldd	r21, Y+3	; 0x03
    30c4:	c3 58       	subi	r28, 0x83	; 131
    30c6:	d0 40       	sbci	r29, 0x00	; 0
    30c8:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    30cc:	c6 57       	subi	r28, 0x76	; 118
    30ce:	df 4f       	sbci	r29, 0xFF	; 255
    30d0:	28 81       	ld	r18, Y
    30d2:	39 81       	ldd	r19, Y+1	; 0x01
    30d4:	4a 81       	ldd	r20, Y+2	; 0x02
    30d6:	5b 81       	ldd	r21, Y+3	; 0x03
    30d8:	ca 58       	subi	r28, 0x8A	; 138
    30da:	d0 40       	sbci	r29, 0x00	; 0
    30dc:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    30e0:	0e 94 7f 22 	call	0x44fe	; 0x44fe <round>
    30e4:	ca 56       	subi	r28, 0x6A	; 106
    30e6:	df 4f       	sbci	r29, 0xFF	; 255
    30e8:	68 83       	st	Y, r22
    30ea:	79 83       	std	Y+1, r23	; 0x01
    30ec:	8a 83       	std	Y+2, r24	; 0x02
    30ee:	9b 83       	std	Y+3, r25	; 0x03
    30f0:	c6 59       	subi	r28, 0x96	; 150
    30f2:	d0 40       	sbci	r29, 0x00	; 0
    30f4:	f2 01       	movw	r30, r4
    30f6:	20 81       	ld	r18, Z
    30f8:	31 81       	ldd	r19, Z+1	; 0x01
    30fa:	42 81       	ldd	r20, Z+2	; 0x02
    30fc:	53 81       	ldd	r21, Z+3	; 0x03
    30fe:	f4 e0       	ldi	r31, 0x04	; 4
    3100:	4f 0e       	add	r4, r31
    3102:	51 1c       	adc	r5, r1
    3104:	c2 57       	subi	r28, 0x72	; 114
    3106:	df 4f       	sbci	r29, 0xFF	; 255
    3108:	68 81       	ld	r22, Y
    310a:	79 81       	ldd	r23, Y+1	; 0x01
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	9b 81       	ldd	r25, Y+3	; 0x03
    3110:	ce 58       	subi	r28, 0x8E	; 142
    3112:	d0 40       	sbci	r29, 0x00	; 0
    3114:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    3118:	0e 94 7f 22 	call	0x44fe	; 0x44fe <round>
    311c:	4b 01       	movw	r8, r22
    311e:	5c 01       	movw	r10, r24
    3120:	b1 01       	movw	r22, r2
    3122:	61 50       	subi	r22, 0x01	; 1
    3124:	71 09       	sbc	r23, r1
    3126:	07 2e       	mov	r0, r23
    3128:	00 0c       	add	r0, r0
    312a:	88 0b       	sbc	r24, r24
    312c:	99 0b       	sbc	r25, r25
    312e:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__floatsisf>
    3132:	c6 56       	subi	r28, 0x66	; 102
    3134:	df 4f       	sbci	r29, 0xFF	; 255
    3136:	28 81       	ld	r18, Y
    3138:	39 81       	ldd	r19, Y+1	; 0x01
    313a:	4a 81       	ldd	r20, Y+2	; 0x02
    313c:	5b 81       	ldd	r21, Y+3	; 0x03
    313e:	ca 59       	subi	r28, 0x9A	; 154
    3140:	d0 40       	sbci	r29, 0x00	; 0
    3142:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 ec       	ldi	r20, 0xC0	; 192
    314c:	51 e4       	ldi	r21, 0x41	; 65
    314e:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    3152:	c9 57       	subi	r28, 0x79	; 121
    3154:	df 4f       	sbci	r29, 0xFF	; 255
    3156:	28 81       	ld	r18, Y
    3158:	c7 58       	subi	r28, 0x87	; 135
    315a:	d0 40       	sbci	r29, 0x00	; 0
    315c:	c8 57       	subi	r28, 0x78	; 120
    315e:	df 4f       	sbci	r29, 0xFF	; 255
    3160:	38 81       	ld	r19, Y
    3162:	c8 58       	subi	r28, 0x88	; 136
    3164:	d0 40       	sbci	r29, 0x00	; 0
    3166:	c7 57       	subi	r28, 0x77	; 119
    3168:	df 4f       	sbci	r29, 0xFF	; 255
    316a:	48 81       	ld	r20, Y
    316c:	c9 58       	subi	r28, 0x89	; 137
    316e:	d0 40       	sbci	r29, 0x00	; 0
    3170:	57 2d       	mov	r21, r7
    3172:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    3176:	cd 57       	subi	r28, 0x7D	; 125
    3178:	df 4f       	sbci	r29, 0xFF	; 255
    317a:	28 81       	ld	r18, Y
    317c:	39 81       	ldd	r19, Y+1	; 0x01
    317e:	4a 81       	ldd	r20, Y+2	; 0x02
    3180:	5b 81       	ldd	r21, Y+3	; 0x03
    3182:	c3 58       	subi	r28, 0x83	; 131
    3184:	d0 40       	sbci	r29, 0x00	; 0
    3186:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    318a:	c6 57       	subi	r28, 0x76	; 118
    318c:	df 4f       	sbci	r29, 0xFF	; 255
    318e:	28 81       	ld	r18, Y
    3190:	39 81       	ldd	r19, Y+1	; 0x01
    3192:	4a 81       	ldd	r20, Y+2	; 0x02
    3194:	5b 81       	ldd	r21, Y+3	; 0x03
    3196:	ca 58       	subi	r28, 0x8A	; 138
    3198:	d0 40       	sbci	r29, 0x00	; 0
    319a:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    319e:	0e 94 7f 22 	call	0x44fe	; 0x44fe <round>
    31a2:	6b 01       	movw	r12, r22
    31a4:	7c 01       	movw	r14, r24
    31a6:	ce 56       	subi	r28, 0x6E	; 110
    31a8:	df 4f       	sbci	r29, 0xFF	; 255
    31aa:	28 81       	ld	r18, Y
    31ac:	39 81       	ldd	r19, Y+1	; 0x01
    31ae:	4a 81       	ldd	r20, Y+2	; 0x02
    31b0:	5b 81       	ldd	r21, Y+3	; 0x03
    31b2:	c2 59       	subi	r28, 0x92	; 146
    31b4:	d0 40       	sbci	r29, 0x00	; 0
    31b6:	60 e0       	ldi	r22, 0x00	; 0
    31b8:	70 e0       	ldi	r23, 0x00	; 0
    31ba:	8c e7       	ldi	r24, 0x7C	; 124
    31bc:	92 e4       	ldi	r25, 0x42	; 66
    31be:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    31c2:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__fixunssfsi>
    31c6:	16 2f       	mov	r17, r22
    31c8:	ca 56       	subi	r28, 0x6A	; 106
    31ca:	df 4f       	sbci	r29, 0xFF	; 255
    31cc:	68 81       	ld	r22, Y
    31ce:	79 81       	ldd	r23, Y+1	; 0x01
    31d0:	8a 81       	ldd	r24, Y+2	; 0x02
    31d2:	9b 81       	ldd	r25, Y+3	; 0x03
    31d4:	c6 59       	subi	r28, 0x96	; 150
    31d6:	d0 40       	sbci	r29, 0x00	; 0
    31d8:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__fixunssfsi>
    31dc:	66 2e       	mov	r6, r22
    31de:	a5 01       	movw	r20, r10
    31e0:	94 01       	movw	r18, r8
    31e2:	60 e0       	ldi	r22, 0x00	; 0
    31e4:	70 e0       	ldi	r23, 0x00	; 0
    31e6:	8c e7       	ldi	r24, 0x7C	; 124
    31e8:	92 e4       	ldi	r25, 0x42	; 66
    31ea:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    31ee:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__fixunssfsi>
    31f2:	b6 2e       	mov	r11, r22
    31f4:	c7 01       	movw	r24, r14
    31f6:	b6 01       	movw	r22, r12
    31f8:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__fixunssfsi>
    31fc:	86 2f       	mov	r24, r22
    31fe:	01 e0       	ldi	r16, 0x01	; 1
    3200:	21 2f       	mov	r18, r17
    3202:	46 2d       	mov	r20, r6
    3204:	6b 2d       	mov	r22, r11
    3206:	0e 94 84 03 	call	0x708	; 0x708 <_Z4lineccccc>
    320a:	2f e7       	ldi	r18, 0x7F	; 127
    320c:	88 e3       	ldi	r24, 0x38	; 56
    320e:	91 e0       	ldi	r25, 0x01	; 1
    3210:	21 50       	subi	r18, 0x01	; 1
    3212:	80 40       	sbci	r24, 0x00	; 0
    3214:	90 40       	sbci	r25, 0x00	; 0
    3216:	e1 f7       	brne	.-8      	; 0x3210 <_Z10graph_plotv+0x858>
    3218:	00 c0       	rjmp	.+0      	; 0x321a <_Z10graph_plotv+0x862>
    321a:	00 00       	nop
	{
		int y=63-round((-mnY)*scaleY);
		PutPixel(x,y,1);
	}
	
	for(int i=1;i<T;i++)
    321c:	ef ef       	ldi	r30, 0xFF	; 255
    321e:	2e 1a       	sub	r2, r30
    3220:	3e 0a       	sbc	r3, r30
    3222:	f9 e1       	ldi	r31, 0x19	; 25
    3224:	2f 16       	cp	r2, r31
    3226:	31 04       	cpc	r3, r1
    3228:	09 f0       	breq	.+2      	; 0x322c <_Z10graph_plotv+0x874>
    322a:	04 cf       	rjmp	.-504    	; 0x3034 <_Z10graph_plotv+0x67c>
		line(round(((l+(i-1)*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i-1]*scaleY),round(((l+i*(r-l)/(T-1))-mnX)*scaleX),63-round(save_y[i]*scaleY),1);
		_delay_ms(50);
	}

	
    322c:	c9 55       	subi	r28, 0x59	; 89
    322e:	df 4f       	sbci	r29, 0xFF	; 255
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	f8 94       	cli
    3234:	de bf       	out	0x3e, r29	; 62
    3236:	0f be       	out	0x3f, r0	; 63
    3238:	cd bf       	out	0x3d, r28	; 61
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	1f 91       	pop	r17
    3240:	0f 91       	pop	r16
    3242:	ff 90       	pop	r15
    3244:	ef 90       	pop	r14
    3246:	df 90       	pop	r13
    3248:	cf 90       	pop	r12
    324a:	bf 90       	pop	r11
    324c:	af 90       	pop	r10
    324e:	9f 90       	pop	r9
    3250:	8f 90       	pop	r8
    3252:	7f 90       	pop	r7
    3254:	6f 90       	pop	r6
    3256:	5f 90       	pop	r5
    3258:	4f 90       	pop	r4
    325a:	3f 90       	pop	r3
    325c:	2f 90       	pop	r2
    325e:	08 95       	ret

00003260 <_Z13diffentiationPcd>:
double diffentiation(char str[],double x)
{
    3260:	8f 92       	push	r8
    3262:	9f 92       	push	r9
    3264:	af 92       	push	r10
    3266:	bf 92       	push	r11
    3268:	cf 92       	push	r12
    326a:	df 92       	push	r13
    326c:	ef 92       	push	r14
    326e:	ff 92       	push	r15
    3270:	cf 93       	push	r28
    3272:	df 93       	push	r29
    3274:	ec 01       	movw	r28, r24
    3276:	6a 01       	movw	r12, r20
    3278:	7b 01       	movw	r14, r22
	double h = 1e-6;
	return (evaluate_function(str , x+h)-evaluate_function(str, x-h))/(2.00*h);
    327a:	2d eb       	ldi	r18, 0xBD	; 189
    327c:	37 e3       	ldi	r19, 0x37	; 55
    327e:	46 e8       	ldi	r20, 0x86	; 134
    3280:	55 e3       	ldi	r21, 0x35	; 53
    3282:	c7 01       	movw	r24, r14
    3284:	b6 01       	movw	r22, r12
    3286:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    328a:	ab 01       	movw	r20, r22
    328c:	bc 01       	movw	r22, r24
    328e:	ce 01       	movw	r24, r28
    3290:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    3294:	4b 01       	movw	r8, r22
    3296:	5c 01       	movw	r10, r24
    3298:	2d eb       	ldi	r18, 0xBD	; 189
    329a:	37 e3       	ldi	r19, 0x37	; 55
    329c:	46 e8       	ldi	r20, 0x86	; 134
    329e:	55 e3       	ldi	r21, 0x35	; 53
    32a0:	c7 01       	movw	r24, r14
    32a2:	b6 01       	movw	r22, r12
    32a4:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    32a8:	ab 01       	movw	r20, r22
    32aa:	bc 01       	movw	r22, r24
    32ac:	ce 01       	movw	r24, r28
    32ae:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    32b2:	9b 01       	movw	r18, r22
    32b4:	ac 01       	movw	r20, r24
    32b6:	c5 01       	movw	r24, r10
    32b8:	b4 01       	movw	r22, r8
    32ba:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    32be:	2d eb       	ldi	r18, 0xBD	; 189
    32c0:	37 e3       	ldi	r19, 0x37	; 55
    32c2:	46 e0       	ldi	r20, 0x06	; 6
    32c4:	56 e3       	ldi	r21, 0x36	; 54
    32c6:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
}
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	ff 90       	pop	r15
    32d0:	ef 90       	pop	r14
    32d2:	df 90       	pop	r13
    32d4:	cf 90       	pop	r12
    32d6:	bf 90       	pop	r11
    32d8:	af 90       	pop	r10
    32da:	9f 90       	pop	r9
    32dc:	8f 90       	pop	r8
    32de:	08 95       	ret

000032e0 <_Z6newtonPcd>:

double newton(char str[],double guess)
{
    32e0:	8f 92       	push	r8
    32e2:	9f 92       	push	r9
    32e4:	af 92       	push	r10
    32e6:	bf 92       	push	r11
    32e8:	cf 92       	push	r12
    32ea:	df 92       	push	r13
    32ec:	ef 92       	push	r14
    32ee:	ff 92       	push	r15
    32f0:	0f 93       	push	r16
    32f2:	1f 93       	push	r17
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	8c 01       	movw	r16, r24
    32fa:	e4 2e       	mov	r14, r20
    32fc:	f5 2e       	mov	r15, r21
    32fe:	d6 2e       	mov	r13, r22
    3300:	c7 2e       	mov	r12, r23
    3302:	c1 e5       	ldi	r28, 0x51	; 81
    3304:	d0 e0       	ldi	r29, 0x00	; 0
	double x = guess;
	for (int rep = 0; rep<=80; rep++)
	{
		double nx = x - (evaluate_function(str, x)/diffentiation(str , x));
    3306:	4e 2d       	mov	r20, r14
    3308:	5f 2d       	mov	r21, r15
    330a:	6d 2d       	mov	r22, r13
    330c:	7c 2d       	mov	r23, r12
    330e:	c8 01       	movw	r24, r16
    3310:	0e 94 29 09 	call	0x1252	; 0x1252 <_Z17evaluate_functionPcd>
    3314:	4b 01       	movw	r8, r22
    3316:	5c 01       	movw	r10, r24
    3318:	4e 2d       	mov	r20, r14
    331a:	5f 2d       	mov	r21, r15
    331c:	6d 2d       	mov	r22, r13
    331e:	7c 2d       	mov	r23, r12
    3320:	c8 01       	movw	r24, r16
    3322:	0e 94 30 19 	call	0x3260	; 0x3260 <_Z13diffentiationPcd>
    3326:	9b 01       	movw	r18, r22
    3328:	ac 01       	movw	r20, r24
    332a:	c5 01       	movw	r24, r10
    332c:	b4 01       	movw	r22, r8
    332e:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    3332:	9b 01       	movw	r18, r22
    3334:	ac 01       	movw	r20, r24
    3336:	6e 2d       	mov	r22, r14
    3338:	7f 2d       	mov	r23, r15
    333a:	8d 2d       	mov	r24, r13
    333c:	9c 2d       	mov	r25, r12
    333e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
	"mov	%0, %C1		\n\t"
	"lsl	%0		\n\t"
	"mov	%0, %D1		\n\t"
	"rol	%0		"
	: "=r" (__exp)
	: "r" (__x)	);
    3342:	28 2f       	mov	r18, r24
    3344:	22 0f       	add	r18, r18
    3346:	29 2f       	mov	r18, r25
    3348:	22 1f       	adc	r18, r18
		if(!isfinite(nx))
    334a:	2f 3f       	cpi	r18, 0xFF	; 255
    334c:	31 f0       	breq	.+12     	; 0x335a <_Z6newtonPcd+0x7a>
    334e:	21 97       	sbiw	r28, 0x01	; 1
double newton(char str[],double guess)
{
	double x = guess;
	for (int rep = 0; rep<=80; rep++)
	{
		double nx = x - (evaluate_function(str, x)/diffentiation(str , x));
    3350:	e6 2e       	mov	r14, r22
    3352:	f7 2e       	mov	r15, r23
    3354:	d8 2e       	mov	r13, r24
    3356:	c9 2e       	mov	r12, r25
}

double newton(char str[],double guess)
{
	double x = guess;
	for (int rep = 0; rep<=80; rep++)
    3358:	b1 f6       	brne	.-84     	; 0x3306 <_Z6newtonPcd+0x26>
			break;
		}
		x = nx;
	}
	return x;
}
    335a:	6e 2d       	mov	r22, r14
    335c:	7f 2d       	mov	r23, r15
    335e:	8d 2d       	mov	r24, r13
    3360:	9c 2d       	mov	r25, r12
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	ff 90       	pop	r15
    336c:	ef 90       	pop	r14
    336e:	df 90       	pop	r13
    3370:	cf 90       	pop	r12
    3372:	bf 90       	pop	r11
    3374:	af 90       	pop	r10
    3376:	9f 90       	pop	r9
    3378:	8f 90       	pop	r8
    337a:	08 95       	ret

0000337c <_Z14newton_raphsonv>:
void newton_raphson()
{
    337c:	2f 92       	push	r2
    337e:	3f 92       	push	r3
    3380:	4f 92       	push	r4
    3382:	5f 92       	push	r5
    3384:	6f 92       	push	r6
    3386:	7f 92       	push	r7
    3388:	8f 92       	push	r8
    338a:	9f 92       	push	r9
    338c:	af 92       	push	r10
    338e:	bf 92       	push	r11
    3390:	cf 92       	push	r12
    3392:	df 92       	push	r13
    3394:	ef 92       	push	r14
    3396:	ff 92       	push	r15
    3398:	0f 93       	push	r16
    339a:	1f 93       	push	r17
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	ce 56       	subi	r28, 0x6E	; 110
    33a6:	d1 09       	sbc	r29, r1
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	de bf       	out	0x3e, r29	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    33b2:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	char text1[] = "Input Equation of x:";
    33b6:	85 e1       	ldi	r24, 0x15	; 21
    33b8:	e3 e8       	ldi	r30, 0x83	; 131
    33ba:	f2 e0       	ldi	r31, 0x02	; 2
    33bc:	de 01       	movw	r26, r28
    33be:	11 96       	adiw	r26, 0x01	; 1
    33c0:	01 90       	ld	r0, Z+
    33c2:	0d 92       	st	X+, r0
    33c4:	8a 95       	dec	r24
    33c6:	e1 f7       	brne	.-8      	; 0x33c0 <_Z14newton_raphsonv+0x44>
	char text2[] = "Input initial approximation:";
    33c8:	8d e1       	ldi	r24, 0x1D	; 29
    33ca:	e8 e9       	ldi	r30, 0x98	; 152
    33cc:	f2 e0       	ldi	r31, 0x02	; 2
    33ce:	de 01       	movw	r26, r28
    33d0:	56 96       	adiw	r26, 0x16	; 22
    33d2:	01 90       	ld	r0, Z+
    33d4:	0d 92       	st	X+, r0
    33d6:	8a 95       	dec	r24
    33d8:	e1 f7       	brne	.-8      	; 0x33d2 <_Z14newton_raphsonv+0x56>
	DisplayText(1,1,text1);
    33da:	ae 01       	movw	r20, r28
    33dc:	4f 5f       	subi	r20, 0xFF	; 255
    33de:	5f 4f       	sbci	r21, 0xFF	; 255
    33e0:	61 e0       	ldi	r22, 0x01	; 1
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	//input function
	char s[50];
	int len=0;
	int where=12;
    33e8:	0f 2e       	mov	r0, r31
    33ea:	fc e0       	ldi	r31, 0x0C	; 12
    33ec:	8f 2e       	mov	r8, r31
    33ee:	91 2c       	mov	r9, r1
    33f0:	f0 2d       	mov	r31, r0
	char text1[] = "Input Equation of x:";
	char text2[] = "Input initial approximation:";
	DisplayText(1,1,text1);
	//input function
	char s[50];
	int len=0;
    33f2:	e1 2c       	mov	r14, r1
    33f4:	f1 2c       	mov	r15, r1
					else
					{
						append(s , len , mat2[r][c-4]);
						len = strlen(s);
					}
					DisplayText(1,where,s);
    33f6:	2e 01       	movw	r4, r28
    33f8:	23 e3       	ldi	r18, 0x33	; 51
    33fa:	42 0e       	add	r4, r18
    33fc:	51 1c       	adc	r5, r1
    33fe:	ac 96       	adiw	r28, 0x2c	; 44
    3400:	4f ae       	std	Y+63, r4	; 0x3f
    3402:	ac 97       	sbiw	r28, 0x2c	; 44
    3404:	ad 96       	adiw	r28, 0x2d	; 45
    3406:	5f ae       	std	Y+63, r5	; 0x3f
    3408:	ad 97       	sbiw	r28, 0x2d	; 45
    340a:	0f 2e       	mov	r0, r31
    340c:	f6 e6       	ldi	r31, 0x66	; 102
    340e:	2f 2e       	mov	r2, r31
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	3f 2e       	mov	r3, r31
    3414:	f0 2d       	mov	r31, r0
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    3416:	68 94       	set
    3418:	66 24       	eor	r6, r6
    341a:	62 f8       	bld	r6, 2
    341c:	71 2c       	mov	r7, r1
		{
			PORTB=1<<c;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	06 2c       	mov	r0, r6
    3424:	02 c0       	rjmp	.+4      	; 0x342a <_Z14newton_raphsonv+0xae>
    3426:	88 0f       	add	r24, r24
    3428:	99 1f       	adc	r25, r25
    342a:	0a 94       	dec	r0
    342c:	e2 f7       	brpl	.-8      	; 0x3426 <_Z14newton_raphsonv+0xaa>
    342e:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    3430:	8b bb       	out	0x1b, r24	; 27
    3432:	c3 01       	movw	r24, r6
    3434:	8e 53       	subi	r24, 0x3E	; 62
    3436:	9f 4f       	sbci	r25, 0xFF	; 255
    3438:	6c 01       	movw	r12, r24
    343a:	51 01       	movw	r10, r2
			for(int r=0;r<4;r++)
    343c:	00 e0       	ldi	r16, 0x00	; 0
    343e:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    3440:	86 b3       	in	r24, 0x16	; 22
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	00 2e       	mov	r0, r16
    3446:	02 c0       	rjmp	.+4      	; 0x344c <_Z14newton_raphsonv+0xd0>
    3448:	95 95       	asr	r25
    344a:	87 95       	ror	r24
    344c:	0a 94       	dec	r0
    344e:	e2 f7       	brpl	.-8      	; 0x3448 <_Z14newton_raphsonv+0xcc>
    3450:	80 ff       	sbrs	r24, 0
    3452:	43 c0       	rjmp	.+134    	; 0x34da <_Z14newton_raphsonv+0x15e>
				{
					if(mat[r][c-4]=='C')
    3454:	f6 01       	movw	r30, r12
    3456:	80 81       	ld	r24, Z
    3458:	83 34       	cpi	r24, 0x43	; 67
    345a:	99 f4       	brne	.+38     	; 0x3482 <_Z14newton_raphsonv+0x106>
					{
						len=0;
						s[0]=0;
    345c:	1b aa       	std	Y+51, r1	; 0x33
						where=1;
						LCD_Clear();
    345e:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    3462:	ac 96       	adiw	r28, 0x2c	; 44
    3464:	4f ad       	ldd	r20, Y+63	; 0x3f
    3466:	ac 97       	sbiw	r28, 0x2c	; 44
    3468:	ad 96       	adiw	r28, 0x2d	; 45
    346a:	5f ad       	ldd	r21, Y+63	; 0x3f
    346c:	ad 97       	sbiw	r28, 0x2d	; 45
    346e:	61 e0       	ldi	r22, 0x01	; 1
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    3476:	88 24       	eor	r8, r8
    3478:	83 94       	inc	r8
    347a:	91 2c       	mov	r9, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    347c:	e1 2c       	mov	r14, r1
    347e:	f1 2c       	mov	r15, r1
    3480:	22 c0       	rjmp	.+68     	; 0x34c6 <_Z14newton_raphsonv+0x14a>
						where=1;
						LCD_Clear();
					}
					else
					{
						if(mat[r][c-4]=='=')
    3482:	8d 33       	cpi	r24, 0x3D	; 61
    3484:	09 f4       	brne	.+2      	; 0x3488 <_Z14newton_raphsonv+0x10c>
    3486:	df c0       	rjmp	.+446    	; 0x3646 <_Z14newton_raphsonv+0x2ca>
						{
							done = 1;
							break;
						}
						s[len]=mat[r][c-4];
    3488:	f2 01       	movw	r30, r4
    348a:	ee 0d       	add	r30, r14
    348c:	ff 1d       	adc	r31, r15
    348e:	80 83       	st	Z, r24
						len+=1;
    3490:	ff ef       	ldi	r31, 0xFF	; 255
    3492:	ef 1a       	sub	r14, r31
    3494:	ff 0a       	sbc	r15, r31
						s[len]=0;
    3496:	f2 01       	movw	r30, r4
    3498:	ee 0d       	add	r30, r14
    349a:	ff 1d       	adc	r31, r15
    349c:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    349e:	ac 96       	adiw	r28, 0x2c	; 44
    34a0:	4f ad       	ldd	r20, Y+63	; 0x3f
    34a2:	ac 97       	sbiw	r28, 0x2c	; 44
    34a4:	ad 96       	adiw	r28, 0x2d	; 45
    34a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    34a8:	ad 97       	sbiw	r28, 0x2d	; 45
    34aa:	68 2d       	mov	r22, r8
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    34b2:	24 e1       	ldi	r18, 0x14	; 20
    34b4:	e2 16       	cp	r14, r18
    34b6:	f1 04       	cpc	r15, r1
    34b8:	31 f4       	brne	.+12     	; 0x34c6 <_Z14newton_raphsonv+0x14a>
					{
						where+=12;
    34ba:	8c e0       	ldi	r24, 0x0C	; 12
    34bc:	88 0e       	add	r8, r24
    34be:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    34c0:	1b aa       	std	Y+51, r1	; 0x33
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    34c2:	e1 2c       	mov	r14, r1
    34c4:	f1 2c       	mov	r15, r1
    34c6:	9f ef       	ldi	r25, 0xFF	; 255
    34c8:	e4 e3       	ldi	r30, 0x34	; 52
    34ca:	fc e0       	ldi	r31, 0x0C	; 12
    34cc:	91 50       	subi	r25, 0x01	; 1
    34ce:	e0 40       	sbci	r30, 0x00	; 0
    34d0:	f0 40       	sbci	r31, 0x00	; 0
    34d2:	e1 f7       	brne	.-8      	; 0x34cc <_Z14newton_raphsonv+0x150>
    34d4:	00 c0       	rjmp	.+0      	; 0x34d6 <_Z14newton_raphsonv+0x15a>
    34d6:	00 00       	nop
    34d8:	66 c0       	rjmp	.+204    	; 0x35a6 <_Z14newton_raphsonv+0x22a>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    34da:	89 b3       	in	r24, 0x19	; 25
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	00 2e       	mov	r0, r16
    34e0:	02 c0       	rjmp	.+4      	; 0x34e6 <_Z14newton_raphsonv+0x16a>
    34e2:	95 95       	asr	r25
    34e4:	87 95       	ror	r24
    34e6:	0a 94       	dec	r0
    34e8:	e2 f7       	brpl	.-8      	; 0x34e2 <_Z14newton_raphsonv+0x166>
    34ea:	80 ff       	sbrs	r24, 0
    34ec:	5c c0       	rjmp	.+184    	; 0x35a6 <_Z14newton_raphsonv+0x22a>
				{
					if(mat2[r][c-4][0]=='<')
    34ee:	f5 01       	movw	r30, r10
    34f0:	80 81       	ld	r24, Z
    34f2:	8c 33       	cpi	r24, 0x3C	; 60
    34f4:	49 f5       	brne	.+82     	; 0x3548 <_Z14newton_raphsonv+0x1cc>
					{
						if(len==0){
    34f6:	e1 14       	cp	r14, r1
    34f8:	f1 04       	cpc	r15, r1
    34fa:	51 f4       	brne	.+20     	; 0x3510 <_Z14newton_raphsonv+0x194>
    34fc:	ff ef       	ldi	r31, 0xFF	; 255
    34fe:	24 e3       	ldi	r18, 0x34	; 52
    3500:	8c e0       	ldi	r24, 0x0C	; 12
    3502:	f1 50       	subi	r31, 0x01	; 1
    3504:	20 40       	sbci	r18, 0x00	; 0
    3506:	80 40       	sbci	r24, 0x00	; 0
    3508:	e1 f7       	brne	.-8      	; 0x3502 <_Z14newton_raphsonv+0x186>
    350a:	00 c0       	rjmp	.+0      	; 0x350c <_Z14newton_raphsonv+0x190>
    350c:	00 00       	nop
    350e:	4b c0       	rjmp	.+150    	; 0x35a6 <_Z14newton_raphsonv+0x22a>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    3510:	91 e0       	ldi	r25, 0x01	; 1
    3512:	e9 1a       	sub	r14, r25
    3514:	f1 08       	sbc	r15, r1
    3516:	f2 01       	movw	r30, r4
    3518:	ee 0d       	add	r30, r14
    351a:	ff 1d       	adc	r31, r15
    351c:	af 96       	adiw	r28, 0x2f	; 47
    351e:	ff af       	std	Y+63, r31	; 0x3f
    3520:	ee af       	std	Y+62, r30	; 0x3e
    3522:	af 97       	sbiw	r28, 0x2f	; 47
    3524:	20 e2       	ldi	r18, 0x20	; 32
    3526:	20 83       	st	Z, r18
						DisplayText(1,where,s);
    3528:	ac 96       	adiw	r28, 0x2c	; 44
    352a:	4f ad       	ldd	r20, Y+63	; 0x3f
    352c:	ac 97       	sbiw	r28, 0x2c	; 44
    352e:	ad 96       	adiw	r28, 0x2d	; 45
    3530:	5f ad       	ldd	r21, Y+63	; 0x3f
    3532:	ad 97       	sbiw	r28, 0x2d	; 45
    3534:	68 2d       	mov	r22, r8
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						len--;
						s[len]=0;
    353c:	af 96       	adiw	r28, 0x2f	; 47
    353e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3540:	ff ad       	ldd	r31, Y+63	; 0x3f
    3542:	af 97       	sbiw	r28, 0x2f	; 47
    3544:	10 82       	st	Z, r1
    3546:	12 c0       	rjmp	.+36     	; 0x356c <_Z14newton_raphsonv+0x1f0>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    3548:	a5 01       	movw	r20, r10
    354a:	b7 01       	movw	r22, r14
    354c:	ac 96       	adiw	r28, 0x2c	; 44
    354e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3550:	ac 97       	sbiw	r28, 0x2c	; 44
    3552:	ad 96       	adiw	r28, 0x2d	; 45
    3554:	9f ad       	ldd	r25, Y+63	; 0x3f
    3556:	ad 97       	sbiw	r28, 0x2d	; 45
    3558:	0e 94 15 09 	call	0x122a	; 0x122a <_Z6appendPciS_>
						len = strlen(s);
    355c:	f2 01       	movw	r30, r4
    355e:	01 90       	ld	r0, Z+
    3560:	00 20       	and	r0, r0
    3562:	e9 f7       	brne	.-6      	; 0x355e <_Z14newton_raphsonv+0x1e2>
    3564:	31 97       	sbiw	r30, 0x01	; 1
    3566:	7f 01       	movw	r14, r30
    3568:	e4 18       	sub	r14, r4
    356a:	f5 08       	sbc	r15, r5
					}
					DisplayText(1,where,s);
    356c:	ac 96       	adiw	r28, 0x2c	; 44
    356e:	4f ad       	ldd	r20, Y+63	; 0x3f
    3570:	ac 97       	sbiw	r28, 0x2c	; 44
    3572:	ad 96       	adiw	r28, 0x2d	; 45
    3574:	5f ad       	ldd	r21, Y+63	; 0x3f
    3576:	ad 97       	sbiw	r28, 0x2d	; 45
    3578:	68 2d       	mov	r22, r8
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    3580:	f4 e1       	ldi	r31, 0x14	; 20
    3582:	ef 16       	cp	r14, r31
    3584:	f1 04       	cpc	r15, r1
    3586:	31 f4       	brne	.+12     	; 0x3594 <_Z14newton_raphsonv+0x218>
					{
						where+=12;
    3588:	2c e0       	ldi	r18, 0x0C	; 12
    358a:	82 0e       	add	r8, r18
    358c:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    358e:	1b aa       	std	Y+51, r1	; 0x33
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    3590:	e1 2c       	mov	r14, r1
    3592:	f1 2c       	mov	r15, r1
    3594:	8f ef       	ldi	r24, 0xFF	; 255
    3596:	94 e3       	ldi	r25, 0x34	; 52
    3598:	ec e0       	ldi	r30, 0x0C	; 12
    359a:	81 50       	subi	r24, 0x01	; 1
    359c:	90 40       	sbci	r25, 0x00	; 0
    359e:	e0 40       	sbci	r30, 0x00	; 0
    35a0:	e1 f7       	brne	.-8      	; 0x359a <_Z14newton_raphsonv+0x21e>
    35a2:	00 c0       	rjmp	.+0      	; 0x35a4 <_Z14newton_raphsonv+0x228>
    35a4:	00 00       	nop
		bool done = 0;
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    35a6:	0f 5f       	subi	r16, 0xFF	; 255
    35a8:	1f 4f       	sbci	r17, 0xFF	; 255
    35aa:	f8 e1       	ldi	r31, 0x18	; 24
    35ac:	af 0e       	add	r10, r31
    35ae:	b1 1c       	adc	r11, r1
    35b0:	24 e0       	ldi	r18, 0x04	; 4
    35b2:	c2 0e       	add	r12, r18
    35b4:	d1 1c       	adc	r13, r1
    35b6:	04 30       	cpi	r16, 0x04	; 4
    35b8:	11 05       	cpc	r17, r1
    35ba:	09 f0       	breq	.+2      	; 0x35be <_Z14newton_raphsonv+0x242>
    35bc:	41 cf       	rjmp	.-382    	; 0x3440 <_Z14newton_raphsonv+0xc4>
    35be:	8f e1       	ldi	r24, 0x1F	; 31
    35c0:	9e e4       	ldi	r25, 0x4E	; 78
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	f1 f7       	brne	.-4      	; 0x35c2 <_Z14newton_raphsonv+0x246>
    35c6:	00 c0       	rjmp	.+0      	; 0x35c8 <_Z14newton_raphsonv+0x24c>
    35c8:	00 00       	nop
	int len=0;
	int where=12;
	while (1)
	{
		bool done = 0;
		for(int c=4;c<8;c++)
    35ca:	9f ef       	ldi	r25, 0xFF	; 255
    35cc:	69 1a       	sub	r6, r25
    35ce:	79 0a       	sbc	r7, r25
    35d0:	e6 e0       	ldi	r30, 0x06	; 6
    35d2:	2e 0e       	add	r2, r30
    35d4:	31 1c       	adc	r3, r1
    35d6:	f8 e0       	ldi	r31, 0x08	; 8
    35d8:	6f 16       	cp	r6, r31
    35da:	71 04       	cpc	r7, r1
    35dc:	09 f0       	breq	.+2      	; 0x35e0 <_Z14newton_raphsonv+0x264>
    35de:	1f cf       	rjmp	.-450    	; 0x341e <_Z14newton_raphsonv+0xa2>
    35e0:	14 cf       	rjmp	.-472    	; 0x340a <_Z14newton_raphsonv+0x8e>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    35e2:	44 e0       	ldi	r20, 0x04	; 4
    35e4:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTB=1<<c;
    35e6:	cb 01       	movw	r24, r22
    35e8:	04 2e       	mov	r0, r20
    35ea:	02 c0       	rjmp	.+4      	; 0x35f0 <_Z14newton_raphsonv+0x274>
    35ec:	88 0f       	add	r24, r24
    35ee:	99 1f       	adc	r25, r25
    35f0:	0a 94       	dec	r0
    35f2:	e2 f7       	brpl	.-8      	; 0x35ec <_Z14newton_raphsonv+0x270>
    35f4:	88 bb       	out	0x18, r24	; 24
    35f6:	fa 01       	movw	r30, r20
    35f8:	ee 53       	subi	r30, 0x3E	; 62
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
			{
				if(PINB&(1<<r))
    3600:	86 b3       	in	r24, 0x16	; 22
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	02 2e       	mov	r0, r18
    3606:	02 c0       	rjmp	.+4      	; 0x360c <_Z14newton_raphsonv+0x290>
    3608:	95 95       	asr	r25
    360a:	87 95       	ror	r24
    360c:	0a 94       	dec	r0
    360e:	e2 f7       	brpl	.-8      	; 0x3608 <_Z14newton_raphsonv+0x28c>
    3610:	80 ff       	sbrs	r24, 0
    3612:	03 c0       	rjmp	.+6      	; 0x361a <_Z14newton_raphsonv+0x29e>
				{
					if(mat[r][c-4]=='=')
    3614:	80 81       	ld	r24, Z
    3616:	8d 33       	cpi	r24, 0x3D	; 61
    3618:	61 f0       	breq	.+24     	; 0x3632 <_Z14newton_raphsonv+0x2b6>
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    361a:	2f 5f       	subi	r18, 0xFF	; 255
    361c:	3f 4f       	sbci	r19, 0xFF	; 255
    361e:	34 96       	adiw	r30, 0x04	; 4
    3620:	24 30       	cpi	r18, 0x04	; 4
    3622:	31 05       	cpc	r19, r1
    3624:	69 f7       	brne	.-38     	; 0x3600 <_Z14newton_raphsonv+0x284>
	show_text(s,12);
	//wait for equal
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
    3626:	4f 5f       	subi	r20, 0xFF	; 255
    3628:	5f 4f       	sbci	r21, 0xFF	; 255
    362a:	48 30       	cpi	r20, 0x08	; 8
    362c:	51 05       	cpc	r21, r1
    362e:	d9 f6       	brne	.-74     	; 0x35e6 <_Z14newton_raphsonv+0x26a>
    3630:	d8 cf       	rjmp	.-80     	; 0x35e2 <_Z14newton_raphsonv+0x266>
    3632:	2f ef       	ldi	r18, 0xFF	; 255
    3634:	84 e3       	ldi	r24, 0x34	; 52
    3636:	9c e0       	ldi	r25, 0x0C	; 12
    3638:	21 50       	subi	r18, 0x01	; 1
    363a:	80 40       	sbci	r24, 0x00	; 0
    363c:	90 40       	sbci	r25, 0x00	; 0
    363e:	e1 f7       	brne	.-8      	; 0x3638 <_Z14newton_raphsonv+0x2bc>
    3640:	00 c0       	rjmp	.+0      	; 0x3642 <_Z14newton_raphsonv+0x2c6>
    3642:	00 00       	nop
		{
			break;
		}
	}
	_delay_ms(500);
    3644:	40 c0       	rjmp	.+128    	; 0x36c6 <_Z14newton_raphsonv+0x34a>
    3646:	ef e1       	ldi	r30, 0x1F	; 31
    3648:	fe e4       	ldi	r31, 0x4E	; 78
    364a:	31 97       	sbiw	r30, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <_Z14newton_raphsonv+0x2ce>
    364e:	00 c0       	rjmp	.+0      	; 0x3650 <_Z14newton_raphsonv+0x2d4>
    3650:	00 00       	nop
			break;
		}
		if(done)
		break;
	}
	LCD_Clear();
    3652:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	double l;
	show_text(text2,1);
    3656:	61 e0       	ldi	r22, 0x01	; 1
    3658:	70 e0       	ldi	r23, 0x00	; 0
    365a:	ce 01       	movw	r24, r28
    365c:	46 96       	adiw	r24, 0x16	; 22
    365e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	l = double_num_input(24);
    3662:	88 e1       	ldi	r24, 0x18	; 24
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_Z16double_num_inputi>
    366a:	6b 01       	movw	r12, r22
    366c:	7c 01       	movw	r14, r24
	LCD_Clear();
    366e:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	double ans = newton(s,l);
    3672:	b7 01       	movw	r22, r14
    3674:	a6 01       	movw	r20, r12
    3676:	ce 01       	movw	r24, r28
    3678:	c3 96       	adiw	r24, 0x33	; 51
    367a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <_Z6newtonPcd>
    367e:	6b 01       	movw	r12, r22
    3680:	7c 01       	movw	r14, r24
	
	//printing ans
	char text[] = "Ans =";
    3682:	86 e0       	ldi	r24, 0x06	; 6
    3684:	ed e6       	ldi	r30, 0x6D	; 109
    3686:	f2 e0       	ldi	r31, 0x02	; 2
    3688:	de 01       	movw	r26, r28
    368a:	ab 59       	subi	r26, 0x9B	; 155
    368c:	bf 4f       	sbci	r27, 0xFF	; 255
    368e:	01 90       	ld	r0, Z+
    3690:	0d 92       	st	X+, r0
    3692:	8a 95       	dec	r24
    3694:	e1 f7       	brne	.-8      	; 0x368e <_Z14newton_raphsonv+0x312>
	show_text(text,1);
    3696:	61 e0       	ldi	r22, 0x01	; 1
    3698:	70 e0       	ldi	r23, 0x00	; 0
    369a:	ce 01       	movw	r24, r28
    369c:	8b 59       	subi	r24, 0x9B	; 155
    369e:	9f 4f       	sbci	r25, 0xFF	; 255
    36a0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	dtostrf(ans,1,2,s);
    36a4:	8e 01       	movw	r16, r28
    36a6:	0d 5c       	subi	r16, 0xCD	; 205
    36a8:	1f 4f       	sbci	r17, 0xFF	; 255
    36aa:	22 e0       	ldi	r18, 0x02	; 2
    36ac:	41 e0       	ldi	r20, 0x01	; 1
    36ae:	c7 01       	movw	r24, r14
    36b0:	b6 01       	movw	r22, r12
    36b2:	0e 94 81 23 	call	0x4702	; 0x4702 <dtostrf>
	show_text(s,12);
    36b6:	6c e0       	ldi	r22, 0x0C	; 12
    36b8:	70 e0       	ldi	r23, 0x00	; 0
    36ba:	c8 01       	movw	r24, r16
    36bc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_Z9show_textPci>
	bool done = 0;
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    36c0:	61 e0       	ldi	r22, 0x01	; 1
    36c2:	70 e0       	ldi	r23, 0x00	; 0
    36c4:	8e cf       	rjmp	.-228    	; 0x35e2 <_Z14newton_raphsonv+0x266>
		{
			break;
		}
	}
	_delay_ms(500);
    36c6:	c2 59       	subi	r28, 0x92	; 146
    36c8:	df 4f       	sbci	r29, 0xFF	; 255
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	1f 91       	pop	r17
    36da:	0f 91       	pop	r16
    36dc:	ff 90       	pop	r15
    36de:	ef 90       	pop	r14
    36e0:	df 90       	pop	r13
    36e2:	cf 90       	pop	r12
    36e4:	bf 90       	pop	r11
    36e6:	af 90       	pop	r10
    36e8:	9f 90       	pop	r9
    36ea:	8f 90       	pop	r8
    36ec:	7f 90       	pop	r7
    36ee:	6f 90       	pop	r6
    36f0:	5f 90       	pop	r5
    36f2:	4f 90       	pop	r4
    36f4:	3f 90       	pop	r3
    36f6:	2f 90       	pop	r2
    36f8:	08 95       	ret

000036fa <_Z10calculatorv>:
void calculator()
{
    36fa:	cf 93       	push	r28
    36fc:	df 93       	push	r29
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
    3702:	e6 97       	sbiw	r28, 0x36	; 54
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    370e:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	char s[50];
	int len=0;
	int where=1;
    3712:	88 24       	eor	r8, r8
    3714:	83 94       	inc	r8
    3716:	91 2c       	mov	r9, r1
void calculator()
{
	LCD_Clear();
	char s[50];
	int len=0;
    3718:	c1 2c       	mov	r12, r1
    371a:	d1 2c       	mov	r13, r1
					else
					{
						append(s , len , mat2[r][c-4]);
						len = strlen(s);
					}
					DisplayText(1,where,s);
    371c:	9e 01       	movw	r18, r28
    371e:	2f 5f       	subi	r18, 0xFF	; 255
    3720:	3f 4f       	sbci	r19, 0xFF	; 255
    3722:	19 01       	movw	r2, r18
    3724:	2b ab       	std	Y+51, r18	; 0x33
    3726:	3c aa       	std	Y+52, r3	; 0x34
    3728:	0f 2e       	mov	r0, r31
    372a:	f6 e6       	ldi	r31, 0x66	; 102
    372c:	4f 2e       	mov	r4, r31
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	5f 2e       	mov	r5, r31
    3732:	f0 2d       	mov	r31, r0
	char s[50];
	int len=0;
	int where=1;
	while (1)
	{
		for(int c=4;c<8;c++)
    3734:	68 94       	set
    3736:	ee 24       	eor	r14, r14
    3738:	e2 f8       	bld	r14, 2
    373a:	f1 2c       	mov	r15, r1
		{
			PORTB=1<<c;
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	0e 2c       	mov	r0, r14
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <_Z10calculatorv+0x4e>
    3744:	88 0f       	add	r24, r24
    3746:	99 1f       	adc	r25, r25
    3748:	0a 94       	dec	r0
    374a:	e2 f7       	brpl	.-8      	; 0x3744 <_Z10calculatorv+0x4a>
    374c:	88 bb       	out	0x18, r24	; 24
			PORTA=1<<c;
    374e:	8b bb       	out	0x1b, r24	; 27
    3750:	c7 01       	movw	r24, r14
    3752:	8e 53       	subi	r24, 0x3E	; 62
    3754:	9f 4f       	sbci	r25, 0xFF	; 255
    3756:	5c 01       	movw	r10, r24
    3758:	32 01       	movw	r6, r4
			for(int r=0;r<4;r++)
    375a:	00 e0       	ldi	r16, 0x00	; 0
    375c:	10 e0       	ldi	r17, 0x00	; 0
			{
				if(PINB&(1<<r))
    375e:	86 b3       	in	r24, 0x16	; 22
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	00 2e       	mov	r0, r16
    3764:	02 c0       	rjmp	.+4      	; 0x376a <_Z10calculatorv+0x70>
    3766:	95 95       	asr	r25
    3768:	87 95       	ror	r24
    376a:	0a 94       	dec	r0
    376c:	e2 f7       	brpl	.-8      	; 0x3766 <_Z10calculatorv+0x6c>
    376e:	80 ff       	sbrs	r24, 0
    3770:	6a c0       	rjmp	.+212    	; 0x3846 <_Z10calculatorv+0x14c>
				{
					if(mat[r][c-4]=='C')
    3772:	f5 01       	movw	r30, r10
    3774:	80 81       	ld	r24, Z
    3776:	83 34       	cpi	r24, 0x43	; 67
    3778:	79 f4       	brne	.+30     	; 0x3798 <_Z10calculatorv+0x9e>
					{
						len=0;
						s[0]=0;
    377a:	19 82       	std	Y+1, r1	; 0x01
						where=1;
						LCD_Clear();
    377c:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
						}
						s[len]=mat[r][c-4];
						len+=1;
						s[len]=0;
					}
					DisplayText(1,where,s);
    3780:	4b a9       	ldd	r20, Y+51	; 0x33
    3782:	5c a9       	ldd	r21, Y+52	; 0x34
    3784:	61 e0       	ldi	r22, 0x01	; 1
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
						s[0]=0;
						where=1;
    378c:	88 24       	eor	r8, r8
    378e:	83 94       	inc	r8
    3790:	91 2c       	mov	r9, r1
			{
				if(PINB&(1<<r))
				{
					if(mat[r][c-4]=='C')
					{
						len=0;
    3792:	c1 2c       	mov	r12, r1
    3794:	d1 2c       	mov	r13, r1
    3796:	4d c0       	rjmp	.+154    	; 0x3832 <_Z10calculatorv+0x138>
						where=1;
						LCD_Clear();
					}
					else
					{	
						if(mat[r][c-4]=='=')
    3798:	8d 33       	cpi	r24, 0x3D	; 61
    379a:	81 f5       	brne	.+96     	; 0x37fc <_Z10calculatorv+0x102>
						{
							double ans=ob.eval_exp(s);
    379c:	6b a9       	ldd	r22, Y+51	; 0x33
    379e:	7c a9       	ldd	r23, Y+52	; 0x34
    37a0:	82 e0       	ldi	r24, 0x02	; 2
    37a2:	93 e0       	ldi	r25, 0x03	; 3
    37a4:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN6parser8eval_expEPc>
    37a8:	ff ef       	ldi	r31, 0xFF	; 255
    37aa:	20 e7       	ldi	r18, 0x70	; 112
    37ac:	32 e0       	ldi	r19, 0x02	; 2
    37ae:	f1 50       	subi	r31, 0x01	; 1
    37b0:	20 40       	sbci	r18, 0x00	; 0
    37b2:	30 40       	sbci	r19, 0x00	; 0
    37b4:	e1 f7       	brne	.-8      	; 0x37ae <_Z10calculatorv+0xb4>
    37b6:	00 c0       	rjmp	.+0      	; 0x37b8 <_Z10calculatorv+0xbe>
    37b8:	00 00       	nop
							_delay_ms(100);
							dtostrf(ans,1,2,s);
    37ba:	0b a9       	ldd	r16, Y+51	; 0x33
    37bc:	1c a9       	ldd	r17, Y+52	; 0x34
    37be:	22 e0       	ldi	r18, 0x02	; 2
    37c0:	41 e0       	ldi	r20, 0x01	; 1
    37c2:	0e 94 81 23 	call	0x4702	; 0x4702 <dtostrf>
    37c6:	4f ef       	ldi	r20, 0xFF	; 255
    37c8:	80 e7       	ldi	r24, 0x70	; 112
    37ca:	92 e0       	ldi	r25, 0x02	; 2
    37cc:	41 50       	subi	r20, 0x01	; 1
    37ce:	80 40       	sbci	r24, 0x00	; 0
    37d0:	90 40       	sbci	r25, 0x00	; 0
    37d2:	e1 f7       	brne	.-8      	; 0x37cc <_Z10calculatorv+0xd2>
    37d4:	00 c0       	rjmp	.+0      	; 0x37d6 <_Z10calculatorv+0xdc>
    37d6:	00 00       	nop
							_delay_ms(100);
							LCD_Clear();
    37d8:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
    37dc:	ef ef       	ldi	r30, 0xFF	; 255
    37de:	f0 e7       	ldi	r31, 0x70	; 112
    37e0:	22 e0       	ldi	r18, 0x02	; 2
    37e2:	e1 50       	subi	r30, 0x01	; 1
    37e4:	f0 40       	sbci	r31, 0x00	; 0
    37e6:	20 40       	sbci	r18, 0x00	; 0
    37e8:	e1 f7       	brne	.-8      	; 0x37e2 <_Z10calculatorv+0xe8>
    37ea:	00 c0       	rjmp	.+0      	; 0x37ec <_Z10calculatorv+0xf2>
    37ec:	00 00       	nop
							_delay_ms(100);
							DisplayText(1,1,s);
    37ee:	4b a9       	ldd	r20, Y+51	; 0x33
    37f0:	5c a9       	ldd	r21, Y+52	; 0x34
    37f2:	61 e0       	ldi	r22, 0x01	; 1
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
							break;
    37fa:	88 c0       	rjmp	.+272    	; 0x390c <_Z10calculatorv+0x212>
						}
						s[len]=mat[r][c-4];
    37fc:	f1 01       	movw	r30, r2
    37fe:	ec 0d       	add	r30, r12
    3800:	fd 1d       	adc	r31, r13
    3802:	80 83       	st	Z, r24
						len+=1;
    3804:	3f ef       	ldi	r19, 0xFF	; 255
    3806:	c3 1a       	sub	r12, r19
    3808:	d3 0a       	sbc	r13, r19
						s[len]=0;
    380a:	f1 01       	movw	r30, r2
    380c:	ec 0d       	add	r30, r12
    380e:	fd 1d       	adc	r31, r13
    3810:	10 82       	st	Z, r1
					}
					DisplayText(1,where,s);
    3812:	4b a9       	ldd	r20, Y+51	; 0x33
    3814:	5c a9       	ldd	r21, Y+52	; 0x34
    3816:	68 2d       	mov	r22, r8
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    381e:	44 e1       	ldi	r20, 0x14	; 20
    3820:	c4 16       	cp	r12, r20
    3822:	d1 04       	cpc	r13, r1
    3824:	31 f4       	brne	.+12     	; 0x3832 <_Z10calculatorv+0x138>
					{
						where+=12;
    3826:	8c e0       	ldi	r24, 0x0C	; 12
    3828:	88 0e       	add	r8, r24
    382a:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    382c:	19 82       	std	Y+1, r1	; 0x01
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    382e:	c1 2c       	mov	r12, r1
    3830:	d1 2c       	mov	r13, r1
    3832:	9f ef       	ldi	r25, 0xFF	; 255
    3834:	e4 e3       	ldi	r30, 0x34	; 52
    3836:	fc e0       	ldi	r31, 0x0C	; 12
    3838:	91 50       	subi	r25, 0x01	; 1
    383a:	e0 40       	sbci	r30, 0x00	; 0
    383c:	f0 40       	sbci	r31, 0x00	; 0
    383e:	e1 f7       	brne	.-8      	; 0x3838 <_Z10calculatorv+0x13e>
    3840:	00 c0       	rjmp	.+0      	; 0x3842 <_Z10calculatorv+0x148>
    3842:	00 00       	nop
    3844:	57 c0       	rjmp	.+174    	; 0x38f4 <_Z10calculatorv+0x1fa>
						s[0]=0;
					}
					_delay_ms(500);
				}
				else if(PINA&(1<<r))
    3846:	89 b3       	in	r24, 0x19	; 25
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	00 2e       	mov	r0, r16
    384c:	02 c0       	rjmp	.+4      	; 0x3852 <_Z10calculatorv+0x158>
    384e:	95 95       	asr	r25
    3850:	87 95       	ror	r24
    3852:	0a 94       	dec	r0
    3854:	e2 f7       	brpl	.-8      	; 0x384e <_Z10calculatorv+0x154>
    3856:	80 ff       	sbrs	r24, 0
    3858:	4d c0       	rjmp	.+154    	; 0x38f4 <_Z10calculatorv+0x1fa>
				{
					if(mat2[r][c-4][0]=='<')
    385a:	f3 01       	movw	r30, r6
    385c:	80 81       	ld	r24, Z
    385e:	8c 33       	cpi	r24, 0x3C	; 60
    3860:	11 f5       	brne	.+68     	; 0x38a6 <_Z10calculatorv+0x1ac>
					{
						if(len==0){
    3862:	c1 14       	cp	r12, r1
    3864:	d1 04       	cpc	r13, r1
    3866:	51 f4       	brne	.+20     	; 0x387c <_Z10calculatorv+0x182>
    3868:	ff ef       	ldi	r31, 0xFF	; 255
    386a:	24 e3       	ldi	r18, 0x34	; 52
    386c:	3c e0       	ldi	r19, 0x0C	; 12
    386e:	f1 50       	subi	r31, 0x01	; 1
    3870:	20 40       	sbci	r18, 0x00	; 0
    3872:	30 40       	sbci	r19, 0x00	; 0
    3874:	e1 f7       	brne	.-8      	; 0x386e <_Z10calculatorv+0x174>
    3876:	00 c0       	rjmp	.+0      	; 0x3878 <_Z10calculatorv+0x17e>
    3878:	00 00       	nop
    387a:	3c c0       	rjmp	.+120    	; 0x38f4 <_Z10calculatorv+0x1fa>
							_delay_ms(500);
							continue;
						}
						s[len-1]=' ';
    387c:	41 e0       	ldi	r20, 0x01	; 1
    387e:	c4 1a       	sub	r12, r20
    3880:	d1 08       	sbc	r13, r1
    3882:	c1 01       	movw	r24, r2
    3884:	8c 0d       	add	r24, r12
    3886:	9d 1d       	adc	r25, r13
    3888:	9e ab       	std	Y+54, r25	; 0x36
    388a:	8d ab       	std	Y+53, r24	; 0x35
    388c:	20 e2       	ldi	r18, 0x20	; 32
    388e:	fc 01       	movw	r30, r24
    3890:	20 83       	st	Z, r18
						DisplayText(1,where,s);
    3892:	4b a9       	ldd	r20, Y+51	; 0x33
    3894:	5c a9       	ldd	r21, Y+52	; 0x34
    3896:	68 2d       	mov	r22, r8
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
						len--;
						s[len]=0;
    389e:	ed a9       	ldd	r30, Y+53	; 0x35
    38a0:	fe a9       	ldd	r31, Y+54	; 0x36
    38a2:	10 82       	st	Z, r1
    38a4:	0e c0       	rjmp	.+28     	; 0x38c2 <_Z10calculatorv+0x1c8>
					}
					else
					{
						append(s , len , mat2[r][c-4]);
    38a6:	a3 01       	movw	r20, r6
    38a8:	b6 01       	movw	r22, r12
    38aa:	8b a9       	ldd	r24, Y+51	; 0x33
    38ac:	9c a9       	ldd	r25, Y+52	; 0x34
    38ae:	0e 94 15 09 	call	0x122a	; 0x122a <_Z6appendPciS_>
						len = strlen(s);
    38b2:	f1 01       	movw	r30, r2
    38b4:	01 90       	ld	r0, Z+
    38b6:	00 20       	and	r0, r0
    38b8:	e9 f7       	brne	.-6      	; 0x38b4 <_Z10calculatorv+0x1ba>
    38ba:	31 97       	sbiw	r30, 0x01	; 1
    38bc:	6f 01       	movw	r12, r30
    38be:	c2 18       	sub	r12, r2
    38c0:	d3 08       	sbc	r13, r3
					}
					DisplayText(1,where,s);
    38c2:	4b a9       	ldd	r20, Y+51	; 0x33
    38c4:	5c a9       	ldd	r21, Y+52	; 0x34
    38c6:	68 2d       	mov	r22, r8
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
					if(len==20)
    38ce:	f4 e1       	ldi	r31, 0x14	; 20
    38d0:	cf 16       	cp	r12, r31
    38d2:	d1 04       	cpc	r13, r1
    38d4:	31 f4       	brne	.+12     	; 0x38e2 <_Z10calculatorv+0x1e8>
					{
						where+=12;
    38d6:	2c e0       	ldi	r18, 0x0C	; 12
    38d8:	82 0e       	add	r8, r18
    38da:	91 1c       	adc	r9, r1
						len=0;
						s[0]=0;
    38dc:	19 82       	std	Y+1, r1	; 0x01
					}
					DisplayText(1,where,s);
					if(len==20)
					{
						where+=12;
						len=0;
    38de:	c1 2c       	mov	r12, r1
    38e0:	d1 2c       	mov	r13, r1
    38e2:	3f ef       	ldi	r19, 0xFF	; 255
    38e4:	44 e3       	ldi	r20, 0x34	; 52
    38e6:	8c e0       	ldi	r24, 0x0C	; 12
    38e8:	31 50       	subi	r19, 0x01	; 1
    38ea:	40 40       	sbci	r20, 0x00	; 0
    38ec:	80 40       	sbci	r24, 0x00	; 0
    38ee:	e1 f7       	brne	.-8      	; 0x38e8 <_Z10calculatorv+0x1ee>
    38f0:	00 c0       	rjmp	.+0      	; 0x38f2 <_Z10calculatorv+0x1f8>
    38f2:	00 00       	nop
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			PORTA=1<<c;
			for(int r=0;r<4;r++)
    38f4:	0f 5f       	subi	r16, 0xFF	; 255
    38f6:	1f 4f       	sbci	r17, 0xFF	; 255
    38f8:	98 e1       	ldi	r25, 0x18	; 24
    38fa:	69 0e       	add	r6, r25
    38fc:	71 1c       	adc	r7, r1
    38fe:	e4 e0       	ldi	r30, 0x04	; 4
    3900:	ae 0e       	add	r10, r30
    3902:	b1 1c       	adc	r11, r1
    3904:	04 30       	cpi	r16, 0x04	; 4
    3906:	11 05       	cpc	r17, r1
    3908:	09 f0       	breq	.+2      	; 0x390c <_Z10calculatorv+0x212>
    390a:	29 cf       	rjmp	.-430    	; 0x375e <_Z10calculatorv+0x64>
    390c:	8f e1       	ldi	r24, 0x1F	; 31
    390e:	9e e4       	ldi	r25, 0x4E	; 78
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <_Z10calculatorv+0x216>
    3914:	00 c0       	rjmp	.+0      	; 0x3916 <_Z10calculatorv+0x21c>
    3916:	00 00       	nop
	char s[50];
	int len=0;
	int where=1;
	while (1)
	{
		for(int c=4;c<8;c++)
    3918:	9f ef       	ldi	r25, 0xFF	; 255
    391a:	e9 1a       	sub	r14, r25
    391c:	f9 0a       	sbc	r15, r25
    391e:	e6 e0       	ldi	r30, 0x06	; 6
    3920:	4e 0e       	add	r4, r30
    3922:	51 1c       	adc	r5, r1
    3924:	f8 e0       	ldi	r31, 0x08	; 8
    3926:	ef 16       	cp	r14, r31
    3928:	f1 04       	cpc	r15, r1
    392a:	09 f4       	brne	.+2      	; 0x392e <_Z10calculatorv+0x234>
    392c:	fd ce       	rjmp	.-518    	; 0x3728 <_Z10calculatorv+0x2e>
    392e:	06 cf       	rjmp	.-500    	; 0x373c <_Z10calculatorv+0x42>

00003930 <_Z12initial_pagev>:
#include "graph_plot.h"
#include "Newton.h"
#include "calculator.h"

void initial_page()
{
    3930:	cf 93       	push	r28
    3932:	df 93       	push	r29
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
    3938:	cd 54       	subi	r28, 0x4D	; 77
    393a:	d1 09       	sbc	r29, r1
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	f8 94       	cli
    3940:	de bf       	out	0x3e, r29	; 62
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	cd bf       	out	0x3d, r28	; 61
	char s[] = "1.Calculator";
    3946:	8d e0       	ldi	r24, 0x0D	; 13
    3948:	e5 eb       	ldi	r30, 0xB5	; 181
    394a:	f2 e0       	ldi	r31, 0x02	; 2
    394c:	de 01       	movw	r26, r28
    394e:	11 96       	adiw	r26, 0x01	; 1
    3950:	01 90       	ld	r0, Z+
    3952:	0d 92       	st	X+, r0
    3954:	8a 95       	dec	r24
    3956:	e1 f7       	brne	.-8      	; 0x3950 <_Z12initial_pagev+0x20>
	DisplayText(1,1,s);
    3958:	ae 01       	movw	r20, r28
    395a:	4f 5f       	subi	r20, 0xFF	; 255
    395c:	5f 4f       	sbci	r21, 0xFF	; 255
    395e:	61 e0       	ldi	r22, 0x01	; 1
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	char s2[] = "2.Gauss Elimination";
    3966:	84 e1       	ldi	r24, 0x14	; 20
    3968:	e2 ec       	ldi	r30, 0xC2	; 194
    396a:	f2 e0       	ldi	r31, 0x02	; 2
    396c:	de 01       	movw	r26, r28
    396e:	1e 96       	adiw	r26, 0x0e	; 14
    3970:	01 90       	ld	r0, Z+
    3972:	0d 92       	st	X+, r0
    3974:	8a 95       	dec	r24
    3976:	e1 f7       	brne	.-8      	; 0x3970 <_Z12initial_pagev+0x40>
	DisplayText(1,12,s2);
    3978:	ae 01       	movw	r20, r28
    397a:	42 5f       	subi	r20, 0xF2	; 242
    397c:	5f 4f       	sbci	r21, 0xFF	; 255
    397e:	6c e0       	ldi	r22, 0x0C	; 12
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	char s3[] = "3.Newton Raphson";
    3986:	81 e1       	ldi	r24, 0x11	; 17
    3988:	e6 ed       	ldi	r30, 0xD6	; 214
    398a:	f2 e0       	ldi	r31, 0x02	; 2
    398c:	de 01       	movw	r26, r28
    398e:	92 96       	adiw	r26, 0x22	; 34
    3990:	01 90       	ld	r0, Z+
    3992:	0d 92       	st	X+, r0
    3994:	8a 95       	dec	r24
    3996:	e1 f7       	brne	.-8      	; 0x3990 <_Z12initial_pagev+0x60>
	DisplayText(1,24,s3);
    3998:	ae 01       	movw	r20, r28
    399a:	4e 5d       	subi	r20, 0xDE	; 222
    399c:	5f 4f       	sbci	r21, 0xFF	; 255
    399e:	68 e1       	ldi	r22, 0x18	; 24
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	char s4[] = "4.Integration";
    39a6:	8e e0       	ldi	r24, 0x0E	; 14
    39a8:	e7 ee       	ldi	r30, 0xE7	; 231
    39aa:	f2 e0       	ldi	r31, 0x02	; 2
    39ac:	de 01       	movw	r26, r28
    39ae:	d3 96       	adiw	r26, 0x33	; 51
    39b0:	01 90       	ld	r0, Z+
    39b2:	0d 92       	st	X+, r0
    39b4:	8a 95       	dec	r24
    39b6:	e1 f7       	brne	.-8      	; 0x39b0 <_Z12initial_pagev+0x80>
	DisplayText(1,36,s4);
    39b8:	ae 01       	movw	r20, r28
    39ba:	4d 5c       	subi	r20, 0xCD	; 205
    39bc:	5f 4f       	sbci	r21, 0xFF	; 255
    39be:	64 e2       	ldi	r22, 0x24	; 36
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
	char s5[]="5.Graph Plot";
    39c6:	8d e0       	ldi	r24, 0x0D	; 13
    39c8:	e5 ef       	ldi	r30, 0xF5	; 245
    39ca:	f2 e0       	ldi	r31, 0x02	; 2
    39cc:	de 01       	movw	r26, r28
    39ce:	af 5b       	subi	r26, 0xBF	; 191
    39d0:	bf 4f       	sbci	r27, 0xFF	; 255
    39d2:	01 90       	ld	r0, Z+
    39d4:	0d 92       	st	X+, r0
    39d6:	8a 95       	dec	r24
    39d8:	e1 f7       	brne	.-8      	; 0x39d2 <_Z12initial_pagev+0xa2>
	DisplayText(1,48,s5);
    39da:	ae 01       	movw	r20, r28
    39dc:	4f 5b       	subi	r20, 0xBF	; 191
    39de:	5f 4f       	sbci	r21, 0xFF	; 255
    39e0:	60 e3       	ldi	r22, 0x30	; 48
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	0e 94 37 04 	call	0x86e	; 0x86e <_Z11DisplayTexthhPc>
}
    39e8:	c3 5b       	subi	r28, 0xB3	; 179
    39ea:	df 4f       	sbci	r29, 0xFF	; 255
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	cd bf       	out	0x3d, r28	; 61
    39f6:	df 91       	pop	r29
    39f8:	cf 91       	pop	r28
    39fa:	08 95       	ret

000039fc <_Z13mode_selectorv>:



char mode_selector()
{
    39fc:	cf 93       	push	r28
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
    39fe:	a1 e0       	ldi	r26, 0x01	; 1
    3a00:	b0 e0       	ldi	r27, 0x00	; 0

char mode_selector()
{
	while (1)
	{
		for(int c=4;c<8;c++)
    3a02:	64 e0       	ldi	r22, 0x04	; 4
    3a04:	70 e0       	ldi	r23, 0x00	; 0
		{
			PORTB=1<<c;
    3a06:	cd 01       	movw	r24, r26
    3a08:	06 2e       	mov	r0, r22
    3a0a:	02 c0       	rjmp	.+4      	; 0x3a10 <_Z13mode_selectorv+0x14>
    3a0c:	88 0f       	add	r24, r24
    3a0e:	99 1f       	adc	r25, r25
    3a10:	0a 94       	dec	r0
    3a12:	e2 f7       	brpl	.-8      	; 0x3a0c <_Z13mode_selectorv+0x10>
    3a14:	88 bb       	out	0x18, r24	; 24
    3a16:	cb 01       	movw	r24, r22
    3a18:	04 97       	sbiw	r24, 0x04	; 4
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	ea 53       	subi	r30, 0x3A	; 58
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
			for(int r=0;r<4;r++)
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	c8 2f       	mov	r28, r24
    3a26:	59 2f       	mov	r21, r25
			{
				if(PINB&(1<<r))
    3a28:	86 b3       	in	r24, 0x16	; 22
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	02 2e       	mov	r0, r18
    3a2e:	02 c0       	rjmp	.+4      	; 0x3a34 <_Z13mode_selectorv+0x38>
    3a30:	95 95       	asr	r25
    3a32:	87 95       	ror	r24
    3a34:	0a 94       	dec	r0
    3a36:	e2 f7       	brpl	.-8      	; 0x3a30 <_Z13mode_selectorv+0x34>
    3a38:	80 ff       	sbrs	r24, 0
    3a3a:	23 c0       	rjmp	.+70     	; 0x3a82 <_Z13mode_selectorv+0x86>
    3a3c:	8c 2f       	mov	r24, r28
    3a3e:	95 2f       	mov	r25, r21
				{
					if(mat[r][c-4]>='1' && mat[r][c-4]<='5')
    3a40:	40 81       	ld	r20, Z
    3a42:	41 53       	subi	r20, 0x31	; 49
    3a44:	45 30       	cpi	r20, 0x05	; 5
    3a46:	a0 f4       	brcc	.+40     	; 0x3a70 <_Z13mode_selectorv+0x74>
    3a48:	4f ef       	ldi	r20, 0xFF	; 255
    3a4a:	54 e3       	ldi	r21, 0x34	; 52
    3a4c:	6c e0       	ldi	r22, 0x0C	; 12
    3a4e:	41 50       	subi	r20, 0x01	; 1
    3a50:	50 40       	sbci	r21, 0x00	; 0
    3a52:	60 40       	sbci	r22, 0x00	; 0
    3a54:	e1 f7       	brne	.-8      	; 0x3a4e <_Z13mode_selectorv+0x52>
    3a56:	00 c0       	rjmp	.+0      	; 0x3a58 <_Z13mode_selectorv+0x5c>
    3a58:	00 00       	nop
					{
						_delay_ms(500);
						return mat[r][c-4];
    3a5a:	22 0f       	add	r18, r18
    3a5c:	33 1f       	adc	r19, r19
    3a5e:	22 0f       	add	r18, r18
    3a60:	33 1f       	adc	r19, r19
    3a62:	2a 53       	subi	r18, 0x3A	; 58
    3a64:	3f 4f       	sbci	r19, 0xFF	; 255
    3a66:	f9 01       	movw	r30, r18
    3a68:	e8 0f       	add	r30, r24
    3a6a:	f9 1f       	adc	r31, r25
    3a6c:	80 81       	ld	r24, Z
    3a6e:	1c c0       	rjmp	.+56     	; 0x3aa8 <_Z13mode_selectorv+0xac>
    3a70:	8f ef       	ldi	r24, 0xFF	; 255
    3a72:	94 e3       	ldi	r25, 0x34	; 52
    3a74:	4c e0       	ldi	r20, 0x0C	; 12
    3a76:	81 50       	subi	r24, 0x01	; 1
    3a78:	90 40       	sbci	r25, 0x00	; 0
    3a7a:	40 40       	sbci	r20, 0x00	; 0
    3a7c:	e1 f7       	brne	.-8      	; 0x3a76 <_Z13mode_selectorv+0x7a>
    3a7e:	00 c0       	rjmp	.+0      	; 0x3a80 <_Z13mode_selectorv+0x84>
    3a80:	00 00       	nop
	while (1)
	{
		for(int c=4;c<8;c++)
		{
			PORTB=1<<c;
			for(int r=0;r<4;r++)
    3a82:	2f 5f       	subi	r18, 0xFF	; 255
    3a84:	3f 4f       	sbci	r19, 0xFF	; 255
    3a86:	34 96       	adiw	r30, 0x04	; 4
    3a88:	24 30       	cpi	r18, 0x04	; 4
    3a8a:	31 05       	cpc	r19, r1
    3a8c:	69 f6       	brne	.-102    	; 0x3a28 <_Z13mode_selectorv+0x2c>
    3a8e:	8f e1       	ldi	r24, 0x1F	; 31
    3a90:	9e e4       	ldi	r25, 0x4E	; 78
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	f1 f7       	brne	.-4      	; 0x3a92 <_Z13mode_selectorv+0x96>
    3a96:	00 c0       	rjmp	.+0      	; 0x3a98 <_Z13mode_selectorv+0x9c>
    3a98:	00 00       	nop

char mode_selector()
{
	while (1)
	{
		for(int c=4;c<8;c++)
    3a9a:	6f 5f       	subi	r22, 0xFF	; 255
    3a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a9e:	68 30       	cpi	r22, 0x08	; 8
    3aa0:	71 05       	cpc	r23, r1
    3aa2:	09 f0       	breq	.+2      	; 0x3aa6 <_Z13mode_selectorv+0xaa>
    3aa4:	b0 cf       	rjmp	.-160    	; 0x3a06 <_Z13mode_selectorv+0xa>
    3aa6:	ad cf       	rjmp	.-166    	; 0x3a02 <_Z13mode_selectorv+0x6>
				}
			}
			_delay_ms(10);
		}
	}
}
    3aa8:	cf 91       	pop	r28
    3aaa:	08 95       	ret

00003aac <main>:



int main(void)
{
	InitLCD();
    3aac:	0e 94 88 02 	call	0x510	; 0x510 <_Z7InitLCDv>
	LCD_Clear();
    3ab0:	0e 94 39 03 	call	0x672	; 0x672 <_Z9LCD_Clearv>
	initial_page();
    3ab4:	0e 94 98 1c 	call	0x3930	; 0x3930 <_Z12initial_pagev>
	DDRB=0xFF;
    3ab8:	8f ef       	ldi	r24, 0xFF	; 255
    3aba:	87 bb       	out	0x17, r24	; 23
	DDRA=0xFF;
    3abc:	8a bb       	out	0x1a, r24	; 26
	
	//take input
	char input = mode_selector();
    3abe:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <_Z13mode_selectorv>
	if(input=='1')
    3ac2:	81 33       	cpi	r24, 0x31	; 49
    3ac4:	11 f4       	brne	.+4      	; 0x3aca <main+0x1e>
	{
		calculator();	
    3ac6:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <_Z10calculatorv>
	}
	else if(input=='2')
    3aca:	82 33       	cpi	r24, 0x32	; 50
    3acc:	19 f4       	brne	.+6      	; 0x3ad4 <main+0x28>
	{
		gauss();
    3ace:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_Z5gaussv>
    3ad2:	0e c0       	rjmp	.+28     	; 0x3af0 <main+0x44>
	}
	else if(input=='3')
    3ad4:	83 33       	cpi	r24, 0x33	; 51
    3ad6:	19 f4       	brne	.+6      	; 0x3ade <main+0x32>
	{
		newton_raphson();
    3ad8:	0e 94 be 19 	call	0x337c	; 0x337c <_Z14newton_raphsonv>
    3adc:	09 c0       	rjmp	.+18     	; 0x3af0 <main+0x44>
	}
	else if(input=='4')
    3ade:	84 33       	cpi	r24, 0x34	; 52
    3ae0:	19 f4       	brne	.+6      	; 0x3ae8 <main+0x3c>
	{
		simpson();
    3ae2:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <_Z7simpsonv>
    3ae6:	04 c0       	rjmp	.+8      	; 0x3af0 <main+0x44>
	}
	else if(input=='5')
    3ae8:	85 33       	cpi	r24, 0x35	; 53
    3aea:	11 f4       	brne	.+4      	; 0x3af0 <main+0x44>
	{
		graph_plot();
    3aec:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <_Z10graph_plotv>
	}
	
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	08 95       	ret

00003af6 <_GLOBAL__sub_I_Pix>:
	
}

char s[40];
char tmp[15];
parser ob;
    3af6:	82 e0       	ldi	r24, 0x02	; 2
    3af8:	93 e0       	ldi	r25, 0x03	; 3
    3afa:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN6parserC1Ev>
    3afe:	08 95       	ret

00003b00 <acos>:
    3b00:	9f 93       	push	r25
    3b02:	9f 77       	andi	r25, 0x7F	; 127
    3b04:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__fp_arccos>
    3b08:	0f 90       	pop	r0
    3b0a:	00 20       	and	r0, r0
    3b0c:	42 f4       	brpl	.+16     	; 0x3b1e <acos+0x1e>
    3b0e:	90 58       	subi	r25, 0x80	; 128
    3b10:	a2 ea       	ldi	r26, 0xA2	; 162
    3b12:	2a ed       	ldi	r18, 0xDA	; 218
    3b14:	3f e0       	ldi	r19, 0x0F	; 15
    3b16:	49 e4       	ldi	r20, 0x49	; 73
    3b18:	50 e4       	ldi	r21, 0x40	; 64
    3b1a:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__addsf3x>
    3b1e:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__fp_round>

00003b22 <__subsf3>:
    3b22:	50 58       	subi	r21, 0x80	; 128

00003b24 <__addsf3>:
    3b24:	bb 27       	eor	r27, r27
    3b26:	aa 27       	eor	r26, r26
    3b28:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__addsf3x>
    3b2c:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__fp_round>
    3b30:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__fp_pscA>
    3b34:	38 f0       	brcs	.+14     	; 0x3b44 <__addsf3+0x20>
    3b36:	0e 94 57 20 	call	0x40ae	; 0x40ae <__fp_pscB>
    3b3a:	20 f0       	brcs	.+8      	; 0x3b44 <__addsf3+0x20>
    3b3c:	39 f4       	brne	.+14     	; 0x3b4c <__addsf3+0x28>
    3b3e:	9f 3f       	cpi	r25, 0xFF	; 255
    3b40:	19 f4       	brne	.+6      	; 0x3b48 <__addsf3+0x24>
    3b42:	26 f4       	brtc	.+8      	; 0x3b4c <__addsf3+0x28>
    3b44:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__fp_nan>
    3b48:	0e f4       	brtc	.+2      	; 0x3b4c <__addsf3+0x28>
    3b4a:	e0 95       	com	r30
    3b4c:	e7 fb       	bst	r30, 7
    3b4e:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__fp_inf>

00003b52 <__addsf3x>:
    3b52:	e9 2f       	mov	r30, r25
    3b54:	0e 94 ae 20 	call	0x415c	; 0x415c <__fp_split3>
    3b58:	58 f3       	brcs	.-42     	; 0x3b30 <__addsf3+0xc>
    3b5a:	ba 17       	cp	r27, r26
    3b5c:	62 07       	cpc	r22, r18
    3b5e:	73 07       	cpc	r23, r19
    3b60:	84 07       	cpc	r24, r20
    3b62:	95 07       	cpc	r25, r21
    3b64:	20 f0       	brcs	.+8      	; 0x3b6e <__addsf3x+0x1c>
    3b66:	79 f4       	brne	.+30     	; 0x3b86 <__addsf3x+0x34>
    3b68:	a6 f5       	brtc	.+104    	; 0x3bd2 <__addsf3x+0x80>
    3b6a:	0c 94 e8 20 	jmp	0x41d0	; 0x41d0 <__fp_zero>
    3b6e:	0e f4       	brtc	.+2      	; 0x3b72 <__addsf3x+0x20>
    3b70:	e0 95       	com	r30
    3b72:	0b 2e       	mov	r0, r27
    3b74:	ba 2f       	mov	r27, r26
    3b76:	a0 2d       	mov	r26, r0
    3b78:	0b 01       	movw	r0, r22
    3b7a:	b9 01       	movw	r22, r18
    3b7c:	90 01       	movw	r18, r0
    3b7e:	0c 01       	movw	r0, r24
    3b80:	ca 01       	movw	r24, r20
    3b82:	a0 01       	movw	r20, r0
    3b84:	11 24       	eor	r1, r1
    3b86:	ff 27       	eor	r31, r31
    3b88:	59 1b       	sub	r21, r25
    3b8a:	99 f0       	breq	.+38     	; 0x3bb2 <__addsf3x+0x60>
    3b8c:	59 3f       	cpi	r21, 0xF9	; 249
    3b8e:	50 f4       	brcc	.+20     	; 0x3ba4 <__addsf3x+0x52>
    3b90:	50 3e       	cpi	r21, 0xE0	; 224
    3b92:	68 f1       	brcs	.+90     	; 0x3bee <__addsf3x+0x9c>
    3b94:	1a 16       	cp	r1, r26
    3b96:	f0 40       	sbci	r31, 0x00	; 0
    3b98:	a2 2f       	mov	r26, r18
    3b9a:	23 2f       	mov	r18, r19
    3b9c:	34 2f       	mov	r19, r20
    3b9e:	44 27       	eor	r20, r20
    3ba0:	58 5f       	subi	r21, 0xF8	; 248
    3ba2:	f3 cf       	rjmp	.-26     	; 0x3b8a <__addsf3x+0x38>
    3ba4:	46 95       	lsr	r20
    3ba6:	37 95       	ror	r19
    3ba8:	27 95       	ror	r18
    3baa:	a7 95       	ror	r26
    3bac:	f0 40       	sbci	r31, 0x00	; 0
    3bae:	53 95       	inc	r21
    3bb0:	c9 f7       	brne	.-14     	; 0x3ba4 <__addsf3x+0x52>
    3bb2:	7e f4       	brtc	.+30     	; 0x3bd2 <__addsf3x+0x80>
    3bb4:	1f 16       	cp	r1, r31
    3bb6:	ba 0b       	sbc	r27, r26
    3bb8:	62 0b       	sbc	r22, r18
    3bba:	73 0b       	sbc	r23, r19
    3bbc:	84 0b       	sbc	r24, r20
    3bbe:	ba f0       	brmi	.+46     	; 0x3bee <__addsf3x+0x9c>
    3bc0:	91 50       	subi	r25, 0x01	; 1
    3bc2:	a1 f0       	breq	.+40     	; 0x3bec <__addsf3x+0x9a>
    3bc4:	ff 0f       	add	r31, r31
    3bc6:	bb 1f       	adc	r27, r27
    3bc8:	66 1f       	adc	r22, r22
    3bca:	77 1f       	adc	r23, r23
    3bcc:	88 1f       	adc	r24, r24
    3bce:	c2 f7       	brpl	.-16     	; 0x3bc0 <__addsf3x+0x6e>
    3bd0:	0e c0       	rjmp	.+28     	; 0x3bee <__addsf3x+0x9c>
    3bd2:	ba 0f       	add	r27, r26
    3bd4:	62 1f       	adc	r22, r18
    3bd6:	73 1f       	adc	r23, r19
    3bd8:	84 1f       	adc	r24, r20
    3bda:	48 f4       	brcc	.+18     	; 0x3bee <__addsf3x+0x9c>
    3bdc:	87 95       	ror	r24
    3bde:	77 95       	ror	r23
    3be0:	67 95       	ror	r22
    3be2:	b7 95       	ror	r27
    3be4:	f7 95       	ror	r31
    3be6:	9e 3f       	cpi	r25, 0xFE	; 254
    3be8:	08 f0       	brcs	.+2      	; 0x3bec <__addsf3x+0x9a>
    3bea:	b0 cf       	rjmp	.-160    	; 0x3b4c <__addsf3+0x28>
    3bec:	93 95       	inc	r25
    3bee:	88 0f       	add	r24, r24
    3bf0:	08 f0       	brcs	.+2      	; 0x3bf4 <__addsf3x+0xa2>
    3bf2:	99 27       	eor	r25, r25
    3bf4:	ee 0f       	add	r30, r30
    3bf6:	97 95       	ror	r25
    3bf8:	87 95       	ror	r24
    3bfa:	08 95       	ret

00003bfc <asin>:
    3bfc:	9f 93       	push	r25
    3bfe:	9f 77       	andi	r25, 0x7F	; 127
    3c00:	ee e3       	ldi	r30, 0x3E	; 62
    3c02:	89 37       	cpi	r24, 0x79	; 121
    3c04:	9e 07       	cpc	r25, r30
    3c06:	28 f4       	brcc	.+10     	; 0x3c12 <asin+0x16>
    3c08:	e4 e5       	ldi	r30, 0x54	; 84
    3c0a:	f0 e0       	ldi	r31, 0x00	; 0
    3c0c:	0e 94 3c 20 	call	0x4078	; 0x4078 <__fp_powsodd>
    3c10:	0c c0       	rjmp	.+24     	; 0x3c2a <asin+0x2e>
    3c12:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__fp_arccos>
    3c16:	90 58       	subi	r25, 0x80	; 128
    3c18:	a2 ea       	ldi	r26, 0xA2	; 162
    3c1a:	2a ed       	ldi	r18, 0xDA	; 218
    3c1c:	3f e0       	ldi	r19, 0x0F	; 15
    3c1e:	49 ec       	ldi	r20, 0xC9	; 201
    3c20:	5f e3       	ldi	r21, 0x3F	; 63
    3c22:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__addsf3x>
    3c26:	0e 94 89 20 	call	0x4112	; 0x4112 <__fp_round>
    3c2a:	0f 90       	pop	r0
    3c2c:	07 fc       	sbrc	r0, 7
    3c2e:	90 58       	subi	r25, 0x80	; 128
    3c30:	08 95       	ret

00003c32 <atan>:
    3c32:	df 93       	push	r29
    3c34:	dd 27       	eor	r29, r29
    3c36:	b9 2f       	mov	r27, r25
    3c38:	bf 77       	andi	r27, 0x7F	; 127
    3c3a:	40 e8       	ldi	r20, 0x80	; 128
    3c3c:	5f e3       	ldi	r21, 0x3F	; 63
    3c3e:	16 16       	cp	r1, r22
    3c40:	17 06       	cpc	r1, r23
    3c42:	48 07       	cpc	r20, r24
    3c44:	5b 07       	cpc	r21, r27
    3c46:	18 f4       	brcc	.+6      	; 0x3c4e <atan+0x1c>
    3c48:	d9 2f       	mov	r29, r25
    3c4a:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <inverse>
    3c4e:	9f 93       	push	r25
    3c50:	8f 93       	push	r24
    3c52:	7f 93       	push	r23
    3c54:	6f 93       	push	r22
    3c56:	0e 94 17 23 	call	0x462e	; 0x462e <square>
    3c5a:	e8 e6       	ldi	r30, 0x68	; 104
    3c5c:	f0 e0       	ldi	r31, 0x00	; 0
    3c5e:	0e 94 15 20 	call	0x402a	; 0x402a <__fp_powser>
    3c62:	0e 94 89 20 	call	0x4112	; 0x4112 <__fp_round>
    3c66:	2f 91       	pop	r18
    3c68:	3f 91       	pop	r19
    3c6a:	4f 91       	pop	r20
    3c6c:	5f 91       	pop	r21
    3c6e:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__mulsf3x>
    3c72:	dd 23       	and	r29, r29
    3c74:	51 f0       	breq	.+20     	; 0x3c8a <atan+0x58>
    3c76:	90 58       	subi	r25, 0x80	; 128
    3c78:	a2 ea       	ldi	r26, 0xA2	; 162
    3c7a:	2a ed       	ldi	r18, 0xDA	; 218
    3c7c:	3f e0       	ldi	r19, 0x0F	; 15
    3c7e:	49 ec       	ldi	r20, 0xC9	; 201
    3c80:	5f e3       	ldi	r21, 0x3F	; 63
    3c82:	d0 78       	andi	r29, 0x80	; 128
    3c84:	5d 27       	eor	r21, r29
    3c86:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__addsf3x>
    3c8a:	df 91       	pop	r29
    3c8c:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__fp_round>

00003c90 <__cmpsf2>:
    3c90:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__fp_cmp>
    3c94:	08 f4       	brcc	.+2      	; 0x3c98 <__cmpsf2+0x8>
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	08 95       	ret

00003c9a <cosh>:
    3c9a:	90 68       	ori	r25, 0x80	; 128
    3c9c:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <exp>
    3ca0:	4f ef       	ldi	r20, 0xFF	; 255
    3ca2:	5f ef       	ldi	r21, 0xFF	; 255
    3ca4:	0e 94 00 21 	call	0x4200	; 0x4200 <ldexp>
    3ca8:	9f 93       	push	r25
    3caa:	8f 93       	push	r24
    3cac:	7f 93       	push	r23
    3cae:	6f 93       	push	r22
    3cb0:	42 e0       	ldi	r20, 0x02	; 2
    3cb2:	50 e0       	ldi	r21, 0x00	; 0
    3cb4:	0e 94 00 21 	call	0x4200	; 0x4200 <ldexp>
    3cb8:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <inverse>
    3cbc:	2f 91       	pop	r18
    3cbe:	3f 91       	pop	r19
    3cc0:	4f 91       	pop	r20
    3cc2:	5f 91       	pop	r21
    3cc4:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__addsf3>

00003cc8 <cos>:
    3cc8:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__fp_rempio2>
    3ccc:	e3 95       	inc	r30
    3cce:	0c 94 9a 20 	jmp	0x4134	; 0x4134 <__fp_sinus>

00003cd2 <__divsf3>:
    3cd2:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <__divsf3x>
    3cd6:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__fp_round>
    3cda:	0e 94 57 20 	call	0x40ae	; 0x40ae <__fp_pscB>
    3cde:	58 f0       	brcs	.+22     	; 0x3cf6 <__divsf3+0x24>
    3ce0:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__fp_pscA>
    3ce4:	40 f0       	brcs	.+16     	; 0x3cf6 <__divsf3+0x24>
    3ce6:	29 f4       	brne	.+10     	; 0x3cf2 <__divsf3+0x20>
    3ce8:	5f 3f       	cpi	r21, 0xFF	; 255
    3cea:	29 f0       	breq	.+10     	; 0x3cf6 <__divsf3+0x24>
    3cec:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__fp_inf>
    3cf0:	51 11       	cpse	r21, r1
    3cf2:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <__fp_szero>
    3cf6:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__fp_nan>

00003cfa <__divsf3x>:
    3cfa:	0e 94 ae 20 	call	0x415c	; 0x415c <__fp_split3>
    3cfe:	68 f3       	brcs	.-38     	; 0x3cda <__divsf3+0x8>

00003d00 <__divsf3_pse>:
    3d00:	99 23       	and	r25, r25
    3d02:	b1 f3       	breq	.-20     	; 0x3cf0 <__divsf3+0x1e>
    3d04:	55 23       	and	r21, r21
    3d06:	91 f3       	breq	.-28     	; 0x3cec <__divsf3+0x1a>
    3d08:	95 1b       	sub	r25, r21
    3d0a:	55 0b       	sbc	r21, r21
    3d0c:	bb 27       	eor	r27, r27
    3d0e:	aa 27       	eor	r26, r26
    3d10:	62 17       	cp	r22, r18
    3d12:	73 07       	cpc	r23, r19
    3d14:	84 07       	cpc	r24, r20
    3d16:	38 f0       	brcs	.+14     	; 0x3d26 <__divsf3_pse+0x26>
    3d18:	9f 5f       	subi	r25, 0xFF	; 255
    3d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3d1c:	22 0f       	add	r18, r18
    3d1e:	33 1f       	adc	r19, r19
    3d20:	44 1f       	adc	r20, r20
    3d22:	aa 1f       	adc	r26, r26
    3d24:	a9 f3       	breq	.-22     	; 0x3d10 <__divsf3_pse+0x10>
    3d26:	35 d0       	rcall	.+106    	; 0x3d92 <__divsf3_pse+0x92>
    3d28:	0e 2e       	mov	r0, r30
    3d2a:	3a f0       	brmi	.+14     	; 0x3d3a <__divsf3_pse+0x3a>
    3d2c:	e0 e8       	ldi	r30, 0x80	; 128
    3d2e:	32 d0       	rcall	.+100    	; 0x3d94 <__divsf3_pse+0x94>
    3d30:	91 50       	subi	r25, 0x01	; 1
    3d32:	50 40       	sbci	r21, 0x00	; 0
    3d34:	e6 95       	lsr	r30
    3d36:	00 1c       	adc	r0, r0
    3d38:	ca f7       	brpl	.-14     	; 0x3d2c <__divsf3_pse+0x2c>
    3d3a:	2b d0       	rcall	.+86     	; 0x3d92 <__divsf3_pse+0x92>
    3d3c:	fe 2f       	mov	r31, r30
    3d3e:	29 d0       	rcall	.+82     	; 0x3d92 <__divsf3_pse+0x92>
    3d40:	66 0f       	add	r22, r22
    3d42:	77 1f       	adc	r23, r23
    3d44:	88 1f       	adc	r24, r24
    3d46:	bb 1f       	adc	r27, r27
    3d48:	26 17       	cp	r18, r22
    3d4a:	37 07       	cpc	r19, r23
    3d4c:	48 07       	cpc	r20, r24
    3d4e:	ab 07       	cpc	r26, r27
    3d50:	b0 e8       	ldi	r27, 0x80	; 128
    3d52:	09 f0       	breq	.+2      	; 0x3d56 <__divsf3_pse+0x56>
    3d54:	bb 0b       	sbc	r27, r27
    3d56:	80 2d       	mov	r24, r0
    3d58:	bf 01       	movw	r22, r30
    3d5a:	ff 27       	eor	r31, r31
    3d5c:	93 58       	subi	r25, 0x83	; 131
    3d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d60:	3a f0       	brmi	.+14     	; 0x3d70 <__divsf3_pse+0x70>
    3d62:	9e 3f       	cpi	r25, 0xFE	; 254
    3d64:	51 05       	cpc	r21, r1
    3d66:	78 f0       	brcs	.+30     	; 0x3d86 <__divsf3_pse+0x86>
    3d68:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__fp_inf>
    3d6c:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <__fp_szero>
    3d70:	5f 3f       	cpi	r21, 0xFF	; 255
    3d72:	e4 f3       	brlt	.-8      	; 0x3d6c <__divsf3_pse+0x6c>
    3d74:	98 3e       	cpi	r25, 0xE8	; 232
    3d76:	d4 f3       	brlt	.-12     	; 0x3d6c <__divsf3_pse+0x6c>
    3d78:	86 95       	lsr	r24
    3d7a:	77 95       	ror	r23
    3d7c:	67 95       	ror	r22
    3d7e:	b7 95       	ror	r27
    3d80:	f7 95       	ror	r31
    3d82:	9f 5f       	subi	r25, 0xFF	; 255
    3d84:	c9 f7       	brne	.-14     	; 0x3d78 <__divsf3_pse+0x78>
    3d86:	88 0f       	add	r24, r24
    3d88:	91 1d       	adc	r25, r1
    3d8a:	96 95       	lsr	r25
    3d8c:	87 95       	ror	r24
    3d8e:	97 f9       	bld	r25, 7
    3d90:	08 95       	ret
    3d92:	e1 e0       	ldi	r30, 0x01	; 1
    3d94:	66 0f       	add	r22, r22
    3d96:	77 1f       	adc	r23, r23
    3d98:	88 1f       	adc	r24, r24
    3d9a:	bb 1f       	adc	r27, r27
    3d9c:	62 17       	cp	r22, r18
    3d9e:	73 07       	cpc	r23, r19
    3da0:	84 07       	cpc	r24, r20
    3da2:	ba 07       	cpc	r27, r26
    3da4:	20 f0       	brcs	.+8      	; 0x3dae <__divsf3_pse+0xae>
    3da6:	62 1b       	sub	r22, r18
    3da8:	73 0b       	sbc	r23, r19
    3daa:	84 0b       	sbc	r24, r20
    3dac:	ba 0b       	sbc	r27, r26
    3dae:	ee 1f       	adc	r30, r30
    3db0:	88 f7       	brcc	.-30     	; 0x3d94 <__divsf3_pse+0x94>
    3db2:	e0 95       	com	r30
    3db4:	08 95       	ret
    3db6:	29 f4       	brne	.+10     	; 0x3dc2 <__divsf3_pse+0xc2>
    3db8:	16 f0       	brts	.+4      	; 0x3dbe <__divsf3_pse+0xbe>
    3dba:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__fp_inf>
    3dbe:	0c 94 e8 20 	jmp	0x41d0	; 0x41d0 <__fp_zero>
    3dc2:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__fp_nan>

00003dc6 <exp>:
    3dc6:	0e 94 b6 20 	call	0x416c	; 0x416c <__fp_splitA>
    3dca:	a8 f3       	brcs	.-22     	; 0x3db6 <__divsf3_pse+0xb6>
    3dcc:	96 38       	cpi	r25, 0x86	; 134
    3dce:	a0 f7       	brcc	.-24     	; 0x3db8 <__divsf3_pse+0xb8>
    3dd0:	07 f8       	bld	r0, 7
    3dd2:	0f 92       	push	r0
    3dd4:	e8 94       	clt
    3dd6:	2b e3       	ldi	r18, 0x3B	; 59
    3dd8:	3a ea       	ldi	r19, 0xAA	; 170
    3dda:	48 eb       	ldi	r20, 0xB8	; 184
    3ddc:	5f e7       	ldi	r21, 0x7F	; 127
    3dde:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <__mulsf3_pse>
    3de2:	0f 92       	push	r0
    3de4:	0f 92       	push	r0
    3de6:	0f 92       	push	r0
    3de8:	4d b7       	in	r20, 0x3d	; 61
    3dea:	5e b7       	in	r21, 0x3e	; 62
    3dec:	0f 92       	push	r0
    3dee:	0e 94 8e 21 	call	0x431c	; 0x431c <modf>
    3df2:	e5 e9       	ldi	r30, 0x95	; 149
    3df4:	f0 e0       	ldi	r31, 0x00	; 0
    3df6:	0e 94 15 20 	call	0x402a	; 0x402a <__fp_powser>
    3dfa:	4f 91       	pop	r20
    3dfc:	5f 91       	pop	r21
    3dfe:	ef 91       	pop	r30
    3e00:	ff 91       	pop	r31
    3e02:	e5 95       	asr	r30
    3e04:	ee 1f       	adc	r30, r30
    3e06:	ff 1f       	adc	r31, r31
    3e08:	49 f0       	breq	.+18     	; 0x3e1c <exp+0x56>
    3e0a:	fe 57       	subi	r31, 0x7E	; 126
    3e0c:	e0 68       	ori	r30, 0x80	; 128
    3e0e:	44 27       	eor	r20, r20
    3e10:	ee 0f       	add	r30, r30
    3e12:	44 1f       	adc	r20, r20
    3e14:	fa 95       	dec	r31
    3e16:	e1 f7       	brne	.-8      	; 0x3e10 <exp+0x4a>
    3e18:	41 95       	neg	r20
    3e1a:	55 0b       	sbc	r21, r21
    3e1c:	0e 94 00 21 	call	0x4200	; 0x4200 <ldexp>
    3e20:	0f 90       	pop	r0
    3e22:	07 fe       	sbrs	r0, 7
    3e24:	0c 94 f4 20 	jmp	0x41e8	; 0x41e8 <inverse>
    3e28:	08 95       	ret

00003e2a <__fixsfsi>:
    3e2a:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__fixunssfsi>
    3e2e:	68 94       	set
    3e30:	b1 11       	cpse	r27, r1
    3e32:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <__fp_szero>
    3e36:	08 95       	ret

00003e38 <__fixunssfsi>:
    3e38:	0e 94 b6 20 	call	0x416c	; 0x416c <__fp_splitA>
    3e3c:	88 f0       	brcs	.+34     	; 0x3e60 <__fixunssfsi+0x28>
    3e3e:	9f 57       	subi	r25, 0x7F	; 127
    3e40:	98 f0       	brcs	.+38     	; 0x3e68 <__fixunssfsi+0x30>
    3e42:	b9 2f       	mov	r27, r25
    3e44:	99 27       	eor	r25, r25
    3e46:	b7 51       	subi	r27, 0x17	; 23
    3e48:	b0 f0       	brcs	.+44     	; 0x3e76 <__fixunssfsi+0x3e>
    3e4a:	e1 f0       	breq	.+56     	; 0x3e84 <__fixunssfsi+0x4c>
    3e4c:	66 0f       	add	r22, r22
    3e4e:	77 1f       	adc	r23, r23
    3e50:	88 1f       	adc	r24, r24
    3e52:	99 1f       	adc	r25, r25
    3e54:	1a f0       	brmi	.+6      	; 0x3e5c <__fixunssfsi+0x24>
    3e56:	ba 95       	dec	r27
    3e58:	c9 f7       	brne	.-14     	; 0x3e4c <__fixunssfsi+0x14>
    3e5a:	14 c0       	rjmp	.+40     	; 0x3e84 <__fixunssfsi+0x4c>
    3e5c:	b1 30       	cpi	r27, 0x01	; 1
    3e5e:	91 f0       	breq	.+36     	; 0x3e84 <__fixunssfsi+0x4c>
    3e60:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <__fp_zero>
    3e64:	b1 e0       	ldi	r27, 0x01	; 1
    3e66:	08 95       	ret
    3e68:	0c 94 e8 20 	jmp	0x41d0	; 0x41d0 <__fp_zero>
    3e6c:	67 2f       	mov	r22, r23
    3e6e:	78 2f       	mov	r23, r24
    3e70:	88 27       	eor	r24, r24
    3e72:	b8 5f       	subi	r27, 0xF8	; 248
    3e74:	39 f0       	breq	.+14     	; 0x3e84 <__fixunssfsi+0x4c>
    3e76:	b9 3f       	cpi	r27, 0xF9	; 249
    3e78:	cc f3       	brlt	.-14     	; 0x3e6c <__fixunssfsi+0x34>
    3e7a:	86 95       	lsr	r24
    3e7c:	77 95       	ror	r23
    3e7e:	67 95       	ror	r22
    3e80:	b3 95       	inc	r27
    3e82:	d9 f7       	brne	.-10     	; 0x3e7a <__fixunssfsi+0x42>
    3e84:	3e f4       	brtc	.+14     	; 0x3e94 <__fixunssfsi+0x5c>
    3e86:	90 95       	com	r25
    3e88:	80 95       	com	r24
    3e8a:	70 95       	com	r23
    3e8c:	61 95       	neg	r22
    3e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e90:	8f 4f       	sbci	r24, 0xFF	; 255
    3e92:	9f 4f       	sbci	r25, 0xFF	; 255
    3e94:	08 95       	ret

00003e96 <__floatunsisf>:
    3e96:	e8 94       	clt
    3e98:	09 c0       	rjmp	.+18     	; 0x3eac <__floatsisf+0x12>

00003e9a <__floatsisf>:
    3e9a:	97 fb       	bst	r25, 7
    3e9c:	3e f4       	brtc	.+14     	; 0x3eac <__floatsisf+0x12>
    3e9e:	90 95       	com	r25
    3ea0:	80 95       	com	r24
    3ea2:	70 95       	com	r23
    3ea4:	61 95       	neg	r22
    3ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea8:	8f 4f       	sbci	r24, 0xFF	; 255
    3eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    3eac:	99 23       	and	r25, r25
    3eae:	a9 f0       	breq	.+42     	; 0x3eda <__floatsisf+0x40>
    3eb0:	f9 2f       	mov	r31, r25
    3eb2:	96 e9       	ldi	r25, 0x96	; 150
    3eb4:	bb 27       	eor	r27, r27
    3eb6:	93 95       	inc	r25
    3eb8:	f6 95       	lsr	r31
    3eba:	87 95       	ror	r24
    3ebc:	77 95       	ror	r23
    3ebe:	67 95       	ror	r22
    3ec0:	b7 95       	ror	r27
    3ec2:	f1 11       	cpse	r31, r1
    3ec4:	f8 cf       	rjmp	.-16     	; 0x3eb6 <__floatsisf+0x1c>
    3ec6:	fa f4       	brpl	.+62     	; 0x3f06 <__floatsisf+0x6c>
    3ec8:	bb 0f       	add	r27, r27
    3eca:	11 f4       	brne	.+4      	; 0x3ed0 <__floatsisf+0x36>
    3ecc:	60 ff       	sbrs	r22, 0
    3ece:	1b c0       	rjmp	.+54     	; 0x3f06 <__floatsisf+0x6c>
    3ed0:	6f 5f       	subi	r22, 0xFF	; 255
    3ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed8:	16 c0       	rjmp	.+44     	; 0x3f06 <__floatsisf+0x6c>
    3eda:	88 23       	and	r24, r24
    3edc:	11 f0       	breq	.+4      	; 0x3ee2 <__floatsisf+0x48>
    3ede:	96 e9       	ldi	r25, 0x96	; 150
    3ee0:	11 c0       	rjmp	.+34     	; 0x3f04 <__floatsisf+0x6a>
    3ee2:	77 23       	and	r23, r23
    3ee4:	21 f0       	breq	.+8      	; 0x3eee <__floatsisf+0x54>
    3ee6:	9e e8       	ldi	r25, 0x8E	; 142
    3ee8:	87 2f       	mov	r24, r23
    3eea:	76 2f       	mov	r23, r22
    3eec:	05 c0       	rjmp	.+10     	; 0x3ef8 <__floatsisf+0x5e>
    3eee:	66 23       	and	r22, r22
    3ef0:	71 f0       	breq	.+28     	; 0x3f0e <__floatsisf+0x74>
    3ef2:	96 e8       	ldi	r25, 0x86	; 134
    3ef4:	86 2f       	mov	r24, r22
    3ef6:	70 e0       	ldi	r23, 0x00	; 0
    3ef8:	60 e0       	ldi	r22, 0x00	; 0
    3efa:	2a f0       	brmi	.+10     	; 0x3f06 <__floatsisf+0x6c>
    3efc:	9a 95       	dec	r25
    3efe:	66 0f       	add	r22, r22
    3f00:	77 1f       	adc	r23, r23
    3f02:	88 1f       	adc	r24, r24
    3f04:	da f7       	brpl	.-10     	; 0x3efc <__floatsisf+0x62>
    3f06:	88 0f       	add	r24, r24
    3f08:	96 95       	lsr	r25
    3f0a:	87 95       	ror	r24
    3f0c:	97 f9       	bld	r25, 7
    3f0e:	08 95       	ret

00003f10 <floor>:
    3f10:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <__fp_trunc>
    3f14:	90 f0       	brcs	.+36     	; 0x3f3a <floor+0x2a>
    3f16:	9f 37       	cpi	r25, 0x7F	; 127
    3f18:	48 f4       	brcc	.+18     	; 0x3f2c <floor+0x1c>
    3f1a:	91 11       	cpse	r25, r1
    3f1c:	16 f0       	brts	.+4      	; 0x3f22 <floor+0x12>
    3f1e:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <__fp_szero>
    3f22:	60 e0       	ldi	r22, 0x00	; 0
    3f24:	70 e0       	ldi	r23, 0x00	; 0
    3f26:	80 e8       	ldi	r24, 0x80	; 128
    3f28:	9f eb       	ldi	r25, 0xBF	; 191
    3f2a:	08 95       	ret
    3f2c:	26 f4       	brtc	.+8      	; 0x3f36 <floor+0x26>
    3f2e:	1b 16       	cp	r1, r27
    3f30:	61 1d       	adc	r22, r1
    3f32:	71 1d       	adc	r23, r1
    3f34:	81 1d       	adc	r24, r1
    3f36:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__fp_mintl>
    3f3a:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__fp_mpack>

00003f3e <__fp_arccos>:
    3f3e:	df 93       	push	r29
    3f40:	cf 93       	push	r28
    3f42:	1f 93       	push	r17
    3f44:	0f 93       	push	r16
    3f46:	8b 01       	movw	r16, r22
    3f48:	ec 01       	movw	r28, r24
    3f4a:	ed eb       	ldi	r30, 0xBD	; 189
    3f4c:	f0 e0       	ldi	r31, 0x00	; 0
    3f4e:	0e 94 15 20 	call	0x402a	; 0x402a <__fp_powser>
    3f52:	0e 94 89 20 	call	0x4112	; 0x4112 <__fp_round>
    3f56:	98 01       	movw	r18, r16
    3f58:	ae 01       	movw	r20, r28
    3f5a:	8b 01       	movw	r16, r22
    3f5c:	ec 01       	movw	r28, r24
    3f5e:	60 e0       	ldi	r22, 0x00	; 0
    3f60:	70 e0       	ldi	r23, 0x00	; 0
    3f62:	80 e8       	ldi	r24, 0x80	; 128
    3f64:	9f e3       	ldi	r25, 0x3F	; 63
    3f66:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    3f6a:	0e 94 d7 22 	call	0x45ae	; 0x45ae <sqrt>
    3f6e:	98 01       	movw	r18, r16
    3f70:	ae 01       	movw	r20, r28
    3f72:	0f 91       	pop	r16
    3f74:	1f 91       	pop	r17
    3f76:	cf 91       	pop	r28
    3f78:	df 91       	pop	r29
    3f7a:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <__mulsf3x>

00003f7e <__fp_cmp>:
    3f7e:	99 0f       	add	r25, r25
    3f80:	00 08       	sbc	r0, r0
    3f82:	55 0f       	add	r21, r21
    3f84:	aa 0b       	sbc	r26, r26
    3f86:	e0 e8       	ldi	r30, 0x80	; 128
    3f88:	fe ef       	ldi	r31, 0xFE	; 254
    3f8a:	16 16       	cp	r1, r22
    3f8c:	17 06       	cpc	r1, r23
    3f8e:	e8 07       	cpc	r30, r24
    3f90:	f9 07       	cpc	r31, r25
    3f92:	c0 f0       	brcs	.+48     	; 0x3fc4 <__fp_cmp+0x46>
    3f94:	12 16       	cp	r1, r18
    3f96:	13 06       	cpc	r1, r19
    3f98:	e4 07       	cpc	r30, r20
    3f9a:	f5 07       	cpc	r31, r21
    3f9c:	98 f0       	brcs	.+38     	; 0x3fc4 <__fp_cmp+0x46>
    3f9e:	62 1b       	sub	r22, r18
    3fa0:	73 0b       	sbc	r23, r19
    3fa2:	84 0b       	sbc	r24, r20
    3fa4:	95 0b       	sbc	r25, r21
    3fa6:	39 f4       	brne	.+14     	; 0x3fb6 <__fp_cmp+0x38>
    3fa8:	0a 26       	eor	r0, r26
    3faa:	61 f0       	breq	.+24     	; 0x3fc4 <__fp_cmp+0x46>
    3fac:	23 2b       	or	r18, r19
    3fae:	24 2b       	or	r18, r20
    3fb0:	25 2b       	or	r18, r21
    3fb2:	21 f4       	brne	.+8      	; 0x3fbc <__fp_cmp+0x3e>
    3fb4:	08 95       	ret
    3fb6:	0a 26       	eor	r0, r26
    3fb8:	09 f4       	brne	.+2      	; 0x3fbc <__fp_cmp+0x3e>
    3fba:	a1 40       	sbci	r26, 0x01	; 1
    3fbc:	a6 95       	lsr	r26
    3fbe:	8f ef       	ldi	r24, 0xFF	; 255
    3fc0:	81 1d       	adc	r24, r1
    3fc2:	81 1d       	adc	r24, r1
    3fc4:	08 95       	ret

00003fc6 <__fp_inf>:
    3fc6:	97 f9       	bld	r25, 7
    3fc8:	9f 67       	ori	r25, 0x7F	; 127
    3fca:	80 e8       	ldi	r24, 0x80	; 128
    3fcc:	70 e0       	ldi	r23, 0x00	; 0
    3fce:	60 e0       	ldi	r22, 0x00	; 0
    3fd0:	08 95       	ret

00003fd2 <__fp_mintl>:
    3fd2:	88 23       	and	r24, r24
    3fd4:	71 f4       	brne	.+28     	; 0x3ff2 <__fp_mintl+0x20>
    3fd6:	77 23       	and	r23, r23
    3fd8:	21 f0       	breq	.+8      	; 0x3fe2 <__fp_mintl+0x10>
    3fda:	98 50       	subi	r25, 0x08	; 8
    3fdc:	87 2b       	or	r24, r23
    3fde:	76 2f       	mov	r23, r22
    3fe0:	07 c0       	rjmp	.+14     	; 0x3ff0 <__fp_mintl+0x1e>
    3fe2:	66 23       	and	r22, r22
    3fe4:	11 f4       	brne	.+4      	; 0x3fea <__fp_mintl+0x18>
    3fe6:	99 27       	eor	r25, r25
    3fe8:	0d c0       	rjmp	.+26     	; 0x4004 <__fp_mintl+0x32>
    3fea:	90 51       	subi	r25, 0x10	; 16
    3fec:	86 2b       	or	r24, r22
    3fee:	70 e0       	ldi	r23, 0x00	; 0
    3ff0:	60 e0       	ldi	r22, 0x00	; 0
    3ff2:	2a f0       	brmi	.+10     	; 0x3ffe <__fp_mintl+0x2c>
    3ff4:	9a 95       	dec	r25
    3ff6:	66 0f       	add	r22, r22
    3ff8:	77 1f       	adc	r23, r23
    3ffa:	88 1f       	adc	r24, r24
    3ffc:	da f7       	brpl	.-10     	; 0x3ff4 <__fp_mintl+0x22>
    3ffe:	88 0f       	add	r24, r24
    4000:	96 95       	lsr	r25
    4002:	87 95       	ror	r24
    4004:	97 f9       	bld	r25, 7
    4006:	08 95       	ret

00004008 <__fp_mpack>:
    4008:	9f 3f       	cpi	r25, 0xFF	; 255
    400a:	31 f0       	breq	.+12     	; 0x4018 <__fp_mpack_finite+0xc>

0000400c <__fp_mpack_finite>:
    400c:	91 50       	subi	r25, 0x01	; 1
    400e:	20 f4       	brcc	.+8      	; 0x4018 <__fp_mpack_finite+0xc>
    4010:	87 95       	ror	r24
    4012:	77 95       	ror	r23
    4014:	67 95       	ror	r22
    4016:	b7 95       	ror	r27
    4018:	88 0f       	add	r24, r24
    401a:	91 1d       	adc	r25, r1
    401c:	96 95       	lsr	r25
    401e:	87 95       	ror	r24
    4020:	97 f9       	bld	r25, 7
    4022:	08 95       	ret

00004024 <__fp_nan>:
    4024:	9f ef       	ldi	r25, 0xFF	; 255
    4026:	80 ec       	ldi	r24, 0xC0	; 192
    4028:	08 95       	ret

0000402a <__fp_powser>:
    402a:	df 93       	push	r29
    402c:	cf 93       	push	r28
    402e:	1f 93       	push	r17
    4030:	0f 93       	push	r16
    4032:	ff 92       	push	r15
    4034:	ef 92       	push	r14
    4036:	df 92       	push	r13
    4038:	7b 01       	movw	r14, r22
    403a:	8c 01       	movw	r16, r24
    403c:	68 94       	set
    403e:	06 c0       	rjmp	.+12     	; 0x404c <__fp_powser+0x22>
    4040:	da 2e       	mov	r13, r26
    4042:	ef 01       	movw	r28, r30
    4044:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__mulsf3x>
    4048:	fe 01       	movw	r30, r28
    404a:	e8 94       	clt
    404c:	a5 91       	lpm	r26, Z+
    404e:	25 91       	lpm	r18, Z+
    4050:	35 91       	lpm	r19, Z+
    4052:	45 91       	lpm	r20, Z+
    4054:	55 91       	lpm	r21, Z+
    4056:	a6 f3       	brts	.-24     	; 0x4040 <__fp_powser+0x16>
    4058:	ef 01       	movw	r28, r30
    405a:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__addsf3x>
    405e:	fe 01       	movw	r30, r28
    4060:	97 01       	movw	r18, r14
    4062:	a8 01       	movw	r20, r16
    4064:	da 94       	dec	r13
    4066:	69 f7       	brne	.-38     	; 0x4042 <__fp_powser+0x18>
    4068:	df 90       	pop	r13
    406a:	ef 90       	pop	r14
    406c:	ff 90       	pop	r15
    406e:	0f 91       	pop	r16
    4070:	1f 91       	pop	r17
    4072:	cf 91       	pop	r28
    4074:	df 91       	pop	r29
    4076:	08 95       	ret

00004078 <__fp_powsodd>:
    4078:	9f 93       	push	r25
    407a:	8f 93       	push	r24
    407c:	7f 93       	push	r23
    407e:	6f 93       	push	r22
    4080:	ff 93       	push	r31
    4082:	ef 93       	push	r30
    4084:	9b 01       	movw	r18, r22
    4086:	ac 01       	movw	r20, r24
    4088:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    408c:	ef 91       	pop	r30
    408e:	ff 91       	pop	r31
    4090:	0e 94 15 20 	call	0x402a	; 0x402a <__fp_powser>
    4094:	2f 91       	pop	r18
    4096:	3f 91       	pop	r19
    4098:	4f 91       	pop	r20
    409a:	5f 91       	pop	r21
    409c:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__mulsf3>

000040a0 <__fp_pscA>:
    40a0:	00 24       	eor	r0, r0
    40a2:	0a 94       	dec	r0
    40a4:	16 16       	cp	r1, r22
    40a6:	17 06       	cpc	r1, r23
    40a8:	18 06       	cpc	r1, r24
    40aa:	09 06       	cpc	r0, r25
    40ac:	08 95       	ret

000040ae <__fp_pscB>:
    40ae:	00 24       	eor	r0, r0
    40b0:	0a 94       	dec	r0
    40b2:	12 16       	cp	r1, r18
    40b4:	13 06       	cpc	r1, r19
    40b6:	14 06       	cpc	r1, r20
    40b8:	05 06       	cpc	r0, r21
    40ba:	08 95       	ret
    40bc:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__fp_nan>

000040c0 <__fp_rempio2>:
    40c0:	0e 94 b6 20 	call	0x416c	; 0x416c <__fp_splitA>
    40c4:	d8 f3       	brcs	.-10     	; 0x40bc <__fp_pscB+0xe>
    40c6:	e8 94       	clt
    40c8:	e0 e0       	ldi	r30, 0x00	; 0
    40ca:	bb 27       	eor	r27, r27
    40cc:	9f 57       	subi	r25, 0x7F	; 127
    40ce:	f0 f0       	brcs	.+60     	; 0x410c <__fp_rempio2+0x4c>
    40d0:	2a ed       	ldi	r18, 0xDA	; 218
    40d2:	3f e0       	ldi	r19, 0x0F	; 15
    40d4:	49 ec       	ldi	r20, 0xC9	; 201
    40d6:	06 c0       	rjmp	.+12     	; 0x40e4 <__fp_rempio2+0x24>
    40d8:	ee 0f       	add	r30, r30
    40da:	bb 0f       	add	r27, r27
    40dc:	66 1f       	adc	r22, r22
    40de:	77 1f       	adc	r23, r23
    40e0:	88 1f       	adc	r24, r24
    40e2:	28 f0       	brcs	.+10     	; 0x40ee <__fp_rempio2+0x2e>
    40e4:	b2 3a       	cpi	r27, 0xA2	; 162
    40e6:	62 07       	cpc	r22, r18
    40e8:	73 07       	cpc	r23, r19
    40ea:	84 07       	cpc	r24, r20
    40ec:	28 f0       	brcs	.+10     	; 0x40f8 <__fp_rempio2+0x38>
    40ee:	b2 5a       	subi	r27, 0xA2	; 162
    40f0:	62 0b       	sbc	r22, r18
    40f2:	73 0b       	sbc	r23, r19
    40f4:	84 0b       	sbc	r24, r20
    40f6:	e3 95       	inc	r30
    40f8:	9a 95       	dec	r25
    40fa:	72 f7       	brpl	.-36     	; 0x40d8 <__fp_rempio2+0x18>
    40fc:	80 38       	cpi	r24, 0x80	; 128
    40fe:	30 f4       	brcc	.+12     	; 0x410c <__fp_rempio2+0x4c>
    4100:	9a 95       	dec	r25
    4102:	bb 0f       	add	r27, r27
    4104:	66 1f       	adc	r22, r22
    4106:	77 1f       	adc	r23, r23
    4108:	88 1f       	adc	r24, r24
    410a:	d2 f7       	brpl	.-12     	; 0x4100 <__fp_rempio2+0x40>
    410c:	90 48       	sbci	r25, 0x80	; 128
    410e:	0c 94 06 20 	jmp	0x400c	; 0x400c <__fp_mpack_finite>

00004112 <__fp_round>:
    4112:	09 2e       	mov	r0, r25
    4114:	03 94       	inc	r0
    4116:	00 0c       	add	r0, r0
    4118:	11 f4       	brne	.+4      	; 0x411e <__fp_round+0xc>
    411a:	88 23       	and	r24, r24
    411c:	52 f0       	brmi	.+20     	; 0x4132 <__fp_round+0x20>
    411e:	bb 0f       	add	r27, r27
    4120:	40 f4       	brcc	.+16     	; 0x4132 <__fp_round+0x20>
    4122:	bf 2b       	or	r27, r31
    4124:	11 f4       	brne	.+4      	; 0x412a <__fp_round+0x18>
    4126:	60 ff       	sbrs	r22, 0
    4128:	04 c0       	rjmp	.+8      	; 0x4132 <__fp_round+0x20>
    412a:	6f 5f       	subi	r22, 0xFF	; 255
    412c:	7f 4f       	sbci	r23, 0xFF	; 255
    412e:	8f 4f       	sbci	r24, 0xFF	; 255
    4130:	9f 4f       	sbci	r25, 0xFF	; 255
    4132:	08 95       	ret

00004134 <__fp_sinus>:
    4134:	ef 93       	push	r30
    4136:	e0 ff       	sbrs	r30, 0
    4138:	07 c0       	rjmp	.+14     	; 0x4148 <__fp_sinus+0x14>
    413a:	a2 ea       	ldi	r26, 0xA2	; 162
    413c:	2a ed       	ldi	r18, 0xDA	; 218
    413e:	3f e0       	ldi	r19, 0x0F	; 15
    4140:	49 ec       	ldi	r20, 0xC9	; 201
    4142:	5f eb       	ldi	r21, 0xBF	; 191
    4144:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__addsf3x>
    4148:	0e 94 89 20 	call	0x4112	; 0x4112 <__fp_round>
    414c:	0f 90       	pop	r0
    414e:	03 94       	inc	r0
    4150:	01 fc       	sbrc	r0, 1
    4152:	90 58       	subi	r25, 0x80	; 128
    4154:	e5 ee       	ldi	r30, 0xE5	; 229
    4156:	f0 e0       	ldi	r31, 0x00	; 0
    4158:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <__fp_powsodd>

0000415c <__fp_split3>:
    415c:	57 fd       	sbrc	r21, 7
    415e:	90 58       	subi	r25, 0x80	; 128
    4160:	44 0f       	add	r20, r20
    4162:	55 1f       	adc	r21, r21
    4164:	59 f0       	breq	.+22     	; 0x417c <__fp_splitA+0x10>
    4166:	5f 3f       	cpi	r21, 0xFF	; 255
    4168:	71 f0       	breq	.+28     	; 0x4186 <__fp_splitA+0x1a>
    416a:	47 95       	ror	r20

0000416c <__fp_splitA>:
    416c:	88 0f       	add	r24, r24
    416e:	97 fb       	bst	r25, 7
    4170:	99 1f       	adc	r25, r25
    4172:	61 f0       	breq	.+24     	; 0x418c <__fp_splitA+0x20>
    4174:	9f 3f       	cpi	r25, 0xFF	; 255
    4176:	79 f0       	breq	.+30     	; 0x4196 <__fp_splitA+0x2a>
    4178:	87 95       	ror	r24
    417a:	08 95       	ret
    417c:	12 16       	cp	r1, r18
    417e:	13 06       	cpc	r1, r19
    4180:	14 06       	cpc	r1, r20
    4182:	55 1f       	adc	r21, r21
    4184:	f2 cf       	rjmp	.-28     	; 0x416a <__fp_split3+0xe>
    4186:	46 95       	lsr	r20
    4188:	f1 df       	rcall	.-30     	; 0x416c <__fp_splitA>
    418a:	08 c0       	rjmp	.+16     	; 0x419c <__fp_splitA+0x30>
    418c:	16 16       	cp	r1, r22
    418e:	17 06       	cpc	r1, r23
    4190:	18 06       	cpc	r1, r24
    4192:	99 1f       	adc	r25, r25
    4194:	f1 cf       	rjmp	.-30     	; 0x4178 <__fp_splitA+0xc>
    4196:	86 95       	lsr	r24
    4198:	71 05       	cpc	r23, r1
    419a:	61 05       	cpc	r22, r1
    419c:	08 94       	sec
    419e:	08 95       	ret

000041a0 <__fp_trunc>:
    41a0:	0e 94 b6 20 	call	0x416c	; 0x416c <__fp_splitA>
    41a4:	a0 f0       	brcs	.+40     	; 0x41ce <__fp_trunc+0x2e>
    41a6:	be e7       	ldi	r27, 0x7E	; 126
    41a8:	b9 17       	cp	r27, r25
    41aa:	88 f4       	brcc	.+34     	; 0x41ce <__fp_trunc+0x2e>
    41ac:	bb 27       	eor	r27, r27
    41ae:	9f 38       	cpi	r25, 0x8F	; 143
    41b0:	60 f4       	brcc	.+24     	; 0x41ca <__fp_trunc+0x2a>
    41b2:	16 16       	cp	r1, r22
    41b4:	b1 1d       	adc	r27, r1
    41b6:	67 2f       	mov	r22, r23
    41b8:	78 2f       	mov	r23, r24
    41ba:	88 27       	eor	r24, r24
    41bc:	98 5f       	subi	r25, 0xF8	; 248
    41be:	f7 cf       	rjmp	.-18     	; 0x41ae <__fp_trunc+0xe>
    41c0:	86 95       	lsr	r24
    41c2:	77 95       	ror	r23
    41c4:	67 95       	ror	r22
    41c6:	b1 1d       	adc	r27, r1
    41c8:	93 95       	inc	r25
    41ca:	96 39       	cpi	r25, 0x96	; 150
    41cc:	c8 f3       	brcs	.-14     	; 0x41c0 <__fp_trunc+0x20>
    41ce:	08 95       	ret

000041d0 <__fp_zero>:
    41d0:	e8 94       	clt

000041d2 <__fp_szero>:
    41d2:	bb 27       	eor	r27, r27
    41d4:	66 27       	eor	r22, r22
    41d6:	77 27       	eor	r23, r23
    41d8:	cb 01       	movw	r24, r22
    41da:	97 f9       	bld	r25, 7
    41dc:	08 95       	ret

000041de <__gesf2>:
    41de:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__fp_cmp>
    41e2:	08 f4       	brcc	.+2      	; 0x41e6 <__gesf2+0x8>
    41e4:	8f ef       	ldi	r24, 0xFF	; 255
    41e6:	08 95       	ret

000041e8 <inverse>:
    41e8:	9b 01       	movw	r18, r22
    41ea:	ac 01       	movw	r20, r24
    41ec:	60 e0       	ldi	r22, 0x00	; 0
    41ee:	70 e0       	ldi	r23, 0x00	; 0
    41f0:	80 e8       	ldi	r24, 0x80	; 128
    41f2:	9f e3       	ldi	r25, 0x3F	; 63
    41f4:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__divsf3>
    41f8:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__fp_inf>
    41fc:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__fp_mpack>

00004200 <ldexp>:
    4200:	0e 94 b6 20 	call	0x416c	; 0x416c <__fp_splitA>
    4204:	d8 f3       	brcs	.-10     	; 0x41fc <inverse+0x14>
    4206:	99 23       	and	r25, r25
    4208:	c9 f3       	breq	.-14     	; 0x41fc <inverse+0x14>
    420a:	94 0f       	add	r25, r20
    420c:	51 1d       	adc	r21, r1
    420e:	a3 f3       	brvs	.-24     	; 0x41f8 <inverse+0x10>
    4210:	91 50       	subi	r25, 0x01	; 1
    4212:	50 40       	sbci	r21, 0x00	; 0
    4214:	94 f0       	brlt	.+36     	; 0x423a <ldexp+0x3a>
    4216:	59 f0       	breq	.+22     	; 0x422e <ldexp+0x2e>
    4218:	88 23       	and	r24, r24
    421a:	32 f0       	brmi	.+12     	; 0x4228 <ldexp+0x28>
    421c:	66 0f       	add	r22, r22
    421e:	77 1f       	adc	r23, r23
    4220:	88 1f       	adc	r24, r24
    4222:	91 50       	subi	r25, 0x01	; 1
    4224:	50 40       	sbci	r21, 0x00	; 0
    4226:	c1 f7       	brne	.-16     	; 0x4218 <ldexp+0x18>
    4228:	9e 3f       	cpi	r25, 0xFE	; 254
    422a:	51 05       	cpc	r21, r1
    422c:	2c f7       	brge	.-54     	; 0x41f8 <inverse+0x10>
    422e:	88 0f       	add	r24, r24
    4230:	91 1d       	adc	r25, r1
    4232:	96 95       	lsr	r25
    4234:	87 95       	ror	r24
    4236:	97 f9       	bld	r25, 7
    4238:	08 95       	ret
    423a:	5f 3f       	cpi	r21, 0xFF	; 255
    423c:	ac f0       	brlt	.+42     	; 0x4268 <ldexp+0x68>
    423e:	98 3e       	cpi	r25, 0xE8	; 232
    4240:	9c f0       	brlt	.+38     	; 0x4268 <ldexp+0x68>
    4242:	bb 27       	eor	r27, r27
    4244:	86 95       	lsr	r24
    4246:	77 95       	ror	r23
    4248:	67 95       	ror	r22
    424a:	b7 95       	ror	r27
    424c:	08 f4       	brcc	.+2      	; 0x4250 <ldexp+0x50>
    424e:	b1 60       	ori	r27, 0x01	; 1
    4250:	93 95       	inc	r25
    4252:	c1 f7       	brne	.-16     	; 0x4244 <ldexp+0x44>
    4254:	bb 0f       	add	r27, r27
    4256:	58 f7       	brcc	.-42     	; 0x422e <ldexp+0x2e>
    4258:	11 f4       	brne	.+4      	; 0x425e <ldexp+0x5e>
    425a:	60 ff       	sbrs	r22, 0
    425c:	e8 cf       	rjmp	.-48     	; 0x422e <ldexp+0x2e>
    425e:	6f 5f       	subi	r22, 0xFF	; 255
    4260:	7f 4f       	sbci	r23, 0xFF	; 255
    4262:	8f 4f       	sbci	r24, 0xFF	; 255
    4264:	9f 4f       	sbci	r25, 0xFF	; 255
    4266:	e3 cf       	rjmp	.-58     	; 0x422e <ldexp+0x2e>
    4268:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <__fp_szero>

0000426c <log10>:
    426c:	0e 94 46 21 	call	0x428c	; 0x428c <log>
    4270:	29 ed       	ldi	r18, 0xD9	; 217
    4272:	3b e5       	ldi	r19, 0x5B	; 91
    4274:	4e ed       	ldi	r20, 0xDE	; 222
    4276:	5e e3       	ldi	r21, 0x3E	; 62
    4278:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__mulsf3>
    427c:	16 f0       	brts	.+4      	; 0x4282 <log10+0x16>
    427e:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__fp_mpack>
    4282:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__fp_nan>
    4286:	68 94       	set
    4288:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__fp_inf>

0000428c <log>:
    428c:	0e 94 b6 20 	call	0x416c	; 0x416c <__fp_splitA>
    4290:	a8 f3       	brcs	.-22     	; 0x427c <log10+0x10>
    4292:	99 23       	and	r25, r25
    4294:	c1 f3       	breq	.-16     	; 0x4286 <log10+0x1a>
    4296:	ae f3       	brts	.-22     	; 0x4282 <log10+0x16>
    4298:	df 93       	push	r29
    429a:	cf 93       	push	r28
    429c:	1f 93       	push	r17
    429e:	0f 93       	push	r16
    42a0:	ff 92       	push	r15
    42a2:	c9 2f       	mov	r28, r25
    42a4:	dd 27       	eor	r29, r29
    42a6:	88 23       	and	r24, r24
    42a8:	2a f0       	brmi	.+10     	; 0x42b4 <log+0x28>
    42aa:	21 97       	sbiw	r28, 0x01	; 1
    42ac:	66 0f       	add	r22, r22
    42ae:	77 1f       	adc	r23, r23
    42b0:	88 1f       	adc	r24, r24
    42b2:	da f7       	brpl	.-10     	; 0x42aa <log+0x1e>
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	40 e8       	ldi	r20, 0x80	; 128
    42ba:	5f eb       	ldi	r21, 0xBF	; 191
    42bc:	9f e3       	ldi	r25, 0x3F	; 63
    42be:	88 39       	cpi	r24, 0x98	; 152
    42c0:	20 f0       	brcs	.+8      	; 0x42ca <log+0x3e>
    42c2:	80 3e       	cpi	r24, 0xE0	; 224
    42c4:	38 f0       	brcs	.+14     	; 0x42d4 <log+0x48>
    42c6:	21 96       	adiw	r28, 0x01	; 1
    42c8:	8f 77       	andi	r24, 0x7F	; 127
    42ca:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    42ce:	e3 e0       	ldi	r30, 0x03	; 3
    42d0:	f1 e0       	ldi	r31, 0x01	; 1
    42d2:	04 c0       	rjmp	.+8      	; 0x42dc <log+0x50>
    42d4:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    42d8:	e0 e3       	ldi	r30, 0x30	; 48
    42da:	f1 e0       	ldi	r31, 0x01	; 1
    42dc:	0e 94 15 20 	call	0x402a	; 0x402a <__fp_powser>
    42e0:	8b 01       	movw	r16, r22
    42e2:	be 01       	movw	r22, r28
    42e4:	ec 01       	movw	r28, r24
    42e6:	fb 2e       	mov	r15, r27
    42e8:	6f 57       	subi	r22, 0x7F	; 127
    42ea:	71 09       	sbc	r23, r1
    42ec:	75 95       	asr	r23
    42ee:	77 1f       	adc	r23, r23
    42f0:	88 0b       	sbc	r24, r24
    42f2:	99 0b       	sbc	r25, r25
    42f4:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <__floatsisf>
    42f8:	28 e1       	ldi	r18, 0x18	; 24
    42fa:	32 e7       	ldi	r19, 0x72	; 114
    42fc:	41 e3       	ldi	r20, 0x31	; 49
    42fe:	5f e3       	ldi	r21, 0x3F	; 63
    4300:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__mulsf3x>
    4304:	af 2d       	mov	r26, r15
    4306:	98 01       	movw	r18, r16
    4308:	ae 01       	movw	r20, r28
    430a:	ff 90       	pop	r15
    430c:	0f 91       	pop	r16
    430e:	1f 91       	pop	r17
    4310:	cf 91       	pop	r28
    4312:	df 91       	pop	r29
    4314:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__addsf3x>
    4318:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__fp_round>

0000431c <modf>:
    431c:	fa 01       	movw	r30, r20
    431e:	dc 01       	movw	r26, r24
    4320:	aa 0f       	add	r26, r26
    4322:	bb 1f       	adc	r27, r27
    4324:	9b 01       	movw	r18, r22
    4326:	ac 01       	movw	r20, r24
    4328:	bf 57       	subi	r27, 0x7F	; 127
    432a:	28 f4       	brcc	.+10     	; 0x4336 <modf+0x1a>
    432c:	22 27       	eor	r18, r18
    432e:	33 27       	eor	r19, r19
    4330:	44 27       	eor	r20, r20
    4332:	50 78       	andi	r21, 0x80	; 128
    4334:	20 c0       	rjmp	.+64     	; 0x4376 <modf+0x5a>
    4336:	b7 51       	subi	r27, 0x17	; 23
    4338:	90 f4       	brcc	.+36     	; 0x435e <modf+0x42>
    433a:	ab 2f       	mov	r26, r27
    433c:	00 24       	eor	r0, r0
    433e:	46 95       	lsr	r20
    4340:	37 95       	ror	r19
    4342:	27 95       	ror	r18
    4344:	01 1c       	adc	r0, r1
    4346:	a3 95       	inc	r26
    4348:	d2 f3       	brmi	.-12     	; 0x433e <modf+0x22>
    434a:	00 20       	and	r0, r0
    434c:	71 f0       	breq	.+28     	; 0x436a <modf+0x4e>
    434e:	22 0f       	add	r18, r18
    4350:	33 1f       	adc	r19, r19
    4352:	44 1f       	adc	r20, r20
    4354:	b3 95       	inc	r27
    4356:	da f3       	brmi	.-10     	; 0x434e <modf+0x32>
    4358:	0e d0       	rcall	.+28     	; 0x4376 <modf+0x5a>
    435a:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__subsf3>
    435e:	61 30       	cpi	r22, 0x01	; 1
    4360:	71 05       	cpc	r23, r1
    4362:	a0 e8       	ldi	r26, 0x80	; 128
    4364:	8a 07       	cpc	r24, r26
    4366:	b9 46       	sbci	r27, 0x69	; 105
    4368:	30 f4       	brcc	.+12     	; 0x4376 <modf+0x5a>
    436a:	9b 01       	movw	r18, r22
    436c:	ac 01       	movw	r20, r24
    436e:	66 27       	eor	r22, r22
    4370:	77 27       	eor	r23, r23
    4372:	88 27       	eor	r24, r24
    4374:	90 78       	andi	r25, 0x80	; 128
    4376:	30 96       	adiw	r30, 0x00	; 0
    4378:	21 f0       	breq	.+8      	; 0x4382 <modf+0x66>
    437a:	20 83       	st	Z, r18
    437c:	31 83       	std	Z+1, r19	; 0x01
    437e:	42 83       	std	Z+2, r20	; 0x02
    4380:	53 83       	std	Z+3, r21	; 0x03
    4382:	08 95       	ret

00004384 <__mulsf3>:
    4384:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__mulsf3x>
    4388:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__fp_round>
    438c:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__fp_pscA>
    4390:	38 f0       	brcs	.+14     	; 0x43a0 <__mulsf3+0x1c>
    4392:	0e 94 57 20 	call	0x40ae	; 0x40ae <__fp_pscB>
    4396:	20 f0       	brcs	.+8      	; 0x43a0 <__mulsf3+0x1c>
    4398:	95 23       	and	r25, r21
    439a:	11 f0       	breq	.+4      	; 0x43a0 <__mulsf3+0x1c>
    439c:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__fp_inf>
    43a0:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__fp_nan>
    43a4:	11 24       	eor	r1, r1
    43a6:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <__fp_szero>

000043aa <__mulsf3x>:
    43aa:	0e 94 ae 20 	call	0x415c	; 0x415c <__fp_split3>
    43ae:	70 f3       	brcs	.-36     	; 0x438c <__mulsf3+0x8>

000043b0 <__mulsf3_pse>:
    43b0:	95 9f       	mul	r25, r21
    43b2:	c1 f3       	breq	.-16     	; 0x43a4 <__mulsf3+0x20>
    43b4:	95 0f       	add	r25, r21
    43b6:	50 e0       	ldi	r21, 0x00	; 0
    43b8:	55 1f       	adc	r21, r21
    43ba:	62 9f       	mul	r22, r18
    43bc:	f0 01       	movw	r30, r0
    43be:	72 9f       	mul	r23, r18
    43c0:	bb 27       	eor	r27, r27
    43c2:	f0 0d       	add	r31, r0
    43c4:	b1 1d       	adc	r27, r1
    43c6:	63 9f       	mul	r22, r19
    43c8:	aa 27       	eor	r26, r26
    43ca:	f0 0d       	add	r31, r0
    43cc:	b1 1d       	adc	r27, r1
    43ce:	aa 1f       	adc	r26, r26
    43d0:	64 9f       	mul	r22, r20
    43d2:	66 27       	eor	r22, r22
    43d4:	b0 0d       	add	r27, r0
    43d6:	a1 1d       	adc	r26, r1
    43d8:	66 1f       	adc	r22, r22
    43da:	82 9f       	mul	r24, r18
    43dc:	22 27       	eor	r18, r18
    43de:	b0 0d       	add	r27, r0
    43e0:	a1 1d       	adc	r26, r1
    43e2:	62 1f       	adc	r22, r18
    43e4:	73 9f       	mul	r23, r19
    43e6:	b0 0d       	add	r27, r0
    43e8:	a1 1d       	adc	r26, r1
    43ea:	62 1f       	adc	r22, r18
    43ec:	83 9f       	mul	r24, r19
    43ee:	a0 0d       	add	r26, r0
    43f0:	61 1d       	adc	r22, r1
    43f2:	22 1f       	adc	r18, r18
    43f4:	74 9f       	mul	r23, r20
    43f6:	33 27       	eor	r19, r19
    43f8:	a0 0d       	add	r26, r0
    43fa:	61 1d       	adc	r22, r1
    43fc:	23 1f       	adc	r18, r19
    43fe:	84 9f       	mul	r24, r20
    4400:	60 0d       	add	r22, r0
    4402:	21 1d       	adc	r18, r1
    4404:	82 2f       	mov	r24, r18
    4406:	76 2f       	mov	r23, r22
    4408:	6a 2f       	mov	r22, r26
    440a:	11 24       	eor	r1, r1
    440c:	9f 57       	subi	r25, 0x7F	; 127
    440e:	50 40       	sbci	r21, 0x00	; 0
    4410:	9a f0       	brmi	.+38     	; 0x4438 <__mulsf3_pse+0x88>
    4412:	f1 f0       	breq	.+60     	; 0x4450 <__mulsf3_pse+0xa0>
    4414:	88 23       	and	r24, r24
    4416:	4a f0       	brmi	.+18     	; 0x442a <__mulsf3_pse+0x7a>
    4418:	ee 0f       	add	r30, r30
    441a:	ff 1f       	adc	r31, r31
    441c:	bb 1f       	adc	r27, r27
    441e:	66 1f       	adc	r22, r22
    4420:	77 1f       	adc	r23, r23
    4422:	88 1f       	adc	r24, r24
    4424:	91 50       	subi	r25, 0x01	; 1
    4426:	50 40       	sbci	r21, 0x00	; 0
    4428:	a9 f7       	brne	.-22     	; 0x4414 <__mulsf3_pse+0x64>
    442a:	9e 3f       	cpi	r25, 0xFE	; 254
    442c:	51 05       	cpc	r21, r1
    442e:	80 f0       	brcs	.+32     	; 0x4450 <__mulsf3_pse+0xa0>
    4430:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__fp_inf>
    4434:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <__fp_szero>
    4438:	5f 3f       	cpi	r21, 0xFF	; 255
    443a:	e4 f3       	brlt	.-8      	; 0x4434 <__mulsf3_pse+0x84>
    443c:	98 3e       	cpi	r25, 0xE8	; 232
    443e:	d4 f3       	brlt	.-12     	; 0x4434 <__mulsf3_pse+0x84>
    4440:	86 95       	lsr	r24
    4442:	77 95       	ror	r23
    4444:	67 95       	ror	r22
    4446:	b7 95       	ror	r27
    4448:	f7 95       	ror	r31
    444a:	e7 95       	ror	r30
    444c:	9f 5f       	subi	r25, 0xFF	; 255
    444e:	c1 f7       	brne	.-16     	; 0x4440 <__mulsf3_pse+0x90>
    4450:	fe 2b       	or	r31, r30
    4452:	88 0f       	add	r24, r24
    4454:	91 1d       	adc	r25, r1
    4456:	96 95       	lsr	r25
    4458:	87 95       	ror	r24
    445a:	97 f9       	bld	r25, 7
    445c:	08 95       	ret

0000445e <pow>:
    445e:	fa 01       	movw	r30, r20
    4460:	ee 0f       	add	r30, r30
    4462:	ff 1f       	adc	r31, r31
    4464:	30 96       	adiw	r30, 0x00	; 0
    4466:	21 05       	cpc	r18, r1
    4468:	31 05       	cpc	r19, r1
    446a:	a1 f1       	breq	.+104    	; 0x44d4 <pow+0x76>
    446c:	61 15       	cp	r22, r1
    446e:	71 05       	cpc	r23, r1
    4470:	61 f4       	brne	.+24     	; 0x448a <pow+0x2c>
    4472:	80 38       	cpi	r24, 0x80	; 128
    4474:	bf e3       	ldi	r27, 0x3F	; 63
    4476:	9b 07       	cpc	r25, r27
    4478:	49 f1       	breq	.+82     	; 0x44cc <pow+0x6e>
    447a:	68 94       	set
    447c:	90 38       	cpi	r25, 0x80	; 128
    447e:	81 05       	cpc	r24, r1
    4480:	61 f0       	breq	.+24     	; 0x449a <pow+0x3c>
    4482:	80 38       	cpi	r24, 0x80	; 128
    4484:	bf ef       	ldi	r27, 0xFF	; 255
    4486:	9b 07       	cpc	r25, r27
    4488:	41 f0       	breq	.+16     	; 0x449a <pow+0x3c>
    448a:	99 23       	and	r25, r25
    448c:	4a f5       	brpl	.+82     	; 0x44e0 <pow+0x82>
    448e:	ff 3f       	cpi	r31, 0xFF	; 255
    4490:	e1 05       	cpc	r30, r1
    4492:	31 05       	cpc	r19, r1
    4494:	21 05       	cpc	r18, r1
    4496:	19 f1       	breq	.+70     	; 0x44de <pow+0x80>
    4498:	e8 94       	clt
    449a:	08 94       	sec
    449c:	e7 95       	ror	r30
    449e:	d9 01       	movw	r26, r18
    44a0:	aa 23       	and	r26, r26
    44a2:	29 f4       	brne	.+10     	; 0x44ae <pow+0x50>
    44a4:	ab 2f       	mov	r26, r27
    44a6:	be 2f       	mov	r27, r30
    44a8:	f8 5f       	subi	r31, 0xF8	; 248
    44aa:	d0 f3       	brcs	.-12     	; 0x44a0 <pow+0x42>
    44ac:	10 c0       	rjmp	.+32     	; 0x44ce <pow+0x70>
    44ae:	ff 5f       	subi	r31, 0xFF	; 255
    44b0:	70 f4       	brcc	.+28     	; 0x44ce <pow+0x70>
    44b2:	a6 95       	lsr	r26
    44b4:	e0 f7       	brcc	.-8      	; 0x44ae <pow+0x50>
    44b6:	f7 39       	cpi	r31, 0x97	; 151
    44b8:	50 f0       	brcs	.+20     	; 0x44ce <pow+0x70>
    44ba:	19 f0       	breq	.+6      	; 0x44c2 <pow+0x64>
    44bc:	ff 3a       	cpi	r31, 0xAF	; 175
    44be:	38 f4       	brcc	.+14     	; 0x44ce <pow+0x70>
    44c0:	9f 77       	andi	r25, 0x7F	; 127
    44c2:	9f 93       	push	r25
    44c4:	0d d0       	rcall	.+26     	; 0x44e0 <pow+0x82>
    44c6:	0f 90       	pop	r0
    44c8:	07 fc       	sbrc	r0, 7
    44ca:	90 58       	subi	r25, 0x80	; 128
    44cc:	08 95       	ret
    44ce:	46 f0       	brts	.+16     	; 0x44e0 <pow+0x82>
    44d0:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__fp_nan>
    44d4:	60 e0       	ldi	r22, 0x00	; 0
    44d6:	70 e0       	ldi	r23, 0x00	; 0
    44d8:	80 e8       	ldi	r24, 0x80	; 128
    44da:	9f e3       	ldi	r25, 0x3F	; 63
    44dc:	08 95       	ret
    44de:	4f e7       	ldi	r20, 0x7F	; 127
    44e0:	9f 77       	andi	r25, 0x7F	; 127
    44e2:	5f 93       	push	r21
    44e4:	4f 93       	push	r20
    44e6:	3f 93       	push	r19
    44e8:	2f 93       	push	r18
    44ea:	0e 94 46 21 	call	0x428c	; 0x428c <log>
    44ee:	2f 91       	pop	r18
    44f0:	3f 91       	pop	r19
    44f2:	4f 91       	pop	r20
    44f4:	5f 91       	pop	r21
    44f6:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    44fa:	0c 94 e3 1e 	jmp	0x3dc6	; 0x3dc6 <exp>

000044fe <round>:
    44fe:	0e 94 b6 20 	call	0x416c	; 0x416c <__fp_splitA>
    4502:	e8 f0       	brcs	.+58     	; 0x453e <round+0x40>
    4504:	9e 37       	cpi	r25, 0x7E	; 126
    4506:	e8 f0       	brcs	.+58     	; 0x4542 <round+0x44>
    4508:	96 39       	cpi	r25, 0x96	; 150
    450a:	b8 f4       	brcc	.+46     	; 0x453a <round+0x3c>
    450c:	9e 38       	cpi	r25, 0x8E	; 142
    450e:	48 f4       	brcc	.+18     	; 0x4522 <round+0x24>
    4510:	67 2f       	mov	r22, r23
    4512:	78 2f       	mov	r23, r24
    4514:	88 27       	eor	r24, r24
    4516:	98 5f       	subi	r25, 0xF8	; 248
    4518:	f9 cf       	rjmp	.-14     	; 0x450c <round+0xe>
    451a:	86 95       	lsr	r24
    451c:	77 95       	ror	r23
    451e:	67 95       	ror	r22
    4520:	93 95       	inc	r25
    4522:	95 39       	cpi	r25, 0x95	; 149
    4524:	d0 f3       	brcs	.-12     	; 0x451a <round+0x1c>
    4526:	b6 2f       	mov	r27, r22
    4528:	b1 70       	andi	r27, 0x01	; 1
    452a:	6b 0f       	add	r22, r27
    452c:	71 1d       	adc	r23, r1
    452e:	81 1d       	adc	r24, r1
    4530:	20 f4       	brcc	.+8      	; 0x453a <round+0x3c>
    4532:	87 95       	ror	r24
    4534:	77 95       	ror	r23
    4536:	67 95       	ror	r22
    4538:	93 95       	inc	r25
    453a:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__fp_mintl>
    453e:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__fp_mpack>
    4542:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <__fp_szero>

00004546 <sinh>:
    4546:	9f 93       	push	r25
    4548:	9f 77       	andi	r25, 0x7F	; 127
    454a:	fe e3       	ldi	r31, 0x3E	; 62
    454c:	80 3a       	cpi	r24, 0xA0	; 160
    454e:	9f 07       	cpc	r25, r31
    4550:	28 f4       	brcc	.+10     	; 0x455c <sinh+0x16>
    4552:	ed e5       	ldi	r30, 0x5D	; 93
    4554:	f1 e0       	ldi	r31, 0x01	; 1
    4556:	0e 94 3c 20 	call	0x4078	; 0x4078 <__fp_powsodd>
    455a:	17 c0       	rjmp	.+46     	; 0x458a <sinh+0x44>
    455c:	90 68       	ori	r25, 0x80	; 128
    455e:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <exp>
    4562:	4f ef       	ldi	r20, 0xFF	; 255
    4564:	5f ef       	ldi	r21, 0xFF	; 255
    4566:	0e 94 00 21 	call	0x4200	; 0x4200 <ldexp>
    456a:	9f 93       	push	r25
    456c:	8f 93       	push	r24
    456e:	7f 93       	push	r23
    4570:	6f 93       	push	r22
    4572:	42 e0       	ldi	r20, 0x02	; 2
    4574:	50 e0       	ldi	r21, 0x00	; 0
    4576:	0e 94 00 21 	call	0x4200	; 0x4200 <ldexp>
    457a:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <inverse>
    457e:	2f 91       	pop	r18
    4580:	3f 91       	pop	r19
    4582:	4f 91       	pop	r20
    4584:	5f 91       	pop	r21
    4586:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    458a:	0f 90       	pop	r0
    458c:	07 fc       	sbrc	r0, 7
    458e:	90 68       	ori	r25, 0x80	; 128
    4590:	08 95       	ret

00004592 <sin>:
    4592:	9f 93       	push	r25
    4594:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__fp_rempio2>
    4598:	0f 90       	pop	r0
    459a:	07 fc       	sbrc	r0, 7
    459c:	ee 5f       	subi	r30, 0xFE	; 254
    459e:	0c 94 9a 20 	jmp	0x4134	; 0x4134 <__fp_sinus>
    45a2:	19 f4       	brne	.+6      	; 0x45aa <sin+0x18>
    45a4:	16 f4       	brtc	.+4      	; 0x45aa <sin+0x18>
    45a6:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__fp_nan>
    45aa:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__fp_mpack>

000045ae <sqrt>:
    45ae:	0e 94 b6 20 	call	0x416c	; 0x416c <__fp_splitA>
    45b2:	b8 f3       	brcs	.-18     	; 0x45a2 <sin+0x10>
    45b4:	99 23       	and	r25, r25
    45b6:	c9 f3       	breq	.-14     	; 0x45aa <sin+0x18>
    45b8:	b6 f3       	brts	.-20     	; 0x45a6 <sin+0x14>
    45ba:	9f 57       	subi	r25, 0x7F	; 127
    45bc:	55 0b       	sbc	r21, r21
    45be:	87 ff       	sbrs	r24, 7
    45c0:	0e 94 74 23 	call	0x46e8	; 0x46e8 <__fp_norm2>
    45c4:	00 24       	eor	r0, r0
    45c6:	a0 e6       	ldi	r26, 0x60	; 96
    45c8:	40 ea       	ldi	r20, 0xA0	; 160
    45ca:	90 01       	movw	r18, r0
    45cc:	80 58       	subi	r24, 0x80	; 128
    45ce:	56 95       	lsr	r21
    45d0:	97 95       	ror	r25
    45d2:	28 f4       	brcc	.+10     	; 0x45de <sqrt+0x30>
    45d4:	80 5c       	subi	r24, 0xC0	; 192
    45d6:	66 0f       	add	r22, r22
    45d8:	77 1f       	adc	r23, r23
    45da:	88 1f       	adc	r24, r24
    45dc:	20 f0       	brcs	.+8      	; 0x45e6 <sqrt+0x38>
    45de:	26 17       	cp	r18, r22
    45e0:	37 07       	cpc	r19, r23
    45e2:	48 07       	cpc	r20, r24
    45e4:	30 f4       	brcc	.+12     	; 0x45f2 <sqrt+0x44>
    45e6:	62 1b       	sub	r22, r18
    45e8:	73 0b       	sbc	r23, r19
    45ea:	84 0b       	sbc	r24, r20
    45ec:	20 29       	or	r18, r0
    45ee:	31 29       	or	r19, r1
    45f0:	4a 2b       	or	r20, r26
    45f2:	a6 95       	lsr	r26
    45f4:	17 94       	ror	r1
    45f6:	07 94       	ror	r0
    45f8:	20 25       	eor	r18, r0
    45fa:	31 25       	eor	r19, r1
    45fc:	4a 27       	eor	r20, r26
    45fe:	58 f7       	brcc	.-42     	; 0x45d6 <sqrt+0x28>
    4600:	66 0f       	add	r22, r22
    4602:	77 1f       	adc	r23, r23
    4604:	88 1f       	adc	r24, r24
    4606:	20 f0       	brcs	.+8      	; 0x4610 <sqrt+0x62>
    4608:	26 17       	cp	r18, r22
    460a:	37 07       	cpc	r19, r23
    460c:	48 07       	cpc	r20, r24
    460e:	30 f4       	brcc	.+12     	; 0x461c <sqrt+0x6e>
    4610:	62 0b       	sbc	r22, r18
    4612:	73 0b       	sbc	r23, r19
    4614:	84 0b       	sbc	r24, r20
    4616:	20 0d       	add	r18, r0
    4618:	31 1d       	adc	r19, r1
    461a:	41 1d       	adc	r20, r1
    461c:	a0 95       	com	r26
    461e:	81 f7       	brne	.-32     	; 0x4600 <sqrt+0x52>
    4620:	b9 01       	movw	r22, r18
    4622:	84 2f       	mov	r24, r20
    4624:	91 58       	subi	r25, 0x81	; 129
    4626:	88 0f       	add	r24, r24
    4628:	96 95       	lsr	r25
    462a:	87 95       	ror	r24
    462c:	08 95       	ret

0000462e <square>:
    462e:	9b 01       	movw	r18, r22
    4630:	ac 01       	movw	r20, r24
    4632:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__mulsf3>

00004636 <tanh>:
    4636:	9f 93       	push	r25
    4638:	9f 77       	andi	r25, 0x7F	; 127
    463a:	fe e3       	ldi	r31, 0x3E	; 62
    463c:	80 31       	cpi	r24, 0x10	; 16
    463e:	9f 07       	cpc	r25, r31
    4640:	28 f4       	brcc	.+10     	; 0x464c <tanh+0x16>
    4642:	ec e6       	ldi	r30, 0x6C	; 108
    4644:	f1 e0       	ldi	r31, 0x01	; 1
    4646:	0e 94 3c 20 	call	0x4078	; 0x4078 <__fp_powsodd>
    464a:	25 c0       	rjmp	.+74     	; 0x4696 <tanh+0x60>
    464c:	90 68       	ori	r25, 0x80	; 128
    464e:	41 e0       	ldi	r20, 0x01	; 1
    4650:	50 e0       	ldi	r21, 0x00	; 0
    4652:	0e 94 00 21 	call	0x4200	; 0x4200 <ldexp>
    4656:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <exp>
    465a:	9f 93       	push	r25
    465c:	8f 93       	push	r24
    465e:	7f 93       	push	r23
    4660:	6f 93       	push	r22
    4662:	20 e0       	ldi	r18, 0x00	; 0
    4664:	30 e0       	ldi	r19, 0x00	; 0
    4666:	40 e8       	ldi	r20, 0x80	; 128
    4668:	5f e3       	ldi	r21, 0x3F	; 63
    466a:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__addsf3>
    466e:	2f 91       	pop	r18
    4670:	3f 91       	pop	r19
    4672:	4f 91       	pop	r20
    4674:	5f 91       	pop	r21
    4676:	9f 93       	push	r25
    4678:	8f 93       	push	r24
    467a:	7f 93       	push	r23
    467c:	6f 93       	push	r22
    467e:	60 e0       	ldi	r22, 0x00	; 0
    4680:	70 e0       	ldi	r23, 0x00	; 0
    4682:	80 e8       	ldi	r24, 0x80	; 128
    4684:	9f e3       	ldi	r25, 0x3F	; 63
    4686:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__subsf3>
    468a:	2f 91       	pop	r18
    468c:	3f 91       	pop	r19
    468e:	4f 91       	pop	r20
    4690:	5f 91       	pop	r21
    4692:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <__divsf3>
    4696:	0f 90       	pop	r0
    4698:	07 fc       	sbrc	r0, 7
    469a:	90 58       	subi	r25, 0x80	; 128
    469c:	08 95       	ret

0000469e <tan>:
    469e:	df 93       	push	r29
    46a0:	d9 2f       	mov	r29, r25
    46a2:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__fp_rempio2>
    46a6:	e6 95       	lsr	r30
    46a8:	d7 95       	ror	r29
    46aa:	2a ed       	ldi	r18, 0xDA	; 218
    46ac:	3f e0       	ldi	r19, 0x0F	; 15
    46ae:	49 e4       	ldi	r20, 0x49	; 73
    46b0:	5f e3       	ldi	r21, 0x3F	; 63
    46b2:	b3 3a       	cpi	r27, 0xA3	; 163
    46b4:	62 07       	cpc	r22, r18
    46b6:	73 07       	cpc	r23, r19
    46b8:	84 07       	cpc	r24, r20
    46ba:	95 07       	cpc	r25, r21
    46bc:	d7 95       	ror	r29
    46be:	3a f0       	brmi	.+14     	; 0x46ce <tan+0x30>
    46c0:	a2 ea       	ldi	r26, 0xA2	; 162
    46c2:	49 ec       	ldi	r20, 0xC9	; 201
    46c4:	90 68       	ori	r25, 0x80	; 128
    46c6:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__addsf3x>
    46ca:	0e 94 89 20 	call	0x4112	; 0x4112 <__fp_round>
    46ce:	eb e7       	ldi	r30, 0x7B	; 123
    46d0:	f1 e0       	ldi	r31, 0x01	; 1
    46d2:	0e 94 3c 20 	call	0x4078	; 0x4078 <__fp_powsodd>
    46d6:	dd 0f       	add	r29, r29
    46d8:	13 f0       	brvs	.+4      	; 0x46de <tan+0x40>
    46da:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <inverse>
    46de:	dd 0f       	add	r29, r29
    46e0:	0b f4       	brvc	.+2      	; 0x46e4 <tan+0x46>
    46e2:	90 58       	subi	r25, 0x80	; 128
    46e4:	df 91       	pop	r29
    46e6:	08 95       	ret

000046e8 <__fp_norm2>:
    46e8:	91 50       	subi	r25, 0x01	; 1
    46ea:	50 40       	sbci	r21, 0x00	; 0
    46ec:	66 0f       	add	r22, r22
    46ee:	77 1f       	adc	r23, r23
    46f0:	88 1f       	adc	r24, r24
    46f2:	d2 f7       	brpl	.-12     	; 0x46e8 <__fp_norm2>
    46f4:	08 95       	ret

000046f6 <__tablejump2__>:
    46f6:	ee 0f       	add	r30, r30
    46f8:	ff 1f       	adc	r31, r31
    46fa:	05 90       	lpm	r0, Z+
    46fc:	f4 91       	lpm	r31, Z
    46fe:	e0 2d       	mov	r30, r0
    4700:	09 94       	ijmp

00004702 <dtostrf>:
    4702:	ef 92       	push	r14
    4704:	0f 93       	push	r16
    4706:	1f 93       	push	r17
    4708:	cf 93       	push	r28
    470a:	df 93       	push	r29
    470c:	e8 01       	movw	r28, r16
    470e:	47 fd       	sbrc	r20, 7
    4710:	02 c0       	rjmp	.+4      	; 0x4716 <dtostrf+0x14>
    4712:	34 e0       	ldi	r19, 0x04	; 4
    4714:	01 c0       	rjmp	.+2      	; 0x4718 <dtostrf+0x16>
    4716:	34 e1       	ldi	r19, 0x14	; 20
    4718:	04 2e       	mov	r0, r20
    471a:	00 0c       	add	r0, r0
    471c:	55 0b       	sbc	r21, r21
    471e:	57 ff       	sbrs	r21, 7
    4720:	03 c0       	rjmp	.+6      	; 0x4728 <dtostrf+0x26>
    4722:	51 95       	neg	r21
    4724:	41 95       	neg	r20
    4726:	51 09       	sbc	r21, r1
    4728:	e3 2e       	mov	r14, r19
    472a:	02 2f       	mov	r16, r18
    472c:	24 2f       	mov	r18, r20
    472e:	ae 01       	movw	r20, r28
    4730:	0e 94 08 25 	call	0x4a10	; 0x4a10 <dtoa_prf>
    4734:	ce 01       	movw	r24, r28
    4736:	df 91       	pop	r29
    4738:	cf 91       	pop	r28
    473a:	1f 91       	pop	r17
    473c:	0f 91       	pop	r16
    473e:	ef 90       	pop	r14
    4740:	08 95       	ret

00004742 <malloc>:
    4742:	0f 93       	push	r16
    4744:	1f 93       	push	r17
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	82 30       	cpi	r24, 0x02	; 2
    474c:	91 05       	cpc	r25, r1
    474e:	10 f4       	brcc	.+4      	; 0x4754 <malloc+0x12>
    4750:	82 e0       	ldi	r24, 0x02	; 2
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	e0 91 84 07 	lds	r30, 0x0784	; 0x800784 <__flp>
    4758:	f0 91 85 07 	lds	r31, 0x0785	; 0x800785 <__flp+0x1>
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	a0 e0       	ldi	r26, 0x00	; 0
    4762:	b0 e0       	ldi	r27, 0x00	; 0
    4764:	30 97       	sbiw	r30, 0x00	; 0
    4766:	19 f1       	breq	.+70     	; 0x47ae <malloc+0x6c>
    4768:	40 81       	ld	r20, Z
    476a:	51 81       	ldd	r21, Z+1	; 0x01
    476c:	02 81       	ldd	r16, Z+2	; 0x02
    476e:	13 81       	ldd	r17, Z+3	; 0x03
    4770:	48 17       	cp	r20, r24
    4772:	59 07       	cpc	r21, r25
    4774:	c8 f0       	brcs	.+50     	; 0x47a8 <malloc+0x66>
    4776:	84 17       	cp	r24, r20
    4778:	95 07       	cpc	r25, r21
    477a:	69 f4       	brne	.+26     	; 0x4796 <malloc+0x54>
    477c:	10 97       	sbiw	r26, 0x00	; 0
    477e:	31 f0       	breq	.+12     	; 0x478c <malloc+0x4a>
    4780:	12 96       	adiw	r26, 0x02	; 2
    4782:	0c 93       	st	X, r16
    4784:	12 97       	sbiw	r26, 0x02	; 2
    4786:	13 96       	adiw	r26, 0x03	; 3
    4788:	1c 93       	st	X, r17
    478a:	27 c0       	rjmp	.+78     	; 0x47da <malloc+0x98>
    478c:	00 93 84 07 	sts	0x0784, r16	; 0x800784 <__flp>
    4790:	10 93 85 07 	sts	0x0785, r17	; 0x800785 <__flp+0x1>
    4794:	22 c0       	rjmp	.+68     	; 0x47da <malloc+0x98>
    4796:	21 15       	cp	r18, r1
    4798:	31 05       	cpc	r19, r1
    479a:	19 f0       	breq	.+6      	; 0x47a2 <malloc+0x60>
    479c:	42 17       	cp	r20, r18
    479e:	53 07       	cpc	r21, r19
    47a0:	18 f4       	brcc	.+6      	; 0x47a8 <malloc+0x66>
    47a2:	9a 01       	movw	r18, r20
    47a4:	bd 01       	movw	r22, r26
    47a6:	ef 01       	movw	r28, r30
    47a8:	df 01       	movw	r26, r30
    47aa:	f8 01       	movw	r30, r16
    47ac:	db cf       	rjmp	.-74     	; 0x4764 <malloc+0x22>
    47ae:	21 15       	cp	r18, r1
    47b0:	31 05       	cpc	r19, r1
    47b2:	f9 f0       	breq	.+62     	; 0x47f2 <malloc+0xb0>
    47b4:	28 1b       	sub	r18, r24
    47b6:	39 0b       	sbc	r19, r25
    47b8:	24 30       	cpi	r18, 0x04	; 4
    47ba:	31 05       	cpc	r19, r1
    47bc:	80 f4       	brcc	.+32     	; 0x47de <malloc+0x9c>
    47be:	8a 81       	ldd	r24, Y+2	; 0x02
    47c0:	9b 81       	ldd	r25, Y+3	; 0x03
    47c2:	61 15       	cp	r22, r1
    47c4:	71 05       	cpc	r23, r1
    47c6:	21 f0       	breq	.+8      	; 0x47d0 <malloc+0x8e>
    47c8:	fb 01       	movw	r30, r22
    47ca:	93 83       	std	Z+3, r25	; 0x03
    47cc:	82 83       	std	Z+2, r24	; 0x02
    47ce:	04 c0       	rjmp	.+8      	; 0x47d8 <malloc+0x96>
    47d0:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <__flp+0x1>
    47d4:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <__flp>
    47d8:	fe 01       	movw	r30, r28
    47da:	32 96       	adiw	r30, 0x02	; 2
    47dc:	44 c0       	rjmp	.+136    	; 0x4866 <malloc+0x124>
    47de:	fe 01       	movw	r30, r28
    47e0:	e2 0f       	add	r30, r18
    47e2:	f3 1f       	adc	r31, r19
    47e4:	81 93       	st	Z+, r24
    47e6:	91 93       	st	Z+, r25
    47e8:	22 50       	subi	r18, 0x02	; 2
    47ea:	31 09       	sbc	r19, r1
    47ec:	39 83       	std	Y+1, r19	; 0x01
    47ee:	28 83       	st	Y, r18
    47f0:	3a c0       	rjmp	.+116    	; 0x4866 <malloc+0x124>
    47f2:	20 91 82 07 	lds	r18, 0x0782	; 0x800782 <__brkval>
    47f6:	30 91 83 07 	lds	r19, 0x0783	; 0x800783 <__brkval+0x1>
    47fa:	23 2b       	or	r18, r19
    47fc:	41 f4       	brne	.+16     	; 0x480e <malloc+0xcc>
    47fe:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    4802:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    4806:	30 93 83 07 	sts	0x0783, r19	; 0x800783 <__brkval+0x1>
    480a:	20 93 82 07 	sts	0x0782, r18	; 0x800782 <__brkval>
    480e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    4812:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    4816:	21 15       	cp	r18, r1
    4818:	31 05       	cpc	r19, r1
    481a:	41 f4       	brne	.+16     	; 0x482c <malloc+0xea>
    481c:	2d b7       	in	r18, 0x3d	; 61
    481e:	3e b7       	in	r19, 0x3e	; 62
    4820:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    4824:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    4828:	24 1b       	sub	r18, r20
    482a:	35 0b       	sbc	r19, r21
    482c:	e0 91 82 07 	lds	r30, 0x0782	; 0x800782 <__brkval>
    4830:	f0 91 83 07 	lds	r31, 0x0783	; 0x800783 <__brkval+0x1>
    4834:	e2 17       	cp	r30, r18
    4836:	f3 07       	cpc	r31, r19
    4838:	a0 f4       	brcc	.+40     	; 0x4862 <malloc+0x120>
    483a:	2e 1b       	sub	r18, r30
    483c:	3f 0b       	sbc	r19, r31
    483e:	28 17       	cp	r18, r24
    4840:	39 07       	cpc	r19, r25
    4842:	78 f0       	brcs	.+30     	; 0x4862 <malloc+0x120>
    4844:	ac 01       	movw	r20, r24
    4846:	4e 5f       	subi	r20, 0xFE	; 254
    4848:	5f 4f       	sbci	r21, 0xFF	; 255
    484a:	24 17       	cp	r18, r20
    484c:	35 07       	cpc	r19, r21
    484e:	48 f0       	brcs	.+18     	; 0x4862 <malloc+0x120>
    4850:	4e 0f       	add	r20, r30
    4852:	5f 1f       	adc	r21, r31
    4854:	50 93 83 07 	sts	0x0783, r21	; 0x800783 <__brkval+0x1>
    4858:	40 93 82 07 	sts	0x0782, r20	; 0x800782 <__brkval>
    485c:	81 93       	st	Z+, r24
    485e:	91 93       	st	Z+, r25
    4860:	02 c0       	rjmp	.+4      	; 0x4866 <malloc+0x124>
    4862:	e0 e0       	ldi	r30, 0x00	; 0
    4864:	f0 e0       	ldi	r31, 0x00	; 0
    4866:	cf 01       	movw	r24, r30
    4868:	df 91       	pop	r29
    486a:	cf 91       	pop	r28
    486c:	1f 91       	pop	r17
    486e:	0f 91       	pop	r16
    4870:	08 95       	ret

00004872 <free>:
    4872:	cf 93       	push	r28
    4874:	df 93       	push	r29
    4876:	00 97       	sbiw	r24, 0x00	; 0
    4878:	09 f4       	brne	.+2      	; 0x487c <free+0xa>
    487a:	81 c0       	rjmp	.+258    	; 0x497e <free+0x10c>
    487c:	fc 01       	movw	r30, r24
    487e:	32 97       	sbiw	r30, 0x02	; 2
    4880:	13 82       	std	Z+3, r1	; 0x03
    4882:	12 82       	std	Z+2, r1	; 0x02
    4884:	a0 91 84 07 	lds	r26, 0x0784	; 0x800784 <__flp>
    4888:	b0 91 85 07 	lds	r27, 0x0785	; 0x800785 <__flp+0x1>
    488c:	10 97       	sbiw	r26, 0x00	; 0
    488e:	81 f4       	brne	.+32     	; 0x48b0 <free+0x3e>
    4890:	20 81       	ld	r18, Z
    4892:	31 81       	ldd	r19, Z+1	; 0x01
    4894:	82 0f       	add	r24, r18
    4896:	93 1f       	adc	r25, r19
    4898:	20 91 82 07 	lds	r18, 0x0782	; 0x800782 <__brkval>
    489c:	30 91 83 07 	lds	r19, 0x0783	; 0x800783 <__brkval+0x1>
    48a0:	28 17       	cp	r18, r24
    48a2:	39 07       	cpc	r19, r25
    48a4:	51 f5       	brne	.+84     	; 0x48fa <free+0x88>
    48a6:	f0 93 83 07 	sts	0x0783, r31	; 0x800783 <__brkval+0x1>
    48aa:	e0 93 82 07 	sts	0x0782, r30	; 0x800782 <__brkval>
    48ae:	67 c0       	rjmp	.+206    	; 0x497e <free+0x10c>
    48b0:	ed 01       	movw	r28, r26
    48b2:	20 e0       	ldi	r18, 0x00	; 0
    48b4:	30 e0       	ldi	r19, 0x00	; 0
    48b6:	ce 17       	cp	r28, r30
    48b8:	df 07       	cpc	r29, r31
    48ba:	40 f4       	brcc	.+16     	; 0x48cc <free+0x5a>
    48bc:	4a 81       	ldd	r20, Y+2	; 0x02
    48be:	5b 81       	ldd	r21, Y+3	; 0x03
    48c0:	9e 01       	movw	r18, r28
    48c2:	41 15       	cp	r20, r1
    48c4:	51 05       	cpc	r21, r1
    48c6:	f1 f0       	breq	.+60     	; 0x4904 <free+0x92>
    48c8:	ea 01       	movw	r28, r20
    48ca:	f5 cf       	rjmp	.-22     	; 0x48b6 <free+0x44>
    48cc:	d3 83       	std	Z+3, r29	; 0x03
    48ce:	c2 83       	std	Z+2, r28	; 0x02
    48d0:	40 81       	ld	r20, Z
    48d2:	51 81       	ldd	r21, Z+1	; 0x01
    48d4:	84 0f       	add	r24, r20
    48d6:	95 1f       	adc	r25, r21
    48d8:	c8 17       	cp	r28, r24
    48da:	d9 07       	cpc	r29, r25
    48dc:	59 f4       	brne	.+22     	; 0x48f4 <free+0x82>
    48de:	88 81       	ld	r24, Y
    48e0:	99 81       	ldd	r25, Y+1	; 0x01
    48e2:	84 0f       	add	r24, r20
    48e4:	95 1f       	adc	r25, r21
    48e6:	02 96       	adiw	r24, 0x02	; 2
    48e8:	91 83       	std	Z+1, r25	; 0x01
    48ea:	80 83       	st	Z, r24
    48ec:	8a 81       	ldd	r24, Y+2	; 0x02
    48ee:	9b 81       	ldd	r25, Y+3	; 0x03
    48f0:	93 83       	std	Z+3, r25	; 0x03
    48f2:	82 83       	std	Z+2, r24	; 0x02
    48f4:	21 15       	cp	r18, r1
    48f6:	31 05       	cpc	r19, r1
    48f8:	29 f4       	brne	.+10     	; 0x4904 <free+0x92>
    48fa:	f0 93 85 07 	sts	0x0785, r31	; 0x800785 <__flp+0x1>
    48fe:	e0 93 84 07 	sts	0x0784, r30	; 0x800784 <__flp>
    4902:	3d c0       	rjmp	.+122    	; 0x497e <free+0x10c>
    4904:	e9 01       	movw	r28, r18
    4906:	fb 83       	std	Y+3, r31	; 0x03
    4908:	ea 83       	std	Y+2, r30	; 0x02
    490a:	49 91       	ld	r20, Y+
    490c:	59 91       	ld	r21, Y+
    490e:	c4 0f       	add	r28, r20
    4910:	d5 1f       	adc	r29, r21
    4912:	ec 17       	cp	r30, r28
    4914:	fd 07       	cpc	r31, r29
    4916:	61 f4       	brne	.+24     	; 0x4930 <free+0xbe>
    4918:	80 81       	ld	r24, Z
    491a:	91 81       	ldd	r25, Z+1	; 0x01
    491c:	84 0f       	add	r24, r20
    491e:	95 1f       	adc	r25, r21
    4920:	02 96       	adiw	r24, 0x02	; 2
    4922:	e9 01       	movw	r28, r18
    4924:	99 83       	std	Y+1, r25	; 0x01
    4926:	88 83       	st	Y, r24
    4928:	82 81       	ldd	r24, Z+2	; 0x02
    492a:	93 81       	ldd	r25, Z+3	; 0x03
    492c:	9b 83       	std	Y+3, r25	; 0x03
    492e:	8a 83       	std	Y+2, r24	; 0x02
    4930:	e0 e0       	ldi	r30, 0x00	; 0
    4932:	f0 e0       	ldi	r31, 0x00	; 0
    4934:	12 96       	adiw	r26, 0x02	; 2
    4936:	8d 91       	ld	r24, X+
    4938:	9c 91       	ld	r25, X
    493a:	13 97       	sbiw	r26, 0x03	; 3
    493c:	00 97       	sbiw	r24, 0x00	; 0
    493e:	19 f0       	breq	.+6      	; 0x4946 <free+0xd4>
    4940:	fd 01       	movw	r30, r26
    4942:	dc 01       	movw	r26, r24
    4944:	f7 cf       	rjmp	.-18     	; 0x4934 <free+0xc2>
    4946:	8d 91       	ld	r24, X+
    4948:	9c 91       	ld	r25, X
    494a:	11 97       	sbiw	r26, 0x01	; 1
    494c:	9d 01       	movw	r18, r26
    494e:	2e 5f       	subi	r18, 0xFE	; 254
    4950:	3f 4f       	sbci	r19, 0xFF	; 255
    4952:	82 0f       	add	r24, r18
    4954:	93 1f       	adc	r25, r19
    4956:	20 91 82 07 	lds	r18, 0x0782	; 0x800782 <__brkval>
    495a:	30 91 83 07 	lds	r19, 0x0783	; 0x800783 <__brkval+0x1>
    495e:	28 17       	cp	r18, r24
    4960:	39 07       	cpc	r19, r25
    4962:	69 f4       	brne	.+26     	; 0x497e <free+0x10c>
    4964:	30 97       	sbiw	r30, 0x00	; 0
    4966:	29 f4       	brne	.+10     	; 0x4972 <free+0x100>
    4968:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <__flp+0x1>
    496c:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <__flp>
    4970:	02 c0       	rjmp	.+4      	; 0x4976 <free+0x104>
    4972:	13 82       	std	Z+3, r1	; 0x03
    4974:	12 82       	std	Z+2, r1	; 0x02
    4976:	b0 93 83 07 	sts	0x0783, r27	; 0x800783 <__brkval+0x1>
    497a:	a0 93 82 07 	sts	0x0782, r26	; 0x800782 <__brkval>
    497e:	df 91       	pop	r29
    4980:	cf 91       	pop	r28
    4982:	08 95       	ret

00004984 <atof>:
    4984:	66 27       	eor	r22, r22
    4986:	77 27       	eor	r23, r23
    4988:	0c 94 62 26 	jmp	0x4cc4	; 0x4cc4 <strtod>

0000498c <isupper>:
    498c:	85 fd       	sbrc	r24, 5
    498e:	0c 94 88 28 	jmp	0x5110	; 0x5110 <__ctype_isfalse>

00004992 <isalpha>:
    4992:	80 62       	ori	r24, 0x20	; 32

00004994 <islower>:
    4994:	91 11       	cpse	r25, r1
    4996:	0c 94 88 28 	jmp	0x5110	; 0x5110 <__ctype_isfalse>
    499a:	81 56       	subi	r24, 0x61	; 97
    499c:	8a 51       	subi	r24, 0x1A	; 26
    499e:	d8 f7       	brcc	.-10     	; 0x4996 <islower+0x2>
    49a0:	08 95       	ret

000049a2 <isspace>:
    49a2:	91 11       	cpse	r25, r1
    49a4:	0c 94 88 28 	jmp	0x5110	; 0x5110 <__ctype_isfalse>
    49a8:	80 32       	cpi	r24, 0x20	; 32
    49aa:	19 f0       	breq	.+6      	; 0x49b2 <isspace+0x10>
    49ac:	89 50       	subi	r24, 0x09	; 9
    49ae:	85 50       	subi	r24, 0x05	; 5
    49b0:	c8 f7       	brcc	.-14     	; 0x49a4 <isspace+0x2>
    49b2:	08 95       	ret

000049b4 <toupper>:
    49b4:	91 11       	cpse	r25, r1
    49b6:	08 95       	ret
    49b8:	81 56       	subi	r24, 0x61	; 97
    49ba:	8a 51       	subi	r24, 0x1A	; 26
    49bc:	08 f4       	brcc	.+2      	; 0x49c0 <toupper+0xc>
    49be:	80 52       	subi	r24, 0x20	; 32
    49c0:	85 58       	subi	r24, 0x85	; 133
    49c2:	08 95       	ret

000049c4 <strcat>:
    49c4:	fb 01       	movw	r30, r22
    49c6:	dc 01       	movw	r26, r24
    49c8:	0d 90       	ld	r0, X+
    49ca:	00 20       	and	r0, r0
    49cc:	e9 f7       	brne	.-6      	; 0x49c8 <strcat+0x4>
    49ce:	11 97       	sbiw	r26, 0x01	; 1
    49d0:	01 90       	ld	r0, Z+
    49d2:	0d 92       	st	X+, r0
    49d4:	00 20       	and	r0, r0
    49d6:	e1 f7       	brne	.-8      	; 0x49d0 <strcat+0xc>
    49d8:	08 95       	ret

000049da <strchr>:
    49da:	fc 01       	movw	r30, r24
    49dc:	81 91       	ld	r24, Z+
    49de:	86 17       	cp	r24, r22
    49e0:	21 f0       	breq	.+8      	; 0x49ea <strchr+0x10>
    49e2:	88 23       	and	r24, r24
    49e4:	d9 f7       	brne	.-10     	; 0x49dc <strchr+0x2>
    49e6:	99 27       	eor	r25, r25
    49e8:	08 95       	ret
    49ea:	31 97       	sbiw	r30, 0x01	; 1
    49ec:	cf 01       	movw	r24, r30
    49ee:	08 95       	ret

000049f0 <strcmp>:
    49f0:	fb 01       	movw	r30, r22
    49f2:	dc 01       	movw	r26, r24
    49f4:	8d 91       	ld	r24, X+
    49f6:	01 90       	ld	r0, Z+
    49f8:	80 19       	sub	r24, r0
    49fa:	01 10       	cpse	r0, r1
    49fc:	d9 f3       	breq	.-10     	; 0x49f4 <strcmp+0x4>
    49fe:	99 0b       	sbc	r25, r25
    4a00:	08 95       	ret

00004a02 <strcpy>:
    4a02:	fb 01       	movw	r30, r22
    4a04:	dc 01       	movw	r26, r24
    4a06:	01 90       	ld	r0, Z+
    4a08:	0d 92       	st	X+, r0
    4a0a:	00 20       	and	r0, r0
    4a0c:	e1 f7       	brne	.-8      	; 0x4a06 <strcpy+0x4>
    4a0e:	08 95       	ret

00004a10 <dtoa_prf>:
    4a10:	a9 e0       	ldi	r26, 0x09	; 9
    4a12:	b0 e0       	ldi	r27, 0x00	; 0
    4a14:	ee e0       	ldi	r30, 0x0E	; 14
    4a16:	f5 e2       	ldi	r31, 0x25	; 37
    4a18:	0c 94 b4 28 	jmp	0x5168	; 0x5168 <__prologue_saves__+0xc>
    4a1c:	6a 01       	movw	r12, r20
    4a1e:	12 2f       	mov	r17, r18
    4a20:	b0 2e       	mov	r11, r16
    4a22:	2b e3       	ldi	r18, 0x3B	; 59
    4a24:	20 17       	cp	r18, r16
    4a26:	20 f0       	brcs	.+8      	; 0x4a30 <dtoa_prf+0x20>
    4a28:	ff 24       	eor	r15, r15
    4a2a:	f3 94       	inc	r15
    4a2c:	f0 0e       	add	r15, r16
    4a2e:	02 c0       	rjmp	.+4      	; 0x4a34 <dtoa_prf+0x24>
    4a30:	2c e3       	ldi	r18, 0x3C	; 60
    4a32:	f2 2e       	mov	r15, r18
    4a34:	0f 2d       	mov	r16, r15
    4a36:	27 e0       	ldi	r18, 0x07	; 7
    4a38:	ae 01       	movw	r20, r28
    4a3a:	4f 5f       	subi	r20, 0xFF	; 255
    4a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    4a3e:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <__ftoa_engine>
    4a42:	bc 01       	movw	r22, r24
    4a44:	49 81       	ldd	r20, Y+1	; 0x01
    4a46:	84 2f       	mov	r24, r20
    4a48:	89 70       	andi	r24, 0x09	; 9
    4a4a:	81 30       	cpi	r24, 0x01	; 1
    4a4c:	31 f0       	breq	.+12     	; 0x4a5a <dtoa_prf+0x4a>
    4a4e:	e1 fc       	sbrc	r14, 1
    4a50:	06 c0       	rjmp	.+12     	; 0x4a5e <dtoa_prf+0x4e>
    4a52:	e0 fe       	sbrs	r14, 0
    4a54:	06 c0       	rjmp	.+12     	; 0x4a62 <dtoa_prf+0x52>
    4a56:	90 e2       	ldi	r25, 0x20	; 32
    4a58:	05 c0       	rjmp	.+10     	; 0x4a64 <dtoa_prf+0x54>
    4a5a:	9d e2       	ldi	r25, 0x2D	; 45
    4a5c:	03 c0       	rjmp	.+6      	; 0x4a64 <dtoa_prf+0x54>
    4a5e:	9b e2       	ldi	r25, 0x2B	; 43
    4a60:	01 c0       	rjmp	.+2      	; 0x4a64 <dtoa_prf+0x54>
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	5e 2d       	mov	r21, r14
    4a66:	50 71       	andi	r21, 0x10	; 16
    4a68:	43 ff       	sbrs	r20, 3
    4a6a:	3c c0       	rjmp	.+120    	; 0x4ae4 <dtoa_prf+0xd4>
    4a6c:	91 11       	cpse	r25, r1
    4a6e:	02 c0       	rjmp	.+4      	; 0x4a74 <dtoa_prf+0x64>
    4a70:	83 e0       	ldi	r24, 0x03	; 3
    4a72:	01 c0       	rjmp	.+2      	; 0x4a76 <dtoa_prf+0x66>
    4a74:	84 e0       	ldi	r24, 0x04	; 4
    4a76:	81 17       	cp	r24, r17
    4a78:	18 f4       	brcc	.+6      	; 0x4a80 <dtoa_prf+0x70>
    4a7a:	21 2f       	mov	r18, r17
    4a7c:	28 1b       	sub	r18, r24
    4a7e:	01 c0       	rjmp	.+2      	; 0x4a82 <dtoa_prf+0x72>
    4a80:	20 e0       	ldi	r18, 0x00	; 0
    4a82:	51 11       	cpse	r21, r1
    4a84:	0b c0       	rjmp	.+22     	; 0x4a9c <dtoa_prf+0x8c>
    4a86:	f6 01       	movw	r30, r12
    4a88:	82 2f       	mov	r24, r18
    4a8a:	30 e2       	ldi	r19, 0x20	; 32
    4a8c:	88 23       	and	r24, r24
    4a8e:	19 f0       	breq	.+6      	; 0x4a96 <dtoa_prf+0x86>
    4a90:	31 93       	st	Z+, r19
    4a92:	81 50       	subi	r24, 0x01	; 1
    4a94:	fb cf       	rjmp	.-10     	; 0x4a8c <dtoa_prf+0x7c>
    4a96:	c2 0e       	add	r12, r18
    4a98:	d1 1c       	adc	r13, r1
    4a9a:	20 e0       	ldi	r18, 0x00	; 0
    4a9c:	99 23       	and	r25, r25
    4a9e:	29 f0       	breq	.+10     	; 0x4aaa <dtoa_prf+0x9a>
    4aa0:	d6 01       	movw	r26, r12
    4aa2:	9c 93       	st	X, r25
    4aa4:	f6 01       	movw	r30, r12
    4aa6:	31 96       	adiw	r30, 0x01	; 1
    4aa8:	6f 01       	movw	r12, r30
    4aaa:	c6 01       	movw	r24, r12
    4aac:	03 96       	adiw	r24, 0x03	; 3
    4aae:	e2 fe       	sbrs	r14, 2
    4ab0:	0a c0       	rjmp	.+20     	; 0x4ac6 <dtoa_prf+0xb6>
    4ab2:	3e e4       	ldi	r19, 0x4E	; 78
    4ab4:	d6 01       	movw	r26, r12
    4ab6:	3c 93       	st	X, r19
    4ab8:	41 e4       	ldi	r20, 0x41	; 65
    4aba:	11 96       	adiw	r26, 0x01	; 1
    4abc:	4c 93       	st	X, r20
    4abe:	11 97       	sbiw	r26, 0x01	; 1
    4ac0:	12 96       	adiw	r26, 0x02	; 2
    4ac2:	3c 93       	st	X, r19
    4ac4:	06 c0       	rjmp	.+12     	; 0x4ad2 <dtoa_prf+0xc2>
    4ac6:	3e e6       	ldi	r19, 0x6E	; 110
    4ac8:	f6 01       	movw	r30, r12
    4aca:	30 83       	st	Z, r19
    4acc:	41 e6       	ldi	r20, 0x61	; 97
    4ace:	41 83       	std	Z+1, r20	; 0x01
    4ad0:	32 83       	std	Z+2, r19	; 0x02
    4ad2:	fc 01       	movw	r30, r24
    4ad4:	32 2f       	mov	r19, r18
    4ad6:	40 e2       	ldi	r20, 0x20	; 32
    4ad8:	33 23       	and	r19, r19
    4ada:	09 f4       	brne	.+2      	; 0x4ade <dtoa_prf+0xce>
    4adc:	42 c0       	rjmp	.+132    	; 0x4b62 <dtoa_prf+0x152>
    4ade:	41 93       	st	Z+, r20
    4ae0:	31 50       	subi	r19, 0x01	; 1
    4ae2:	fa cf       	rjmp	.-12     	; 0x4ad8 <dtoa_prf+0xc8>
    4ae4:	42 ff       	sbrs	r20, 2
    4ae6:	44 c0       	rjmp	.+136    	; 0x4b70 <dtoa_prf+0x160>
    4ae8:	91 11       	cpse	r25, r1
    4aea:	02 c0       	rjmp	.+4      	; 0x4af0 <dtoa_prf+0xe0>
    4aec:	83 e0       	ldi	r24, 0x03	; 3
    4aee:	01 c0       	rjmp	.+2      	; 0x4af2 <dtoa_prf+0xe2>
    4af0:	84 e0       	ldi	r24, 0x04	; 4
    4af2:	81 17       	cp	r24, r17
    4af4:	18 f4       	brcc	.+6      	; 0x4afc <dtoa_prf+0xec>
    4af6:	21 2f       	mov	r18, r17
    4af8:	28 1b       	sub	r18, r24
    4afa:	01 c0       	rjmp	.+2      	; 0x4afe <dtoa_prf+0xee>
    4afc:	20 e0       	ldi	r18, 0x00	; 0
    4afe:	51 11       	cpse	r21, r1
    4b00:	0b c0       	rjmp	.+22     	; 0x4b18 <dtoa_prf+0x108>
    4b02:	f6 01       	movw	r30, r12
    4b04:	82 2f       	mov	r24, r18
    4b06:	30 e2       	ldi	r19, 0x20	; 32
    4b08:	88 23       	and	r24, r24
    4b0a:	19 f0       	breq	.+6      	; 0x4b12 <dtoa_prf+0x102>
    4b0c:	31 93       	st	Z+, r19
    4b0e:	81 50       	subi	r24, 0x01	; 1
    4b10:	fb cf       	rjmp	.-10     	; 0x4b08 <dtoa_prf+0xf8>
    4b12:	c2 0e       	add	r12, r18
    4b14:	d1 1c       	adc	r13, r1
    4b16:	20 e0       	ldi	r18, 0x00	; 0
    4b18:	99 23       	and	r25, r25
    4b1a:	29 f0       	breq	.+10     	; 0x4b26 <dtoa_prf+0x116>
    4b1c:	d6 01       	movw	r26, r12
    4b1e:	9c 93       	st	X, r25
    4b20:	f6 01       	movw	r30, r12
    4b22:	31 96       	adiw	r30, 0x01	; 1
    4b24:	6f 01       	movw	r12, r30
    4b26:	c6 01       	movw	r24, r12
    4b28:	03 96       	adiw	r24, 0x03	; 3
    4b2a:	e2 fe       	sbrs	r14, 2
    4b2c:	0b c0       	rjmp	.+22     	; 0x4b44 <dtoa_prf+0x134>
    4b2e:	39 e4       	ldi	r19, 0x49	; 73
    4b30:	d6 01       	movw	r26, r12
    4b32:	3c 93       	st	X, r19
    4b34:	3e e4       	ldi	r19, 0x4E	; 78
    4b36:	11 96       	adiw	r26, 0x01	; 1
    4b38:	3c 93       	st	X, r19
    4b3a:	11 97       	sbiw	r26, 0x01	; 1
    4b3c:	36 e4       	ldi	r19, 0x46	; 70
    4b3e:	12 96       	adiw	r26, 0x02	; 2
    4b40:	3c 93       	st	X, r19
    4b42:	07 c0       	rjmp	.+14     	; 0x4b52 <dtoa_prf+0x142>
    4b44:	39 e6       	ldi	r19, 0x69	; 105
    4b46:	f6 01       	movw	r30, r12
    4b48:	30 83       	st	Z, r19
    4b4a:	3e e6       	ldi	r19, 0x6E	; 110
    4b4c:	31 83       	std	Z+1, r19	; 0x01
    4b4e:	36 e6       	ldi	r19, 0x66	; 102
    4b50:	32 83       	std	Z+2, r19	; 0x02
    4b52:	fc 01       	movw	r30, r24
    4b54:	32 2f       	mov	r19, r18
    4b56:	40 e2       	ldi	r20, 0x20	; 32
    4b58:	33 23       	and	r19, r19
    4b5a:	19 f0       	breq	.+6      	; 0x4b62 <dtoa_prf+0x152>
    4b5c:	41 93       	st	Z+, r20
    4b5e:	31 50       	subi	r19, 0x01	; 1
    4b60:	fb cf       	rjmp	.-10     	; 0x4b58 <dtoa_prf+0x148>
    4b62:	fc 01       	movw	r30, r24
    4b64:	e2 0f       	add	r30, r18
    4b66:	f1 1d       	adc	r31, r1
    4b68:	10 82       	st	Z, r1
    4b6a:	8e ef       	ldi	r24, 0xFE	; 254
    4b6c:	9f ef       	ldi	r25, 0xFF	; 255
    4b6e:	a6 c0       	rjmp	.+332    	; 0x4cbc <dtoa_prf+0x2ac>
    4b70:	21 e0       	ldi	r18, 0x01	; 1
    4b72:	30 e0       	ldi	r19, 0x00	; 0
    4b74:	91 11       	cpse	r25, r1
    4b76:	02 c0       	rjmp	.+4      	; 0x4b7c <dtoa_prf+0x16c>
    4b78:	20 e0       	ldi	r18, 0x00	; 0
    4b7a:	30 e0       	ldi	r19, 0x00	; 0
    4b7c:	16 16       	cp	r1, r22
    4b7e:	17 06       	cpc	r1, r23
    4b80:	1c f4       	brge	.+6      	; 0x4b88 <dtoa_prf+0x178>
    4b82:	fb 01       	movw	r30, r22
    4b84:	31 96       	adiw	r30, 0x01	; 1
    4b86:	02 c0       	rjmp	.+4      	; 0x4b8c <dtoa_prf+0x17c>
    4b88:	e1 e0       	ldi	r30, 0x01	; 1
    4b8a:	f0 e0       	ldi	r31, 0x00	; 0
    4b8c:	2e 0f       	add	r18, r30
    4b8e:	3f 1f       	adc	r19, r31
    4b90:	bb 20       	and	r11, r11
    4b92:	21 f0       	breq	.+8      	; 0x4b9c <dtoa_prf+0x18c>
    4b94:	eb 2d       	mov	r30, r11
    4b96:	f0 e0       	ldi	r31, 0x00	; 0
    4b98:	31 96       	adiw	r30, 0x01	; 1
    4b9a:	02 c0       	rjmp	.+4      	; 0x4ba0 <dtoa_prf+0x190>
    4b9c:	e0 e0       	ldi	r30, 0x00	; 0
    4b9e:	f0 e0       	ldi	r31, 0x00	; 0
    4ba0:	2e 0f       	add	r18, r30
    4ba2:	3f 1f       	adc	r19, r31
    4ba4:	e1 2f       	mov	r30, r17
    4ba6:	f0 e0       	ldi	r31, 0x00	; 0
    4ba8:	2e 17       	cp	r18, r30
    4baa:	3f 07       	cpc	r19, r31
    4bac:	1c f4       	brge	.+6      	; 0x4bb4 <dtoa_prf+0x1a4>
    4bae:	12 1b       	sub	r17, r18
    4bb0:	21 2f       	mov	r18, r17
    4bb2:	01 c0       	rjmp	.+2      	; 0x4bb6 <dtoa_prf+0x1a6>
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	8e 2d       	mov	r24, r14
    4bb8:	88 71       	andi	r24, 0x18	; 24
    4bba:	59 f4       	brne	.+22     	; 0x4bd2 <dtoa_prf+0x1c2>
    4bbc:	f6 01       	movw	r30, r12
    4bbe:	82 2f       	mov	r24, r18
    4bc0:	30 e2       	ldi	r19, 0x20	; 32
    4bc2:	88 23       	and	r24, r24
    4bc4:	19 f0       	breq	.+6      	; 0x4bcc <dtoa_prf+0x1bc>
    4bc6:	31 93       	st	Z+, r19
    4bc8:	81 50       	subi	r24, 0x01	; 1
    4bca:	fb cf       	rjmp	.-10     	; 0x4bc2 <dtoa_prf+0x1b2>
    4bcc:	c2 0e       	add	r12, r18
    4bce:	d1 1c       	adc	r13, r1
    4bd0:	20 e0       	ldi	r18, 0x00	; 0
    4bd2:	99 23       	and	r25, r25
    4bd4:	29 f0       	breq	.+10     	; 0x4be0 <dtoa_prf+0x1d0>
    4bd6:	d6 01       	movw	r26, r12
    4bd8:	9c 93       	st	X, r25
    4bda:	f6 01       	movw	r30, r12
    4bdc:	31 96       	adiw	r30, 0x01	; 1
    4bde:	6f 01       	movw	r12, r30
    4be0:	51 11       	cpse	r21, r1
    4be2:	0b c0       	rjmp	.+22     	; 0x4bfa <dtoa_prf+0x1ea>
    4be4:	f6 01       	movw	r30, r12
    4be6:	82 2f       	mov	r24, r18
    4be8:	90 e3       	ldi	r25, 0x30	; 48
    4bea:	88 23       	and	r24, r24
    4bec:	19 f0       	breq	.+6      	; 0x4bf4 <dtoa_prf+0x1e4>
    4bee:	91 93       	st	Z+, r25
    4bf0:	81 50       	subi	r24, 0x01	; 1
    4bf2:	fb cf       	rjmp	.-10     	; 0x4bea <dtoa_prf+0x1da>
    4bf4:	c2 0e       	add	r12, r18
    4bf6:	d1 1c       	adc	r13, r1
    4bf8:	20 e0       	ldi	r18, 0x00	; 0
    4bfa:	0f 2d       	mov	r16, r15
    4bfc:	06 0f       	add	r16, r22
    4bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    4c00:	34 2f       	mov	r19, r20
    4c02:	30 71       	andi	r19, 0x10	; 16
    4c04:	44 ff       	sbrs	r20, 4
    4c06:	03 c0       	rjmp	.+6      	; 0x4c0e <dtoa_prf+0x1fe>
    4c08:	91 33       	cpi	r25, 0x31	; 49
    4c0a:	09 f4       	brne	.+2      	; 0x4c0e <dtoa_prf+0x1fe>
    4c0c:	01 50       	subi	r16, 0x01	; 1
    4c0e:	10 16       	cp	r1, r16
    4c10:	24 f4       	brge	.+8      	; 0x4c1a <dtoa_prf+0x20a>
    4c12:	09 30       	cpi	r16, 0x09	; 9
    4c14:	18 f0       	brcs	.+6      	; 0x4c1c <dtoa_prf+0x20c>
    4c16:	08 e0       	ldi	r16, 0x08	; 8
    4c18:	01 c0       	rjmp	.+2      	; 0x4c1c <dtoa_prf+0x20c>
    4c1a:	01 e0       	ldi	r16, 0x01	; 1
    4c1c:	ab 01       	movw	r20, r22
    4c1e:	77 ff       	sbrs	r23, 7
    4c20:	02 c0       	rjmp	.+4      	; 0x4c26 <dtoa_prf+0x216>
    4c22:	40 e0       	ldi	r20, 0x00	; 0
    4c24:	50 e0       	ldi	r21, 0x00	; 0
    4c26:	fb 01       	movw	r30, r22
    4c28:	e4 1b       	sub	r30, r20
    4c2a:	f5 0b       	sbc	r31, r21
    4c2c:	a1 e0       	ldi	r26, 0x01	; 1
    4c2e:	b0 e0       	ldi	r27, 0x00	; 0
    4c30:	ac 0f       	add	r26, r28
    4c32:	bd 1f       	adc	r27, r29
    4c34:	ea 0f       	add	r30, r26
    4c36:	fb 1f       	adc	r31, r27
    4c38:	8e e2       	ldi	r24, 0x2E	; 46
    4c3a:	a8 2e       	mov	r10, r24
    4c3c:	4b 01       	movw	r8, r22
    4c3e:	80 1a       	sub	r8, r16
    4c40:	91 08       	sbc	r9, r1
    4c42:	0b 2d       	mov	r16, r11
    4c44:	10 e0       	ldi	r17, 0x00	; 0
    4c46:	11 95       	neg	r17
    4c48:	01 95       	neg	r16
    4c4a:	11 09       	sbc	r17, r1
    4c4c:	4f 3f       	cpi	r20, 0xFF	; 255
    4c4e:	bf ef       	ldi	r27, 0xFF	; 255
    4c50:	5b 07       	cpc	r21, r27
    4c52:	21 f4       	brne	.+8      	; 0x4c5c <dtoa_prf+0x24c>
    4c54:	d6 01       	movw	r26, r12
    4c56:	ac 92       	st	X, r10
    4c58:	11 96       	adiw	r26, 0x01	; 1
    4c5a:	6d 01       	movw	r12, r26
    4c5c:	64 17       	cp	r22, r20
    4c5e:	75 07       	cpc	r23, r21
    4c60:	2c f0       	brlt	.+10     	; 0x4c6c <dtoa_prf+0x25c>
    4c62:	84 16       	cp	r8, r20
    4c64:	95 06       	cpc	r9, r21
    4c66:	14 f4       	brge	.+4      	; 0x4c6c <dtoa_prf+0x25c>
    4c68:	81 81       	ldd	r24, Z+1	; 0x01
    4c6a:	01 c0       	rjmp	.+2      	; 0x4c6e <dtoa_prf+0x25e>
    4c6c:	80 e3       	ldi	r24, 0x30	; 48
    4c6e:	41 50       	subi	r20, 0x01	; 1
    4c70:	51 09       	sbc	r21, r1
    4c72:	31 96       	adiw	r30, 0x01	; 1
    4c74:	d6 01       	movw	r26, r12
    4c76:	11 96       	adiw	r26, 0x01	; 1
    4c78:	7d 01       	movw	r14, r26
    4c7a:	40 17       	cp	r20, r16
    4c7c:	51 07       	cpc	r21, r17
    4c7e:	24 f0       	brlt	.+8      	; 0x4c88 <dtoa_prf+0x278>
    4c80:	d6 01       	movw	r26, r12
    4c82:	8c 93       	st	X, r24
    4c84:	67 01       	movw	r12, r14
    4c86:	e2 cf       	rjmp	.-60     	; 0x4c4c <dtoa_prf+0x23c>
    4c88:	64 17       	cp	r22, r20
    4c8a:	75 07       	cpc	r23, r21
    4c8c:	39 f4       	brne	.+14     	; 0x4c9c <dtoa_prf+0x28c>
    4c8e:	96 33       	cpi	r25, 0x36	; 54
    4c90:	20 f4       	brcc	.+8      	; 0x4c9a <dtoa_prf+0x28a>
    4c92:	95 33       	cpi	r25, 0x35	; 53
    4c94:	19 f4       	brne	.+6      	; 0x4c9c <dtoa_prf+0x28c>
    4c96:	31 11       	cpse	r19, r1
    4c98:	01 c0       	rjmp	.+2      	; 0x4c9c <dtoa_prf+0x28c>
    4c9a:	81 e3       	ldi	r24, 0x31	; 49
    4c9c:	f6 01       	movw	r30, r12
    4c9e:	80 83       	st	Z, r24
    4ca0:	f7 01       	movw	r30, r14
    4ca2:	82 2f       	mov	r24, r18
    4ca4:	90 e2       	ldi	r25, 0x20	; 32
    4ca6:	88 23       	and	r24, r24
    4ca8:	19 f0       	breq	.+6      	; 0x4cb0 <dtoa_prf+0x2a0>
    4caa:	91 93       	st	Z+, r25
    4cac:	81 50       	subi	r24, 0x01	; 1
    4cae:	fb cf       	rjmp	.-10     	; 0x4ca6 <dtoa_prf+0x296>
    4cb0:	f7 01       	movw	r30, r14
    4cb2:	e2 0f       	add	r30, r18
    4cb4:	f1 1d       	adc	r31, r1
    4cb6:	10 82       	st	Z, r1
    4cb8:	80 e0       	ldi	r24, 0x00	; 0
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	29 96       	adiw	r28, 0x09	; 9
    4cbe:	ec e0       	ldi	r30, 0x0C	; 12
    4cc0:	0c 94 d0 28 	jmp	0x51a0	; 0x51a0 <__epilogue_restores__+0xc>

00004cc4 <strtod>:
    4cc4:	a0 e0       	ldi	r26, 0x00	; 0
    4cc6:	b0 e0       	ldi	r27, 0x00	; 0
    4cc8:	e8 e6       	ldi	r30, 0x68	; 104
    4cca:	f6 e2       	ldi	r31, 0x26	; 38
    4ccc:	0c 94 b4 28 	jmp	0x5168	; 0x5168 <__prologue_saves__+0xc>
    4cd0:	ec 01       	movw	r28, r24
    4cd2:	6b 01       	movw	r12, r22
    4cd4:	61 15       	cp	r22, r1
    4cd6:	71 05       	cpc	r23, r1
    4cd8:	19 f0       	breq	.+6      	; 0x4ce0 <strtod+0x1c>
    4cda:	fb 01       	movw	r30, r22
    4cdc:	91 83       	std	Z+1, r25	; 0x01
    4cde:	80 83       	st	Z, r24
    4ce0:	7e 01       	movw	r14, r28
    4ce2:	ff ef       	ldi	r31, 0xFF	; 255
    4ce4:	ef 1a       	sub	r14, r31
    4ce6:	ff 0a       	sbc	r15, r31
    4ce8:	08 81       	ld	r16, Y
    4cea:	80 2f       	mov	r24, r16
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <isspace>
    4cf2:	89 2b       	or	r24, r25
    4cf4:	11 f0       	breq	.+4      	; 0x4cfa <strtod+0x36>
    4cf6:	e7 01       	movw	r28, r14
    4cf8:	f3 cf       	rjmp	.-26     	; 0x4ce0 <strtod+0x1c>
    4cfa:	0d 32       	cpi	r16, 0x2D	; 45
    4cfc:	39 f4       	brne	.+14     	; 0x4d0c <strtod+0x48>
    4cfe:	7e 01       	movw	r14, r28
    4d00:	82 e0       	ldi	r24, 0x02	; 2
    4d02:	e8 0e       	add	r14, r24
    4d04:	f1 1c       	adc	r15, r1
    4d06:	09 81       	ldd	r16, Y+1	; 0x01
    4d08:	11 e0       	ldi	r17, 0x01	; 1
    4d0a:	08 c0       	rjmp	.+16     	; 0x4d1c <strtod+0x58>
    4d0c:	0b 32       	cpi	r16, 0x2B	; 43
    4d0e:	29 f4       	brne	.+10     	; 0x4d1a <strtod+0x56>
    4d10:	7e 01       	movw	r14, r28
    4d12:	92 e0       	ldi	r25, 0x02	; 2
    4d14:	e9 0e       	add	r14, r25
    4d16:	f1 1c       	adc	r15, r1
    4d18:	09 81       	ldd	r16, Y+1	; 0x01
    4d1a:	10 e0       	ldi	r17, 0x00	; 0
    4d1c:	e7 01       	movw	r28, r14
    4d1e:	21 97       	sbiw	r28, 0x01	; 1
    4d20:	43 e0       	ldi	r20, 0x03	; 3
    4d22:	50 e0       	ldi	r21, 0x00	; 0
    4d24:	66 ea       	ldi	r22, 0xA6	; 166
    4d26:	71 e0       	ldi	r23, 0x01	; 1
    4d28:	ce 01       	movw	r24, r28
    4d2a:	0e 94 8b 28 	call	0x5116	; 0x5116 <strncasecmp_P>
    4d2e:	89 2b       	or	r24, r25
    4d30:	c1 f4       	brne	.+48     	; 0x4d62 <strtod+0x9e>
    4d32:	23 96       	adiw	r28, 0x03	; 3
    4d34:	45 e0       	ldi	r20, 0x05	; 5
    4d36:	50 e0       	ldi	r21, 0x00	; 0
    4d38:	61 ea       	ldi	r22, 0xA1	; 161
    4d3a:	71 e0       	ldi	r23, 0x01	; 1
    4d3c:	ce 01       	movw	r24, r28
    4d3e:	0e 94 8b 28 	call	0x5116	; 0x5116 <strncasecmp_P>
    4d42:	89 2b       	or	r24, r25
    4d44:	09 f4       	brne	.+2      	; 0x4d48 <strtod+0x84>
    4d46:	25 96       	adiw	r28, 0x05	; 5
    4d48:	c1 14       	cp	r12, r1
    4d4a:	d1 04       	cpc	r13, r1
    4d4c:	19 f0       	breq	.+6      	; 0x4d54 <strtod+0x90>
    4d4e:	f6 01       	movw	r30, r12
    4d50:	d1 83       	std	Z+1, r29	; 0x01
    4d52:	c0 83       	st	Z, r28
    4d54:	11 11       	cpse	r17, r1
    4d56:	f6 c0       	rjmp	.+492    	; 0x4f44 <strtod+0x280>
    4d58:	60 e0       	ldi	r22, 0x00	; 0
    4d5a:	70 e0       	ldi	r23, 0x00	; 0
    4d5c:	80 e8       	ldi	r24, 0x80	; 128
    4d5e:	9f e7       	ldi	r25, 0x7F	; 127
    4d60:	fa c0       	rjmp	.+500    	; 0x4f56 <strtod+0x292>
    4d62:	43 e0       	ldi	r20, 0x03	; 3
    4d64:	50 e0       	ldi	r21, 0x00	; 0
    4d66:	6e e9       	ldi	r22, 0x9E	; 158
    4d68:	71 e0       	ldi	r23, 0x01	; 1
    4d6a:	ce 01       	movw	r24, r28
    4d6c:	0e 94 8b 28 	call	0x5116	; 0x5116 <strncasecmp_P>
    4d70:	89 2b       	or	r24, r25
    4d72:	59 f4       	brne	.+22     	; 0x4d8a <strtod+0xc6>
    4d74:	c1 14       	cp	r12, r1
    4d76:	d1 04       	cpc	r13, r1
    4d78:	09 f4       	brne	.+2      	; 0x4d7c <strtod+0xb8>
    4d7a:	e9 c0       	rjmp	.+466    	; 0x4f4e <strtod+0x28a>
    4d7c:	f2 e0       	ldi	r31, 0x02	; 2
    4d7e:	ef 0e       	add	r14, r31
    4d80:	f1 1c       	adc	r15, r1
    4d82:	f6 01       	movw	r30, r12
    4d84:	f1 82       	std	Z+1, r15	; 0x01
    4d86:	e0 82       	st	Z, r14
    4d88:	e2 c0       	rjmp	.+452    	; 0x4f4e <strtod+0x28a>
    4d8a:	20 e0       	ldi	r18, 0x00	; 0
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	a9 01       	movw	r20, r18
    4d90:	c0 e0       	ldi	r28, 0x00	; 0
    4d92:	d0 e0       	ldi	r29, 0x00	; 0
    4d94:	f7 01       	movw	r30, r14
    4d96:	80 ed       	ldi	r24, 0xD0	; 208
    4d98:	a8 2e       	mov	r10, r24
    4d9a:	a0 0e       	add	r10, r16
    4d9c:	89 e0       	ldi	r24, 0x09	; 9
    4d9e:	8a 15       	cp	r24, r10
    4da0:	30 f1       	brcs	.+76     	; 0x4dee <strtod+0x12a>
    4da2:	91 2f       	mov	r25, r17
    4da4:	92 60       	ori	r25, 0x02	; 2
    4da6:	b9 2e       	mov	r11, r25
    4da8:	81 2f       	mov	r24, r17
    4daa:	88 70       	andi	r24, 0x08	; 8
    4dac:	12 ff       	sbrs	r17, 2
    4dae:	04 c0       	rjmp	.+8      	; 0x4db8 <strtod+0xf4>
    4db0:	81 11       	cpse	r24, r1
    4db2:	24 c0       	rjmp	.+72     	; 0x4dfc <strtod+0x138>
    4db4:	21 96       	adiw	r28, 0x01	; 1
    4db6:	22 c0       	rjmp	.+68     	; 0x4dfc <strtod+0x138>
    4db8:	81 11       	cpse	r24, r1
    4dba:	21 97       	sbiw	r28, 0x01	; 1
    4dbc:	a5 e0       	ldi	r26, 0x05	; 5
    4dbe:	b0 e0       	ldi	r27, 0x00	; 0
    4dc0:	0e 94 a3 28 	call	0x5146	; 0x5146 <__muluhisi3>
    4dc4:	dc 01       	movw	r26, r24
    4dc6:	cb 01       	movw	r24, r22
    4dc8:	88 0f       	add	r24, r24
    4dca:	99 1f       	adc	r25, r25
    4dcc:	aa 1f       	adc	r26, r26
    4dce:	bb 1f       	adc	r27, r27
    4dd0:	9c 01       	movw	r18, r24
    4dd2:	ad 01       	movw	r20, r26
    4dd4:	2a 0d       	add	r18, r10
    4dd6:	31 1d       	adc	r19, r1
    4dd8:	41 1d       	adc	r20, r1
    4dda:	51 1d       	adc	r21, r1
    4ddc:	28 39       	cpi	r18, 0x98	; 152
    4dde:	89 e9       	ldi	r24, 0x99	; 153
    4de0:	38 07       	cpc	r19, r24
    4de2:	48 07       	cpc	r20, r24
    4de4:	89 e1       	ldi	r24, 0x19	; 25
    4de6:	58 07       	cpc	r21, r24
    4de8:	48 f0       	brcs	.+18     	; 0x4dfc <strtod+0x138>
    4dea:	16 60       	ori	r17, 0x06	; 6
    4dec:	06 c0       	rjmp	.+12     	; 0x4dfa <strtod+0x136>
    4dee:	9e ef       	ldi	r25, 0xFE	; 254
    4df0:	a9 12       	cpse	r10, r25
    4df2:	0a c0       	rjmp	.+20     	; 0x4e08 <strtod+0x144>
    4df4:	13 fd       	sbrc	r17, 3
    4df6:	40 c0       	rjmp	.+128    	; 0x4e78 <strtod+0x1b4>
    4df8:	18 60       	ori	r17, 0x08	; 8
    4dfa:	b1 2e       	mov	r11, r17
    4dfc:	8f ef       	ldi	r24, 0xFF	; 255
    4dfe:	e8 1a       	sub	r14, r24
    4e00:	f8 0a       	sbc	r15, r24
    4e02:	00 81       	ld	r16, Z
    4e04:	1b 2d       	mov	r17, r11
    4e06:	c6 cf       	rjmp	.-116    	; 0x4d94 <strtod+0xd0>
    4e08:	80 2f       	mov	r24, r16
    4e0a:	8f 7d       	andi	r24, 0xDF	; 223
    4e0c:	85 34       	cpi	r24, 0x45	; 69
    4e0e:	a1 f5       	brne	.+104    	; 0x4e78 <strtod+0x1b4>
    4e10:	80 81       	ld	r24, Z
    4e12:	8d 32       	cpi	r24, 0x2D	; 45
    4e14:	11 f4       	brne	.+4      	; 0x4e1a <strtod+0x156>
    4e16:	10 61       	ori	r17, 0x10	; 16
    4e18:	06 c0       	rjmp	.+12     	; 0x4e26 <strtod+0x162>
    4e1a:	8b 32       	cpi	r24, 0x2B	; 43
    4e1c:	21 f0       	breq	.+8      	; 0x4e26 <strtod+0x162>
    4e1e:	31 96       	adiw	r30, 0x01	; 1
    4e20:	61 e0       	ldi	r22, 0x01	; 1
    4e22:	70 e0       	ldi	r23, 0x00	; 0
    4e24:	04 c0       	rjmp	.+8      	; 0x4e2e <strtod+0x16a>
    4e26:	81 81       	ldd	r24, Z+1	; 0x01
    4e28:	32 96       	adiw	r30, 0x02	; 2
    4e2a:	62 e0       	ldi	r22, 0x02	; 2
    4e2c:	70 e0       	ldi	r23, 0x00	; 0
    4e2e:	80 53       	subi	r24, 0x30	; 48
    4e30:	8a 30       	cpi	r24, 0x0A	; 10
    4e32:	18 f0       	brcs	.+6      	; 0x4e3a <strtod+0x176>
    4e34:	e6 1b       	sub	r30, r22
    4e36:	f7 0b       	sbc	r31, r23
    4e38:	1f c0       	rjmp	.+62     	; 0x4e78 <strtod+0x1b4>
    4e3a:	60 e0       	ldi	r22, 0x00	; 0
    4e3c:	70 e0       	ldi	r23, 0x00	; 0
    4e3e:	60 38       	cpi	r22, 0x80	; 128
    4e40:	9c e0       	ldi	r25, 0x0C	; 12
    4e42:	79 07       	cpc	r23, r25
    4e44:	5c f4       	brge	.+22     	; 0x4e5c <strtod+0x198>
    4e46:	db 01       	movw	r26, r22
    4e48:	aa 0f       	add	r26, r26
    4e4a:	bb 1f       	adc	r27, r27
    4e4c:	aa 0f       	add	r26, r26
    4e4e:	bb 1f       	adc	r27, r27
    4e50:	6a 0f       	add	r22, r26
    4e52:	7b 1f       	adc	r23, r27
    4e54:	66 0f       	add	r22, r22
    4e56:	77 1f       	adc	r23, r23
    4e58:	68 0f       	add	r22, r24
    4e5a:	71 1d       	adc	r23, r1
    4e5c:	31 96       	adiw	r30, 0x01	; 1
    4e5e:	df 01       	movw	r26, r30
    4e60:	11 97       	sbiw	r26, 0x01	; 1
    4e62:	8c 91       	ld	r24, X
    4e64:	80 53       	subi	r24, 0x30	; 48
    4e66:	8a 30       	cpi	r24, 0x0A	; 10
    4e68:	50 f3       	brcs	.-44     	; 0x4e3e <strtod+0x17a>
    4e6a:	14 ff       	sbrs	r17, 4
    4e6c:	03 c0       	rjmp	.+6      	; 0x4e74 <strtod+0x1b0>
    4e6e:	71 95       	neg	r23
    4e70:	61 95       	neg	r22
    4e72:	71 09       	sbc	r23, r1
    4e74:	c6 0f       	add	r28, r22
    4e76:	d7 1f       	adc	r29, r23
    4e78:	11 ff       	sbrs	r17, 1
    4e7a:	08 c0       	rjmp	.+16     	; 0x4e8c <strtod+0x1c8>
    4e7c:	c1 14       	cp	r12, r1
    4e7e:	d1 04       	cpc	r13, r1
    4e80:	29 f0       	breq	.+10     	; 0x4e8c <strtod+0x1c8>
    4e82:	cf 01       	movw	r24, r30
    4e84:	01 97       	sbiw	r24, 0x01	; 1
    4e86:	f6 01       	movw	r30, r12
    4e88:	91 83       	std	Z+1, r25	; 0x01
    4e8a:	80 83       	st	Z, r24
    4e8c:	ca 01       	movw	r24, r20
    4e8e:	b9 01       	movw	r22, r18
    4e90:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <__floatunsisf>
    4e94:	21 2f       	mov	r18, r17
    4e96:	23 70       	andi	r18, 0x03	; 3
    4e98:	23 30       	cpi	r18, 0x03	; 3
    4e9a:	19 f0       	breq	.+6      	; 0x4ea2 <strtod+0x1de>
    4e9c:	4b 01       	movw	r8, r22
    4e9e:	5c 01       	movw	r10, r24
    4ea0:	06 c0       	rjmp	.+12     	; 0x4eae <strtod+0x1ea>
    4ea2:	4b 01       	movw	r8, r22
    4ea4:	5c 01       	movw	r10, r24
    4ea6:	b7 fa       	bst	r11, 7
    4ea8:	b0 94       	com	r11
    4eaa:	b7 f8       	bld	r11, 7
    4eac:	b0 94       	com	r11
    4eae:	20 e0       	ldi	r18, 0x00	; 0
    4eb0:	30 e0       	ldi	r19, 0x00	; 0
    4eb2:	a9 01       	movw	r20, r18
    4eb4:	c5 01       	movw	r24, r10
    4eb6:	b4 01       	movw	r22, r8
    4eb8:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__cmpsf2>
    4ebc:	88 23       	and	r24, r24
    4ebe:	09 f4       	brne	.+2      	; 0x4ec2 <strtod+0x1fe>
    4ec0:	3e c0       	rjmp	.+124    	; 0x4f3e <strtod+0x27a>
    4ec2:	d7 ff       	sbrs	r29, 7
    4ec4:	06 c0       	rjmp	.+12     	; 0x4ed2 <strtod+0x20e>
    4ec6:	d1 95       	neg	r29
    4ec8:	c1 95       	neg	r28
    4eca:	d1 09       	sbc	r29, r1
    4ecc:	0d eb       	ldi	r16, 0xBD	; 189
    4ece:	11 e0       	ldi	r17, 0x01	; 1
    4ed0:	02 c0       	rjmp	.+4      	; 0x4ed6 <strtod+0x212>
    4ed2:	05 ed       	ldi	r16, 0xD5	; 213
    4ed4:	11 e0       	ldi	r17, 0x01	; 1
    4ed6:	68 01       	movw	r12, r16
    4ed8:	f8 e1       	ldi	r31, 0x18	; 24
    4eda:	cf 1a       	sub	r12, r31
    4edc:	d1 08       	sbc	r13, r1
    4ede:	90 e2       	ldi	r25, 0x20	; 32
    4ee0:	e9 2e       	mov	r14, r25
    4ee2:	f1 2c       	mov	r15, r1
    4ee4:	ce 15       	cp	r28, r14
    4ee6:	df 05       	cpc	r29, r15
    4ee8:	74 f0       	brlt	.+28     	; 0x4f06 <strtod+0x242>
    4eea:	f8 01       	movw	r30, r16
    4eec:	25 91       	lpm	r18, Z+
    4eee:	35 91       	lpm	r19, Z+
    4ef0:	45 91       	lpm	r20, Z+
    4ef2:	54 91       	lpm	r21, Z
    4ef4:	c5 01       	movw	r24, r10
    4ef6:	b4 01       	movw	r22, r8
    4ef8:	0e 94 c2 21 	call	0x4384	; 0x4384 <__mulsf3>
    4efc:	4b 01       	movw	r8, r22
    4efe:	5c 01       	movw	r10, r24
    4f00:	ce 19       	sub	r28, r14
    4f02:	df 09       	sbc	r29, r15
    4f04:	ef cf       	rjmp	.-34     	; 0x4ee4 <strtod+0x220>
    4f06:	04 50       	subi	r16, 0x04	; 4
    4f08:	11 09       	sbc	r17, r1
    4f0a:	f5 94       	asr	r15
    4f0c:	e7 94       	ror	r14
    4f0e:	0c 15       	cp	r16, r12
    4f10:	1d 05       	cpc	r17, r13
    4f12:	41 f7       	brne	.-48     	; 0x4ee4 <strtod+0x220>
    4f14:	8a 2d       	mov	r24, r10
    4f16:	88 0f       	add	r24, r24
    4f18:	8b 2d       	mov	r24, r11
    4f1a:	88 1f       	adc	r24, r24
    4f1c:	8f 3f       	cpi	r24, 0xFF	; 255
    4f1e:	49 f0       	breq	.+18     	; 0x4f32 <strtod+0x26e>
    4f20:	20 e0       	ldi	r18, 0x00	; 0
    4f22:	30 e0       	ldi	r19, 0x00	; 0
    4f24:	a9 01       	movw	r20, r18
    4f26:	c5 01       	movw	r24, r10
    4f28:	b4 01       	movw	r22, r8
    4f2a:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__cmpsf2>
    4f2e:	81 11       	cpse	r24, r1
    4f30:	06 c0       	rjmp	.+12     	; 0x4f3e <strtod+0x27a>
    4f32:	82 e2       	ldi	r24, 0x22	; 34
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	90 93 87 07 	sts	0x0787, r25	; 0x800787 <errno+0x1>
    4f3a:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <errno>
    4f3e:	c5 01       	movw	r24, r10
    4f40:	b4 01       	movw	r22, r8
    4f42:	09 c0       	rjmp	.+18     	; 0x4f56 <strtod+0x292>
    4f44:	60 e0       	ldi	r22, 0x00	; 0
    4f46:	70 e0       	ldi	r23, 0x00	; 0
    4f48:	80 e8       	ldi	r24, 0x80	; 128
    4f4a:	9f ef       	ldi	r25, 0xFF	; 255
    4f4c:	04 c0       	rjmp	.+8      	; 0x4f56 <strtod+0x292>
    4f4e:	60 e0       	ldi	r22, 0x00	; 0
    4f50:	70 e0       	ldi	r23, 0x00	; 0
    4f52:	80 ec       	ldi	r24, 0xC0	; 192
    4f54:	9f e7       	ldi	r25, 0x7F	; 127
    4f56:	cd b7       	in	r28, 0x3d	; 61
    4f58:	de b7       	in	r29, 0x3e	; 62
    4f5a:	ec e0       	ldi	r30, 0x0C	; 12
    4f5c:	0c 94 d0 28 	jmp	0x51a0	; 0x51a0 <__epilogue_restores__+0xc>

00004f60 <__ftoa_engine>:
    4f60:	28 30       	cpi	r18, 0x08	; 8
    4f62:	08 f0       	brcs	.+2      	; 0x4f66 <__ftoa_engine+0x6>
    4f64:	27 e0       	ldi	r18, 0x07	; 7
    4f66:	33 27       	eor	r19, r19
    4f68:	da 01       	movw	r26, r20
    4f6a:	99 0f       	add	r25, r25
    4f6c:	31 1d       	adc	r19, r1
    4f6e:	87 fd       	sbrc	r24, 7
    4f70:	91 60       	ori	r25, 0x01	; 1
    4f72:	00 96       	adiw	r24, 0x00	; 0
    4f74:	61 05       	cpc	r22, r1
    4f76:	71 05       	cpc	r23, r1
    4f78:	39 f4       	brne	.+14     	; 0x4f88 <__ftoa_engine+0x28>
    4f7a:	32 60       	ori	r19, 0x02	; 2
    4f7c:	2e 5f       	subi	r18, 0xFE	; 254
    4f7e:	3d 93       	st	X+, r19
    4f80:	30 e3       	ldi	r19, 0x30	; 48
    4f82:	2a 95       	dec	r18
    4f84:	e1 f7       	brne	.-8      	; 0x4f7e <__ftoa_engine+0x1e>
    4f86:	08 95       	ret
    4f88:	9f 3f       	cpi	r25, 0xFF	; 255
    4f8a:	30 f0       	brcs	.+12     	; 0x4f98 <__ftoa_engine+0x38>
    4f8c:	80 38       	cpi	r24, 0x80	; 128
    4f8e:	71 05       	cpc	r23, r1
    4f90:	61 05       	cpc	r22, r1
    4f92:	09 f0       	breq	.+2      	; 0x4f96 <__ftoa_engine+0x36>
    4f94:	3c 5f       	subi	r19, 0xFC	; 252
    4f96:	3c 5f       	subi	r19, 0xFC	; 252
    4f98:	3d 93       	st	X+, r19
    4f9a:	91 30       	cpi	r25, 0x01	; 1
    4f9c:	08 f0       	brcs	.+2      	; 0x4fa0 <__ftoa_engine+0x40>
    4f9e:	80 68       	ori	r24, 0x80	; 128
    4fa0:	91 1d       	adc	r25, r1
    4fa2:	df 93       	push	r29
    4fa4:	cf 93       	push	r28
    4fa6:	1f 93       	push	r17
    4fa8:	0f 93       	push	r16
    4faa:	ff 92       	push	r15
    4fac:	ef 92       	push	r14
    4fae:	19 2f       	mov	r17, r25
    4fb0:	98 7f       	andi	r25, 0xF8	; 248
    4fb2:	96 95       	lsr	r25
    4fb4:	e9 2f       	mov	r30, r25
    4fb6:	96 95       	lsr	r25
    4fb8:	96 95       	lsr	r25
    4fba:	e9 0f       	add	r30, r25
    4fbc:	ff 27       	eor	r31, r31
    4fbe:	ed 5c       	subi	r30, 0xCD	; 205
    4fc0:	fd 4f       	sbci	r31, 0xFD	; 253
    4fc2:	99 27       	eor	r25, r25
    4fc4:	33 27       	eor	r19, r19
    4fc6:	ee 24       	eor	r14, r14
    4fc8:	ff 24       	eor	r15, r15
    4fca:	a7 01       	movw	r20, r14
    4fcc:	e7 01       	movw	r28, r14
    4fce:	05 90       	lpm	r0, Z+
    4fd0:	08 94       	sec
    4fd2:	07 94       	ror	r0
    4fd4:	28 f4       	brcc	.+10     	; 0x4fe0 <__ftoa_engine+0x80>
    4fd6:	36 0f       	add	r19, r22
    4fd8:	e7 1e       	adc	r14, r23
    4fda:	f8 1e       	adc	r15, r24
    4fdc:	49 1f       	adc	r20, r25
    4fde:	51 1d       	adc	r21, r1
    4fe0:	66 0f       	add	r22, r22
    4fe2:	77 1f       	adc	r23, r23
    4fe4:	88 1f       	adc	r24, r24
    4fe6:	99 1f       	adc	r25, r25
    4fe8:	06 94       	lsr	r0
    4fea:	a1 f7       	brne	.-24     	; 0x4fd4 <__ftoa_engine+0x74>
    4fec:	05 90       	lpm	r0, Z+
    4fee:	07 94       	ror	r0
    4ff0:	28 f4       	brcc	.+10     	; 0x4ffc <__ftoa_engine+0x9c>
    4ff2:	e7 0e       	add	r14, r23
    4ff4:	f8 1e       	adc	r15, r24
    4ff6:	49 1f       	adc	r20, r25
    4ff8:	56 1f       	adc	r21, r22
    4ffa:	c1 1d       	adc	r28, r1
    4ffc:	77 0f       	add	r23, r23
    4ffe:	88 1f       	adc	r24, r24
    5000:	99 1f       	adc	r25, r25
    5002:	66 1f       	adc	r22, r22
    5004:	06 94       	lsr	r0
    5006:	a1 f7       	brne	.-24     	; 0x4ff0 <__ftoa_engine+0x90>
    5008:	05 90       	lpm	r0, Z+
    500a:	07 94       	ror	r0
    500c:	28 f4       	brcc	.+10     	; 0x5018 <__ftoa_engine+0xb8>
    500e:	f8 0e       	add	r15, r24
    5010:	49 1f       	adc	r20, r25
    5012:	56 1f       	adc	r21, r22
    5014:	c7 1f       	adc	r28, r23
    5016:	d1 1d       	adc	r29, r1
    5018:	88 0f       	add	r24, r24
    501a:	99 1f       	adc	r25, r25
    501c:	66 1f       	adc	r22, r22
    501e:	77 1f       	adc	r23, r23
    5020:	06 94       	lsr	r0
    5022:	a1 f7       	brne	.-24     	; 0x500c <__ftoa_engine+0xac>
    5024:	05 90       	lpm	r0, Z+
    5026:	07 94       	ror	r0
    5028:	20 f4       	brcc	.+8      	; 0x5032 <__ftoa_engine+0xd2>
    502a:	49 0f       	add	r20, r25
    502c:	56 1f       	adc	r21, r22
    502e:	c7 1f       	adc	r28, r23
    5030:	d8 1f       	adc	r29, r24
    5032:	99 0f       	add	r25, r25
    5034:	66 1f       	adc	r22, r22
    5036:	77 1f       	adc	r23, r23
    5038:	88 1f       	adc	r24, r24
    503a:	06 94       	lsr	r0
    503c:	a9 f7       	brne	.-22     	; 0x5028 <__ftoa_engine+0xc8>
    503e:	84 91       	lpm	r24, Z
    5040:	10 95       	com	r17
    5042:	17 70       	andi	r17, 0x07	; 7
    5044:	41 f0       	breq	.+16     	; 0x5056 <__ftoa_engine+0xf6>
    5046:	d6 95       	lsr	r29
    5048:	c7 95       	ror	r28
    504a:	57 95       	ror	r21
    504c:	47 95       	ror	r20
    504e:	f7 94       	ror	r15
    5050:	e7 94       	ror	r14
    5052:	1a 95       	dec	r17
    5054:	c1 f7       	brne	.-16     	; 0x5046 <__ftoa_engine+0xe6>
    5056:	e9 ed       	ldi	r30, 0xD9	; 217
    5058:	f1 e0       	ldi	r31, 0x01	; 1
    505a:	68 94       	set
    505c:	15 90       	lpm	r1, Z+
    505e:	15 91       	lpm	r17, Z+
    5060:	35 91       	lpm	r19, Z+
    5062:	65 91       	lpm	r22, Z+
    5064:	95 91       	lpm	r25, Z+
    5066:	05 90       	lpm	r0, Z+
    5068:	7f e2       	ldi	r23, 0x2F	; 47
    506a:	73 95       	inc	r23
    506c:	e1 18       	sub	r14, r1
    506e:	f1 0a       	sbc	r15, r17
    5070:	43 0b       	sbc	r20, r19
    5072:	56 0b       	sbc	r21, r22
    5074:	c9 0b       	sbc	r28, r25
    5076:	d0 09       	sbc	r29, r0
    5078:	c0 f7       	brcc	.-16     	; 0x506a <__ftoa_engine+0x10a>
    507a:	e1 0c       	add	r14, r1
    507c:	f1 1e       	adc	r15, r17
    507e:	43 1f       	adc	r20, r19
    5080:	56 1f       	adc	r21, r22
    5082:	c9 1f       	adc	r28, r25
    5084:	d0 1d       	adc	r29, r0
    5086:	7e f4       	brtc	.+30     	; 0x50a6 <__ftoa_engine+0x146>
    5088:	70 33       	cpi	r23, 0x30	; 48
    508a:	11 f4       	brne	.+4      	; 0x5090 <__ftoa_engine+0x130>
    508c:	8a 95       	dec	r24
    508e:	e6 cf       	rjmp	.-52     	; 0x505c <__ftoa_engine+0xfc>
    5090:	e8 94       	clt
    5092:	01 50       	subi	r16, 0x01	; 1
    5094:	30 f0       	brcs	.+12     	; 0x50a2 <__ftoa_engine+0x142>
    5096:	08 0f       	add	r16, r24
    5098:	0a f4       	brpl	.+2      	; 0x509c <__ftoa_engine+0x13c>
    509a:	00 27       	eor	r16, r16
    509c:	02 17       	cp	r16, r18
    509e:	08 f4       	brcc	.+2      	; 0x50a2 <__ftoa_engine+0x142>
    50a0:	20 2f       	mov	r18, r16
    50a2:	23 95       	inc	r18
    50a4:	02 2f       	mov	r16, r18
    50a6:	7a 33       	cpi	r23, 0x3A	; 58
    50a8:	28 f0       	brcs	.+10     	; 0x50b4 <__ftoa_engine+0x154>
    50aa:	79 e3       	ldi	r23, 0x39	; 57
    50ac:	7d 93       	st	X+, r23
    50ae:	2a 95       	dec	r18
    50b0:	e9 f7       	brne	.-6      	; 0x50ac <__ftoa_engine+0x14c>
    50b2:	10 c0       	rjmp	.+32     	; 0x50d4 <__ftoa_engine+0x174>
    50b4:	7d 93       	st	X+, r23
    50b6:	2a 95       	dec	r18
    50b8:	89 f6       	brne	.-94     	; 0x505c <__ftoa_engine+0xfc>
    50ba:	06 94       	lsr	r0
    50bc:	97 95       	ror	r25
    50be:	67 95       	ror	r22
    50c0:	37 95       	ror	r19
    50c2:	17 95       	ror	r17
    50c4:	17 94       	ror	r1
    50c6:	e1 18       	sub	r14, r1
    50c8:	f1 0a       	sbc	r15, r17
    50ca:	43 0b       	sbc	r20, r19
    50cc:	56 0b       	sbc	r21, r22
    50ce:	c9 0b       	sbc	r28, r25
    50d0:	d0 09       	sbc	r29, r0
    50d2:	98 f0       	brcs	.+38     	; 0x50fa <__ftoa_engine+0x19a>
    50d4:	23 95       	inc	r18
    50d6:	7e 91       	ld	r23, -X
    50d8:	73 95       	inc	r23
    50da:	7a 33       	cpi	r23, 0x3A	; 58
    50dc:	08 f0       	brcs	.+2      	; 0x50e0 <__ftoa_engine+0x180>
    50de:	70 e3       	ldi	r23, 0x30	; 48
    50e0:	7c 93       	st	X, r23
    50e2:	20 13       	cpse	r18, r16
    50e4:	b8 f7       	brcc	.-18     	; 0x50d4 <__ftoa_engine+0x174>
    50e6:	7e 91       	ld	r23, -X
    50e8:	70 61       	ori	r23, 0x10	; 16
    50ea:	7d 93       	st	X+, r23
    50ec:	30 f0       	brcs	.+12     	; 0x50fa <__ftoa_engine+0x19a>
    50ee:	83 95       	inc	r24
    50f0:	71 e3       	ldi	r23, 0x31	; 49
    50f2:	7d 93       	st	X+, r23
    50f4:	70 e3       	ldi	r23, 0x30	; 48
    50f6:	2a 95       	dec	r18
    50f8:	e1 f7       	brne	.-8      	; 0x50f2 <__ftoa_engine+0x192>
    50fa:	11 24       	eor	r1, r1
    50fc:	ef 90       	pop	r14
    50fe:	ff 90       	pop	r15
    5100:	0f 91       	pop	r16
    5102:	1f 91       	pop	r17
    5104:	cf 91       	pop	r28
    5106:	df 91       	pop	r29
    5108:	99 27       	eor	r25, r25
    510a:	87 fd       	sbrc	r24, 7
    510c:	90 95       	com	r25
    510e:	08 95       	ret

00005110 <__ctype_isfalse>:
    5110:	99 27       	eor	r25, r25
    5112:	88 27       	eor	r24, r24

00005114 <__ctype_istrue>:
    5114:	08 95       	ret

00005116 <strncasecmp_P>:
    5116:	fb 01       	movw	r30, r22
    5118:	dc 01       	movw	r26, r24
    511a:	41 50       	subi	r20, 0x01	; 1
    511c:	50 40       	sbci	r21, 0x00	; 0
    511e:	88 f0       	brcs	.+34     	; 0x5142 <strncasecmp_P+0x2c>
    5120:	8d 91       	ld	r24, X+
    5122:	81 34       	cpi	r24, 0x41	; 65
    5124:	1c f0       	brlt	.+6      	; 0x512c <strncasecmp_P+0x16>
    5126:	8b 35       	cpi	r24, 0x5B	; 91
    5128:	0c f4       	brge	.+2      	; 0x512c <strncasecmp_P+0x16>
    512a:	80 5e       	subi	r24, 0xE0	; 224
    512c:	65 91       	lpm	r22, Z+
    512e:	61 34       	cpi	r22, 0x41	; 65
    5130:	1c f0       	brlt	.+6      	; 0x5138 <strncasecmp_P+0x22>
    5132:	6b 35       	cpi	r22, 0x5B	; 91
    5134:	0c f4       	brge	.+2      	; 0x5138 <strncasecmp_P+0x22>
    5136:	60 5e       	subi	r22, 0xE0	; 224
    5138:	86 1b       	sub	r24, r22
    513a:	61 11       	cpse	r22, r1
    513c:	71 f3       	breq	.-36     	; 0x511a <strncasecmp_P+0x4>
    513e:	99 0b       	sbc	r25, r25
    5140:	08 95       	ret
    5142:	88 1b       	sub	r24, r24
    5144:	fc cf       	rjmp	.-8      	; 0x513e <strncasecmp_P+0x28>

00005146 <__muluhisi3>:
    5146:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__umulhisi3>
    514a:	a5 9f       	mul	r26, r21
    514c:	90 0d       	add	r25, r0
    514e:	b4 9f       	mul	r27, r20
    5150:	90 0d       	add	r25, r0
    5152:	a4 9f       	mul	r26, r20
    5154:	80 0d       	add	r24, r0
    5156:	91 1d       	adc	r25, r1
    5158:	11 24       	eor	r1, r1
    515a:	08 95       	ret

0000515c <__prologue_saves__>:
    515c:	2f 92       	push	r2
    515e:	3f 92       	push	r3
    5160:	4f 92       	push	r4
    5162:	5f 92       	push	r5
    5164:	6f 92       	push	r6
    5166:	7f 92       	push	r7
    5168:	8f 92       	push	r8
    516a:	9f 92       	push	r9
    516c:	af 92       	push	r10
    516e:	bf 92       	push	r11
    5170:	cf 92       	push	r12
    5172:	df 92       	push	r13
    5174:	ef 92       	push	r14
    5176:	ff 92       	push	r15
    5178:	0f 93       	push	r16
    517a:	1f 93       	push	r17
    517c:	cf 93       	push	r28
    517e:	df 93       	push	r29
    5180:	cd b7       	in	r28, 0x3d	; 61
    5182:	de b7       	in	r29, 0x3e	; 62
    5184:	ca 1b       	sub	r28, r26
    5186:	db 0b       	sbc	r29, r27
    5188:	0f b6       	in	r0, 0x3f	; 63
    518a:	f8 94       	cli
    518c:	de bf       	out	0x3e, r29	; 62
    518e:	0f be       	out	0x3f, r0	; 63
    5190:	cd bf       	out	0x3d, r28	; 61
    5192:	09 94       	ijmp

00005194 <__epilogue_restores__>:
    5194:	2a 88       	ldd	r2, Y+18	; 0x12
    5196:	39 88       	ldd	r3, Y+17	; 0x11
    5198:	48 88       	ldd	r4, Y+16	; 0x10
    519a:	5f 84       	ldd	r5, Y+15	; 0x0f
    519c:	6e 84       	ldd	r6, Y+14	; 0x0e
    519e:	7d 84       	ldd	r7, Y+13	; 0x0d
    51a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    51a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    51a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    51a6:	b9 84       	ldd	r11, Y+9	; 0x09
    51a8:	c8 84       	ldd	r12, Y+8	; 0x08
    51aa:	df 80       	ldd	r13, Y+7	; 0x07
    51ac:	ee 80       	ldd	r14, Y+6	; 0x06
    51ae:	fd 80       	ldd	r15, Y+5	; 0x05
    51b0:	0c 81       	ldd	r16, Y+4	; 0x04
    51b2:	1b 81       	ldd	r17, Y+3	; 0x03
    51b4:	aa 81       	ldd	r26, Y+2	; 0x02
    51b6:	b9 81       	ldd	r27, Y+1	; 0x01
    51b8:	ce 0f       	add	r28, r30
    51ba:	d1 1d       	adc	r29, r1
    51bc:	0f b6       	in	r0, 0x3f	; 63
    51be:	f8 94       	cli
    51c0:	de bf       	out	0x3e, r29	; 62
    51c2:	0f be       	out	0x3f, r0	; 63
    51c4:	cd bf       	out	0x3d, r28	; 61
    51c6:	ed 01       	movw	r28, r26
    51c8:	08 95       	ret

000051ca <__umulhisi3>:
    51ca:	a2 9f       	mul	r26, r18
    51cc:	b0 01       	movw	r22, r0
    51ce:	b3 9f       	mul	r27, r19
    51d0:	c0 01       	movw	r24, r0
    51d2:	a3 9f       	mul	r26, r19
    51d4:	70 0d       	add	r23, r0
    51d6:	81 1d       	adc	r24, r1
    51d8:	11 24       	eor	r1, r1
    51da:	91 1d       	adc	r25, r1
    51dc:	b2 9f       	mul	r27, r18
    51de:	70 0d       	add	r23, r0
    51e0:	81 1d       	adc	r24, r1
    51e2:	11 24       	eor	r1, r1
    51e4:	91 1d       	adc	r25, r1
    51e6:	08 95       	ret

000051e8 <_exit>:
    51e8:	f8 94       	cli

000051ea <__stop_program>:
    51ea:	ff cf       	rjmp	.-2      	; 0x51ea <__stop_program>
